/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.MediaService
{
  public abstract partial class RequestMsg : TAbstractBase
  {
    public abstract Task WriteAsync(TProtocol tProtocol, CancellationToken cancellationToken);
    public readonly bool Isset;
    public abstract object Data { get; }
    protected RequestMsg(bool isset)
    {
      Isset = isset;
    }

    public class ___undefined : RequestMsg
    {
      public override object Data { get { return null; } }
      public ___undefined() : base(false) {}

      public override Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        throw new TProtocolException( TProtocolException.INVALID_DATA, "Cannot persist an union type which is not set.");
      }

    }

    public class Play : RequestMsg
    {
      private PlayMsg _data;
      public override object Data { get { return _data; } }
      public Play(PlayMsg data) : base(true)
      {
        this._data = data;
      }
      public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("RequestMsg");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          field.Name = "Play";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await _data.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
        }
      }

      public class Pause : RequestMsg
      {
        private PauseMsg _data;
        public override object Data { get { return _data; } }
        public Pause(PauseMsg data) : base(true)
        {
          this._data = data;
        }
        public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
          oprot.IncrementRecursionDepth();
          try
          {
            var struc = new TStruct("RequestMsg");
            await oprot.WriteStructBeginAsync(struc, cancellationToken);
            var field = new TField();
            field.Name = "Pause";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await _data.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
          }
        }

        public class Stop : RequestMsg
        {
          private StopMsg _data;
          public override object Data { get { return _data; } }
          public Stop(StopMsg data) : base(true)
          {
            this._data = data;
          }
          public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
            oprot.IncrementRecursionDepth();
            try
            {
              var struc = new TStruct("RequestMsg");
              await oprot.WriteStructBeginAsync(struc, cancellationToken);
              var field = new TField();
              field.Name = "Stop";
              field.Type = TType.Struct;
              field.ID = 3;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await _data.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
              await oprot.WriteFieldStopAsync(cancellationToken);
              await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
              oprot.DecrementRecursionDepth();
            }
            }
          }

          public class AddPath : RequestMsg
          {
            private AddPathMsg _data;
            public override object Data { get { return _data; } }
            public AddPath(AddPathMsg data) : base(true)
            {
              this._data = data;
            }
            public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
              oprot.IncrementRecursionDepth();
              try
              {
                var struc = new TStruct("RequestMsg");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "AddPath";
                field.Type = TType.Struct;
                field.ID = 4;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await _data.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
              }
              finally
              {
                oprot.DecrementRecursionDepth();
              }
              }
            }

            public class RemovePath : RequestMsg
            {
              private RemovePathMsg _data;
              public override object Data { get { return _data; } }
              public RemovePath(RemovePathMsg data) : base(true)
              {
                this._data = data;
              }
              public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
                oprot.IncrementRecursionDepth();
                try
                {
                  var struc = new TStruct("RequestMsg");
                  await oprot.WriteStructBeginAsync(struc, cancellationToken);
                  var field = new TField();
                  field.Name = "RemovePath";
                  field.Type = TType.Struct;
                  field.ID = 5;
                  await oprot.WriteFieldBeginAsync(field, cancellationToken);
                  await _data.WriteAsync(oprot, cancellationToken);
                  await oprot.WriteFieldEndAsync(cancellationToken);
                  await oprot.WriteFieldStopAsync(cancellationToken);
                  await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                  oprot.DecrementRecursionDepth();
                }
                }
              }

              public class Query : RequestMsg
              {
                private QueryMsg _data;
                public override object Data { get { return _data; } }
                public Query(QueryMsg data) : base(true)
                {
                  this._data = data;
                }
                public override async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken) {
                  oprot.IncrementRecursionDepth();
                  try
                  {
                    var struc = new TStruct("RequestMsg");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    field.Name = "Query";
                    field.Type = TType.Struct;
                    field.ID = 6;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await _data.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                  }
                  finally
                  {
                    oprot.DecrementRecursionDepth();
                  }
                  }
                }

                public static async Task<RequestMsg> ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
                {
                  iprot.IncrementRecursionDepth();
                  try
                  {
                    RequestMsg retval;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    TField field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                      await iprot.ReadFieldEndAsync(cancellationToken);
                      retval = new ___undefined();
                    }
                    else
                    {
                      switch (field.ID)
                      {
                        case 1:
                          if (field.Type == TType.Struct) {
                            PlayMsg temp;
                            temp = new PlayMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new Play(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        case 2:
                          if (field.Type == TType.Struct) {
                            PauseMsg temp;
                            temp = new PauseMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new Pause(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        case 3:
                          if (field.Type == TType.Struct) {
                            StopMsg temp;
                            temp = new StopMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new Stop(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        case 4:
                          if (field.Type == TType.Struct) {
                            AddPathMsg temp;
                            temp = new AddPathMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new AddPath(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        case 5:
                          if (field.Type == TType.Struct) {
                            RemovePathMsg temp;
                            temp = new RemovePathMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new RemovePath(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        case 6:
                          if (field.Type == TType.Struct) {
                            QueryMsg temp;
                            temp = new QueryMsg();
                            await temp.ReadAsync(iprot, cancellationToken);
                            retval = new Query(temp);
                          } else { 
                           await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            retval = new ___undefined();
                          }
                          break;
                        default: 
                          await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                          retval = new ___undefined();
                          break;
                      }
                      await iprot.ReadFieldEndAsync(cancellationToken);
                      if ((await iprot.ReadFieldBeginAsync(cancellationToken)).Type != TType.Stop)
                      {
                        throw new TProtocolException(TProtocolException.INVALID_DATA);
                      }
                    }
                    await iprot.ReadStructEndAsync(cancellationToken);
                    return retval;
                }
                finally
                {
                  iprot.DecrementRecursionDepth();
                }
                }

              }

            }
