/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.MediaService
{

  public partial class RequestMsg : TBase
  {
    private PlayMsg _Play;
    private PauseMsg _Pause;
    private StopMsg _Stop;
    private AddPathMsg _AddPath;
    private RemovePathMsg _RemovePath;
    private QueryMsg _Query;

    public PlayMsg Play
    {
      get
      {
        return _Play;
      }
      set
      {
        __isset.Play = true;
        this._Play = value;
      }
    }

    public PauseMsg Pause
    {
      get
      {
        return _Pause;
      }
      set
      {
        __isset.Pause = true;
        this._Pause = value;
      }
    }

    public StopMsg Stop
    {
      get
      {
        return _Stop;
      }
      set
      {
        __isset.Stop = true;
        this._Stop = value;
      }
    }

    public AddPathMsg AddPath
    {
      get
      {
        return _AddPath;
      }
      set
      {
        __isset.AddPath = true;
        this._AddPath = value;
      }
    }

    public RemovePathMsg RemovePath
    {
      get
      {
        return _RemovePath;
      }
      set
      {
        __isset.RemovePath = true;
        this._RemovePath = value;
      }
    }

    public QueryMsg Query
    {
      get
      {
        return _Query;
      }
      set
      {
        __isset.Query = true;
        this._Query = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Play;
      public bool Pause;
      public bool Stop;
      public bool AddPath;
      public bool RemovePath;
      public bool Query;
    }

    public RequestMsg()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Play = new PlayMsg();
                await Play.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Pause = new PauseMsg();
                await Pause.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Stop = new StopMsg();
                await Stop.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                AddPath = new AddPathMsg();
                await AddPath.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                RemovePath = new RemovePathMsg();
                await RemovePath.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Query = new QueryMsg();
                await Query.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("RequestMsg");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Play != null && __isset.Play)
        {
          field.Name = "Play";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Play.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Pause != null && __isset.Pause)
        {
          field.Name = "Pause";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Pause.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Stop != null && __isset.Stop)
        {
          field.Name = "Stop";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Stop.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (AddPath != null && __isset.AddPath)
        {
          field.Name = "AddPath";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await AddPath.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (RemovePath != null && __isset.RemovePath)
        {
          field.Name = "RemovePath";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await RemovePath.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Query != null && __isset.Query)
        {
          field.Name = "Query";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Query.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("RequestMsg(");
      bool __first = true;
      if (Play != null && __isset.Play)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Play: ");
        sb.Append(Play== null ? "<null>" : Play.ToString());
      }
      if (Pause != null && __isset.Pause)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Pause: ");
        sb.Append(Pause== null ? "<null>" : Pause.ToString());
      }
      if (Stop != null && __isset.Stop)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Stop: ");
        sb.Append(Stop== null ? "<null>" : Stop.ToString());
      }
      if (AddPath != null && __isset.AddPath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AddPath: ");
        sb.Append(AddPath== null ? "<null>" : AddPath.ToString());
      }
      if (RemovePath != null && __isset.RemovePath)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("RemovePath: ");
        sb.Append(RemovePath== null ? "<null>" : RemovePath.ToString());
      }
      if (Query != null && __isset.Query)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
