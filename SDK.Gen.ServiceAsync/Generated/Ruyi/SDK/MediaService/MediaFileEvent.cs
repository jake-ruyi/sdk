/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.MediaService
{

  public partial class MediaFileEvent : TBase
  {
    private MediaFile _file;
    private MediaFileEventTypes _event;
    private string _oldname;

    public MediaFile File
    {
      get
      {
        return _file;
      }
      set
      {
        __isset.file = true;
        this._file = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MediaFileEventTypes"/>
    /// </summary>
    public MediaFileEventTypes Event
    {
      get
      {
        return _event;
      }
      set
      {
        __isset.@event = true;
        this._event = value;
      }
    }

    public string Oldname
    {
      get
      {
        return _oldname;
      }
      set
      {
        __isset.oldname = true;
        this._oldname = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool file;
      public bool @event;
      public bool oldname;
    }

    public MediaFileEvent()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                File = new MediaFile();
                await File.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Event = (MediaFileEventTypes)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Oldname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("MediaFileEvent");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (File != null && __isset.file)
        {
          field.Name = "file";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await File.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.@event)
        {
          field.Name = "event";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Event, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Oldname != null && __isset.oldname)
        {
          field.Name = "oldname";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Oldname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("MediaFileEvent(");
      bool __first = true;
      if (File != null && __isset.file)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("File: ");
        sb.Append(File== null ? "<null>" : File.ToString());
      }
      if (__isset.@event)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Event: ");
        sb.Append(Event);
      }
      if (Oldname != null && __isset.oldname)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Oldname: ");
        sb.Append(Oldname);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
