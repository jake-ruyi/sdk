/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.Http
{

  public partial class SubscribeReply : TBase
  {
    private bool _success;
    private string _topic;
    private string _appid;
    private string _msgname;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public string Topic
    {
      get
      {
        return _topic;
      }
      set
      {
        __isset.topic = true;
        this._topic = value;
      }
    }

    public string Appid
    {
      get
      {
        return _appid;
      }
      set
      {
        __isset.appid = true;
        this._appid = value;
      }
    }

    public string Msgname
    {
      get
      {
        return _msgname;
      }
      set
      {
        __isset.msgname = true;
        this._msgname = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool success;
      public bool topic;
      public bool appid;
      public bool msgname;
    }

    public SubscribeReply()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                Success = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Topic = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Appid = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Msgname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("SubscribeReply");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.success)
        {
          field.Name = "success";
          field.Type = TType.Bool;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Success, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Topic != null && __isset.topic)
        {
          field.Name = "topic";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Topic, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Appid != null && __isset.appid)
        {
          field.Name = "appid";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Appid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Msgname != null && __isset.msgname)
        {
          field.Name = "msgname";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Msgname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("SubscribeReply(");
      bool __first = true;
      if (__isset.success)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Success: ");
        sb.Append(Success);
      }
      if (Topic != null && __isset.topic)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Topic: ");
        sb.Append(Topic);
      }
      if (Appid != null && __isset.appid)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Appid: ");
        sb.Append(Appid);
      }
      if (Msgname != null && __isset.msgname)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Msgname: ");
        sb.Append(Msgname);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
