/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.UserServiceExternal
{

  public partial class UserInfo_Public : TBase
  {
    private string _userId;
    private string _nickname;
    private string _portrait;
    private UserGender _gender;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string Nickname
    {
      get
      {
        return _nickname;
      }
      set
      {
        __isset.nickname = true;
        this._nickname = value;
      }
    }

    public string Portrait
    {
      get
      {
        return _portrait;
      }
      set
      {
        __isset.portrait = true;
        this._portrait = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="UserGender"/>
    /// </summary>
    public UserGender Gender
    {
      get
      {
        return _gender;
      }
      set
      {
        __isset.gender = true;
        this._gender = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userId;
      public bool nickname;
      public bool portrait;
      public bool gender;
    }

    public UserInfo_Public()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                UserId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Nickname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Portrait = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Gender = (UserGender)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("UserInfo_Public");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (UserId != null && __isset.userId)
        {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(UserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Nickname != null && __isset.nickname)
        {
          field.Name = "nickname";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Nickname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Portrait != null && __isset.portrait)
        {
          field.Name = "portrait";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Portrait, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.gender)
        {
          field.Name = "gender";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Gender, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("UserInfo_Public(");
      bool __first = true;
      if (UserId != null && __isset.userId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("UserId: ");
        sb.Append(UserId);
      }
      if (Nickname != null && __isset.nickname)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Nickname: ");
        sb.Append(Nickname);
      }
      if (Portrait != null && __isset.portrait)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Portrait: ");
        sb.Append(Portrait);
      }
      if (__isset.gender)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Gender: ");
        sb.Append(Gender);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
