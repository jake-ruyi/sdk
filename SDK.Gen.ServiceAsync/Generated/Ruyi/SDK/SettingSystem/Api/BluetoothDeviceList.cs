/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class BluetoothDeviceList : TBase
  {
    private List<BluetoothDevice> _DeviceList;

    public List<BluetoothDevice> DeviceList
    {
      get
      {
        return _DeviceList;
      }
      set
      {
        __isset.DeviceList = true;
        this._DeviceList = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool DeviceList;
    }

    public BluetoothDeviceList()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  DeviceList = new List<BluetoothDevice>();
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    BluetoothDevice _elem2;
                    _elem2 = new BluetoothDevice();
                    await _elem2.ReadAsync(iprot, cancellationToken);
                    DeviceList.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BluetoothDeviceList");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (DeviceList != null && __isset.DeviceList)
        {
          field.Name = "DeviceList";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, DeviceList.Count), cancellationToken);
            foreach (BluetoothDevice _iter3 in DeviceList)
            {
              await _iter3.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BluetoothDeviceList(");
      bool __first = true;
      if (DeviceList != null && __isset.DeviceList)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceList: ");
        sb.Append(DeviceList);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
