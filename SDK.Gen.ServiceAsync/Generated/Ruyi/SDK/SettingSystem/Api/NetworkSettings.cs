/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class NetworkSettings : TBase
  {
    private bool _isWifi;
    private bool _proxyUsed;
    private bool _DHCPEnabled;
    private string _NetworkName;
    private string _AuthType;
    private string _IPAddress;
    private string _SubMask;
    private string _GateWay;
    private string _mainDNS;
    private string _subDNS;
    private string _proxyServer;
    private string _proxyPort;

    public bool IsWifi
    {
      get
      {
        return _isWifi;
      }
      set
      {
        __isset.isWifi = true;
        this._isWifi = value;
      }
    }

    public bool ProxyUsed
    {
      get
      {
        return _proxyUsed;
      }
      set
      {
        __isset.proxyUsed = true;
        this._proxyUsed = value;
      }
    }

    public bool DHCPEnabled
    {
      get
      {
        return _DHCPEnabled;
      }
      set
      {
        __isset.DHCPEnabled = true;
        this._DHCPEnabled = value;
      }
    }

    public string NetworkName
    {
      get
      {
        return _NetworkName;
      }
      set
      {
        __isset.NetworkName = true;
        this._NetworkName = value;
      }
    }

    public string AuthType
    {
      get
      {
        return _AuthType;
      }
      set
      {
        __isset.AuthType = true;
        this._AuthType = value;
      }
    }

    public string IPAddress
    {
      get
      {
        return _IPAddress;
      }
      set
      {
        __isset.IPAddress = true;
        this._IPAddress = value;
      }
    }

    public string SubMask
    {
      get
      {
        return _SubMask;
      }
      set
      {
        __isset.SubMask = true;
        this._SubMask = value;
      }
    }

    public string GateWay
    {
      get
      {
        return _GateWay;
      }
      set
      {
        __isset.GateWay = true;
        this._GateWay = value;
      }
    }

    public string MainDNS
    {
      get
      {
        return _mainDNS;
      }
      set
      {
        __isset.mainDNS = true;
        this._mainDNS = value;
      }
    }

    public string SubDNS
    {
      get
      {
        return _subDNS;
      }
      set
      {
        __isset.subDNS = true;
        this._subDNS = value;
      }
    }

    public string ProxyServer
    {
      get
      {
        return _proxyServer;
      }
      set
      {
        __isset.proxyServer = true;
        this._proxyServer = value;
      }
    }

    public string ProxyPort
    {
      get
      {
        return _proxyPort;
      }
      set
      {
        __isset.proxyPort = true;
        this._proxyPort = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool isWifi;
      public bool proxyUsed;
      public bool DHCPEnabled;
      public bool NetworkName;
      public bool AuthType;
      public bool IPAddress;
      public bool SubMask;
      public bool GateWay;
      public bool mainDNS;
      public bool subDNS;
      public bool proxyServer;
      public bool proxyPort;
    }

    public NetworkSettings()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IsWifi = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                ProxyUsed = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Bool)
              {
                DHCPEnabled = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                NetworkName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                AuthType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                IPAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                SubMask = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                GateWay = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                MainDNS = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                SubDNS = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                ProxyServer = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                ProxyPort = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("NetworkSettings");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.isWifi)
        {
          field.Name = "isWifi";
          field.Type = TType.Bool;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(IsWifi, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.proxyUsed)
        {
          field.Name = "proxyUsed";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(ProxyUsed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DHCPEnabled)
        {
          field.Name = "DHCPEnabled";
          field.Type = TType.Bool;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(DHCPEnabled, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NetworkName != null && __isset.NetworkName)
        {
          field.Name = "NetworkName";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(NetworkName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (AuthType != null && __isset.AuthType)
        {
          field.Name = "AuthType";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(AuthType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (IPAddress != null && __isset.IPAddress)
        {
          field.Name = "IPAddress";
          field.Type = TType.String;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(IPAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SubMask != null && __isset.SubMask)
        {
          field.Name = "SubMask";
          field.Type = TType.String;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SubMask, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (GateWay != null && __isset.GateWay)
        {
          field.Name = "GateWay";
          field.Type = TType.String;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(GateWay, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MainDNS != null && __isset.mainDNS)
        {
          field.Name = "mainDNS";
          field.Type = TType.String;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(MainDNS, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SubDNS != null && __isset.subDNS)
        {
          field.Name = "subDNS";
          field.Type = TType.String;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SubDNS, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProxyServer != null && __isset.proxyServer)
        {
          field.Name = "proxyServer";
          field.Type = TType.String;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProxyServer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (ProxyPort != null && __isset.proxyPort)
        {
          field.Name = "proxyPort";
          field.Type = TType.String;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(ProxyPort, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("NetworkSettings(");
      bool __first = true;
      if (__isset.isWifi)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IsWifi: ");
        sb.Append(IsWifi);
      }
      if (__isset.proxyUsed)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProxyUsed: ");
        sb.Append(ProxyUsed);
      }
      if (__isset.DHCPEnabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DHCPEnabled: ");
        sb.Append(DHCPEnabled);
      }
      if (NetworkName != null && __isset.NetworkName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NetworkName: ");
        sb.Append(NetworkName);
      }
      if (AuthType != null && __isset.AuthType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AuthType: ");
        sb.Append(AuthType);
      }
      if (IPAddress != null && __isset.IPAddress)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IPAddress: ");
        sb.Append(IPAddress);
      }
      if (SubMask != null && __isset.SubMask)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SubMask: ");
        sb.Append(SubMask);
      }
      if (GateWay != null && __isset.GateWay)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("GateWay: ");
        sb.Append(GateWay);
      }
      if (MainDNS != null && __isset.mainDNS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MainDNS: ");
        sb.Append(MainDNS);
      }
      if (SubDNS != null && __isset.subDNS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SubDNS: ");
        sb.Append(SubDNS);
      }
      if (ProxyServer != null && __isset.proxyServer)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProxyServer: ");
        sb.Append(ProxyServer);
      }
      if (ProxyPort != null && __isset.proxyPort)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ProxyPort: ");
        sb.Append(ProxyPort);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
