/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class RuyiNetworkSettings : TBase
  {
    private RuyiNetworkSettingNameValue _connection;
    private RuyiNetworkSettingNameValue _networkType;
    private RuyiNetworkSettingNameValue _quality;
    private RuyiNetworkSettingNameValue _SSID;
    private RuyiNetworkSettingNameValue _BSSID;
    private RuyiNetworkSettingNameValue _Authentication;
    private RuyiNetworkSettingNameValue _DHCPEnabled;
    private RuyiNetworkSettingNameValue _IpAddress;
    private RuyiNetworkSettingNameValue _SubMask;
    private RuyiNetworkSettingNameValue _Gateway;
    private RuyiNetworkSettingNameValue _MainDNS;
    private RuyiNetworkSettingNameValue _SubDNS;
    private RuyiNetworkSettingNameValue _MacAddress;
    private RuyiNetworkSettingNameValue _Proxy;

    public RuyiNetworkSettingNameValue Connection
    {
      get
      {
        return _connection;
      }
      set
      {
        __isset.connection = true;
        this._connection = value;
      }
    }

    public RuyiNetworkSettingNameValue NetworkType
    {
      get
      {
        return _networkType;
      }
      set
      {
        __isset.networkType = true;
        this._networkType = value;
      }
    }

    public RuyiNetworkSettingNameValue Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public RuyiNetworkSettingNameValue SSID
    {
      get
      {
        return _SSID;
      }
      set
      {
        __isset.SSID = true;
        this._SSID = value;
      }
    }

    public RuyiNetworkSettingNameValue BSSID
    {
      get
      {
        return _BSSID;
      }
      set
      {
        __isset.BSSID = true;
        this._BSSID = value;
      }
    }

    public RuyiNetworkSettingNameValue Authentication
    {
      get
      {
        return _Authentication;
      }
      set
      {
        __isset.Authentication = true;
        this._Authentication = value;
      }
    }

    public RuyiNetworkSettingNameValue DHCPEnabled
    {
      get
      {
        return _DHCPEnabled;
      }
      set
      {
        __isset.DHCPEnabled = true;
        this._DHCPEnabled = value;
      }
    }

    public RuyiNetworkSettingNameValue IpAddress
    {
      get
      {
        return _IpAddress;
      }
      set
      {
        __isset.IpAddress = true;
        this._IpAddress = value;
      }
    }

    public RuyiNetworkSettingNameValue SubMask
    {
      get
      {
        return _SubMask;
      }
      set
      {
        __isset.SubMask = true;
        this._SubMask = value;
      }
    }

    public RuyiNetworkSettingNameValue Gateway
    {
      get
      {
        return _Gateway;
      }
      set
      {
        __isset.Gateway = true;
        this._Gateway = value;
      }
    }

    public RuyiNetworkSettingNameValue MainDNS
    {
      get
      {
        return _MainDNS;
      }
      set
      {
        __isset.MainDNS = true;
        this._MainDNS = value;
      }
    }

    public RuyiNetworkSettingNameValue SubDNS
    {
      get
      {
        return _SubDNS;
      }
      set
      {
        __isset.SubDNS = true;
        this._SubDNS = value;
      }
    }

    public RuyiNetworkSettingNameValue MacAddress
    {
      get
      {
        return _MacAddress;
      }
      set
      {
        __isset.MacAddress = true;
        this._MacAddress = value;
      }
    }

    public RuyiNetworkSettingNameValue Proxy
    {
      get
      {
        return _Proxy;
      }
      set
      {
        __isset.Proxy = true;
        this._Proxy = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool connection;
      public bool networkType;
      public bool quality;
      public bool SSID;
      public bool BSSID;
      public bool Authentication;
      public bool DHCPEnabled;
      public bool IpAddress;
      public bool SubMask;
      public bool Gateway;
      public bool MainDNS;
      public bool SubDNS;
      public bool MacAddress;
      public bool Proxy;
    }

    public RuyiNetworkSettings()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Connection = new RuyiNetworkSettingNameValue();
                await Connection.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                NetworkType = new RuyiNetworkSettingNameValue();
                await NetworkType.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Quality = new RuyiNetworkSettingNameValue();
                await Quality.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                SSID = new RuyiNetworkSettingNameValue();
                await SSID.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                BSSID = new RuyiNetworkSettingNameValue();
                await BSSID.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Authentication = new RuyiNetworkSettingNameValue();
                await Authentication.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                DHCPEnabled = new RuyiNetworkSettingNameValue();
                await DHCPEnabled.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Struct)
              {
                IpAddress = new RuyiNetworkSettingNameValue();
                await IpAddress.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.Struct)
              {
                SubMask = new RuyiNetworkSettingNameValue();
                await SubMask.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Struct)
              {
                Gateway = new RuyiNetworkSettingNameValue();
                await Gateway.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.Struct)
              {
                MainDNS = new RuyiNetworkSettingNameValue();
                await MainDNS.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.Struct)
              {
                SubDNS = new RuyiNetworkSettingNameValue();
                await SubDNS.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.Struct)
              {
                MacAddress = new RuyiNetworkSettingNameValue();
                await MacAddress.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.Struct)
              {
                Proxy = new RuyiNetworkSettingNameValue();
                await Proxy.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("RuyiNetworkSettings");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Connection != null && __isset.connection)
        {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Connection.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NetworkType != null && __isset.networkType)
        {
          field.Name = "networkType";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await NetworkType.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Quality != null && __isset.quality)
        {
          field.Name = "quality";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Quality.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SSID != null && __isset.SSID)
        {
          field.Name = "SSID";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await SSID.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (BSSID != null && __isset.BSSID)
        {
          field.Name = "BSSID";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await BSSID.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Authentication != null && __isset.Authentication)
        {
          field.Name = "Authentication";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Authentication.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DHCPEnabled != null && __isset.DHCPEnabled)
        {
          field.Name = "DHCPEnabled";
          field.Type = TType.Struct;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await DHCPEnabled.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (IpAddress != null && __isset.IpAddress)
        {
          field.Name = "IpAddress";
          field.Type = TType.Struct;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await IpAddress.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SubMask != null && __isset.SubMask)
        {
          field.Name = "SubMask";
          field.Type = TType.Struct;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await SubMask.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Gateway != null && __isset.Gateway)
        {
          field.Name = "Gateway";
          field.Type = TType.Struct;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Gateway.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MainDNS != null && __isset.MainDNS)
        {
          field.Name = "MainDNS";
          field.Type = TType.Struct;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MainDNS.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SubDNS != null && __isset.SubDNS)
        {
          field.Name = "SubDNS";
          field.Type = TType.Struct;
          field.ID = 12;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await SubDNS.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (MacAddress != null && __isset.MacAddress)
        {
          field.Name = "MacAddress";
          field.Type = TType.Struct;
          field.ID = 13;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await MacAddress.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Proxy != null && __isset.Proxy)
        {
          field.Name = "Proxy";
          field.Type = TType.Struct;
          field.ID = 14;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Proxy.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("RuyiNetworkSettings(");
      bool __first = true;
      if (Connection != null && __isset.connection)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Connection: ");
        sb.Append(Connection== null ? "<null>" : Connection.ToString());
      }
      if (NetworkType != null && __isset.networkType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NetworkType: ");
        sb.Append(NetworkType== null ? "<null>" : NetworkType.ToString());
      }
      if (Quality != null && __isset.quality)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Quality: ");
        sb.Append(Quality== null ? "<null>" : Quality.ToString());
      }
      if (SSID != null && __isset.SSID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SSID: ");
        sb.Append(SSID== null ? "<null>" : SSID.ToString());
      }
      if (BSSID != null && __isset.BSSID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BSSID: ");
        sb.Append(BSSID== null ? "<null>" : BSSID.ToString());
      }
      if (Authentication != null && __isset.Authentication)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Authentication: ");
        sb.Append(Authentication== null ? "<null>" : Authentication.ToString());
      }
      if (DHCPEnabled != null && __isset.DHCPEnabled)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DHCPEnabled: ");
        sb.Append(DHCPEnabled== null ? "<null>" : DHCPEnabled.ToString());
      }
      if (IpAddress != null && __isset.IpAddress)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("IpAddress: ");
        sb.Append(IpAddress== null ? "<null>" : IpAddress.ToString());
      }
      if (SubMask != null && __isset.SubMask)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SubMask: ");
        sb.Append(SubMask== null ? "<null>" : SubMask.ToString());
      }
      if (Gateway != null && __isset.Gateway)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Gateway: ");
        sb.Append(Gateway== null ? "<null>" : Gateway.ToString());
      }
      if (MainDNS != null && __isset.MainDNS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MainDNS: ");
        sb.Append(MainDNS== null ? "<null>" : MainDNS.ToString());
      }
      if (SubDNS != null && __isset.SubDNS)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SubDNS: ");
        sb.Append(SubDNS== null ? "<null>" : SubDNS.ToString());
      }
      if (MacAddress != null && __isset.MacAddress)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MacAddress: ");
        sb.Append(MacAddress== null ? "<null>" : MacAddress.ToString());
      }
      if (Proxy != null && __isset.Proxy)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Proxy: ");
        sb.Append(Proxy== null ? "<null>" : Proxy.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
