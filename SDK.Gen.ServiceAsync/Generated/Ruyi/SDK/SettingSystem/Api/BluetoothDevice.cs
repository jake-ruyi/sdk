/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class BluetoothDevice : TBase
  {
    private string _DeviceName;
    private string _DeviceAddress;
    private int _DeviceClass;
    private bool _Connected;
    private bool _Authenticated;

    public string DeviceName
    {
      get
      {
        return _DeviceName;
      }
      set
      {
        __isset.DeviceName = true;
        this._DeviceName = value;
      }
    }

    public string DeviceAddress
    {
      get
      {
        return _DeviceAddress;
      }
      set
      {
        __isset.DeviceAddress = true;
        this._DeviceAddress = value;
      }
    }

    public int DeviceClass
    {
      get
      {
        return _DeviceClass;
      }
      set
      {
        __isset.DeviceClass = true;
        this._DeviceClass = value;
      }
    }

    public bool Connected
    {
      get
      {
        return _Connected;
      }
      set
      {
        __isset.Connected = true;
        this._Connected = value;
      }
    }

    public bool Authenticated
    {
      get
      {
        return _Authenticated;
      }
      set
      {
        __isset.Authenticated = true;
        this._Authenticated = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool DeviceName;
      public bool DeviceAddress;
      public bool DeviceClass;
      public bool Connected;
      public bool Authenticated;
    }

    public BluetoothDevice()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                DeviceName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DeviceAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                DeviceClass = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Connected = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                Authenticated = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("BluetoothDevice");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (DeviceName != null && __isset.DeviceName)
        {
          field.Name = "DeviceName";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DeviceName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (DeviceAddress != null && __isset.DeviceAddress)
        {
          field.Name = "DeviceAddress";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(DeviceAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.DeviceClass)
        {
          field.Name = "DeviceClass";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(DeviceClass, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Connected)
        {
          field.Name = "Connected";
          field.Type = TType.Bool;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Connected, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.Authenticated)
        {
          field.Name = "Authenticated";
          field.Type = TType.Bool;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Authenticated, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("BluetoothDevice(");
      bool __first = true;
      if (DeviceName != null && __isset.DeviceName)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceName: ");
        sb.Append(DeviceName);
      }
      if (DeviceAddress != null && __isset.DeviceAddress)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceAddress: ");
        sb.Append(DeviceAddress);
      }
      if (__isset.DeviceClass)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("DeviceClass: ");
        sb.Append(DeviceClass);
      }
      if (__isset.Connected)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Connected: ");
        sb.Append(Connected);
      }
      if (__isset.Authenticated)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Authenticated: ");
        sb.Append(Authenticated);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
