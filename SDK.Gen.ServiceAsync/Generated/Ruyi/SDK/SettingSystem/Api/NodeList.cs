/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class NodeList : TBase
  {
    private List<Ruyi.SDK.CommonType.SettingCategory> _SettingCategories;
    private List<Ruyi.SDK.CommonType.SettingItem> _SettingItems;

    public List<Ruyi.SDK.CommonType.SettingCategory> SettingCategories
    {
      get
      {
        return _SettingCategories;
      }
      set
      {
        __isset.SettingCategories = true;
        this._SettingCategories = value;
      }
    }

    public List<Ruyi.SDK.CommonType.SettingItem> SettingItems
    {
      get
      {
        return _SettingItems;
      }
      set
      {
        __isset.SettingItems = true;
        this._SettingItems = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool SettingCategories;
      public bool SettingItems;
    }

    public NodeList()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  SettingCategories = new List<Ruyi.SDK.CommonType.SettingCategory>();
                  TList _list22 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    Ruyi.SDK.CommonType.SettingCategory _elem24;
                    _elem24 = new Ruyi.SDK.CommonType.SettingCategory();
                    await _elem24.ReadAsync(iprot, cancellationToken);
                    SettingCategories.Add(_elem24);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  SettingItems = new List<Ruyi.SDK.CommonType.SettingItem>();
                  TList _list25 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    Ruyi.SDK.CommonType.SettingItem _elem27;
                    _elem27 = new Ruyi.SDK.CommonType.SettingItem();
                    await _elem27.ReadAsync(iprot, cancellationToken);
                    SettingItems.Add(_elem27);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("NodeList");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (SettingCategories != null && __isset.SettingCategories)
        {
          field.Name = "SettingCategories";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, SettingCategories.Count), cancellationToken);
            foreach (Ruyi.SDK.CommonType.SettingCategory _iter28 in SettingCategories)
            {
              await _iter28.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SettingItems != null && __isset.SettingItems)
        {
          field.Name = "SettingItems";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, SettingItems.Count), cancellationToken);
            foreach (Ruyi.SDK.CommonType.SettingItem _iter29 in SettingItems)
            {
              await _iter29.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("NodeList(");
      bool __first = true;
      if (SettingCategories != null && __isset.SettingCategories)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SettingCategories: ");
        sb.Append(SettingCategories);
      }
      if (SettingItems != null && __isset.SettingItems)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SettingItems: ");
        sb.Append(SettingItems);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
