/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.SettingSystem.Api
{

  public partial class SettingTree : TBase
  {
    private CategoryNode _CateNode;
    private Dictionary<string, Ruyi.SDK.CommonType.SettingCategory> _SettingCategories;
    private Dictionary<string, Ruyi.SDK.CommonType.SettingItem> _SettingItems;

    public CategoryNode CateNode
    {
      get
      {
        return _CateNode;
      }
      set
      {
        __isset.CateNode = true;
        this._CateNode = value;
      }
    }

    public Dictionary<string, Ruyi.SDK.CommonType.SettingCategory> SettingCategories
    {
      get
      {
        return _SettingCategories;
      }
      set
      {
        __isset.SettingCategories = true;
        this._SettingCategories = value;
      }
    }

    public Dictionary<string, Ruyi.SDK.CommonType.SettingItem> SettingItems
    {
      get
      {
        return _SettingItems;
      }
      set
      {
        __isset.SettingItems = true;
        this._SettingItems = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool CateNode;
      public bool SettingCategories;
      public bool SettingItems;
    }

    public SettingTree()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                CateNode = new CategoryNode();
                await CateNode.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  SettingCategories = new Dictionary<string, Ruyi.SDK.CommonType.SettingCategory>();
                  TMap _map12 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i13 = 0; _i13 < _map12.Count; ++_i13)
                  {
                    string _key14;
                    Ruyi.SDK.CommonType.SettingCategory _val15;
                    _key14 = await iprot.ReadStringAsync(cancellationToken);
                    _val15 = new Ruyi.SDK.CommonType.SettingCategory();
                    await _val15.ReadAsync(iprot, cancellationToken);
                    SettingCategories[_key14] = _val15;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  SettingItems = new Dictionary<string, Ruyi.SDK.CommonType.SettingItem>();
                  TMap _map16 = await iprot.ReadMapBeginAsync(cancellationToken);
                  for(int _i17 = 0; _i17 < _map16.Count; ++_i17)
                  {
                    string _key18;
                    Ruyi.SDK.CommonType.SettingItem _val19;
                    _key18 = await iprot.ReadStringAsync(cancellationToken);
                    _val19 = new Ruyi.SDK.CommonType.SettingItem();
                    await _val19.ReadAsync(iprot, cancellationToken);
                    SettingItems[_key18] = _val19;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("SettingTree");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (CateNode != null && __isset.CateNode)
        {
          field.Name = "CateNode";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await CateNode.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SettingCategories != null && __isset.SettingCategories)
        {
          field.Name = "SettingCategories";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, SettingCategories.Count), cancellationToken);
            foreach (string _iter20 in SettingCategories.Keys)
            {
              await oprot.WriteStringAsync(_iter20, cancellationToken);
              await SettingCategories[_iter20].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SettingItems != null && __isset.SettingItems)
        {
          field.Name = "SettingItems";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, SettingItems.Count), cancellationToken);
            foreach (string _iter21 in SettingItems.Keys)
            {
              await oprot.WriteStringAsync(_iter21, cancellationToken);
              await SettingItems[_iter21].WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("SettingTree(");
      bool __first = true;
      if (CateNode != null && __isset.CateNode)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("CateNode: ");
        sb.Append(CateNode== null ? "<null>" : CateNode.ToString());
      }
      if (SettingCategories != null && __isset.SettingCategories)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SettingCategories: ");
        sb.Append(SettingCategories);
      }
      if (SettingItems != null && __isset.SettingItems)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SettingItems: ");
        sb.Append(SettingItems);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
