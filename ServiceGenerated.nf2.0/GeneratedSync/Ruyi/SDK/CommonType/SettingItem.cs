/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.CommonType
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SettingItem : TBase
  {
    private string _id;
    private string _display;
    private string _dataType;
    private string _dataValue;
    private dataListItem _dataList;
    private ePlatform _platform;
    private string _summary;
    private string _description;
    private eUIType _UIType;
    private bool _devModeOnly;
    private bool _internalOnly;
    private bool _readOnly;
    private bool _isValid;
    private bool _isActive;
    private bool _hasNew;
    private string _validation;
    private List<activeDependency> _activeDependencies;
    private string _ActionName;
    private string _ActionObject;
    private string _ActionOnSetValue;
    private string _ActionOnGetValue;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Display
    {
      get
      {
        return _display;
      }
      set
      {
        __isset.display = true;
        this._display = value;
      }
    }

    public string DataType
    {
      get
      {
        return _dataType;
      }
      set
      {
        __isset.dataType = true;
        this._dataType = value;
      }
    }

    public string DataValue
    {
      get
      {
        return _dataValue;
      }
      set
      {
        __isset.dataValue = true;
        this._dataValue = value;
      }
    }

    public dataListItem DataList
    {
      get
      {
        return _dataList;
      }
      set
      {
        __isset.dataList = true;
        this._dataList = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ePlatform"/>
    /// </summary>
    public ePlatform Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        this._platform = value;
      }
    }

    public string Summary
    {
      get
      {
        return _summary;
      }
      set
      {
        __isset.summary = true;
        this._summary = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="eUIType"/>
    /// </summary>
    public eUIType UIType
    {
      get
      {
        return _UIType;
      }
      set
      {
        __isset.UIType = true;
        this._UIType = value;
      }
    }

    public bool DevModeOnly
    {
      get
      {
        return _devModeOnly;
      }
      set
      {
        __isset.devModeOnly = true;
        this._devModeOnly = value;
      }
    }

    public bool InternalOnly
    {
      get
      {
        return _internalOnly;
      }
      set
      {
        __isset.internalOnly = true;
        this._internalOnly = value;
      }
    }

    public bool ReadOnly
    {
      get
      {
        return _readOnly;
      }
      set
      {
        __isset.@readOnly = true;
        this._readOnly = value;
      }
    }

    public bool IsValid
    {
      get
      {
        return _isValid;
      }
      set
      {
        __isset.isValid = true;
        this._isValid = value;
      }
    }

    public bool IsActive
    {
      get
      {
        return _isActive;
      }
      set
      {
        __isset.isActive = true;
        this._isActive = value;
      }
    }

    public bool HasNew
    {
      get
      {
        return _hasNew;
      }
      set
      {
        __isset.hasNew = true;
        this._hasNew = value;
      }
    }

    public string Validation
    {
      get
      {
        return _validation;
      }
      set
      {
        __isset.validation = true;
        this._validation = value;
      }
    }

    public List<activeDependency> ActiveDependencies
    {
      get
      {
        return _activeDependencies;
      }
      set
      {
        __isset.activeDependencies = true;
        this._activeDependencies = value;
      }
    }

    public string ActionName
    {
      get
      {
        return _ActionName;
      }
      set
      {
        __isset.ActionName = true;
        this._ActionName = value;
      }
    }

    public string ActionObject
    {
      get
      {
        return _ActionObject;
      }
      set
      {
        __isset.ActionObject = true;
        this._ActionObject = value;
      }
    }

    public string ActionOnSetValue
    {
      get
      {
        return _ActionOnSetValue;
      }
      set
      {
        __isset.ActionOnSetValue = true;
        this._ActionOnSetValue = value;
      }
    }

    public string ActionOnGetValue
    {
      get
      {
        return _ActionOnGetValue;
      }
      set
      {
        __isset.ActionOnGetValue = true;
        this._ActionOnGetValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool display;
      public bool dataType;
      public bool dataValue;
      public bool dataList;
      public bool platform;
      public bool summary;
      public bool description;
      public bool UIType;
      public bool devModeOnly;
      public bool internalOnly;
      public bool @readOnly;
      public bool isValid;
      public bool isActive;
      public bool hasNew;
      public bool validation;
      public bool activeDependencies;
      public bool ActionName;
      public bool ActionObject;
      public bool ActionOnSetValue;
      public bool ActionOnGetValue;
    }

    public SettingItem() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Display = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DataType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                DataValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DataList = new dataListItem();
                DataList.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Platform = (ePlatform)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Summary = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                UIType = (eUIType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                DevModeOnly = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                InternalOnly = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                ReadOnly = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                IsValid = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                IsActive = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                HasNew = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                Validation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  ActiveDependencies = new List<activeDependency>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    activeDependency _elem18;
                    _elem18 = new activeDependency();
                    _elem18.Read(iprot);
                    ActiveDependencies.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.String) {
                ActionName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                ActionObject = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                ActionOnSetValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                ActionOnGetValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SettingItem");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Display != null && __isset.display) {
          field.Name = "display";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Display);
          oprot.WriteFieldEnd();
        }
        if (DataType != null && __isset.dataType) {
          field.Name = "dataType";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DataType);
          oprot.WriteFieldEnd();
        }
        if (DataValue != null && __isset.dataValue) {
          field.Name = "dataValue";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DataValue);
          oprot.WriteFieldEnd();
        }
        if (DataList != null && __isset.dataList) {
          field.Name = "dataList";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DataList.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Platform);
          oprot.WriteFieldEnd();
        }
        if (Summary != null && __isset.summary) {
          field.Name = "summary";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Summary);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (__isset.UIType) {
          field.Name = "UIType";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)UIType);
          oprot.WriteFieldEnd();
        }
        if (__isset.devModeOnly) {
          field.Name = "devModeOnly";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DevModeOnly);
          oprot.WriteFieldEnd();
        }
        if (__isset.internalOnly) {
          field.Name = "internalOnly";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(InternalOnly);
          oprot.WriteFieldEnd();
        }
        if (__isset.@readOnly) {
          field.Name = "readOnly";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ReadOnly);
          oprot.WriteFieldEnd();
        }
        if (__isset.isValid) {
          field.Name = "isValid";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsValid);
          oprot.WriteFieldEnd();
        }
        if (__isset.isActive) {
          field.Name = "isActive";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsActive);
          oprot.WriteFieldEnd();
        }
        if (__isset.hasNew) {
          field.Name = "hasNew";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(HasNew);
          oprot.WriteFieldEnd();
        }
        if (Validation != null && __isset.validation) {
          field.Name = "validation";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Validation);
          oprot.WriteFieldEnd();
        }
        if (ActiveDependencies != null && __isset.activeDependencies) {
          field.Name = "activeDependencies";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ActiveDependencies.Count));
            foreach (activeDependency _iter19 in ActiveDependencies)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ActionName != null && __isset.ActionName) {
          field.Name = "ActionName";
          field.Type = TType.String;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActionName);
          oprot.WriteFieldEnd();
        }
        if (ActionObject != null && __isset.ActionObject) {
          field.Name = "ActionObject";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActionObject);
          oprot.WriteFieldEnd();
        }
        if (ActionOnSetValue != null && __isset.ActionOnSetValue) {
          field.Name = "ActionOnSetValue";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActionOnSetValue);
          oprot.WriteFieldEnd();
        }
        if (ActionOnGetValue != null && __isset.ActionOnGetValue) {
          field.Name = "ActionOnGetValue";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ActionOnGetValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SettingItem(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Display != null && __isset.display) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Display: ");
        __sb.Append(Display);
      }
      if (DataType != null && __isset.dataType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataType: ");
        __sb.Append(DataType);
      }
      if (DataValue != null && __isset.dataValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataValue: ");
        __sb.Append(DataValue);
      }
      if (DataList != null && __isset.dataList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataList: ");
        __sb.Append(DataList== null ? "<null>" : DataList.ToString());
      }
      if (__isset.platform) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Platform: ");
        __sb.Append(Platform);
      }
      if (Summary != null && __isset.summary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Summary: ");
        __sb.Append(Summary);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (__isset.UIType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UIType: ");
        __sb.Append(UIType);
      }
      if (__isset.devModeOnly) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DevModeOnly: ");
        __sb.Append(DevModeOnly);
      }
      if (__isset.internalOnly) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InternalOnly: ");
        __sb.Append(InternalOnly);
      }
      if (__isset.@readOnly) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReadOnly: ");
        __sb.Append(ReadOnly);
      }
      if (__isset.isValid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsValid: ");
        __sb.Append(IsValid);
      }
      if (__isset.isActive) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsActive: ");
        __sb.Append(IsActive);
      }
      if (__isset.hasNew) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasNew: ");
        __sb.Append(HasNew);
      }
      if (Validation != null && __isset.validation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Validation: ");
        __sb.Append(Validation);
      }
      if (ActiveDependencies != null && __isset.activeDependencies) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActiveDependencies: ");
        __sb.Append(ActiveDependencies);
      }
      if (ActionName != null && __isset.ActionName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionName: ");
        __sb.Append(ActionName);
      }
      if (ActionObject != null && __isset.ActionObject) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionObject: ");
        __sb.Append(ActionObject);
      }
      if (ActionOnSetValue != null && __isset.ActionOnSetValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionOnSetValue: ");
        __sb.Append(ActionOnSetValue);
      }
      if (ActionOnGetValue != null && __isset.ActionOnGetValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionOnGetValue: ");
        __sb.Append(ActionOnGetValue);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
