/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.CommonType
{

  /// <summary>
  /// @Features_desc
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Features : TBase
  {
    private bool _overlay;
    private bool _forcebind;
    private OverlayForceBindAdapter _forcebind_adapter;
    private bool _forcetopmost;
    private bool _opengl_vbo_rendering;
    private bool _opengl_state_hooking;
    private bool _game_window_subclassing;
    private OverlayRenderer _forcerenderer;
    private OverlayRendererHooking _renderer_hooking;
    private OverlayCursor _forcecursor;

    /// <summary>
    /// @Features_overlay_desc
    /// </summary>
    public bool Overlay
    {
      get
      {
        return _overlay;
      }
      set
      {
        __isset.overlay = true;
        this._overlay = value;
      }
    }

    /// <summary>
    /// @Features_forcebind_desc
    /// </summary>
    public bool Forcebind
    {
      get
      {
        return _forcebind;
      }
      set
      {
        __isset.forcebind = true;
        this._forcebind = value;
      }
    }

    /// <summary>
    /// @Features_forcebind-adapter_desc
    /// 
    /// <seealso cref="OverlayForceBindAdapter"/>
    /// </summary>
    public OverlayForceBindAdapter Forcebind_adapter
    {
      get
      {
        return _forcebind_adapter;
      }
      set
      {
        __isset.forcebind_adapter = true;
        this._forcebind_adapter = value;
      }
    }

    /// <summary>
    /// @Features_forcetopmost_desc
    /// </summary>
    public bool Forcetopmost
    {
      get
      {
        return _forcetopmost;
      }
      set
      {
        __isset.forcetopmost = true;
        this._forcetopmost = value;
      }
    }

    /// <summary>
    /// @Features_opengl-vbo-rendering_desc
    /// </summary>
    public bool Opengl_vbo_rendering
    {
      get
      {
        return _opengl_vbo_rendering;
      }
      set
      {
        __isset.opengl_vbo_rendering = true;
        this._opengl_vbo_rendering = value;
      }
    }

    /// <summary>
    /// @Features_opengl-state-hooking_desc
    /// </summary>
    public bool Opengl_state_hooking
    {
      get
      {
        return _opengl_state_hooking;
      }
      set
      {
        __isset.opengl_state_hooking = true;
        this._opengl_state_hooking = value;
      }
    }

    /// <summary>
    /// @Features_game-window-subclassing_desc
    /// </summary>
    public bool Game_window_subclassing
    {
      get
      {
        return _game_window_subclassing;
      }
      set
      {
        __isset.game_window_subclassing = true;
        this._game_window_subclassing = value;
      }
    }

    /// <summary>
    /// @Features_forcerenderer_desc
    /// 
    /// <seealso cref="OverlayRenderer"/>
    /// </summary>
    public OverlayRenderer Forcerenderer
    {
      get
      {
        return _forcerenderer;
      }
      set
      {
        __isset.forcerenderer = true;
        this._forcerenderer = value;
      }
    }

    /// <summary>
    /// @Features_renderer-hooking_desc
    /// 
    /// <seealso cref="OverlayRendererHooking"/>
    /// </summary>
    public OverlayRendererHooking Renderer_hooking
    {
      get
      {
        return _renderer_hooking;
      }
      set
      {
        __isset.renderer_hooking = true;
        this._renderer_hooking = value;
      }
    }

    /// <summary>
    /// @Features_forcecursor_desc
    /// 
    /// <seealso cref="OverlayCursor"/>
    /// </summary>
    public OverlayCursor Forcecursor
    {
      get
      {
        return _forcecursor;
      }
      set
      {
        __isset.forcecursor = true;
        this._forcecursor = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool overlay;
      public bool forcebind;
      public bool forcebind_adapter;
      public bool forcetopmost;
      public bool opengl_vbo_rendering;
      public bool opengl_state_hooking;
      public bool game_window_subclassing;
      public bool forcerenderer;
      public bool renderer_hooking;
      public bool forcecursor;
    }

    public Features() {
      this._overlay = true;
      this.__isset.overlay = true;
      this._forcebind = false;
      this.__isset.forcebind = true;
      this._forcetopmost = false;
      this.__isset.forcetopmost = true;
      this._opengl_vbo_rendering = true;
      this.__isset.opengl_vbo_rendering = true;
      this._opengl_state_hooking = true;
      this.__isset.opengl_state_hooking = true;
      this._game_window_subclassing = true;
      this.__isset.game_window_subclassing = true;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Overlay = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Forcebind = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Forcebind_adapter = (OverlayForceBindAdapter)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Forcetopmost = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Opengl_vbo_rendering = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Opengl_state_hooking = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                Game_window_subclassing = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Forcerenderer = (OverlayRenderer)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Renderer_hooking = (OverlayRendererHooking)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Forcecursor = (OverlayCursor)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Features");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.overlay) {
          field.Name = "overlay";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Overlay);
          oprot.WriteFieldEnd();
        }
        if (__isset.forcebind) {
          field.Name = "forcebind";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Forcebind);
          oprot.WriteFieldEnd();
        }
        if (__isset.forcebind_adapter) {
          field.Name = "forcebind_adapter";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Forcebind_adapter);
          oprot.WriteFieldEnd();
        }
        if (__isset.forcetopmost) {
          field.Name = "forcetopmost";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Forcetopmost);
          oprot.WriteFieldEnd();
        }
        if (__isset.opengl_vbo_rendering) {
          field.Name = "opengl_vbo_rendering";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Opengl_vbo_rendering);
          oprot.WriteFieldEnd();
        }
        if (__isset.opengl_state_hooking) {
          field.Name = "opengl_state_hooking";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Opengl_state_hooking);
          oprot.WriteFieldEnd();
        }
        if (__isset.game_window_subclassing) {
          field.Name = "game_window_subclassing";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Game_window_subclassing);
          oprot.WriteFieldEnd();
        }
        if (__isset.forcerenderer) {
          field.Name = "forcerenderer";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Forcerenderer);
          oprot.WriteFieldEnd();
        }
        if (__isset.renderer_hooking) {
          field.Name = "renderer_hooking";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Renderer_hooking);
          oprot.WriteFieldEnd();
        }
        if (__isset.forcecursor) {
          field.Name = "forcecursor";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Forcecursor);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Features(");
      bool __first = true;
      if (__isset.overlay) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Overlay: ");
        __sb.Append(Overlay);
      }
      if (__isset.forcebind) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Forcebind: ");
        __sb.Append(Forcebind);
      }
      if (__isset.forcebind_adapter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Forcebind_adapter: ");
        __sb.Append(Forcebind_adapter);
      }
      if (__isset.forcetopmost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Forcetopmost: ");
        __sb.Append(Forcetopmost);
      }
      if (__isset.opengl_vbo_rendering) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Opengl_vbo_rendering: ");
        __sb.Append(Opengl_vbo_rendering);
      }
      if (__isset.opengl_state_hooking) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Opengl_state_hooking: ");
        __sb.Append(Opengl_state_hooking);
      }
      if (__isset.game_window_subclassing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Game_window_subclassing: ");
        __sb.Append(Game_window_subclassing);
      }
      if (__isset.forcerenderer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Forcerenderer: ");
        __sb.Append(Forcerenderer);
      }
      if (__isset.renderer_hooking) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Renderer_hooking: ");
        __sb.Append(Renderer_hooking);
      }
      if (__isset.forcecursor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Forcecursor: ");
        __sb.Append(Forcecursor);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
