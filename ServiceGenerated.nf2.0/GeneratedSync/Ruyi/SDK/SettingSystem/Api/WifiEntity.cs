/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.SettingSystem.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WifiEntity : TBase
  {
    private string _Name;
    private string _MacAddress;
    private int _Channel;
    private int _CenterFrequancy;
    private int _Rssi;
    private bool _Connected;
    private bool _SecurityEnabled;
    private bool _HasProfile;

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string MacAddress
    {
      get
      {
        return _MacAddress;
      }
      set
      {
        __isset.MacAddress = true;
        this._MacAddress = value;
      }
    }

    public int Channel
    {
      get
      {
        return _Channel;
      }
      set
      {
        __isset.Channel = true;
        this._Channel = value;
      }
    }

    public int CenterFrequancy
    {
      get
      {
        return _CenterFrequancy;
      }
      set
      {
        __isset.CenterFrequancy = true;
        this._CenterFrequancy = value;
      }
    }

    public int Rssi
    {
      get
      {
        return _Rssi;
      }
      set
      {
        __isset.Rssi = true;
        this._Rssi = value;
      }
    }

    public bool Connected
    {
      get
      {
        return _Connected;
      }
      set
      {
        __isset.Connected = true;
        this._Connected = value;
      }
    }

    public bool SecurityEnabled
    {
      get
      {
        return _SecurityEnabled;
      }
      set
      {
        __isset.SecurityEnabled = true;
        this._SecurityEnabled = value;
      }
    }

    public bool HasProfile
    {
      get
      {
        return _HasProfile;
      }
      set
      {
        __isset.HasProfile = true;
        this._HasProfile = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Name;
      public bool MacAddress;
      public bool Channel;
      public bool CenterFrequancy;
      public bool Rssi;
      public bool Connected;
      public bool SecurityEnabled;
      public bool HasProfile;
    }

    public WifiEntity() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MacAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Channel = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                CenterFrequancy = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Rssi = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Connected = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                SecurityEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                HasProfile = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("WifiEntity");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (MacAddress != null && __isset.MacAddress) {
          field.Name = "MacAddress";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MacAddress);
          oprot.WriteFieldEnd();
        }
        if (__isset.Channel) {
          field.Name = "Channel";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.CenterFrequancy) {
          field.Name = "CenterFrequancy";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CenterFrequancy);
          oprot.WriteFieldEnd();
        }
        if (__isset.Rssi) {
          field.Name = "Rssi";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Rssi);
          oprot.WriteFieldEnd();
        }
        if (__isset.Connected) {
          field.Name = "Connected";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Connected);
          oprot.WriteFieldEnd();
        }
        if (__isset.SecurityEnabled) {
          field.Name = "SecurityEnabled";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SecurityEnabled);
          oprot.WriteFieldEnd();
        }
        if (__isset.HasProfile) {
          field.Name = "HasProfile";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(HasProfile);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("WifiEntity(");
      bool __first = true;
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (MacAddress != null && __isset.MacAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MacAddress: ");
        __sb.Append(MacAddress);
      }
      if (__isset.Channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.CenterFrequancy) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CenterFrequancy: ");
        __sb.Append(CenterFrequancy);
      }
      if (__isset.Rssi) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rssi: ");
        __sb.Append(Rssi);
      }
      if (__isset.Connected) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Connected: ");
        __sb.Append(Connected);
      }
      if (__isset.SecurityEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SecurityEnabled: ");
        __sb.Append(SecurityEnabled);
      }
      if (__isset.HasProfile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasProfile: ");
        __sb.Append(HasProfile);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
