/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.SettingSystem.Api
{
  public partial class SettingSystemService {
    public interface ISync {
      /// <summary>
      /// Get a setting data of the module.
      /// </summary>
      /// <param name="id">The setting's unique id in current module.</param>
      Ruyi.SDK.CommonType.SettingItem GetSettingItem(string id);
      /// <summary>
      /// Get a list of setting data of the module.
      /// </summary>
      /// <param name="category">Category to filter the settings. Null indicates getting all settings of the module</param>
      /// <param name="includeChildren">Whecher to get the settings of children cagegories.</param>
      List<Ruyi.SDK.CommonType.SettingItem> GetSettingItems(string category, bool includeChildren);
      /// <summary>
      /// Search a set of settings using a json format string.
      /// According to the format of json string your write, searching can be separated to 3 types: simple search, lambda search and complicated search. And each of they can be combined with the other.
      /// </summary>
      /// <param name="filterJson">Json string used to search.</param>
      Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> SearchSettingItems(string filterJson);
      /// <summary>
      /// Get settings and categories in a tree
      /// </summary>
      Ruyi.SDK.SettingSystem.Api.SettingTree GetCategoryNode();
      /// <summary>
      /// Get child nodes of specified setting item or setting category
      /// </summary>
      /// <param name="parent">The parent node</param>
      /// <param name="nodeType">Specifies whether the child nodes containing setting item or setting category, or both</param>
      /// <param name="param">The parameter passed to the function which will be called while getting the item value</param>
      Ruyi.SDK.SettingSystem.Api.NodeList GetChildNode(string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param);
      /// <summary>
      /// Set the specified setting's "dataValue" with the new value
      /// </summary>
      /// <param name="key">Identity of the setting</param>
      /// <param name="val">Value to be set</param>
      bool SetSettingItem(string key, string val);
      /// <summary>
      /// Set a set of settings' "dataValue"
      /// </summary>
      /// <param name="keyValues">The key-values to be set.</param>
      int SetSettingItems(Dictionary<string, string> keyValues);
      /// <summary>
      /// Restore a module setting to default
      /// </summary>
      /// <param name="moduleName">Module name specifies the module to be restored.</param>
      /// <param name="category">The category of which to restored. Null indicates all settings.</param>
      bool RestoreDefault(string moduleName, string category);
      bool RestoreUserDefault(string userId, string moduleName, string category);
      /// <summary>
      /// Update the module settings from an older version to the latest one
      /// </summary>
      /// <param name="moduleName">Module of the setting</param>
      bool UpdateModuleVersion(string moduleName);
      int SetUserAppData(string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems);
      Ruyi.SDK.CommonType.AppData GetUserAppData(string userId, string category, List<string> settingKeys);
      int RemoveUserAppData(string userId, string category, List<string> settingKeys);
      /// <summary>
      /// Notify layer0 that a setting item has specific event
      /// </summary>
      /// <param name="key">The item's ID</param>
      /// <param name="contents">Optional. The arguments of the notification. In json string format</param>
      bool SettingItemNotify(string key, string contents);
      bool SetNetworkSettings(bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS);
      bool SetNetworkProxy(string ProxyServer, string ProxyPort);
      bool ConnectToWifi(string profileName, string key);
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings GetNetworkSettings();
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus GetNetworkStatus();
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult RuyiTestNetwork();
      bool RuyiStartNetworkSpeedTest(int userindex);
      bool RuyiStopNetworkSpeedTest(int userindex);
      List<Ruyi.SDK.SettingSystem.Api.WifiEntity> GetAvailableWifi();
      bool DisconnectWifi();
      bool DiscoverBluetoothDevice();
      bool ConnectBluetoothDevice(string DeviceName, string DeviceAddress);
      bool DisconnectBluetoothDevice(string DeviceName, string DeviceAddress);
      bool RemoveBluetoothDevice(string DeviceName, string DeviceAddress);
    }

    public interface Iface : ISync {
      /// <summary>
      /// Get a setting data of the module.
      /// </summary>
      /// <param name="id">The setting's unique id in current module.</param>
      #if SILVERLIGHT
      IAsyncResult Begin_GetSettingItem(AsyncCallback callback, object state, string id);
      Ruyi.SDK.CommonType.SettingItem End_GetSettingItem(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get a list of setting data of the module.
      /// </summary>
      /// <param name="category">Category to filter the settings. Null indicates getting all settings of the module</param>
      /// <param name="includeChildren">Whecher to get the settings of children cagegories.</param>
      #if SILVERLIGHT
      IAsyncResult Begin_GetSettingItems(AsyncCallback callback, object state, string category, bool includeChildren);
      List<Ruyi.SDK.CommonType.SettingItem> End_GetSettingItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Search a set of settings using a json format string.
      /// According to the format of json string your write, searching can be separated to 3 types: simple search, lambda search and complicated search. And each of they can be combined with the other.
      /// </summary>
      /// <param name="filterJson">Json string used to search.</param>
      #if SILVERLIGHT
      IAsyncResult Begin_SearchSettingItems(AsyncCallback callback, object state, string filterJson);
      Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> End_SearchSettingItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get settings and categories in a tree
      /// </summary>
      #if SILVERLIGHT
      IAsyncResult Begin_GetCategoryNode(AsyncCallback callback, object state);
      Ruyi.SDK.SettingSystem.Api.SettingTree End_GetCategoryNode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get child nodes of specified setting item or setting category
      /// </summary>
      /// <param name="parent">The parent node</param>
      /// <param name="nodeType">Specifies whether the child nodes containing setting item or setting category, or both</param>
      /// <param name="param">The parameter passed to the function which will be called while getting the item value</param>
      #if SILVERLIGHT
      IAsyncResult Begin_GetChildNode(AsyncCallback callback, object state, string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param);
      Ruyi.SDK.SettingSystem.Api.NodeList End_GetChildNode(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set the specified setting's "dataValue" with the new value
      /// </summary>
      /// <param name="key">Identity of the setting</param>
      /// <param name="val">Value to be set</param>
      #if SILVERLIGHT
      IAsyncResult Begin_SetSettingItem(AsyncCallback callback, object state, string key, string val);
      bool End_SetSettingItem(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Set a set of settings' "dataValue"
      /// </summary>
      /// <param name="keyValues">The key-values to be set.</param>
      #if SILVERLIGHT
      IAsyncResult Begin_SetSettingItems(AsyncCallback callback, object state, Dictionary<string, string> keyValues);
      int End_SetSettingItems(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Restore a module setting to default
      /// </summary>
      /// <param name="moduleName">Module name specifies the module to be restored.</param>
      /// <param name="category">The category of which to restored. Null indicates all settings.</param>
      #if SILVERLIGHT
      IAsyncResult Begin_RestoreDefault(AsyncCallback callback, object state, string moduleName, string category);
      bool End_RestoreDefault(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RestoreUserDefault(AsyncCallback callback, object state, string userId, string moduleName, string category);
      bool End_RestoreUserDefault(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Update the module settings from an older version to the latest one
      /// </summary>
      /// <param name="moduleName">Module of the setting</param>
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateModuleVersion(AsyncCallback callback, object state, string moduleName);
      bool End_UpdateModuleVersion(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetUserAppData(AsyncCallback callback, object state, string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems);
      int End_SetUserAppData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys);
      Ruyi.SDK.CommonType.AppData End_GetUserAppData(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys);
      int End_RemoveUserAppData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Notify layer0 that a setting item has specific event
      /// </summary>
      /// <param name="key">The item's ID</param>
      /// <param name="contents">Optional. The arguments of the notification. In json string format</param>
      #if SILVERLIGHT
      IAsyncResult Begin_SettingItemNotify(AsyncCallback callback, object state, string key, string contents);
      bool End_SettingItemNotify(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetNetworkSettings(AsyncCallback callback, object state, bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS);
      bool End_SetNetworkSettings(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SetNetworkProxy(AsyncCallback callback, object state, string ProxyServer, string ProxyPort);
      bool End_SetNetworkProxy(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ConnectToWifi(AsyncCallback callback, object state, string profileName, string key);
      bool End_ConnectToWifi(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetNetworkSettings(AsyncCallback callback, object state);
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings End_GetNetworkSettings(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetNetworkStatus(AsyncCallback callback, object state);
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus End_GetNetworkStatus(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RuyiTestNetwork(AsyncCallback callback, object state);
      Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult End_RuyiTestNetwork(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RuyiStartNetworkSpeedTest(AsyncCallback callback, object state, int userindex);
      bool End_RuyiStartNetworkSpeedTest(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RuyiStopNetworkSpeedTest(AsyncCallback callback, object state, int userindex);
      bool End_RuyiStopNetworkSpeedTest(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetAvailableWifi(AsyncCallback callback, object state);
      List<Ruyi.SDK.SettingSystem.Api.WifiEntity> End_GetAvailableWifi(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DisconnectWifi(AsyncCallback callback, object state);
      bool End_DisconnectWifi(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DiscoverBluetoothDevice(AsyncCallback callback, object state);
      bool End_DiscoverBluetoothDevice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_ConnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress);
      bool End_ConnectBluetoothDevice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_DisconnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress);
      bool End_DisconnectBluetoothDevice(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RemoveBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress);
      bool End_RemoveBluetoothDevice(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSettingItem(AsyncCallback callback, object state, string id)
      {
        return send_GetSettingItem(callback, state, id);
      }

      public Ruyi.SDK.CommonType.SettingItem End_GetSettingItem(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSettingItem();
      }

      #endif

      /// <summary>
      /// Get a setting data of the module.
      /// </summary>
      /// <param name="id">The setting's unique id in current module.</param>
      public Ruyi.SDK.CommonType.SettingItem GetSettingItem(string id)
      {
        #if !SILVERLIGHT
        send_GetSettingItem(id);
        return recv_GetSettingItem();

        #else
        var asyncResult = Begin_GetSettingItem(null, null, id);
        return End_GetSettingItem(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSettingItem(AsyncCallback callback, object state, string id)
      #else
      public void send_GetSettingItem(string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSettingItem", TMessageType.Call, seqid_));
        GetSettingItem_args args = new GetSettingItem_args();
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.CommonType.SettingItem recv_GetSettingItem()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSettingItem_result result = new GetSettingItem_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSettingItem failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSettingItems(AsyncCallback callback, object state, string category, bool includeChildren)
      {
        return send_GetSettingItems(callback, state, category, includeChildren);
      }

      public List<Ruyi.SDK.CommonType.SettingItem> End_GetSettingItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSettingItems();
      }

      #endif

      /// <summary>
      /// Get a list of setting data of the module.
      /// </summary>
      /// <param name="category">Category to filter the settings. Null indicates getting all settings of the module</param>
      /// <param name="includeChildren">Whecher to get the settings of children cagegories.</param>
      public List<Ruyi.SDK.CommonType.SettingItem> GetSettingItems(string category, bool includeChildren)
      {
        #if !SILVERLIGHT
        send_GetSettingItems(category, includeChildren);
        return recv_GetSettingItems();

        #else
        var asyncResult = Begin_GetSettingItems(null, null, category, includeChildren);
        return End_GetSettingItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSettingItems(AsyncCallback callback, object state, string category, bool includeChildren)
      #else
      public void send_GetSettingItems(string category, bool includeChildren)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSettingItems", TMessageType.Call, seqid_));
        GetSettingItems_args args = new GetSettingItems_args();
        args.Category = category;
        args.IncludeChildren = includeChildren;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Ruyi.SDK.CommonType.SettingItem> recv_GetSettingItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSettingItems_result result = new GetSettingItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSettingItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchSettingItems(AsyncCallback callback, object state, string filterJson)
      {
        return send_SearchSettingItems(callback, state, filterJson);
      }

      public Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> End_SearchSettingItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchSettingItems();
      }

      #endif

      /// <summary>
      /// Search a set of settings using a json format string.
      /// According to the format of json string your write, searching can be separated to 3 types: simple search, lambda search and complicated search. And each of they can be combined with the other.
      /// </summary>
      /// <param name="filterJson">Json string used to search.</param>
      public Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> SearchSettingItems(string filterJson)
      {
        #if !SILVERLIGHT
        send_SearchSettingItems(filterJson);
        return recv_SearchSettingItems();

        #else
        var asyncResult = Begin_SearchSettingItems(null, null, filterJson);
        return End_SearchSettingItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchSettingItems(AsyncCallback callback, object state, string filterJson)
      #else
      public void send_SearchSettingItems(string filterJson)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchSettingItems", TMessageType.Call, seqid_));
        SearchSettingItems_args args = new SearchSettingItems_args();
        args.FilterJson = filterJson;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> recv_SearchSettingItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchSettingItems_result result = new SearchSettingItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchSettingItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetCategoryNode(AsyncCallback callback, object state)
      {
        return send_GetCategoryNode(callback, state);
      }

      public Ruyi.SDK.SettingSystem.Api.SettingTree End_GetCategoryNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetCategoryNode();
      }

      #endif

      /// <summary>
      /// Get settings and categories in a tree
      /// </summary>
      public Ruyi.SDK.SettingSystem.Api.SettingTree GetCategoryNode()
      {
        #if !SILVERLIGHT
        send_GetCategoryNode();
        return recv_GetCategoryNode();

        #else
        var asyncResult = Begin_GetCategoryNode(null, null);
        return End_GetCategoryNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetCategoryNode(AsyncCallback callback, object state)
      #else
      public void send_GetCategoryNode()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetCategoryNode", TMessageType.Call, seqid_));
        GetCategoryNode_args args = new GetCategoryNode_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.SettingSystem.Api.SettingTree recv_GetCategoryNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetCategoryNode_result result = new GetCategoryNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCategoryNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetChildNode(AsyncCallback callback, object state, string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param)
      {
        return send_GetChildNode(callback, state, parent, nodeType, param);
      }

      public Ruyi.SDK.SettingSystem.Api.NodeList End_GetChildNode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetChildNode();
      }

      #endif

      /// <summary>
      /// Get child nodes of specified setting item or setting category
      /// </summary>
      /// <param name="parent">The parent node</param>
      /// <param name="nodeType">Specifies whether the child nodes containing setting item or setting category, or both</param>
      /// <param name="param">The parameter passed to the function which will be called while getting the item value</param>
      public Ruyi.SDK.SettingSystem.Api.NodeList GetChildNode(string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param)
      {
        #if !SILVERLIGHT
        send_GetChildNode(parent, nodeType, param);
        return recv_GetChildNode();

        #else
        var asyncResult = Begin_GetChildNode(null, null, parent, nodeType, param);
        return End_GetChildNode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetChildNode(AsyncCallback callback, object state, string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param)
      #else
      public void send_GetChildNode(string parent, Ruyi.SDK.SettingSystem.Api.NodeType nodeType, string param)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetChildNode", TMessageType.Call, seqid_));
        GetChildNode_args args = new GetChildNode_args();
        args.Parent = parent;
        args.NodeType = nodeType;
        args.Param = param;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.SettingSystem.Api.NodeList recv_GetChildNode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetChildNode_result result = new GetChildNode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChildNode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetSettingItem(AsyncCallback callback, object state, string key, string val)
      {
        return send_SetSettingItem(callback, state, key, val);
      }

      public bool End_SetSettingItem(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetSettingItem();
      }

      #endif

      /// <summary>
      /// Set the specified setting's "dataValue" with the new value
      /// </summary>
      /// <param name="key">Identity of the setting</param>
      /// <param name="val">Value to be set</param>
      public bool SetSettingItem(string key, string val)
      {
        #if !SILVERLIGHT
        send_SetSettingItem(key, val);
        return recv_SetSettingItem();

        #else
        var asyncResult = Begin_SetSettingItem(null, null, key, val);
        return End_SetSettingItem(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetSettingItem(AsyncCallback callback, object state, string key, string val)
      #else
      public void send_SetSettingItem(string key, string val)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetSettingItem", TMessageType.Call, seqid_));
        SetSettingItem_args args = new SetSettingItem_args();
        args.Key = key;
        args.Val = val;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetSettingItem()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSettingItem_result result = new SetSettingItem_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSettingItem failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetSettingItems(AsyncCallback callback, object state, Dictionary<string, string> keyValues)
      {
        return send_SetSettingItems(callback, state, keyValues);
      }

      public int End_SetSettingItems(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetSettingItems();
      }

      #endif

      /// <summary>
      /// Set a set of settings' "dataValue"
      /// </summary>
      /// <param name="keyValues">The key-values to be set.</param>
      public int SetSettingItems(Dictionary<string, string> keyValues)
      {
        #if !SILVERLIGHT
        send_SetSettingItems(keyValues);
        return recv_SetSettingItems();

        #else
        var asyncResult = Begin_SetSettingItems(null, null, keyValues);
        return End_SetSettingItems(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetSettingItems(AsyncCallback callback, object state, Dictionary<string, string> keyValues)
      #else
      public void send_SetSettingItems(Dictionary<string, string> keyValues)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetSettingItems", TMessageType.Call, seqid_));
        SetSettingItems_args args = new SetSettingItems_args();
        args.KeyValues = keyValues;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_SetSettingItems()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetSettingItems_result result = new SetSettingItems_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetSettingItems failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RestoreDefault(AsyncCallback callback, object state, string moduleName, string category)
      {
        return send_RestoreDefault(callback, state, moduleName, category);
      }

      public bool End_RestoreDefault(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RestoreDefault();
      }

      #endif

      /// <summary>
      /// Restore a module setting to default
      /// </summary>
      /// <param name="moduleName">Module name specifies the module to be restored.</param>
      /// <param name="category">The category of which to restored. Null indicates all settings.</param>
      public bool RestoreDefault(string moduleName, string category)
      {
        #if !SILVERLIGHT
        send_RestoreDefault(moduleName, category);
        return recv_RestoreDefault();

        #else
        var asyncResult = Begin_RestoreDefault(null, null, moduleName, category);
        return End_RestoreDefault(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RestoreDefault(AsyncCallback callback, object state, string moduleName, string category)
      #else
      public void send_RestoreDefault(string moduleName, string category)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreDefault", TMessageType.Call, seqid_));
        RestoreDefault_args args = new RestoreDefault_args();
        args.ModuleName = moduleName;
        args.Category = category;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RestoreDefault()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RestoreDefault_result result = new RestoreDefault_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreDefault failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RestoreUserDefault(AsyncCallback callback, object state, string userId, string moduleName, string category)
      {
        return send_RestoreUserDefault(callback, state, userId, moduleName, category);
      }

      public bool End_RestoreUserDefault(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RestoreUserDefault();
      }

      #endif

      public bool RestoreUserDefault(string userId, string moduleName, string category)
      {
        #if !SILVERLIGHT
        send_RestoreUserDefault(userId, moduleName, category);
        return recv_RestoreUserDefault();

        #else
        var asyncResult = Begin_RestoreUserDefault(null, null, userId, moduleName, category);
        return End_RestoreUserDefault(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RestoreUserDefault(AsyncCallback callback, object state, string userId, string moduleName, string category)
      #else
      public void send_RestoreUserDefault(string userId, string moduleName, string category)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RestoreUserDefault", TMessageType.Call, seqid_));
        RestoreUserDefault_args args = new RestoreUserDefault_args();
        args.UserId = userId;
        args.ModuleName = moduleName;
        args.Category = category;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RestoreUserDefault()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RestoreUserDefault_result result = new RestoreUserDefault_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RestoreUserDefault failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateModuleVersion(AsyncCallback callback, object state, string moduleName)
      {
        return send_UpdateModuleVersion(callback, state, moduleName);
      }

      public bool End_UpdateModuleVersion(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_UpdateModuleVersion();
      }

      #endif

      /// <summary>
      /// Update the module settings from an older version to the latest one
      /// </summary>
      /// <param name="moduleName">Module of the setting</param>
      public bool UpdateModuleVersion(string moduleName)
      {
        #if !SILVERLIGHT
        send_UpdateModuleVersion(moduleName);
        return recv_UpdateModuleVersion();

        #else
        var asyncResult = Begin_UpdateModuleVersion(null, null, moduleName);
        return End_UpdateModuleVersion(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateModuleVersion(AsyncCallback callback, object state, string moduleName)
      #else
      public void send_UpdateModuleVersion(string moduleName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateModuleVersion", TMessageType.Call, seqid_));
        UpdateModuleVersion_args args = new UpdateModuleVersion_args();
        args.ModuleName = moduleName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_UpdateModuleVersion()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateModuleVersion_result result = new UpdateModuleVersion_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UpdateModuleVersion failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetUserAppData(AsyncCallback callback, object state, string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems)
      {
        return send_SetUserAppData(callback, state, userId, category, settingItems);
      }

      public int End_SetUserAppData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetUserAppData();
      }

      #endif

      public int SetUserAppData(string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems)
      {
        #if !SILVERLIGHT
        send_SetUserAppData(userId, category, settingItems);
        return recv_SetUserAppData();

        #else
        var asyncResult = Begin_SetUserAppData(null, null, userId, category, settingItems);
        return End_SetUserAppData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetUserAppData(AsyncCallback callback, object state, string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems)
      #else
      public void send_SetUserAppData(string userId, string category, Dictionary<string, Ruyi.SDK.CommonType.SettingValue> settingItems)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetUserAppData", TMessageType.Call, seqid_));
        SetUserAppData_args args = new SetUserAppData_args();
        args.UserId = userId;
        args.Category = category;
        args.SettingItems = settingItems;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_SetUserAppData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetUserAppData_result result = new SetUserAppData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetUserAppData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys)
      {
        return send_GetUserAppData(callback, state, userId, category, settingKeys);
      }

      public Ruyi.SDK.CommonType.AppData End_GetUserAppData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetUserAppData();
      }

      #endif

      public Ruyi.SDK.CommonType.AppData GetUserAppData(string userId, string category, List<string> settingKeys)
      {
        #if !SILVERLIGHT
        send_GetUserAppData(userId, category, settingKeys);
        return recv_GetUserAppData();

        #else
        var asyncResult = Begin_GetUserAppData(null, null, userId, category, settingKeys);
        return End_GetUserAppData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys)
      #else
      public void send_GetUserAppData(string userId, string category, List<string> settingKeys)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetUserAppData", TMessageType.Call, seqid_));
        GetUserAppData_args args = new GetUserAppData_args();
        args.UserId = userId;
        args.Category = category;
        args.SettingKeys = settingKeys;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.CommonType.AppData recv_GetUserAppData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetUserAppData_result result = new GetUserAppData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserAppData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys)
      {
        return send_RemoveUserAppData(callback, state, userId, category, settingKeys);
      }

      public int End_RemoveUserAppData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveUserAppData();
      }

      #endif

      public int RemoveUserAppData(string userId, string category, List<string> settingKeys)
      {
        #if !SILVERLIGHT
        send_RemoveUserAppData(userId, category, settingKeys);
        return recv_RemoveUserAppData();

        #else
        var asyncResult = Begin_RemoveUserAppData(null, null, userId, category, settingKeys);
        return End_RemoveUserAppData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveUserAppData(AsyncCallback callback, object state, string userId, string category, List<string> settingKeys)
      #else
      public void send_RemoveUserAppData(string userId, string category, List<string> settingKeys)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveUserAppData", TMessageType.Call, seqid_));
        RemoveUserAppData_args args = new RemoveUserAppData_args();
        args.UserId = userId;
        args.Category = category;
        args.SettingKeys = settingKeys;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_RemoveUserAppData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveUserAppData_result result = new RemoveUserAppData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveUserAppData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SettingItemNotify(AsyncCallback callback, object state, string key, string contents)
      {
        return send_SettingItemNotify(callback, state, key, contents);
      }

      public bool End_SettingItemNotify(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SettingItemNotify();
      }

      #endif

      /// <summary>
      /// Notify layer0 that a setting item has specific event
      /// </summary>
      /// <param name="key">The item's ID</param>
      /// <param name="contents">Optional. The arguments of the notification. In json string format</param>
      public bool SettingItemNotify(string key, string contents)
      {
        #if !SILVERLIGHT
        send_SettingItemNotify(key, contents);
        return recv_SettingItemNotify();

        #else
        var asyncResult = Begin_SettingItemNotify(null, null, key, contents);
        return End_SettingItemNotify(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SettingItemNotify(AsyncCallback callback, object state, string key, string contents)
      #else
      public void send_SettingItemNotify(string key, string contents)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SettingItemNotify", TMessageType.Call, seqid_));
        SettingItemNotify_args args = new SettingItemNotify_args();
        args.Key = key;
        args.Contents = contents;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SettingItemNotify()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SettingItemNotify_result result = new SettingItemNotify_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SettingItemNotify failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetNetworkSettings(AsyncCallback callback, object state, bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS)
      {
        return send_SetNetworkSettings(callback, state, EnableDHCP, IpAddress, SubMask, Gateway, MainDNS, SubDNS);
      }

      public bool End_SetNetworkSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetNetworkSettings();
      }

      #endif

      public bool SetNetworkSettings(bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS)
      {
        #if !SILVERLIGHT
        send_SetNetworkSettings(EnableDHCP, IpAddress, SubMask, Gateway, MainDNS, SubDNS);
        return recv_SetNetworkSettings();

        #else
        var asyncResult = Begin_SetNetworkSettings(null, null, EnableDHCP, IpAddress, SubMask, Gateway, MainDNS, SubDNS);
        return End_SetNetworkSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetNetworkSettings(AsyncCallback callback, object state, bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS)
      #else
      public void send_SetNetworkSettings(bool EnableDHCP, string IpAddress, string SubMask, string Gateway, string MainDNS, string SubDNS)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetNetworkSettings", TMessageType.Call, seqid_));
        SetNetworkSettings_args args = new SetNetworkSettings_args();
        args.EnableDHCP = EnableDHCP;
        args.IpAddress = IpAddress;
        args.SubMask = SubMask;
        args.Gateway = Gateway;
        args.MainDNS = MainDNS;
        args.SubDNS = SubDNS;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetNetworkSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNetworkSettings_result result = new SetNetworkSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetNetworkSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetNetworkProxy(AsyncCallback callback, object state, string ProxyServer, string ProxyPort)
      {
        return send_SetNetworkProxy(callback, state, ProxyServer, ProxyPort);
      }

      public bool End_SetNetworkProxy(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetNetworkProxy();
      }

      #endif

      public bool SetNetworkProxy(string ProxyServer, string ProxyPort)
      {
        #if !SILVERLIGHT
        send_SetNetworkProxy(ProxyServer, ProxyPort);
        return recv_SetNetworkProxy();

        #else
        var asyncResult = Begin_SetNetworkProxy(null, null, ProxyServer, ProxyPort);
        return End_SetNetworkProxy(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetNetworkProxy(AsyncCallback callback, object state, string ProxyServer, string ProxyPort)
      #else
      public void send_SetNetworkProxy(string ProxyServer, string ProxyPort)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetNetworkProxy", TMessageType.Call, seqid_));
        SetNetworkProxy_args args = new SetNetworkProxy_args();
        args.ProxyServer = ProxyServer;
        args.ProxyPort = ProxyPort;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetNetworkProxy()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetNetworkProxy_result result = new SetNetworkProxy_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetNetworkProxy failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ConnectToWifi(AsyncCallback callback, object state, string profileName, string key)
      {
        return send_ConnectToWifi(callback, state, profileName, key);
      }

      public bool End_ConnectToWifi(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ConnectToWifi();
      }

      #endif

      public bool ConnectToWifi(string profileName, string key)
      {
        #if !SILVERLIGHT
        send_ConnectToWifi(profileName, key);
        return recv_ConnectToWifi();

        #else
        var asyncResult = Begin_ConnectToWifi(null, null, profileName, key);
        return End_ConnectToWifi(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ConnectToWifi(AsyncCallback callback, object state, string profileName, string key)
      #else
      public void send_ConnectToWifi(string profileName, string key)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ConnectToWifi", TMessageType.Call, seqid_));
        ConnectToWifi_args args = new ConnectToWifi_args();
        args.ProfileName = profileName;
        args.Key = key;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ConnectToWifi()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ConnectToWifi_result result = new ConnectToWifi_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ConnectToWifi failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNetworkSettings(AsyncCallback callback, object state)
      {
        return send_GetNetworkSettings(callback, state);
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings End_GetNetworkSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNetworkSettings();
      }

      #endif

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings GetNetworkSettings()
      {
        #if !SILVERLIGHT
        send_GetNetworkSettings();
        return recv_GetNetworkSettings();

        #else
        var asyncResult = Begin_GetNetworkSettings(null, null);
        return End_GetNetworkSettings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNetworkSettings(AsyncCallback callback, object state)
      #else
      public void send_GetNetworkSettings()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNetworkSettings", TMessageType.Call, seqid_));
        GetNetworkSettings_args args = new GetNetworkSettings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings recv_GetNetworkSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNetworkSettings_result result = new GetNetworkSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNetworkSettings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetNetworkStatus(AsyncCallback callback, object state)
      {
        return send_GetNetworkStatus(callback, state);
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus End_GetNetworkStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetNetworkStatus();
      }

      #endif

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus GetNetworkStatus()
      {
        #if !SILVERLIGHT
        send_GetNetworkStatus();
        return recv_GetNetworkStatus();

        #else
        var asyncResult = Begin_GetNetworkStatus(null, null);
        return End_GetNetworkStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetNetworkStatus(AsyncCallback callback, object state)
      #else
      public void send_GetNetworkStatus()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetNetworkStatus", TMessageType.Call, seqid_));
        GetNetworkStatus_args args = new GetNetworkStatus_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus recv_GetNetworkStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetNetworkStatus_result result = new GetNetworkStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetNetworkStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuyiTestNetwork(AsyncCallback callback, object state)
      {
        return send_RuyiTestNetwork(callback, state);
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult End_RuyiTestNetwork(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RuyiTestNetwork();
      }

      #endif

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult RuyiTestNetwork()
      {
        #if !SILVERLIGHT
        send_RuyiTestNetwork();
        return recv_RuyiTestNetwork();

        #else
        var asyncResult = Begin_RuyiTestNetwork(null, null);
        return End_RuyiTestNetwork(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuyiTestNetwork(AsyncCallback callback, object state)
      #else
      public void send_RuyiTestNetwork()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuyiTestNetwork", TMessageType.Call, seqid_));
        RuyiTestNetwork_args args = new RuyiTestNetwork_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult recv_RuyiTestNetwork()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuyiTestNetwork_result result = new RuyiTestNetwork_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RuyiTestNetwork failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuyiStartNetworkSpeedTest(AsyncCallback callback, object state, int userindex)
      {
        return send_RuyiStartNetworkSpeedTest(callback, state, userindex);
      }

      public bool End_RuyiStartNetworkSpeedTest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RuyiStartNetworkSpeedTest();
      }

      #endif

      public bool RuyiStartNetworkSpeedTest(int userindex)
      {
        #if !SILVERLIGHT
        send_RuyiStartNetworkSpeedTest(userindex);
        return recv_RuyiStartNetworkSpeedTest();

        #else
        var asyncResult = Begin_RuyiStartNetworkSpeedTest(null, null, userindex);
        return End_RuyiStartNetworkSpeedTest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuyiStartNetworkSpeedTest(AsyncCallback callback, object state, int userindex)
      #else
      public void send_RuyiStartNetworkSpeedTest(int userindex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuyiStartNetworkSpeedTest", TMessageType.Call, seqid_));
        RuyiStartNetworkSpeedTest_args args = new RuyiStartNetworkSpeedTest_args();
        args.Userindex = userindex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RuyiStartNetworkSpeedTest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuyiStartNetworkSpeedTest_result result = new RuyiStartNetworkSpeedTest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RuyiStartNetworkSpeedTest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RuyiStopNetworkSpeedTest(AsyncCallback callback, object state, int userindex)
      {
        return send_RuyiStopNetworkSpeedTest(callback, state, userindex);
      }

      public bool End_RuyiStopNetworkSpeedTest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RuyiStopNetworkSpeedTest();
      }

      #endif

      public bool RuyiStopNetworkSpeedTest(int userindex)
      {
        #if !SILVERLIGHT
        send_RuyiStopNetworkSpeedTest(userindex);
        return recv_RuyiStopNetworkSpeedTest();

        #else
        var asyncResult = Begin_RuyiStopNetworkSpeedTest(null, null, userindex);
        return End_RuyiStopNetworkSpeedTest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RuyiStopNetworkSpeedTest(AsyncCallback callback, object state, int userindex)
      #else
      public void send_RuyiStopNetworkSpeedTest(int userindex)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RuyiStopNetworkSpeedTest", TMessageType.Call, seqid_));
        RuyiStopNetworkSpeedTest_args args = new RuyiStopNetworkSpeedTest_args();
        args.Userindex = userindex;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RuyiStopNetworkSpeedTest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RuyiStopNetworkSpeedTest_result result = new RuyiStopNetworkSpeedTest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RuyiStopNetworkSpeedTest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAvailableWifi(AsyncCallback callback, object state)
      {
        return send_GetAvailableWifi(callback, state);
      }

      public List<Ruyi.SDK.SettingSystem.Api.WifiEntity> End_GetAvailableWifi(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAvailableWifi();
      }

      #endif

      public List<Ruyi.SDK.SettingSystem.Api.WifiEntity> GetAvailableWifi()
      {
        #if !SILVERLIGHT
        send_GetAvailableWifi();
        return recv_GetAvailableWifi();

        #else
        var asyncResult = Begin_GetAvailableWifi(null, null);
        return End_GetAvailableWifi(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAvailableWifi(AsyncCallback callback, object state)
      #else
      public void send_GetAvailableWifi()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAvailableWifi", TMessageType.Call, seqid_));
        GetAvailableWifi_args args = new GetAvailableWifi_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Ruyi.SDK.SettingSystem.Api.WifiEntity> recv_GetAvailableWifi()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAvailableWifi_result result = new GetAvailableWifi_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAvailableWifi failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DisconnectWifi(AsyncCallback callback, object state)
      {
        return send_DisconnectWifi(callback, state);
      }

      public bool End_DisconnectWifi(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DisconnectWifi();
      }

      #endif

      public bool DisconnectWifi()
      {
        #if !SILVERLIGHT
        send_DisconnectWifi();
        return recv_DisconnectWifi();

        #else
        var asyncResult = Begin_DisconnectWifi(null, null);
        return End_DisconnectWifi(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DisconnectWifi(AsyncCallback callback, object state)
      #else
      public void send_DisconnectWifi()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DisconnectWifi", TMessageType.Call, seqid_));
        DisconnectWifi_args args = new DisconnectWifi_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DisconnectWifi()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DisconnectWifi_result result = new DisconnectWifi_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DisconnectWifi failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DiscoverBluetoothDevice(AsyncCallback callback, object state)
      {
        return send_DiscoverBluetoothDevice(callback, state);
      }

      public bool End_DiscoverBluetoothDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DiscoverBluetoothDevice();
      }

      #endif

      public bool DiscoverBluetoothDevice()
      {
        #if !SILVERLIGHT
        send_DiscoverBluetoothDevice();
        return recv_DiscoverBluetoothDevice();

        #else
        var asyncResult = Begin_DiscoverBluetoothDevice(null, null);
        return End_DiscoverBluetoothDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DiscoverBluetoothDevice(AsyncCallback callback, object state)
      #else
      public void send_DiscoverBluetoothDevice()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DiscoverBluetoothDevice", TMessageType.Call, seqid_));
        DiscoverBluetoothDevice_args args = new DiscoverBluetoothDevice_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DiscoverBluetoothDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DiscoverBluetoothDevice_result result = new DiscoverBluetoothDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DiscoverBluetoothDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ConnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      {
        return send_ConnectBluetoothDevice(callback, state, DeviceName, DeviceAddress);
      }

      public bool End_ConnectBluetoothDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ConnectBluetoothDevice();
      }

      #endif

      public bool ConnectBluetoothDevice(string DeviceName, string DeviceAddress)
      {
        #if !SILVERLIGHT
        send_ConnectBluetoothDevice(DeviceName, DeviceAddress);
        return recv_ConnectBluetoothDevice();

        #else
        var asyncResult = Begin_ConnectBluetoothDevice(null, null, DeviceName, DeviceAddress);
        return End_ConnectBluetoothDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ConnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      #else
      public void send_ConnectBluetoothDevice(string DeviceName, string DeviceAddress)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ConnectBluetoothDevice", TMessageType.Call, seqid_));
        ConnectBluetoothDevice_args args = new ConnectBluetoothDevice_args();
        args.DeviceName = DeviceName;
        args.DeviceAddress = DeviceAddress;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ConnectBluetoothDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ConnectBluetoothDevice_result result = new ConnectBluetoothDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ConnectBluetoothDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DisconnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      {
        return send_DisconnectBluetoothDevice(callback, state, DeviceName, DeviceAddress);
      }

      public bool End_DisconnectBluetoothDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_DisconnectBluetoothDevice();
      }

      #endif

      public bool DisconnectBluetoothDevice(string DeviceName, string DeviceAddress)
      {
        #if !SILVERLIGHT
        send_DisconnectBluetoothDevice(DeviceName, DeviceAddress);
        return recv_DisconnectBluetoothDevice();

        #else
        var asyncResult = Begin_DisconnectBluetoothDevice(null, null, DeviceName, DeviceAddress);
        return End_DisconnectBluetoothDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DisconnectBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      #else
      public void send_DisconnectBluetoothDevice(string DeviceName, string DeviceAddress)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DisconnectBluetoothDevice", TMessageType.Call, seqid_));
        DisconnectBluetoothDevice_args args = new DisconnectBluetoothDevice_args();
        args.DeviceName = DeviceName;
        args.DeviceAddress = DeviceAddress;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_DisconnectBluetoothDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DisconnectBluetoothDevice_result result = new DisconnectBluetoothDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DisconnectBluetoothDevice failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RemoveBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      {
        return send_RemoveBluetoothDevice(callback, state, DeviceName, DeviceAddress);
      }

      public bool End_RemoveBluetoothDevice(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RemoveBluetoothDevice();
      }

      #endif

      public bool RemoveBluetoothDevice(string DeviceName, string DeviceAddress)
      {
        #if !SILVERLIGHT
        send_RemoveBluetoothDevice(DeviceName, DeviceAddress);
        return recv_RemoveBluetoothDevice();

        #else
        var asyncResult = Begin_RemoveBluetoothDevice(null, null, DeviceName, DeviceAddress);
        return End_RemoveBluetoothDevice(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RemoveBluetoothDevice(AsyncCallback callback, object state, string DeviceName, string DeviceAddress)
      #else
      public void send_RemoveBluetoothDevice(string DeviceName, string DeviceAddress)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RemoveBluetoothDevice", TMessageType.Call, seqid_));
        RemoveBluetoothDevice_args args = new RemoveBluetoothDevice_args();
        args.DeviceName = DeviceName;
        args.DeviceAddress = DeviceAddress;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RemoveBluetoothDevice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RemoveBluetoothDevice_result result = new RemoveBluetoothDevice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RemoveBluetoothDevice failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetSettingItem"] = GetSettingItem_Process;
        processMap_["GetSettingItems"] = GetSettingItems_Process;
        processMap_["SearchSettingItems"] = SearchSettingItems_Process;
        processMap_["GetCategoryNode"] = GetCategoryNode_Process;
        processMap_["GetChildNode"] = GetChildNode_Process;
        processMap_["SetSettingItem"] = SetSettingItem_Process;
        processMap_["SetSettingItems"] = SetSettingItems_Process;
        processMap_["RestoreDefault"] = RestoreDefault_Process;
        processMap_["RestoreUserDefault"] = RestoreUserDefault_Process;
        processMap_["UpdateModuleVersion"] = UpdateModuleVersion_Process;
        processMap_["SetUserAppData"] = SetUserAppData_Process;
        processMap_["GetUserAppData"] = GetUserAppData_Process;
        processMap_["RemoveUserAppData"] = RemoveUserAppData_Process;
        processMap_["SettingItemNotify"] = SettingItemNotify_Process;
        processMap_["SetNetworkSettings"] = SetNetworkSettings_Process;
        processMap_["SetNetworkProxy"] = SetNetworkProxy_Process;
        processMap_["ConnectToWifi"] = ConnectToWifi_Process;
        processMap_["GetNetworkSettings"] = GetNetworkSettings_Process;
        processMap_["GetNetworkStatus"] = GetNetworkStatus_Process;
        processMap_["RuyiTestNetwork"] = RuyiTestNetwork_Process;
        processMap_["RuyiStartNetworkSpeedTest"] = RuyiStartNetworkSpeedTest_Process;
        processMap_["RuyiStopNetworkSpeedTest"] = RuyiStopNetworkSpeedTest_Process;
        processMap_["GetAvailableWifi"] = GetAvailableWifi_Process;
        processMap_["DisconnectWifi"] = DisconnectWifi_Process;
        processMap_["DiscoverBluetoothDevice"] = DiscoverBluetoothDevice_Process;
        processMap_["ConnectBluetoothDevice"] = ConnectBluetoothDevice_Process;
        processMap_["DisconnectBluetoothDevice"] = DisconnectBluetoothDevice_Process;
        processMap_["RemoveBluetoothDevice"] = RemoveBluetoothDevice_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetSettingItem_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSettingItem_args args = new GetSettingItem_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSettingItem_result result = new GetSettingItem_result();
        try
        {
          try
          {
            result.Success = iface_.GetSettingItem(args.Id);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetSettingItem", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSettingItem", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSettingItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSettingItems_args args = new GetSettingItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSettingItems_result result = new GetSettingItems_result();
        try
        {
          try
          {
            result.Success = iface_.GetSettingItems(args.Category, args.IncludeChildren);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetSettingItems", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetSettingItems", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchSettingItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchSettingItems_args args = new SearchSettingItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchSettingItems_result result = new SearchSettingItems_result();
        try
        {
          try
          {
            result.Success = iface_.SearchSettingItems(args.FilterJson);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("SearchSettingItems", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SearchSettingItems", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetCategoryNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetCategoryNode_args args = new GetCategoryNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetCategoryNode_result result = new GetCategoryNode_result();
        try
        {
          try
          {
            result.Success = iface_.GetCategoryNode();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetCategoryNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetCategoryNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetChildNode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetChildNode_args args = new GetChildNode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetChildNode_result result = new GetChildNode_result();
        try
        {
          try
          {
            result.Success = iface_.GetChildNode(args.Parent, args.NodeType, args.Param);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetChildNode", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetChildNode", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSettingItem_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSettingItem_args args = new SetSettingItem_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSettingItem_result result = new SetSettingItem_result();
        try
        {
          try
          {
            result.Success = iface_.SetSettingItem(args.Key, args.Val);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("SetSettingItem", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetSettingItem", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetSettingItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetSettingItems_args args = new SetSettingItems_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetSettingItems_result result = new SetSettingItems_result();
        try
        {
          try
          {
            result.Success = iface_.SetSettingItems(args.KeyValues);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("SetSettingItems", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetSettingItems", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RestoreDefault_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RestoreDefault_args args = new RestoreDefault_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RestoreDefault_result result = new RestoreDefault_result();
        try
        {
          try
          {
            result.Success = iface_.RestoreDefault(args.ModuleName, args.Category);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RestoreDefault", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RestoreDefault", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RestoreUserDefault_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RestoreUserDefault_args args = new RestoreUserDefault_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RestoreUserDefault_result result = new RestoreUserDefault_result();
        try
        {
          try
          {
            result.Success = iface_.RestoreUserDefault(args.UserId, args.ModuleName, args.Category);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RestoreUserDefault", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RestoreUserDefault", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateModuleVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateModuleVersion_args args = new UpdateModuleVersion_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateModuleVersion_result result = new UpdateModuleVersion_result();
        try
        {
          try
          {
            result.Success = iface_.UpdateModuleVersion(args.ModuleName);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("UpdateModuleVersion", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("UpdateModuleVersion", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetUserAppData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetUserAppData_args args = new SetUserAppData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetUserAppData_result result = new SetUserAppData_result();
        try
        {
          try
          {
            result.Success = iface_.SetUserAppData(args.UserId, args.Category, args.SettingItems);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("SetUserAppData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetUserAppData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetUserAppData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetUserAppData_args args = new GetUserAppData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetUserAppData_result result = new GetUserAppData_result();
        try
        {
          try
          {
            result.Success = iface_.GetUserAppData(args.UserId, args.Category, args.SettingKeys);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetUserAppData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetUserAppData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveUserAppData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveUserAppData_args args = new RemoveUserAppData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveUserAppData_result result = new RemoveUserAppData_result();
        try
        {
          try
          {
            result.Success = iface_.RemoveUserAppData(args.UserId, args.Category, args.SettingKeys);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RemoveUserAppData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RemoveUserAppData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SettingItemNotify_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SettingItemNotify_args args = new SettingItemNotify_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SettingItemNotify_result result = new SettingItemNotify_result();
        try
        {
          try
          {
            result.Success = iface_.SettingItemNotify(args.Key, args.Contents);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("SettingItemNotify", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SettingItemNotify", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNetworkSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNetworkSettings_args args = new SetNetworkSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNetworkSettings_result result = new SetNetworkSettings_result();
        try
        {
          result.Success = iface_.SetNetworkSettings(args.EnableDHCP, args.IpAddress, args.SubMask, args.Gateway, args.MainDNS, args.SubDNS);
          oprot.WriteMessageBegin(new TMessage("SetNetworkSettings", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetNetworkSettings", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetNetworkProxy_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetNetworkProxy_args args = new SetNetworkProxy_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetNetworkProxy_result result = new SetNetworkProxy_result();
        try
        {
          result.Success = iface_.SetNetworkProxy(args.ProxyServer, args.ProxyPort);
          oprot.WriteMessageBegin(new TMessage("SetNetworkProxy", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SetNetworkProxy", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ConnectToWifi_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ConnectToWifi_args args = new ConnectToWifi_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ConnectToWifi_result result = new ConnectToWifi_result();
        try
        {
          try
          {
            result.Success = iface_.ConnectToWifi(args.ProfileName, args.Key);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("ConnectToWifi", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ConnectToWifi", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNetworkSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNetworkSettings_args args = new GetNetworkSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNetworkSettings_result result = new GetNetworkSettings_result();
        try
        {
          try
          {
            result.Success = iface_.GetNetworkSettings();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetNetworkSettings", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetNetworkSettings", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetNetworkStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetNetworkStatus_args args = new GetNetworkStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetNetworkStatus_result result = new GetNetworkStatus_result();
        try
        {
          try
          {
            result.Success = iface_.GetNetworkStatus();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetNetworkStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetNetworkStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuyiTestNetwork_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuyiTestNetwork_args args = new RuyiTestNetwork_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuyiTestNetwork_result result = new RuyiTestNetwork_result();
        try
        {
          try
          {
            result.Success = iface_.RuyiTestNetwork();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RuyiTestNetwork", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RuyiTestNetwork", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuyiStartNetworkSpeedTest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuyiStartNetworkSpeedTest_args args = new RuyiStartNetworkSpeedTest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuyiStartNetworkSpeedTest_result result = new RuyiStartNetworkSpeedTest_result();
        try
        {
          try
          {
            result.Success = iface_.RuyiStartNetworkSpeedTest(args.Userindex);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RuyiStartNetworkSpeedTest", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RuyiStartNetworkSpeedTest", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RuyiStopNetworkSpeedTest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RuyiStopNetworkSpeedTest_args args = new RuyiStopNetworkSpeedTest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RuyiStopNetworkSpeedTest_result result = new RuyiStopNetworkSpeedTest_result();
        try
        {
          try
          {
            result.Success = iface_.RuyiStopNetworkSpeedTest(args.Userindex);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RuyiStopNetworkSpeedTest", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RuyiStopNetworkSpeedTest", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAvailableWifi_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAvailableWifi_args args = new GetAvailableWifi_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAvailableWifi_result result = new GetAvailableWifi_result();
        try
        {
          try
          {
            result.Success = iface_.GetAvailableWifi();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetAvailableWifi", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetAvailableWifi", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DisconnectWifi_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DisconnectWifi_args args = new DisconnectWifi_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DisconnectWifi_result result = new DisconnectWifi_result();
        try
        {
          try
          {
            result.Success = iface_.DisconnectWifi();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("DisconnectWifi", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DisconnectWifi", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DiscoverBluetoothDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DiscoverBluetoothDevice_args args = new DiscoverBluetoothDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DiscoverBluetoothDevice_result result = new DiscoverBluetoothDevice_result();
        try
        {
          try
          {
            result.Success = iface_.DiscoverBluetoothDevice();
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("DiscoverBluetoothDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DiscoverBluetoothDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ConnectBluetoothDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ConnectBluetoothDevice_args args = new ConnectBluetoothDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ConnectBluetoothDevice_result result = new ConnectBluetoothDevice_result();
        try
        {
          try
          {
            result.Success = iface_.ConnectBluetoothDevice(args.DeviceName, args.DeviceAddress);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("ConnectBluetoothDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ConnectBluetoothDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DisconnectBluetoothDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DisconnectBluetoothDevice_args args = new DisconnectBluetoothDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DisconnectBluetoothDevice_result result = new DisconnectBluetoothDevice_result();
        try
        {
          try
          {
            result.Success = iface_.DisconnectBluetoothDevice(args.DeviceName, args.DeviceAddress);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("DisconnectBluetoothDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("DisconnectBluetoothDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RemoveBluetoothDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RemoveBluetoothDevice_args args = new RemoveBluetoothDevice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RemoveBluetoothDevice_result result = new RemoveBluetoothDevice_result();
        try
        {
          try
          {
            result.Success = iface_.RemoveBluetoothDevice(args.DeviceName, args.DeviceAddress);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("RemoveBluetoothDevice", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RemoveBluetoothDevice", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettingItem_args : TBase
    {
      private string _id;

      /// <summary>
      /// The setting's unique id in current module.
      /// </summary>
      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool id;
      }

      public GetSettingItem_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSettingItem_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Id != null && __isset.id) {
            field.Name = "id";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSettingItem_args(");
        bool __first = true;
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettingItem_result : TBase
    {
      private Ruyi.SDK.CommonType.SettingItem _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.CommonType.SettingItem Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetSettingItem_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.CommonType.SettingItem();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSettingItem_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSettingItem_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettingItems_args : TBase
    {
      private string _category;
      private bool _includeChildren;

      /// <summary>
      /// Category to filter the settings. Null indicates getting all settings of the module
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      /// <summary>
      /// Whecher to get the settings of children cagegories.
      /// </summary>
      public bool IncludeChildren
      {
        get
        {
          return _includeChildren;
        }
        set
        {
          __isset.includeChildren = true;
          this._includeChildren = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool category;
        public bool includeChildren;
      }

      public GetSettingItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Bool) {
                  IncludeChildren = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSettingItems_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (__isset.includeChildren) {
            field.Name = "includeChildren";
            field.Type = TType.Bool;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(IncludeChildren);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSettingItems_args(");
        bool __first = true;
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (__isset.includeChildren) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IncludeChildren: ");
          __sb.Append(IncludeChildren);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSettingItems_result : TBase
    {
      private List<Ruyi.SDK.CommonType.SettingItem> _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public List<Ruyi.SDK.CommonType.SettingItem> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetSettingItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Ruyi.SDK.CommonType.SettingItem>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      Ruyi.SDK.CommonType.SettingItem _elem2;
                      _elem2 = new Ruyi.SDK.CommonType.SettingItem();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetSettingItems_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Ruyi.SDK.CommonType.SettingItem _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetSettingItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchSettingItems_args : TBase
    {
      private string _filterJson;

      /// <summary>
      /// Json string used to search.
      /// </summary>
      public string FilterJson
      {
        get
        {
          return _filterJson;
        }
        set
        {
          __isset.filterJson = true;
          this._filterJson = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filterJson;
      }

      public SearchSettingItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  FilterJson = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchSettingItems_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (FilterJson != null && __isset.filterJson) {
            field.Name = "filterJson";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FilterJson);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchSettingItems_args(");
        bool __first = true;
        if (FilterJson != null && __isset.filterJson) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FilterJson: ");
          __sb.Append(FilterJson);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchSettingItems_result : TBase
    {
      private Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public SearchSettingItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map) {
                  {
                    Success = new Dictionary<string, Ruyi.SDK.SettingSystem.Api.SettingSearchResult>();
                    TMap _map4 = iprot.ReadMapBegin();
                    for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                    {
                      string _key6;
                      Ruyi.SDK.SettingSystem.Api.SettingSearchResult _val7;
                      _key6 = iprot.ReadString();
                      _val7 = new Ruyi.SDK.SettingSystem.Api.SettingSearchResult();
                      _val7.Read(iprot);
                      Success[_key6] = _val7;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchSettingItems_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
                foreach (string _iter8 in Success.Keys)
                {
                  oprot.WriteString(_iter8);
                  Success[_iter8].Write(oprot);
                }
                oprot.WriteMapEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchSettingItems_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCategoryNode_args : TBase
    {

      public GetCategoryNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCategoryNode_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCategoryNode_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetCategoryNode_result : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.SettingTree _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.SettingTree Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetCategoryNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.SettingSystem.Api.SettingTree();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetCategoryNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetCategoryNode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetChildNode_args : TBase
    {
      private string _parent;
      private Ruyi.SDK.SettingSystem.Api.NodeType _nodeType;
      private string _param;

      /// <summary>
      /// The parent node
      /// </summary>
      public string Parent
      {
        get
        {
          return _parent;
        }
        set
        {
          __isset.parent = true;
          this._parent = value;
        }
      }

      /// <summary>
      /// Specifies whether the child nodes containing setting item or setting category, or both
      /// 
      /// <seealso cref="Ruyi.SDK.SettingSystem.Api.NodeType"/>
      /// </summary>
      public Ruyi.SDK.SettingSystem.Api.NodeType NodeType
      {
        get
        {
          return _nodeType;
        }
        set
        {
          __isset.nodeType = true;
          this._nodeType = value;
        }
      }

      /// <summary>
      /// The parameter passed to the function which will be called while getting the item value
      /// </summary>
      public string Param
      {
        get
        {
          return _param;
        }
        set
        {
          __isset.param = true;
          this._param = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool parent;
        public bool nodeType;
        public bool param;
      }

      public GetChildNode_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Parent = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NodeType = (Ruyi.SDK.SettingSystem.Api.NodeType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Param = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetChildNode_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Parent != null && __isset.parent) {
            field.Name = "parent";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Parent);
            oprot.WriteFieldEnd();
          }
          if (__isset.nodeType) {
            field.Name = "nodeType";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)NodeType);
            oprot.WriteFieldEnd();
          }
          if (Param != null && __isset.param) {
            field.Name = "param";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Param);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetChildNode_args(");
        bool __first = true;
        if (Parent != null && __isset.parent) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parent: ");
          __sb.Append(Parent);
        }
        if (__isset.nodeType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NodeType: ");
          __sb.Append(NodeType);
        }
        if (Param != null && __isset.param) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Param: ");
          __sb.Append(Param);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetChildNode_result : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.NodeList _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.NodeList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetChildNode_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.SettingSystem.Api.NodeList();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetChildNode_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetChildNode_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettingItem_args : TBase
    {
      private string _key;
      private string _val;

      /// <summary>
      /// Identity of the setting
      /// </summary>
      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      /// <summary>
      /// Value to be set
      /// </summary>
      public string Val
      {
        get
        {
          return _val;
        }
        set
        {
          __isset.val = true;
          this._val = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool val;
      }

      public SetSettingItem_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Key = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Val = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetSettingItem_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Key != null && __isset.key) {
            field.Name = "key";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Key);
            oprot.WriteFieldEnd();
          }
          if (Val != null && __isset.val) {
            field.Name = "val";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Val);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetSettingItem_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Val != null && __isset.val) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Val: ");
          __sb.Append(Val);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettingItem_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public SetSettingItem_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetSettingItem_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetSettingItem_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettingItems_args : TBase
    {
      private Dictionary<string, string> _keyValues;

      /// <summary>
      /// The key-values to be set.
      /// </summary>
      public Dictionary<string, string> KeyValues
      {
        get
        {
          return _keyValues;
        }
        set
        {
          __isset.keyValues = true;
          this._keyValues = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool keyValues;
      }

      public SetSettingItems_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    KeyValues = new Dictionary<string, string>();
                    TMap _map9 = iprot.ReadMapBegin();
                    for( int _i10 = 0; _i10 < _map9.Count; ++_i10)
                    {
                      string _key11;
                      string _val12;
                      _key11 = iprot.ReadString();
                      _val12 = iprot.ReadString();
                      KeyValues[_key11] = _val12;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetSettingItems_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (KeyValues != null && __isset.keyValues) {
            field.Name = "keyValues";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, KeyValues.Count));
              foreach (string _iter13 in KeyValues.Keys)
              {
                oprot.WriteString(_iter13);
                oprot.WriteString(KeyValues[_iter13]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetSettingItems_args(");
        bool __first = true;
        if (KeyValues != null && __isset.keyValues) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("KeyValues: ");
          __sb.Append(KeyValues);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetSettingItems_result : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public SetSettingItems_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetSettingItems_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetSettingItems_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreDefault_args : TBase
    {
      private string _moduleName;
      private string _category;

      /// <summary>
      /// Module name specifies the module to be restored.
      /// </summary>
      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }

      /// <summary>
      /// The category of which to restored. Null indicates all settings.
      /// </summary>
      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool moduleName;
        public bool category;
      }

      public RestoreDefault_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ModuleName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreDefault_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ModuleName != null && __isset.moduleName) {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ModuleName);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreDefault_args(");
        bool __first = true;
        if (ModuleName != null && __isset.moduleName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ModuleName: ");
          __sb.Append(ModuleName);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreDefault_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RestoreDefault_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreDefault_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreDefault_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreUserDefault_args : TBase
    {
      private string _userId;
      private string _moduleName;
      private string _category;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool moduleName;
        public bool category;
      }

      public RestoreUserDefault_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ModuleName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreUserDefault_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (ModuleName != null && __isset.moduleName) {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ModuleName);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreUserDefault_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (ModuleName != null && __isset.moduleName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ModuleName: ");
          __sb.Append(ModuleName);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RestoreUserDefault_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RestoreUserDefault_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RestoreUserDefault_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RestoreUserDefault_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateModuleVersion_args : TBase
    {
      private string _moduleName;

      /// <summary>
      /// Module of the setting
      /// </summary>
      public string ModuleName
      {
        get
        {
          return _moduleName;
        }
        set
        {
          __isset.moduleName = true;
          this._moduleName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool moduleName;
      }

      public UpdateModuleVersion_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ModuleName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateModuleVersion_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ModuleName != null && __isset.moduleName) {
            field.Name = "moduleName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ModuleName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateModuleVersion_args(");
        bool __first = true;
        if (ModuleName != null && __isset.moduleName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ModuleName: ");
          __sb.Append(ModuleName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateModuleVersion_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public UpdateModuleVersion_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("UpdateModuleVersion_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("UpdateModuleVersion_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUserAppData_args : TBase
    {
      private string _userId;
      private string _category;
      private Dictionary<string, Ruyi.SDK.CommonType.SettingValue> _settingItems;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public Dictionary<string, Ruyi.SDK.CommonType.SettingValue> SettingItems
      {
        get
        {
          return _settingItems;
        }
        set
        {
          __isset.settingItems = true;
          this._settingItems = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool category;
        public bool settingItems;
      }

      public SetUserAppData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Map) {
                  {
                    SettingItems = new Dictionary<string, Ruyi.SDK.CommonType.SettingValue>();
                    TMap _map14 = iprot.ReadMapBegin();
                    for( int _i15 = 0; _i15 < _map14.Count; ++_i15)
                    {
                      string _key16;
                      Ruyi.SDK.CommonType.SettingValue _val17;
                      _key16 = iprot.ReadString();
                      _val17 = new Ruyi.SDK.CommonType.SettingValue();
                      _val17.Read(iprot);
                      SettingItems[_key16] = _val17;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUserAppData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (SettingItems != null && __isset.settingItems) {
            field.Name = "settingItems";
            field.Type = TType.Map;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SettingItems.Count));
              foreach (string _iter18 in SettingItems.Keys)
              {
                oprot.WriteString(_iter18);
                SettingItems[_iter18].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (SettingItems != null && __isset.settingItems) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SettingItems: ");
          __sb.Append(SettingItems);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUserAppData_result : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public SetUserAppData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUserAppData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUserAppData_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserAppData_args : TBase
    {
      private string _userId;
      private string _category;
      private List<string> _settingKeys;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public List<string> SettingKeys
      {
        get
        {
          return _settingKeys;
        }
        set
        {
          __isset.settingKeys = true;
          this._settingKeys = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool category;
        public bool settingKeys;
      }

      public GetUserAppData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    SettingKeys = new List<string>();
                    TList _list19 = iprot.ReadListBegin();
                    for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                    {
                      string _elem21;
                      _elem21 = iprot.ReadString();
                      SettingKeys.Add(_elem21);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserAppData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (SettingKeys != null && __isset.settingKeys) {
            field.Name = "settingKeys";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, SettingKeys.Count));
              foreach (string _iter22 in SettingKeys)
              {
                oprot.WriteString(_iter22);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (SettingKeys != null && __isset.settingKeys) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SettingKeys: ");
          __sb.Append(SettingKeys);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetUserAppData_result : TBase
    {
      private Ruyi.SDK.CommonType.AppData _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.CommonType.AppData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetUserAppData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.CommonType.AppData();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetUserAppData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetUserAppData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveUserAppData_args : TBase
    {
      private string _userId;
      private string _category;
      private List<string> _settingKeys;

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      public string Category
      {
        get
        {
          return _category;
        }
        set
        {
          __isset.category = true;
          this._category = value;
        }
      }

      public List<string> SettingKeys
      {
        get
        {
          return _settingKeys;
        }
        set
        {
          __isset.settingKeys = true;
          this._settingKeys = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userId;
        public bool category;
        public bool settingKeys;
      }

      public RemoveUserAppData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Category = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.List) {
                  {
                    SettingKeys = new List<string>();
                    TList _list23 = iprot.ReadListBegin();
                    for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                    {
                      string _elem25;
                      _elem25 = iprot.ReadString();
                      SettingKeys.Add(_elem25);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RemoveUserAppData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Category != null && __isset.category) {
            field.Name = "category";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Category);
            oprot.WriteFieldEnd();
          }
          if (SettingKeys != null && __isset.settingKeys) {
            field.Name = "settingKeys";
            field.Type = TType.List;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, SettingKeys.Count));
              foreach (string _iter26 in SettingKeys)
              {
                oprot.WriteString(_iter26);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RemoveUserAppData_args(");
        bool __first = true;
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Category != null && __isset.category) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Category: ");
          __sb.Append(Category);
        }
        if (SettingKeys != null && __isset.settingKeys) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SettingKeys: ");
          __sb.Append(SettingKeys);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveUserAppData_result : TBase
    {
      private int _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RemoveUserAppData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RemoveUserAppData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RemoveUserAppData_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SettingItemNotify_args : TBase
    {
      private string _key;
      private string _contents;

      /// <summary>
      /// The item's ID
      /// </summary>
      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      /// <summary>
      /// Optional. The arguments of the notification. In json string format
      /// </summary>
      public string Contents
      {
        get
        {
          return _contents;
        }
        set
        {
          __isset.contents = true;
          this._contents = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool key;
        public bool contents;
      }

      public SettingItemNotify_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Key = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Contents = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SettingItemNotify_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Key != null && __isset.key) {
            field.Name = "key";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Key);
            oprot.WriteFieldEnd();
          }
          if (Contents != null && __isset.contents) {
            field.Name = "contents";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Contents);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SettingItemNotify_args(");
        bool __first = true;
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        if (Contents != null && __isset.contents) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Contents: ");
          __sb.Append(Contents);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SettingItemNotify_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public SettingItemNotify_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SettingItemNotify_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SettingItemNotify_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetNetworkSettings_args : TBase
    {
      private bool _EnableDHCP;
      private string _IpAddress;
      private string _SubMask;
      private string _Gateway;
      private string _MainDNS;
      private string _SubDNS;

      public bool EnableDHCP
      {
        get
        {
          return _EnableDHCP;
        }
        set
        {
          __isset.EnableDHCP = true;
          this._EnableDHCP = value;
        }
      }

      public string IpAddress
      {
        get
        {
          return _IpAddress;
        }
        set
        {
          __isset.IpAddress = true;
          this._IpAddress = value;
        }
      }

      public string SubMask
      {
        get
        {
          return _SubMask;
        }
        set
        {
          __isset.SubMask = true;
          this._SubMask = value;
        }
      }

      public string Gateway
      {
        get
        {
          return _Gateway;
        }
        set
        {
          __isset.Gateway = true;
          this._Gateway = value;
        }
      }

      public string MainDNS
      {
        get
        {
          return _MainDNS;
        }
        set
        {
          __isset.MainDNS = true;
          this._MainDNS = value;
        }
      }

      public string SubDNS
      {
        get
        {
          return _SubDNS;
        }
        set
        {
          __isset.SubDNS = true;
          this._SubDNS = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool EnableDHCP;
        public bool IpAddress;
        public bool SubMask;
        public bool Gateway;
        public bool MainDNS;
        public bool SubDNS;
      }

      public SetNetworkSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Bool) {
                  EnableDHCP = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  IpAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  SubMask = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  Gateway = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  MainDNS = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  SubDNS = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetNetworkSettings_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.EnableDHCP) {
            field.Name = "EnableDHCP";
            field.Type = TType.Bool;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(EnableDHCP);
            oprot.WriteFieldEnd();
          }
          if (IpAddress != null && __isset.IpAddress) {
            field.Name = "IpAddress";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(IpAddress);
            oprot.WriteFieldEnd();
          }
          if (SubMask != null && __isset.SubMask) {
            field.Name = "SubMask";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubMask);
            oprot.WriteFieldEnd();
          }
          if (Gateway != null && __isset.Gateway) {
            field.Name = "Gateway";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Gateway);
            oprot.WriteFieldEnd();
          }
          if (MainDNS != null && __isset.MainDNS) {
            field.Name = "MainDNS";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(MainDNS);
            oprot.WriteFieldEnd();
          }
          if (SubDNS != null && __isset.SubDNS) {
            field.Name = "SubDNS";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(SubDNS);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetNetworkSettings_args(");
        bool __first = true;
        if (__isset.EnableDHCP) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EnableDHCP: ");
          __sb.Append(EnableDHCP);
        }
        if (IpAddress != null && __isset.IpAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("IpAddress: ");
          __sb.Append(IpAddress);
        }
        if (SubMask != null && __isset.SubMask) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubMask: ");
          __sb.Append(SubMask);
        }
        if (Gateway != null && __isset.Gateway) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Gateway: ");
          __sb.Append(Gateway);
        }
        if (MainDNS != null && __isset.MainDNS) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MainDNS: ");
          __sb.Append(MainDNS);
        }
        if (SubDNS != null && __isset.SubDNS) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubDNS: ");
          __sb.Append(SubDNS);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetNetworkSettings_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetNetworkSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetNetworkSettings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetNetworkSettings_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetNetworkProxy_args : TBase
    {
      private string _ProxyServer;
      private string _ProxyPort;

      public string ProxyServer
      {
        get
        {
          return _ProxyServer;
        }
        set
        {
          __isset.ProxyServer = true;
          this._ProxyServer = value;
        }
      }

      public string ProxyPort
      {
        get
        {
          return _ProxyPort;
        }
        set
        {
          __isset.ProxyPort = true;
          this._ProxyPort = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool ProxyServer;
        public bool ProxyPort;
      }

      public SetNetworkProxy_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProxyServer = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ProxyPort = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetNetworkProxy_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProxyServer != null && __isset.ProxyServer) {
            field.Name = "ProxyServer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProxyServer);
            oprot.WriteFieldEnd();
          }
          if (ProxyPort != null && __isset.ProxyPort) {
            field.Name = "ProxyPort";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProxyPort);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetNetworkProxy_args(");
        bool __first = true;
        if (ProxyServer != null && __isset.ProxyServer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProxyServer: ");
          __sb.Append(ProxyServer);
        }
        if (ProxyPort != null && __isset.ProxyPort) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProxyPort: ");
          __sb.Append(ProxyPort);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetNetworkProxy_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetNetworkProxy_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetNetworkProxy_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetNetworkProxy_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectToWifi_args : TBase
    {
      private string _profileName;
      private string _key;

      public string ProfileName
      {
        get
        {
          return _profileName;
        }
        set
        {
          __isset.profileName = true;
          this._profileName = value;
        }
      }

      public string Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool profileName;
        public bool key;
      }

      public ConnectToWifi_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ProfileName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Key = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectToWifi_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ProfileName != null && __isset.profileName) {
            field.Name = "profileName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ProfileName);
            oprot.WriteFieldEnd();
          }
          if (Key != null && __isset.key) {
            field.Name = "key";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Key);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectToWifi_args(");
        bool __first = true;
        if (ProfileName != null && __isset.profileName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ProfileName: ");
          __sb.Append(ProfileName);
        }
        if (Key != null && __isset.key) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Key: ");
          __sb.Append(Key);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectToWifi_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public ConnectToWifi_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectToWifi_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectToWifi_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNetworkSettings_args : TBase
    {

      public GetNetworkSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNetworkSettings_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNetworkSettings_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNetworkSettings_result : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetNetworkSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.SettingSystem.Api.RuyiNetworkSettings();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNetworkSettings_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNetworkSettings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNetworkStatus_args : TBase
    {

      public GetNetworkStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNetworkStatus_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNetworkStatus_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetNetworkStatus_result : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetNetworkStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.SettingSystem.Api.RuyiNetworkStatus();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetNetworkStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetNetworkStatus_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiTestNetwork_args : TBase
    {

      public RuyiTestNetwork_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiTestNetwork_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiTestNetwork_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiTestNetwork_result : TBase
    {
      private Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RuyiTestNetwork_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.SettingSystem.Api.RuyiNetworkTestResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiTestNetwork_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiTestNetwork_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiStartNetworkSpeedTest_args : TBase
    {
      private int _userindex;

      public int Userindex
      {
        get
        {
          return _userindex;
        }
        set
        {
          __isset.userindex = true;
          this._userindex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userindex;
      }

      public RuyiStartNetworkSpeedTest_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Userindex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiStartNetworkSpeedTest_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.userindex) {
            field.Name = "userindex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Userindex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiStartNetworkSpeedTest_args(");
        bool __first = true;
        if (__isset.userindex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userindex: ");
          __sb.Append(Userindex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiStartNetworkSpeedTest_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RuyiStartNetworkSpeedTest_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiStartNetworkSpeedTest_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiStartNetworkSpeedTest_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiStopNetworkSpeedTest_args : TBase
    {
      private int _userindex;

      public int Userindex
      {
        get
        {
          return _userindex;
        }
        set
        {
          __isset.userindex = true;
          this._userindex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userindex;
      }

      public RuyiStopNetworkSpeedTest_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Userindex = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiStopNetworkSpeedTest_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.userindex) {
            field.Name = "userindex";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Userindex);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiStopNetworkSpeedTest_args(");
        bool __first = true;
        if (__isset.userindex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userindex: ");
          __sb.Append(Userindex);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RuyiStopNetworkSpeedTest_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RuyiStopNetworkSpeedTest_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RuyiStopNetworkSpeedTest_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RuyiStopNetworkSpeedTest_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableWifi_args : TBase
    {

      public GetAvailableWifi_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvailableWifi_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvailableWifi_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetAvailableWifi_result : TBase
    {
      private List<Ruyi.SDK.SettingSystem.Api.WifiEntity> _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public List<Ruyi.SDK.SettingSystem.Api.WifiEntity> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetAvailableWifi_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Ruyi.SDK.SettingSystem.Api.WifiEntity>();
                    TList _list27 = iprot.ReadListBegin();
                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                    {
                      Ruyi.SDK.SettingSystem.Api.WifiEntity _elem29;
                      _elem29 = new Ruyi.SDK.SettingSystem.Api.WifiEntity();
                      _elem29.Read(iprot);
                      Success.Add(_elem29);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetAvailableWifi_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Ruyi.SDK.SettingSystem.Api.WifiEntity _iter30 in Success)
                {
                  _iter30.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetAvailableWifi_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectWifi_args : TBase
    {

      public DisconnectWifi_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectWifi_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectWifi_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectWifi_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public DisconnectWifi_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectWifi_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectWifi_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DiscoverBluetoothDevice_args : TBase
    {

      public DiscoverBluetoothDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DiscoverBluetoothDevice_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DiscoverBluetoothDevice_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DiscoverBluetoothDevice_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public DiscoverBluetoothDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DiscoverBluetoothDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DiscoverBluetoothDevice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectBluetoothDevice_args : TBase
    {
      private string _DeviceName;
      private string _DeviceAddress;

      public string DeviceName
      {
        get
        {
          return _DeviceName;
        }
        set
        {
          __isset.DeviceName = true;
          this._DeviceName = value;
        }
      }

      public string DeviceAddress
      {
        get
        {
          return _DeviceAddress;
        }
        set
        {
          __isset.DeviceAddress = true;
          this._DeviceAddress = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool DeviceName;
        public bool DeviceAddress;
      }

      public ConnectBluetoothDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DeviceName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  DeviceAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectBluetoothDevice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DeviceName != null && __isset.DeviceName) {
            field.Name = "DeviceName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceName);
            oprot.WriteFieldEnd();
          }
          if (DeviceAddress != null && __isset.DeviceAddress) {
            field.Name = "DeviceAddress";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceAddress);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectBluetoothDevice_args(");
        bool __first = true;
        if (DeviceName != null && __isset.DeviceName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceName: ");
          __sb.Append(DeviceName);
        }
        if (DeviceAddress != null && __isset.DeviceAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceAddress: ");
          __sb.Append(DeviceAddress);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ConnectBluetoothDevice_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public ConnectBluetoothDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ConnectBluetoothDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ConnectBluetoothDevice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectBluetoothDevice_args : TBase
    {
      private string _DeviceName;
      private string _DeviceAddress;

      public string DeviceName
      {
        get
        {
          return _DeviceName;
        }
        set
        {
          __isset.DeviceName = true;
          this._DeviceName = value;
        }
      }

      public string DeviceAddress
      {
        get
        {
          return _DeviceAddress;
        }
        set
        {
          __isset.DeviceAddress = true;
          this._DeviceAddress = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool DeviceName;
        public bool DeviceAddress;
      }

      public DisconnectBluetoothDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DeviceName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  DeviceAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectBluetoothDevice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DeviceName != null && __isset.DeviceName) {
            field.Name = "DeviceName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceName);
            oprot.WriteFieldEnd();
          }
          if (DeviceAddress != null && __isset.DeviceAddress) {
            field.Name = "DeviceAddress";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceAddress);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectBluetoothDevice_args(");
        bool __first = true;
        if (DeviceName != null && __isset.DeviceName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceName: ");
          __sb.Append(DeviceName);
        }
        if (DeviceAddress != null && __isset.DeviceAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceAddress: ");
          __sb.Append(DeviceAddress);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DisconnectBluetoothDevice_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public DisconnectBluetoothDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("DisconnectBluetoothDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("DisconnectBluetoothDevice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveBluetoothDevice_args : TBase
    {
      private string _DeviceName;
      private string _DeviceAddress;

      public string DeviceName
      {
        get
        {
          return _DeviceName;
        }
        set
        {
          __isset.DeviceName = true;
          this._DeviceName = value;
        }
      }

      public string DeviceAddress
      {
        get
        {
          return _DeviceAddress;
        }
        set
        {
          __isset.DeviceAddress = true;
          this._DeviceAddress = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool DeviceName;
        public bool DeviceAddress;
      }

      public RemoveBluetoothDevice_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DeviceName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  DeviceAddress = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RemoveBluetoothDevice_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DeviceName != null && __isset.DeviceName) {
            field.Name = "DeviceName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceName);
            oprot.WriteFieldEnd();
          }
          if (DeviceAddress != null && __isset.DeviceAddress) {
            field.Name = "DeviceAddress";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DeviceAddress);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RemoveBluetoothDevice_args(");
        bool __first = true;
        if (DeviceName != null && __isset.DeviceName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceName: ");
          __sb.Append(DeviceName);
        }
        if (DeviceAddress != null && __isset.DeviceAddress) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DeviceAddress: ");
          __sb.Append(DeviceAddress);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RemoveBluetoothDevice_result : TBase
    {
      private bool _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public RemoveBluetoothDevice_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RemoveBluetoothDevice_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RemoveBluetoothDevice_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
