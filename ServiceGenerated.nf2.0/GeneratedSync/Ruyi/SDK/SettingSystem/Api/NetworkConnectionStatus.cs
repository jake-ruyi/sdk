/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.SettingSystem.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NetworkConnectionStatus : TBase
  {
    private bool _preLanAdapter;
    private bool _curLanAdapter;
    private bool _preWlanAdapter;
    private bool _curWlanAdapter;
    private bool _preInternetConnection;
    private bool _curInternetConnection;

    public bool PreLanAdapter
    {
      get
      {
        return _preLanAdapter;
      }
      set
      {
        __isset.preLanAdapter = true;
        this._preLanAdapter = value;
      }
    }

    public bool CurLanAdapter
    {
      get
      {
        return _curLanAdapter;
      }
      set
      {
        __isset.curLanAdapter = true;
        this._curLanAdapter = value;
      }
    }

    public bool PreWlanAdapter
    {
      get
      {
        return _preWlanAdapter;
      }
      set
      {
        __isset.preWlanAdapter = true;
        this._preWlanAdapter = value;
      }
    }

    public bool CurWlanAdapter
    {
      get
      {
        return _curWlanAdapter;
      }
      set
      {
        __isset.curWlanAdapter = true;
        this._curWlanAdapter = value;
      }
    }

    public bool PreInternetConnection
    {
      get
      {
        return _preInternetConnection;
      }
      set
      {
        __isset.preInternetConnection = true;
        this._preInternetConnection = value;
      }
    }

    public bool CurInternetConnection
    {
      get
      {
        return _curInternetConnection;
      }
      set
      {
        __isset.curInternetConnection = true;
        this._curInternetConnection = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool preLanAdapter;
      public bool curLanAdapter;
      public bool preWlanAdapter;
      public bool curWlanAdapter;
      public bool preInternetConnection;
      public bool curInternetConnection;
    }

    public NetworkConnectionStatus() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                PreLanAdapter = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                CurLanAdapter = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                PreWlanAdapter = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                CurWlanAdapter = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                PreInternetConnection = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                CurInternetConnection = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NetworkConnectionStatus");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.preLanAdapter) {
          field.Name = "preLanAdapter";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PreLanAdapter);
          oprot.WriteFieldEnd();
        }
        if (__isset.curLanAdapter) {
          field.Name = "curLanAdapter";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(CurLanAdapter);
          oprot.WriteFieldEnd();
        }
        if (__isset.preWlanAdapter) {
          field.Name = "preWlanAdapter";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PreWlanAdapter);
          oprot.WriteFieldEnd();
        }
        if (__isset.curWlanAdapter) {
          field.Name = "curWlanAdapter";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(CurWlanAdapter);
          oprot.WriteFieldEnd();
        }
        if (__isset.preInternetConnection) {
          field.Name = "preInternetConnection";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(PreInternetConnection);
          oprot.WriteFieldEnd();
        }
        if (__isset.curInternetConnection) {
          field.Name = "curInternetConnection";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(CurInternetConnection);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NetworkConnectionStatus(");
      bool __first = true;
      if (__isset.preLanAdapter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PreLanAdapter: ");
        __sb.Append(PreLanAdapter);
      }
      if (__isset.curLanAdapter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurLanAdapter: ");
        __sb.Append(CurLanAdapter);
      }
      if (__isset.preWlanAdapter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PreWlanAdapter: ");
        __sb.Append(PreWlanAdapter);
      }
      if (__isset.curWlanAdapter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurWlanAdapter: ");
        __sb.Append(CurWlanAdapter);
      }
      if (__isset.preInternetConnection) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PreInternetConnection: ");
        __sb.Append(PreInternetConnection);
      }
      if (__isset.curInternetConnection) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurInternetConnection: ");
        __sb.Append(CurInternetConnection);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
