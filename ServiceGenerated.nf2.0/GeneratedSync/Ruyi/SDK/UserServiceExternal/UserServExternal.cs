/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.UserServiceExternal
{
  public partial class UserServExternal {
    public interface ISync {
      Ruyi.SDK.UserServiceExternal.UserInfo_Public GetPlayingUserInfo(string appId, string userId);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetPlayingUserInfo(AsyncCallback callback, object state, string appId, string userId);
      Ruyi.SDK.UserServiceExternal.UserInfo_Public End_GetPlayingUserInfo(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetPlayingUserInfo(AsyncCallback callback, object state, string appId, string userId)
      {
        return send_GetPlayingUserInfo(callback, state, appId, userId);
      }

      public Ruyi.SDK.UserServiceExternal.UserInfo_Public End_GetPlayingUserInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetPlayingUserInfo();
      }

      #endif

      public Ruyi.SDK.UserServiceExternal.UserInfo_Public GetPlayingUserInfo(string appId, string userId)
      {
        #if !SILVERLIGHT
        send_GetPlayingUserInfo(appId, userId);
        return recv_GetPlayingUserInfo();

        #else
        var asyncResult = Begin_GetPlayingUserInfo(null, null, appId, userId);
        return End_GetPlayingUserInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetPlayingUserInfo(AsyncCallback callback, object state, string appId, string userId)
      #else
      public void send_GetPlayingUserInfo(string appId, string userId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetPlayingUserInfo", TMessageType.Call, seqid_));
        GetPlayingUserInfo_args args = new GetPlayingUserInfo_args();
        args.AppId = appId;
        args.UserId = userId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Ruyi.SDK.UserServiceExternal.UserInfo_Public recv_GetPlayingUserInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetPlayingUserInfo_result result = new GetPlayingUserInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error1) {
          throw result.Error1;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPlayingUserInfo failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetPlayingUserInfo"] = GetPlayingUserInfo_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetPlayingUserInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetPlayingUserInfo_args args = new GetPlayingUserInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetPlayingUserInfo_result result = new GetPlayingUserInfo_result();
        try
        {
          try
          {
            result.Success = iface_.GetPlayingUserInfo(args.AppId, args.UserId);
          }
          catch (Ruyi.SDK.CommonType.ErrorException error1)
          {
            result.Error1 = error1;
          }
          oprot.WriteMessageBegin(new TMessage("GetPlayingUserInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetPlayingUserInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlayingUserInfo_args : TBase
    {
      private string _appId;
      private string _userId;

      public string AppId
      {
        get
        {
          return _appId;
        }
        set
        {
          __isset.appId = true;
          this._appId = value;
        }
      }

      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool appId;
        public bool userId;
      }

      public GetPlayingUserInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  AppId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlayingUserInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (AppId != null && __isset.appId) {
            field.Name = "appId";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(AppId);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlayingUserInfo_args(");
        bool __first = true;
        if (AppId != null && __isset.appId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AppId: ");
          __sb.Append(AppId);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetPlayingUserInfo_result : TBase
    {
      private Ruyi.SDK.UserServiceExternal.UserInfo_Public _success;
      private Ruyi.SDK.CommonType.ErrorException _error1;

      public Ruyi.SDK.UserServiceExternal.UserInfo_Public Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Ruyi.SDK.CommonType.ErrorException Error1
      {
        get
        {
          return _error1;
        }
        set
        {
          __isset.error1 = true;
          this._error1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error1;
      }

      public GetPlayingUserInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ruyi.SDK.UserServiceExternal.UserInfo_Public();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error1 = new Ruyi.SDK.CommonType.ErrorException();
                  Error1.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetPlayingUserInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error1) {
            if (Error1 != null) {
              field.Name = "Error1";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error1.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetPlayingUserInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error1 != null && __isset.error1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error1: ");
          __sb.Append(Error1== null ? "<null>" : Error1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
