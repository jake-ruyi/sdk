/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.SettingSystem.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SettingTree : TBase
  {
    private CategoryNode _CateNode;
    private Dictionary<string, Ruyi.SDK.CommonType.SettingCategory> _SettingCategories;
    private Dictionary<string, Ruyi.SDK.CommonType.SettingItem> _SettingItems;

    public CategoryNode CateNode
    {
      get
      {
        return _CateNode;
      }
      set
      {
        __isset.CateNode = true;
        this._CateNode = value;
      }
    }

    public Dictionary<string, Ruyi.SDK.CommonType.SettingCategory> SettingCategories
    {
      get
      {
        return _SettingCategories;
      }
      set
      {
        __isset.SettingCategories = true;
        this._SettingCategories = value;
      }
    }

    public Dictionary<string, Ruyi.SDK.CommonType.SettingItem> SettingItems
    {
      get
      {
        return _SettingItems;
      }
      set
      {
        __isset.SettingItems = true;
        this._SettingItems = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool CateNode;
      public bool SettingCategories;
      public bool SettingItems;
    }

    public SettingTree() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                CateNode = new CategoryNode();
                CateNode.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  SettingCategories = new Dictionary<string, Ruyi.SDK.CommonType.SettingCategory>();
                  TMap _map8 = iprot.ReadMapBegin();
                  for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                  {
                    string _key10;
                    Ruyi.SDK.CommonType.SettingCategory _val11;
                    _key10 = iprot.ReadString();
                    _val11 = new Ruyi.SDK.CommonType.SettingCategory();
                    _val11.Read(iprot);
                    SettingCategories[_key10] = _val11;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  SettingItems = new Dictionary<string, Ruyi.SDK.CommonType.SettingItem>();
                  TMap _map12 = iprot.ReadMapBegin();
                  for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                  {
                    string _key14;
                    Ruyi.SDK.CommonType.SettingItem _val15;
                    _key14 = iprot.ReadString();
                    _val15 = new Ruyi.SDK.CommonType.SettingItem();
                    _val15.Read(iprot);
                    SettingItems[_key14] = _val15;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SettingTree");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CateNode != null && __isset.CateNode) {
          field.Name = "CateNode";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          CateNode.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SettingCategories != null && __isset.SettingCategories) {
          field.Name = "SettingCategories";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SettingCategories.Count));
            foreach (string _iter16 in SettingCategories.Keys)
            {
              oprot.WriteString(_iter16);
              SettingCategories[_iter16].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SettingItems != null && __isset.SettingItems) {
          field.Name = "SettingItems";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SettingItems.Count));
            foreach (string _iter17 in SettingItems.Keys)
            {
              oprot.WriteString(_iter17);
              SettingItems[_iter17].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SettingTree(");
      bool __first = true;
      if (CateNode != null && __isset.CateNode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CateNode: ");
        __sb.Append(CateNode== null ? "<null>" : CateNode.ToString());
      }
      if (SettingCategories != null && __isset.SettingCategories) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SettingCategories: ");
        __sb.Append(SettingCategories);
      }
      if (SettingItems != null && __isset.SettingItems) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SettingItems: ");
        __sb.Append(SettingItems);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
