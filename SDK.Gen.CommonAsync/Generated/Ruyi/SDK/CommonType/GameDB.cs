/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  /// <summary>
  /// @GameDB_desc
  /// </summary>
  public partial class GameDB : TBase
  {
    private OverlayGameType _type;
    private int _id;
    private string _name;
    private List<Cond> _conditions;
    private List<Variant> _detection;
    private Runtime _runtime;

    /// <summary>
    /// @GameDB_type_desc
    /// 
    /// <seealso cref="OverlayGameType"/>
    /// </summary>
    public OverlayGameType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// @GameDB_id_desc
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// @GameDB_name_desc
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// @GameDB_conditions_desc
    /// </summary>
    public List<Cond> Conditions
    {
      get
      {
        return _conditions;
      }
      set
      {
        __isset.conditions = true;
        this._conditions = value;
      }
    }

    /// <summary>
    /// @GameDB_detection_desc
    /// </summary>
    public List<Variant> Detection
    {
      get
      {
        return _detection;
      }
      set
      {
        __isset.detection = true;
        this._detection = value;
      }
    }

    /// <summary>
    /// @GameDB_runtime_desc
    /// </summary>
    public Runtime Runtime
    {
      get
      {
        return _runtime;
      }
      set
      {
        __isset.runtime = true;
        this._runtime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool type;
      public bool id;
      public bool name;
      public bool conditions;
      public bool detection;
      public bool runtime;
    }

    public GameDB()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (OverlayGameType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  Conditions = new List<Cond>();
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Cond _elem2;
                    _elem2 = new Cond();
                    await _elem2.ReadAsync(iprot, cancellationToken);
                    Conditions.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  Detection = new List<Variant>();
                  TList _list3 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    Variant _elem5;
                    _elem5 = new Variant();
                    await _elem5.ReadAsync(iprot, cancellationToken);
                    Detection.Add(_elem5);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Runtime = new Runtime();
                await Runtime.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("GameDB");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.type)
        {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.id)
        {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Name != null && __isset.name)
        {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Conditions != null && __isset.conditions)
        {
          field.Name = "conditions";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Conditions.Count), cancellationToken);
            foreach (Cond _iter6 in Conditions)
            {
              await _iter6.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Detection != null && __isset.detection)
        {
          field.Name = "detection";
          field.Type = TType.List;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Detection.Count), cancellationToken);
            foreach (Variant _iter7 in Detection)
            {
              await _iter7.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Runtime != null && __isset.runtime)
        {
          field.Name = "runtime";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Runtime.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("GameDB(");
      bool __first = true;
      if (__isset.type)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Type: ");
        sb.Append(Type);
      }
      if (__isset.id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (Name != null && __isset.name)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Name: ");
        sb.Append(Name);
      }
      if (Conditions != null && __isset.conditions)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Conditions: ");
        sb.Append(Conditions);
      }
      if (Detection != null && __isset.detection)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Detection: ");
        sb.Append(Detection);
      }
      if (Runtime != null && __isset.runtime)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Runtime: ");
        sb.Append(Runtime== null ? "<null>" : Runtime.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
