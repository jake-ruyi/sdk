/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class ModuleSetting : TBase
  {
    private ModuleBaseInfo _baseInfo;
    private List<SettingItem> _settings;
    private List<SettingCategory> _categories;

    public ModuleBaseInfo BaseInfo
    {
      get
      {
        return _baseInfo;
      }
      set
      {
        __isset.baseInfo = true;
        this._baseInfo = value;
      }
    }

    public List<SettingItem> Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }

    public List<SettingCategory> Categories
    {
      get
      {
        return _categories;
      }
      set
      {
        __isset.categories = true;
        this._categories = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool baseInfo;
      public bool settings;
      public bool categories;
    }

    public ModuleSetting()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                BaseInfo = new ModuleBaseInfo();
                await BaseInfo.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  Settings = new List<SettingItem>();
                  TList _list25 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    SettingItem _elem27;
                    _elem27 = new SettingItem();
                    await _elem27.ReadAsync(iprot, cancellationToken);
                    Settings.Add(_elem27);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  Categories = new List<SettingCategory>();
                  TList _list28 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i29 = 0; _i29 < _list28.Count; ++_i29)
                  {
                    SettingCategory _elem30;
                    _elem30 = new SettingCategory();
                    await _elem30.ReadAsync(iprot, cancellationToken);
                    Categories.Add(_elem30);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ModuleSetting");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (BaseInfo != null && __isset.baseInfo)
        {
          field.Name = "baseInfo";
          field.Type = TType.Struct;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await BaseInfo.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Settings != null && __isset.settings)
        {
          field.Name = "settings";
          field.Type = TType.List;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Settings.Count), cancellationToken);
            foreach (SettingItem _iter31 in Settings)
            {
              await _iter31.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Categories != null && __isset.categories)
        {
          field.Name = "categories";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Categories.Count), cancellationToken);
            foreach (SettingCategory _iter32 in Categories)
            {
              await _iter32.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ModuleSetting(");
      bool __first = true;
      if (BaseInfo != null && __isset.baseInfo)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("BaseInfo: ");
        sb.Append(BaseInfo== null ? "<null>" : BaseInfo.ToString());
      }
      if (Settings != null && __isset.settings)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Settings: ");
        sb.Append(Settings);
      }
      if (Categories != null && __isset.categories)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Categories: ");
        sb.Append(Categories);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
