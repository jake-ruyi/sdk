/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class Features : TBase
  {
    private bool _overlay;
    private bool _forcebind;
    private OverlayForceBindAdapter _forcebind_adapter;
    private bool _forcetopmost;
    private bool _opengl_vbo_rendering;
    private bool _opengl_state_hooking;
    private bool _game_window_subclassing;
    private OverlayRenderer _forcerenderer;
    private OverlayRendererHooking _renderer_hooking;
    private OverlayCursor _forcecursor;

    public bool Overlay
    {
      get
      {
        return _overlay;
      }
      set
      {
        __isset.overlay = true;
        this._overlay = value;
      }
    }

    public bool Forcebind
    {
      get
      {
        return _forcebind;
      }
      set
      {
        __isset.forcebind = true;
        this._forcebind = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="OverlayForceBindAdapter"/>
    /// </summary>
    public OverlayForceBindAdapter Forcebind_adapter
    {
      get
      {
        return _forcebind_adapter;
      }
      set
      {
        __isset.forcebind_adapter = true;
        this._forcebind_adapter = value;
      }
    }

    public bool Forcetopmost
    {
      get
      {
        return _forcetopmost;
      }
      set
      {
        __isset.forcetopmost = true;
        this._forcetopmost = value;
      }
    }

    public bool Opengl_vbo_rendering
    {
      get
      {
        return _opengl_vbo_rendering;
      }
      set
      {
        __isset.opengl_vbo_rendering = true;
        this._opengl_vbo_rendering = value;
      }
    }

    public bool Opengl_state_hooking
    {
      get
      {
        return _opengl_state_hooking;
      }
      set
      {
        __isset.opengl_state_hooking = true;
        this._opengl_state_hooking = value;
      }
    }

    public bool Game_window_subclassing
    {
      get
      {
        return _game_window_subclassing;
      }
      set
      {
        __isset.game_window_subclassing = true;
        this._game_window_subclassing = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="OverlayRenderer"/>
    /// </summary>
    public OverlayRenderer Forcerenderer
    {
      get
      {
        return _forcerenderer;
      }
      set
      {
        __isset.forcerenderer = true;
        this._forcerenderer = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="OverlayRendererHooking"/>
    /// </summary>
    public OverlayRendererHooking Renderer_hooking
    {
      get
      {
        return _renderer_hooking;
      }
      set
      {
        __isset.renderer_hooking = true;
        this._renderer_hooking = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="OverlayCursor"/>
    /// </summary>
    public OverlayCursor Forcecursor
    {
      get
      {
        return _forcecursor;
      }
      set
      {
        __isset.forcecursor = true;
        this._forcecursor = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool overlay;
      public bool forcebind;
      public bool forcebind_adapter;
      public bool forcetopmost;
      public bool opengl_vbo_rendering;
      public bool opengl_state_hooking;
      public bool game_window_subclassing;
      public bool forcerenderer;
      public bool renderer_hooking;
      public bool forcecursor;
    }

    public Features()
    {
      this._overlay = true;
      this.__isset.overlay = true;
      this._forcebind = false;
      this.__isset.forcebind = true;
      this._forcetopmost = false;
      this.__isset.forcetopmost = true;
      this._opengl_vbo_rendering = true;
      this.__isset.opengl_vbo_rendering = true;
      this._opengl_state_hooking = true;
      this.__isset.opengl_state_hooking = true;
      this._game_window_subclassing = true;
      this.__isset.game_window_subclassing = true;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                Overlay = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                Forcebind = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Forcebind_adapter = (OverlayForceBindAdapter)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                Forcetopmost = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Bool)
              {
                Opengl_vbo_rendering = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Bool)
              {
                Opengl_state_hooking = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Bool)
              {
                Game_window_subclassing = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Forcerenderer = (OverlayRenderer)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                Renderer_hooking = (OverlayRendererHooking)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I32)
              {
                Forcecursor = (OverlayCursor)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Features");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.overlay)
        {
          field.Name = "overlay";
          field.Type = TType.Bool;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Overlay, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.forcebind)
        {
          field.Name = "forcebind";
          field.Type = TType.Bool;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Forcebind, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.forcebind_adapter)
        {
          field.Name = "forcebind_adapter";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Forcebind_adapter, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.forcetopmost)
        {
          field.Name = "forcetopmost";
          field.Type = TType.Bool;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Forcetopmost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.opengl_vbo_rendering)
        {
          field.Name = "opengl_vbo_rendering";
          field.Type = TType.Bool;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Opengl_vbo_rendering, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.opengl_state_hooking)
        {
          field.Name = "opengl_state_hooking";
          field.Type = TType.Bool;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Opengl_state_hooking, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.game_window_subclassing)
        {
          field.Name = "game_window_subclassing";
          field.Type = TType.Bool;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBoolAsync(Game_window_subclassing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.forcerenderer)
        {
          field.Name = "forcerenderer";
          field.Type = TType.I32;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Forcerenderer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.renderer_hooking)
        {
          field.Name = "renderer_hooking";
          field.Type = TType.I32;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Renderer_hooking, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.forcecursor)
        {
          field.Name = "forcecursor";
          field.Type = TType.I32;
          field.ID = 10;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Forcecursor, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Features(");
      bool __first = true;
      if (__isset.overlay)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Overlay: ");
        sb.Append(Overlay);
      }
      if (__isset.forcebind)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Forcebind: ");
        sb.Append(Forcebind);
      }
      if (__isset.forcebind_adapter)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Forcebind_adapter: ");
        sb.Append(Forcebind_adapter);
      }
      if (__isset.forcetopmost)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Forcetopmost: ");
        sb.Append(Forcetopmost);
      }
      if (__isset.opengl_vbo_rendering)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Opengl_vbo_rendering: ");
        sb.Append(Opengl_vbo_rendering);
      }
      if (__isset.opengl_state_hooking)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Opengl_state_hooking: ");
        sb.Append(Opengl_state_hooking);
      }
      if (__isset.game_window_subclassing)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Game_window_subclassing: ");
        sb.Append(Game_window_subclassing);
      }
      if (__isset.forcerenderer)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Forcerenderer: ");
        sb.Append(Forcerenderer);
      }
      if (__isset.renderer_hooking)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Renderer_hooking: ");
        sb.Append(Renderer_hooking);
      }
      if (__isset.forcecursor)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Forcecursor: ");
        sb.Append(Forcecursor);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
