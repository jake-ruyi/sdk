/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class AppBaseInfo : TBase
  {
    private string _appId;
    private string _name;
    private string _icon;
    private string _description;
    private List<string> _properties;
    private List<string> _platform;
    private int _size;
    private List<string> _languages;

    public string AppId
    {
      get
      {
        return _appId;
      }
      set
      {
        __isset.appId = true;
        this._appId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public List<string> Properties
    {
      get
      {
        return _properties;
      }
      set
      {
        __isset.properties = true;
        this._properties = value;
      }
    }

    public List<string> Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        this._platform = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public List<string> Languages
    {
      get
      {
        return _languages;
      }
      set
      {
        __isset.languages = true;
        this._languages = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool appId;
      public bool name;
      public bool icon;
      public bool description;
      public bool properties;
      public bool platform;
      public bool size;
      public bool languages;
    }

    public AppBaseInfo()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                AppId = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Icon = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  Properties = new List<string>();
                  TList _list41 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    string _elem43;
                    _elem43 = await iprot.ReadStringAsync(cancellationToken);
                    Properties.Add(_elem43);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.List)
              {
                {
                  Platform = new List<string>();
                  TList _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                  {
                    string _elem46;
                    _elem46 = await iprot.ReadStringAsync(cancellationToken);
                    Platform.Add(_elem46);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Size = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.List)
              {
                {
                  Languages = new List<string>();
                  TList _list47 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i48 = 0; _i48 < _list47.Count; ++_i48)
                  {
                    string _elem49;
                    _elem49 = await iprot.ReadStringAsync(cancellationToken);
                    Languages.Add(_elem49);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AppBaseInfo");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (AppId != null && __isset.appId)
        {
          field.Name = "appId";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(AppId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Name != null && __isset.name)
        {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Icon != null && __isset.icon)
        {
          field.Name = "icon";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Icon, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Description != null && __isset.description)
        {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Properties != null && __isset.properties)
        {
          field.Name = "properties";
          field.Type = TType.List;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Properties.Count), cancellationToken);
            foreach (string _iter50 in Properties)
            {
              await oprot.WriteStringAsync(_iter50, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Platform != null && __isset.platform)
        {
          field.Name = "platform";
          field.Type = TType.List;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Platform.Count), cancellationToken);
            foreach (string _iter51 in Platform)
            {
              await oprot.WriteStringAsync(_iter51, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.size)
        {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Size, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Languages != null && __isset.languages)
        {
          field.Name = "languages";
          field.Type = TType.List;
          field.ID = 8;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Languages.Count), cancellationToken);
            foreach (string _iter52 in Languages)
            {
              await oprot.WriteStringAsync(_iter52, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AppBaseInfo(");
      bool __first = true;
      if (AppId != null && __isset.appId)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AppId: ");
        sb.Append(AppId);
      }
      if (Name != null && __isset.name)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Name: ");
        sb.Append(Name);
      }
      if (Icon != null && __isset.icon)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Icon: ");
        sb.Append(Icon);
      }
      if (Description != null && __isset.description)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Description: ");
        sb.Append(Description);
      }
      if (Properties != null && __isset.properties)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Properties: ");
        sb.Append(Properties);
      }
      if (Platform != null && __isset.platform)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Platform: ");
        sb.Append(Platform);
      }
      if (__isset.size)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Size: ");
        sb.Append(Size);
      }
      if (Languages != null && __isset.languages)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Languages: ");
        sb.Append(Languages);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
