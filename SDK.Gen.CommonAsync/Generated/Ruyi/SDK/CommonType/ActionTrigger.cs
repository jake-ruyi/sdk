/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace Ruyi.SDK.CommonType
{

  public partial class ActionTrigger : TBase
  {
    private int _Id;
    private InputCategory _InputCagetory;
    private List<int> _TriggerButtons;
    private List<int> _TriggerValue;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="InputCategory"/>
    /// </summary>
    public InputCategory InputCagetory
    {
      get
      {
        return _InputCagetory;
      }
      set
      {
        __isset.InputCagetory = true;
        this._InputCagetory = value;
      }
    }

    public List<int> TriggerButtons
    {
      get
      {
        return _TriggerButtons;
      }
      set
      {
        __isset.TriggerButtons = true;
        this._TriggerButtons = value;
      }
    }

    public List<int> TriggerValue
    {
      get
      {
        return _TriggerValue;
      }
      set
      {
        __isset.TriggerValue = true;
        this._TriggerValue = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Id;
      public bool InputCagetory;
      public bool TriggerButtons;
      public bool TriggerValue;
    }

    public ActionTrigger()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                InputCagetory = (InputCategory)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TriggerButtons = new List<int>();
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2;
                    _elem2 = await iprot.ReadI32Async(cancellationToken);
                    TriggerButtons.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  TriggerValue = new List<int>();
                  TList _list3 = await iprot.ReadListBeginAsync(cancellationToken);
                  for(int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    int _elem5;
                    _elem5 = await iprot.ReadI32Async(cancellationToken);
                    TriggerValue.Add(_elem5);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ActionTrigger");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.Id)
        {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.InputCagetory)
        {
          field.Name = "InputCagetory";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)InputCagetory, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TriggerButtons != null && __isset.TriggerButtons)
        {
          field.Name = "TriggerButtons";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, TriggerButtons.Count), cancellationToken);
            foreach (int _iter6 in TriggerButtons)
            {
              await oprot.WriteI32Async(_iter6, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (TriggerValue != null && __isset.TriggerValue)
        {
          field.Name = "TriggerValue";
          field.Type = TType.List;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I32, TriggerValue.Count), cancellationToken);
            foreach (int _iter7 in TriggerValue)
            {
              await oprot.WriteI32Async(_iter7, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ActionTrigger(");
      bool __first = true;
      if (__isset.Id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.InputCagetory)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("InputCagetory: ");
        sb.Append(InputCagetory);
      }
      if (TriggerButtons != null && __isset.TriggerButtons)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TriggerButtons: ");
        sb.Append(TriggerButtons);
      }
      if (TriggerValue != null && __isset.TriggerValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("TriggerValue: ");
        sb.Append(TriggerValue);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
