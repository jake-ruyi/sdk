/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Ruyi.SDK.CommonType
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PopupNotification : TBase
  {
    private NotificationType _NotificationType;
    private string _MainIcon;
    private string _Text;
    private string _Description;

    /// <summary>
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType NotificationType
    {
      get
      {
        return _NotificationType;
      }
      set
      {
        __isset.NotificationType = true;
        this._NotificationType = value;
      }
    }

    public string MainIcon
    {
      get
      {
        return _MainIcon;
      }
      set
      {
        __isset.MainIcon = true;
        this._MainIcon = value;
      }
    }

    public string Text
    {
      get
      {
        return _Text;
      }
      set
      {
        __isset.Text = true;
        this._Text = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool NotificationType;
      public bool MainIcon;
      public bool Text;
      public bool Description;
    }

    public PopupNotification() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                NotificationType = (NotificationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MainIcon = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PopupNotification");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.NotificationType) {
          field.Name = "NotificationType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)NotificationType);
          oprot.WriteFieldEnd();
        }
        if (MainIcon != null && __isset.MainIcon) {
          field.Name = "MainIcon";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MainIcon);
          oprot.WriteFieldEnd();
        }
        if (Text != null && __isset.Text) {
          field.Name = "Text";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PopupNotification(");
      bool __first = true;
      if (__isset.NotificationType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotificationType: ");
        __sb.Append(NotificationType);
      }
      if (MainIcon != null && __isset.MainIcon) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MainIcon: ");
        __sb.Append(MainIcon);
      }
      if (Text != null && __isset.Text) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Text: ");
        __sb.Append(Text);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
