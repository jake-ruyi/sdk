/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LocalizationServiceSDKDataTypes_TYPES_H
#define LocalizationServiceSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace Ruyi { namespace SDK { namespace LocalizationService {

class LanguageChangedMsg;

typedef struct _LanguageChangedMsg__isset {
  _LanguageChangedMsg__isset() : newLanguage(false), oldLanguage(false) {}
  bool newLanguage :1;
  bool oldLanguage :1;
} _LanguageChangedMsg__isset;

class LanguageChangedMsg : public virtual ::apache::thrift::TBase {
 public:

  LanguageChangedMsg(const LanguageChangedMsg&);
  LanguageChangedMsg& operator=(const LanguageChangedMsg&);
  LanguageChangedMsg() : newLanguage(), oldLanguage() {
  }

  virtual ~LanguageChangedMsg() throw();
  std::string newLanguage;
  std::string oldLanguage;

  _LanguageChangedMsg__isset __isset;

  void __set_newLanguage(const std::string& val);

  void __set_oldLanguage(const std::string& val);

  bool operator == (const LanguageChangedMsg & rhs) const
  {
    if (!(newLanguage == rhs.newLanguage))
      return false;
    if (!(oldLanguage == rhs.oldLanguage))
      return false;
    return true;
  }
  bool operator != (const LanguageChangedMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LanguageChangedMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LanguageChangedMsg &a, LanguageChangedMsg &b);

std::ostream& operator<<(std::ostream& out, const LanguageChangedMsg& obj);

}}} // namespace

#endif
