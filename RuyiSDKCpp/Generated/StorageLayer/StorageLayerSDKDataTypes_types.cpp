/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "StorageLayerSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace StorageLayer {


GetLocalPathResult::~GetLocalPathResult() throw() {
}


void GetLocalPathResult::__set_result(const bool val) {
  this->result = val;
}

void GetLocalPathResult::__set_path(const std::string& val) {
  this->path = val;
}
std::ostream& operator<<(std::ostream& out, const GetLocalPathResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetLocalPathResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetLocalPathResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetLocalPathResult");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetLocalPathResult &a, GetLocalPathResult &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.path, b.path);
  swap(a.__isset, b.__isset);
}

GetLocalPathResult::GetLocalPathResult(const GetLocalPathResult& other0) {
  result = other0.result;
  path = other0.path;
  __isset = other0.__isset;
}
GetLocalPathResult& GetLocalPathResult::operator=(const GetLocalPathResult& other1) {
  result = other1.result;
  path = other1.path;
  __isset = other1.__isset;
  return *this;
}
void GetLocalPathResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetLocalPathResult(";
  out << "result=" << to_string(result);
  out << ", " << "path=" << to_string(path);
  out << ")";
}

}}} // namespace
