/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "InputManagerService.h"

namespace Ruyi { namespace SDK { namespace InputManager {


InputManagerService_GetConnectedGamepads_args::~InputManagerService_GetConnectedGamepads_args() throw() {
}


uint32_t InputManagerService_GetConnectedGamepads_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_GetConnectedGamepads_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_GetConnectedGamepads_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_GetConnectedGamepads_pargs::~InputManagerService_GetConnectedGamepads_pargs() throw() {
}


uint32_t InputManagerService_GetConnectedGamepads_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_GetConnectedGamepads_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_GetConnectedGamepads_result::~InputManagerService_GetConnectedGamepads_result() throw() {
}


uint32_t InputManagerService_GetConnectedGamepads_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->success.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->success[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_GetConnectedGamepads_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("InputManagerService_GetConnectedGamepads_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector< ::Ruyi::SDK::InputManager::GamepadInfo> ::const_iterator _iter5;
      for (_iter5 = this->success.begin(); _iter5 != this->success.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_GetConnectedGamepads_presult::~InputManagerService_GetConnectedGamepads_presult() throw() {
}


uint32_t InputManagerService_GetConnectedGamepads_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            (*(this->success)).resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += (*(this->success))[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


InputManagerService_SetGamepadVibration_args::~InputManagerService_SetGamepadVibration_args() throw() {
}


uint32_t InputManagerService_SetGamepadVibration_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor1Value);
          this->__isset.motor1Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor1Time);
          this->__isset.motor1Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor2Value);
          this->__isset.motor2Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor2Time);
          this->__isset.motor2Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetGamepadVibration_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadVibration_args");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Value", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->motor1Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Time", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->motor1Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->motor2Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Time", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->motor2Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadVibration_pargs::~InputManagerService_SetGamepadVibration_pargs() throw() {
}


uint32_t InputManagerService_SetGamepadVibration_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadVibration_pargs");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->deviceId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Value", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte((*(this->motor1Value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Time", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->motor1Time)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->motor2Value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Time", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte((*(this->motor2Time)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadVibration_result::~InputManagerService_SetGamepadVibration_result() throw() {
}


uint32_t InputManagerService_SetGamepadVibration_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetGamepadVibration_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadVibration_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadVibration_presult::~InputManagerService_SetGamepadVibration_presult() throw() {
}


uint32_t InputManagerService_SetGamepadVibration_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


InputManagerService_SetGamepadLight_args::~InputManagerService_SetGamepadLight_args() throw() {
}


uint32_t InputManagerService_SetGamepadLight_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->RValue);
          this->__isset.RValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->GValue);
          this->__isset.GValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->BValue);
          this->__isset.BValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetGamepadLight_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadLight_args");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RValue", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->RValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GValue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->GValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BValue", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->BValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadLight_pargs::~InputManagerService_SetGamepadLight_pargs() throw() {
}


uint32_t InputManagerService_SetGamepadLight_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadLight_pargs");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->deviceId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RValue", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte((*(this->RValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GValue", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->GValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BValue", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->BValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadLight_result::~InputManagerService_SetGamepadLight_result() throw() {
}


uint32_t InputManagerService_SetGamepadLight_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetGamepadLight_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("InputManagerService_SetGamepadLight_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetGamepadLight_presult::~InputManagerService_SetGamepadLight_presult() throw() {
}


uint32_t InputManagerService_SetGamepadLight_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


InputManagerService_SetRuyiControllerStatus_args::~InputManagerService_SetRuyiControllerStatus_args() throw() {
}


uint32_t InputManagerService_SetRuyiControllerStatus_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->channel);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableR);
          this->__isset.enableR = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableG);
          this->__isset.enableG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableB);
          this->__isset.enableB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableMotor1);
          this->__isset.enableMotor1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enableMotor2);
          this->__isset.enableMotor2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->shutdown);
          this->__isset.shutdown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->RValue);
          this->__isset.RValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->GValue);
          this->__isset.GValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->BValue);
          this->__isset.BValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor1Value);
          this->__isset.motor1Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor1Time);
          this->__isset.motor1Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor2Value);
          this->__isset.motor2Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->motor2Time);
          this->__isset.motor2Time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetRuyiControllerStatus_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetRuyiControllerStatus_args");

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->channel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableR", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->enableR);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableG", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->enableG);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableB", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enableB);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableMotor1", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enableMotor1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableMotor2", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enableMotor2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shutdown", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->shutdown);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RValue", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte(this->RValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GValue", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte(this->GValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BValue", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte(this->BValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Value", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte(this->motor1Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Time", ::apache::thrift::protocol::T_BYTE, 12);
  xfer += oprot->writeByte(this->motor1Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Value", ::apache::thrift::protocol::T_BYTE, 13);
  xfer += oprot->writeByte(this->motor2Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Time", ::apache::thrift::protocol::T_BYTE, 14);
  xfer += oprot->writeByte(this->motor2Time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetRuyiControllerStatus_pargs::~InputManagerService_SetRuyiControllerStatus_pargs() throw() {
}


uint32_t InputManagerService_SetRuyiControllerStatus_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputManagerService_SetRuyiControllerStatus_pargs");

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte((*(this->channel)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableR", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool((*(this->enableR)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableG", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool((*(this->enableG)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableB", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool((*(this->enableB)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableMotor1", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool((*(this->enableMotor1)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enableMotor2", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool((*(this->enableMotor2)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shutdown", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool((*(this->shutdown)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RValue", ::apache::thrift::protocol::T_BYTE, 8);
  xfer += oprot->writeByte((*(this->RValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("GValue", ::apache::thrift::protocol::T_BYTE, 9);
  xfer += oprot->writeByte((*(this->GValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("BValue", ::apache::thrift::protocol::T_BYTE, 10);
  xfer += oprot->writeByte((*(this->BValue)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Value", ::apache::thrift::protocol::T_BYTE, 11);
  xfer += oprot->writeByte((*(this->motor1Value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor1Time", ::apache::thrift::protocol::T_BYTE, 12);
  xfer += oprot->writeByte((*(this->motor1Time)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Value", ::apache::thrift::protocol::T_BYTE, 13);
  xfer += oprot->writeByte((*(this->motor2Value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("motor2Time", ::apache::thrift::protocol::T_BYTE, 14);
  xfer += oprot->writeByte((*(this->motor2Time)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetRuyiControllerStatus_result::~InputManagerService_SetRuyiControllerStatus_result() throw() {
}


uint32_t InputManagerService_SetRuyiControllerStatus_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputManagerService_SetRuyiControllerStatus_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("InputManagerService_SetRuyiControllerStatus_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


InputManagerService_SetRuyiControllerStatus_presult::~InputManagerService_SetRuyiControllerStatus_presult() throw() {
}


uint32_t InputManagerService_SetRuyiControllerStatus_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void InputManagerServiceClient::GetConnectedGamepads(std::vector< ::Ruyi::SDK::InputManager::GamepadInfo> & _return)
{
  send_GetConnectedGamepads();
  recv_GetConnectedGamepads(_return);
}

void InputManagerServiceClient::send_GetConnectedGamepads()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("GetConnectedGamepads", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_GetConnectedGamepads_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void InputManagerServiceClient::recv_GetConnectedGamepads(std::vector< ::Ruyi::SDK::InputManager::GamepadInfo> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("GetConnectedGamepads") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  InputManagerService_GetConnectedGamepads_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "GetConnectedGamepads failed: unknown result");
}

bool InputManagerServiceClient::SetGamepadVibration(const std::string& deviceId, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  send_SetGamepadVibration(deviceId, motor1Value, motor1Time, motor2Value, motor2Time);
  return recv_SetGamepadVibration();
}

void InputManagerServiceClient::send_SetGamepadVibration(const std::string& deviceId, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("SetGamepadVibration", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetGamepadVibration_pargs args;
  args.deviceId = &deviceId;
  args.motor1Value = &motor1Value;
  args.motor1Time = &motor1Time;
  args.motor2Value = &motor2Value;
  args.motor2Time = &motor2Time;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool InputManagerServiceClient::recv_SetGamepadVibration()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("SetGamepadVibration") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  InputManagerService_SetGamepadVibration_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetGamepadVibration failed: unknown result");
}

bool InputManagerServiceClient::SetGamepadLight(const std::string& deviceId, const int8_t RValue, const int8_t GValue, const int8_t BValue)
{
  send_SetGamepadLight(deviceId, RValue, GValue, BValue);
  return recv_SetGamepadLight();
}

void InputManagerServiceClient::send_SetGamepadLight(const std::string& deviceId, const int8_t RValue, const int8_t GValue, const int8_t BValue)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("SetGamepadLight", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetGamepadLight_pargs args;
  args.deviceId = &deviceId;
  args.RValue = &RValue;
  args.GValue = &GValue;
  args.BValue = &BValue;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool InputManagerServiceClient::recv_SetGamepadLight()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("SetGamepadLight") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  InputManagerService_SetGamepadLight_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetGamepadLight failed: unknown result");
}

bool InputManagerServiceClient::SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  send_SetRuyiControllerStatus(channel, enableR, enableG, enableB, enableMotor1, enableMotor2, shutdown, RValue, GValue, BValue, motor1Value, motor1Time, motor2Value, motor2Time);
  return recv_SetRuyiControllerStatus();
}

void InputManagerServiceClient::send_SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("SetRuyiControllerStatus", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetRuyiControllerStatus_pargs args;
  args.channel = &channel;
  args.enableR = &enableR;
  args.enableG = &enableG;
  args.enableB = &enableB;
  args.enableMotor1 = &enableMotor1;
  args.enableMotor2 = &enableMotor2;
  args.shutdown = &shutdown;
  args.RValue = &RValue;
  args.GValue = &GValue;
  args.BValue = &BValue;
  args.motor1Value = &motor1Value;
  args.motor1Time = &motor1Time;
  args.motor2Value = &motor2Value;
  args.motor2Time = &motor2Time;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool InputManagerServiceClient::recv_SetRuyiControllerStatus()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("SetRuyiControllerStatus") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  InputManagerService_SetRuyiControllerStatus_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetRuyiControllerStatus failed: unknown result");
}

bool InputManagerServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void InputManagerServiceProcessor::process_GetConnectedGamepads(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("InputManagerService.GetConnectedGamepads", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "InputManagerService.GetConnectedGamepads");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "InputManagerService.GetConnectedGamepads");
  }

  InputManagerService_GetConnectedGamepads_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "InputManagerService.GetConnectedGamepads", bytes);
  }

  InputManagerService_GetConnectedGamepads_result result;
  try {
    iface_->GetConnectedGamepads(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "InputManagerService.GetConnectedGamepads");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("GetConnectedGamepads", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "InputManagerService.GetConnectedGamepads");
  }

  oprot->writeMessageBegin("GetConnectedGamepads", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "InputManagerService.GetConnectedGamepads", bytes);
  }
}

void InputManagerServiceProcessor::process_SetGamepadVibration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("InputManagerService.SetGamepadVibration", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "InputManagerService.SetGamepadVibration");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "InputManagerService.SetGamepadVibration");
  }

  InputManagerService_SetGamepadVibration_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "InputManagerService.SetGamepadVibration", bytes);
  }

  InputManagerService_SetGamepadVibration_result result;
  try {
    result.success = iface_->SetGamepadVibration(args.deviceId, args.motor1Value, args.motor1Time, args.motor2Value, args.motor2Time);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "InputManagerService.SetGamepadVibration");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("SetGamepadVibration", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "InputManagerService.SetGamepadVibration");
  }

  oprot->writeMessageBegin("SetGamepadVibration", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "InputManagerService.SetGamepadVibration", bytes);
  }
}

void InputManagerServiceProcessor::process_SetGamepadLight(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("InputManagerService.SetGamepadLight", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "InputManagerService.SetGamepadLight");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "InputManagerService.SetGamepadLight");
  }

  InputManagerService_SetGamepadLight_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "InputManagerService.SetGamepadLight", bytes);
  }

  InputManagerService_SetGamepadLight_result result;
  try {
    result.success = iface_->SetGamepadLight(args.deviceId, args.RValue, args.GValue, args.BValue);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "InputManagerService.SetGamepadLight");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("SetGamepadLight", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "InputManagerService.SetGamepadLight");
  }

  oprot->writeMessageBegin("SetGamepadLight", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "InputManagerService.SetGamepadLight", bytes);
  }
}

void InputManagerServiceProcessor::process_SetRuyiControllerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("InputManagerService.SetRuyiControllerStatus", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "InputManagerService.SetRuyiControllerStatus");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "InputManagerService.SetRuyiControllerStatus");
  }

  InputManagerService_SetRuyiControllerStatus_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "InputManagerService.SetRuyiControllerStatus", bytes);
  }

  InputManagerService_SetRuyiControllerStatus_result result;
  try {
    result.success = iface_->SetRuyiControllerStatus(args.channel, args.enableR, args.enableG, args.enableB, args.enableMotor1, args.enableMotor2, args.shutdown, args.RValue, args.GValue, args.BValue, args.motor1Value, args.motor1Time, args.motor2Value, args.motor2Time);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "InputManagerService.SetRuyiControllerStatus");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("SetRuyiControllerStatus", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "InputManagerService.SetRuyiControllerStatus");
  }

  oprot->writeMessageBegin("SetRuyiControllerStatus", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "InputManagerService.SetRuyiControllerStatus", bytes);
  }
}

::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > InputManagerServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< InputManagerServiceIfFactory > cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr< InputManagerServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > processor(new InputManagerServiceProcessor(handler));
  return processor;
}

void InputManagerServiceConcurrentClient::GetConnectedGamepads(std::vector< ::Ruyi::SDK::InputManager::GamepadInfo> & _return)
{
  int32_t seqid = send_GetConnectedGamepads();
  recv_GetConnectedGamepads(_return, seqid);
}

int32_t InputManagerServiceConcurrentClient::send_GetConnectedGamepads()
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("GetConnectedGamepads", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_GetConnectedGamepads_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

void InputManagerServiceConcurrentClient::recv_GetConnectedGamepads(std::vector< ::Ruyi::SDK::InputManager::GamepadInfo> & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("GetConnectedGamepads") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      InputManagerService_GetConnectedGamepads_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "GetConnectedGamepads failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

bool InputManagerServiceConcurrentClient::SetGamepadVibration(const std::string& deviceId, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t seqid = send_SetGamepadVibration(deviceId, motor1Value, motor1Time, motor2Value, motor2Time);
  return recv_SetGamepadVibration(seqid);
}

int32_t InputManagerServiceConcurrentClient::send_SetGamepadVibration(const std::string& deviceId, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("SetGamepadVibration", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetGamepadVibration_pargs args;
  args.deviceId = &deviceId;
  args.motor1Value = &motor1Value;
  args.motor1Time = &motor1Time;
  args.motor2Value = &motor2Value;
  args.motor2Time = &motor2Time;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

bool InputManagerServiceConcurrentClient::recv_SetGamepadVibration(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("SetGamepadVibration") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      bool _return;
      InputManagerService_SetGamepadVibration_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetGamepadVibration failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

bool InputManagerServiceConcurrentClient::SetGamepadLight(const std::string& deviceId, const int8_t RValue, const int8_t GValue, const int8_t BValue)
{
  int32_t seqid = send_SetGamepadLight(deviceId, RValue, GValue, BValue);
  return recv_SetGamepadLight(seqid);
}

int32_t InputManagerServiceConcurrentClient::send_SetGamepadLight(const std::string& deviceId, const int8_t RValue, const int8_t GValue, const int8_t BValue)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("SetGamepadLight", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetGamepadLight_pargs args;
  args.deviceId = &deviceId;
  args.RValue = &RValue;
  args.GValue = &GValue;
  args.BValue = &BValue;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

bool InputManagerServiceConcurrentClient::recv_SetGamepadLight(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("SetGamepadLight") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      bool _return;
      InputManagerService_SetGamepadLight_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetGamepadLight failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

bool InputManagerServiceConcurrentClient::SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t seqid = send_SetRuyiControllerStatus(channel, enableR, enableG, enableB, enableMotor1, enableMotor2, shutdown, RValue, GValue, BValue, motor1Value, motor1Time, motor2Value, motor2Time);
  return recv_SetRuyiControllerStatus(seqid);
}

int32_t InputManagerServiceConcurrentClient::send_SetRuyiControllerStatus(const int8_t channel, const bool enableR, const bool enableG, const bool enableB, const bool enableMotor1, const bool enableMotor2, const bool shutdown, const int8_t RValue, const int8_t GValue, const int8_t BValue, const int8_t motor1Value, const int8_t motor1Time, const int8_t motor2Value, const int8_t motor2Time)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("SetRuyiControllerStatus", ::apache::thrift::protocol::T_CALL, cseqid);

  InputManagerService_SetRuyiControllerStatus_pargs args;
  args.channel = &channel;
  args.enableR = &enableR;
  args.enableG = &enableG;
  args.enableB = &enableB;
  args.enableMotor1 = &enableMotor1;
  args.enableMotor2 = &enableMotor2;
  args.shutdown = &shutdown;
  args.RValue = &RValue;
  args.GValue = &GValue;
  args.BValue = &BValue;
  args.motor1Value = &motor1Value;
  args.motor1Time = &motor1Time;
  args.motor2Value = &motor2Value;
  args.motor2Time = &motor2Time;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

bool InputManagerServiceConcurrentClient::recv_SetRuyiControllerStatus(const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(iprot_);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();
      }
      if (fname.compare("SetRuyiControllerStatus") != 0) {
        iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        iprot_->readMessageEnd();
        iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      bool _return;
      InputManagerService_SetRuyiControllerStatus_presult result;
      result.success = &_return;
      result.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "SetRuyiControllerStatus failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

}}} // namespace

