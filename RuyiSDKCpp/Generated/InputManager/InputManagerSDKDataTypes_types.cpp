/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "InputManagerSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace InputManager {

int _kKeyValues[] = {
  Key::Unknown,
  Key::Escape,
  Key::D1,
  Key::D2,
  Key::D3,
  Key::D4,
  Key::D5,
  Key::D6,
  Key::D7,
  Key::D8,
  Key::D9,
  Key::D0,
  Key::Minus,
  Key::Equals,
  Key::Back,
  Key::Tab,
  Key::Q,
  Key::W,
  Key::E,
  Key::R,
  Key::T,
  Key::Y,
  Key::U,
  Key::I,
  Key::O,
  Key::P,
  Key::LeftBracket,
  Key::RightBracket,
  Key::Return,
  Key::LeftControl,
  Key::A,
  Key::S,
  Key::D,
  Key::F,
  Key::G,
  Key::H,
  Key::J,
  Key::K,
  Key::L,
  Key::Semicolon,
  Key::Apostrophe,
  Key::Grave,
  Key::LeftShift,
  Key::Backslash,
  Key::Z,
  Key::X,
  Key::C,
  Key::V,
  Key::B,
  Key::N,
  Key::M,
  Key::Comma,
  Key::Period,
  Key::Slash,
  Key::RightShift,
  Key::Multiply,
  Key::LeftAlt,
  Key::Space,
  Key::Capital,
  Key::F1,
  Key::F2,
  Key::F3,
  Key::F4,
  Key::F5,
  Key::F6,
  Key::F7,
  Key::F8,
  Key::F9,
  Key::F10,
  Key::NumberLock,
  Key::ScrollLock,
  Key::NumberPad7,
  Key::NumberPad8,
  Key::NumberPad9,
  Key::Subtract,
  Key::NumberPad4,
  Key::NumberPad5,
  Key::NumberPad6,
  Key::Add,
  Key::NumberPad1,
  Key::NumberPad2,
  Key::NumberPad3,
  Key::NumberPad0,
  Key::Decimal,
  Key::Oem102,
  Key::F11,
  Key::F12,
  Key::F13,
  Key::F14,
  Key::F15,
  Key::Kana,
  Key::AbntC1,
  Key::Convert,
  Key::NoConvert,
  Key::Yen,
  Key::AbntC2,
  Key::NumberPadEquals,
  Key::PreviousTrack,
  Key::AT,
  Key::Colon,
  Key::Underline,
  Key::Kanji,
  Key::Stop,
  Key::AX,
  Key::Unlabeled,
  Key::NextTrack,
  Key::NumberPadEnter,
  Key::RightControl,
  Key::Mute,
  Key::Calculator,
  Key::PlayPause,
  Key::MediaStop,
  Key::VolumeDown,
  Key::VolumeUp,
  Key::WebHome,
  Key::NumberPadComma,
  Key::Divide,
  Key::PrintScreen,
  Key::RightAlt,
  Key::Pause,
  Key::Home,
  Key::Up,
  Key::PageUp,
  Key::Left,
  Key::Right,
  Key::End,
  Key::Down,
  Key::PageDown,
  Key::Insert,
  Key::Delete,
  Key::LeftWindowsKey,
  Key::RightWindowsKey,
  Key::Applications,
  Key::Power,
  Key::Sleep,
  Key::Wake,
  Key::WebSearch,
  Key::WebFavorites,
  Key::WebRefresh,
  Key::WebStop,
  Key::WebForward,
  Key::WebBack,
  Key::MyComputer,
  Key::Mail,
  Key::MediaSelect
};
const char* _kKeyNames[] = {
  "Unknown",
  "Escape",
  "D1",
  "D2",
  "D3",
  "D4",
  "D5",
  "D6",
  "D7",
  "D8",
  "D9",
  "D0",
  "Minus",
  "Equals",
  "Back",
  "Tab",
  "Q",
  "W",
  "E",
  "R",
  "T",
  "Y",
  "U",
  "I",
  "O",
  "P",
  "LeftBracket",
  "RightBracket",
  "Return",
  "LeftControl",
  "A",
  "S",
  "D",
  "F",
  "G",
  "H",
  "J",
  "K",
  "L",
  "Semicolon",
  "Apostrophe",
  "Grave",
  "LeftShift",
  "Backslash",
  "Z",
  "X",
  "C",
  "V",
  "B",
  "N",
  "M",
  "Comma",
  "Period",
  "Slash",
  "RightShift",
  "Multiply",
  "LeftAlt",
  "Space",
  "Capital",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "NumberLock",
  "ScrollLock",
  "NumberPad7",
  "NumberPad8",
  "NumberPad9",
  "Subtract",
  "NumberPad4",
  "NumberPad5",
  "NumberPad6",
  "Add",
  "NumberPad1",
  "NumberPad2",
  "NumberPad3",
  "NumberPad0",
  "Decimal",
  "Oem102",
  "F11",
  "F12",
  "F13",
  "F14",
  "F15",
  "Kana",
  "AbntC1",
  "Convert",
  "NoConvert",
  "Yen",
  "AbntC2",
  "NumberPadEquals",
  "PreviousTrack",
  "AT",
  "Colon",
  "Underline",
  "Kanji",
  "Stop",
  "AX",
  "Unlabeled",
  "NextTrack",
  "NumberPadEnter",
  "RightControl",
  "Mute",
  "Calculator",
  "PlayPause",
  "MediaStop",
  "VolumeDown",
  "VolumeUp",
  "WebHome",
  "NumberPadComma",
  "Divide",
  "PrintScreen",
  "RightAlt",
  "Pause",
  "Home",
  "Up",
  "PageUp",
  "Left",
  "Right",
  "End",
  "Down",
  "PageDown",
  "Insert",
  "Delete",
  "LeftWindowsKey",
  "RightWindowsKey",
  "Applications",
  "Power",
  "Sleep",
  "Wake",
  "WebSearch",
  "WebFavorites",
  "WebRefresh",
  "WebStop",
  "WebForward",
  "WebBack",
  "MyComputer",
  "Mail",
  "MediaSelect"
};
const std::map<int, const char*> _Key_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(145, _kKeyValues, _kKeyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Key::type& val) {
  std::map<int, const char*>::const_iterator it = _Key_VALUES_TO_NAMES.find(val);
  if (it != _Key_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kMouseOffsetValues[] = {
  MouseOffset::X,
  MouseOffset::Y,
  MouseOffset::Z,
  MouseOffset::Buttons0,
  MouseOffset::Buttons1,
  MouseOffset::Buttons2,
  MouseOffset::Buttons3,
  MouseOffset::Buttons4,
  MouseOffset::Buttons5,
  MouseOffset::Buttons6,
  MouseOffset::Buttons7
};
const char* _kMouseOffsetNames[] = {
  "X",
  "Y",
  "Z",
  "Buttons0",
  "Buttons1",
  "Buttons2",
  "Buttons3",
  "Buttons4",
  "Buttons5",
  "Buttons6",
  "Buttons7"
};
const std::map<int, const char*> _MouseOffset_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kMouseOffsetValues, _kMouseOffsetNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MouseOffset::type& val) {
  std::map<int, const char*>::const_iterator it = _MouseOffset_VALUES_TO_NAMES.find(val);
  if (it != _MouseOffset_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kJoystickOffsetValues[] = {
  JoystickOffset::X,
  JoystickOffset::Y,
  JoystickOffset::Z,
  JoystickOffset::RotationX,
  JoystickOffset::RotationY,
  JoystickOffset::RotationZ,
  JoystickOffset::Sliders0,
  JoystickOffset::Sliders1,
  JoystickOffset::PointOfViewControllers0,
  JoystickOffset::PointOfViewControllers1,
  JoystickOffset::PointOfViewControllers2,
  JoystickOffset::PointOfViewControllers3,
  JoystickOffset::Buttons0,
  JoystickOffset::Buttons1,
  JoystickOffset::Buttons2,
  JoystickOffset::Buttons3,
  JoystickOffset::Buttons4,
  JoystickOffset::Buttons5,
  JoystickOffset::Buttons6,
  JoystickOffset::Buttons7,
  JoystickOffset::Buttons8,
  JoystickOffset::Buttons9,
  JoystickOffset::Buttons10,
  JoystickOffset::Buttons11,
  JoystickOffset::Buttons12,
  JoystickOffset::Buttons13,
  JoystickOffset::Buttons14,
  JoystickOffset::Buttons15,
  JoystickOffset::Buttons16,
  JoystickOffset::Buttons17,
  JoystickOffset::Buttons18,
  JoystickOffset::Buttons19,
  JoystickOffset::Buttons20,
  JoystickOffset::Buttons21,
  JoystickOffset::Buttons22,
  JoystickOffset::Buttons23,
  JoystickOffset::Buttons24,
  JoystickOffset::Buttons25,
  JoystickOffset::Buttons26,
  JoystickOffset::Buttons27,
  JoystickOffset::Buttons28,
  JoystickOffset::Buttons29,
  JoystickOffset::Buttons30,
  JoystickOffset::Buttons31,
  JoystickOffset::Buttons32,
  JoystickOffset::Buttons33,
  JoystickOffset::Buttons34,
  JoystickOffset::Buttons35,
  JoystickOffset::Buttons36,
  JoystickOffset::Buttons37,
  JoystickOffset::Buttons38,
  JoystickOffset::Buttons39,
  JoystickOffset::Buttons40,
  JoystickOffset::Buttons41,
  JoystickOffset::Buttons42,
  JoystickOffset::Buttons43,
  JoystickOffset::Buttons44,
  JoystickOffset::Buttons45,
  JoystickOffset::Buttons46,
  JoystickOffset::Buttons47,
  JoystickOffset::Buttons48,
  JoystickOffset::Buttons49,
  JoystickOffset::Buttons50,
  JoystickOffset::Buttons51,
  JoystickOffset::Buttons52,
  JoystickOffset::Buttons53,
  JoystickOffset::Buttons54,
  JoystickOffset::Buttons55,
  JoystickOffset::Buttons56,
  JoystickOffset::Buttons57,
  JoystickOffset::Buttons58,
  JoystickOffset::Buttons59,
  JoystickOffset::Buttons60,
  JoystickOffset::Buttons61,
  JoystickOffset::Buttons62,
  JoystickOffset::Buttons63,
  JoystickOffset::Buttons64,
  JoystickOffset::Buttons65,
  JoystickOffset::Buttons66,
  JoystickOffset::Buttons67,
  JoystickOffset::Buttons68,
  JoystickOffset::Buttons69,
  JoystickOffset::Buttons70,
  JoystickOffset::Buttons71,
  JoystickOffset::Buttons72,
  JoystickOffset::Buttons73,
  JoystickOffset::Buttons74,
  JoystickOffset::Buttons75,
  JoystickOffset::Buttons76,
  JoystickOffset::Buttons77,
  JoystickOffset::Buttons78,
  JoystickOffset::Buttons79,
  JoystickOffset::Buttons80,
  JoystickOffset::Buttons81,
  JoystickOffset::Buttons82,
  JoystickOffset::Buttons83,
  JoystickOffset::Buttons84,
  JoystickOffset::Buttons85,
  JoystickOffset::Buttons86,
  JoystickOffset::Buttons87,
  JoystickOffset::Buttons88,
  JoystickOffset::Buttons89,
  JoystickOffset::Buttons90,
  JoystickOffset::Buttons91,
  JoystickOffset::Buttons92,
  JoystickOffset::Buttons93,
  JoystickOffset::Buttons94,
  JoystickOffset::Buttons95,
  JoystickOffset::Buttons96,
  JoystickOffset::Buttons97,
  JoystickOffset::Buttons98,
  JoystickOffset::Buttons99,
  JoystickOffset::Buttons100,
  JoystickOffset::Buttons101,
  JoystickOffset::Buttons102,
  JoystickOffset::Buttons103,
  JoystickOffset::Buttons104,
  JoystickOffset::Buttons105,
  JoystickOffset::Buttons106,
  JoystickOffset::Buttons107,
  JoystickOffset::Buttons108,
  JoystickOffset::Buttons109,
  JoystickOffset::Buttons110,
  JoystickOffset::Buttons111,
  JoystickOffset::Buttons112,
  JoystickOffset::Buttons113,
  JoystickOffset::Buttons114,
  JoystickOffset::Buttons115,
  JoystickOffset::Buttons116,
  JoystickOffset::Buttons117,
  JoystickOffset::Buttons118,
  JoystickOffset::Buttons119,
  JoystickOffset::Buttons120,
  JoystickOffset::Buttons121,
  JoystickOffset::Buttons122,
  JoystickOffset::Buttons123,
  JoystickOffset::Buttons124,
  JoystickOffset::Buttons125,
  JoystickOffset::Buttons126,
  JoystickOffset::Buttons127,
  JoystickOffset::VelocityX,
  JoystickOffset::VelocityY,
  JoystickOffset::VelocityZ,
  JoystickOffset::AngularVelocityX,
  JoystickOffset::AngularVelocityY,
  JoystickOffset::AngularVelocityZ,
  JoystickOffset::VelocitySliders0,
  JoystickOffset::VelocitySliders1,
  JoystickOffset::AccelerationX,
  JoystickOffset::AccelerationY,
  JoystickOffset::AccelerationZ,
  JoystickOffset::AngularAccelerationX,
  JoystickOffset::AngularAccelerationY,
  JoystickOffset::AngularAccelerationZ,
  JoystickOffset::AccelerationSliders0,
  JoystickOffset::AccelerationSliders1,
  JoystickOffset::ForceX,
  JoystickOffset::ForceY,
  JoystickOffset::ForceZ,
  JoystickOffset::TorqueX,
  JoystickOffset::TorqueY,
  JoystickOffset::TorqueZ,
  JoystickOffset::ForceSliders0,
  JoystickOffset::ForceSliders1
};
const char* _kJoystickOffsetNames[] = {
  "X",
  "Y",
  "Z",
  "RotationX",
  "RotationY",
  "RotationZ",
  "Sliders0",
  "Sliders1",
  "PointOfViewControllers0",
  "PointOfViewControllers1",
  "PointOfViewControllers2",
  "PointOfViewControllers3",
  "Buttons0",
  "Buttons1",
  "Buttons2",
  "Buttons3",
  "Buttons4",
  "Buttons5",
  "Buttons6",
  "Buttons7",
  "Buttons8",
  "Buttons9",
  "Buttons10",
  "Buttons11",
  "Buttons12",
  "Buttons13",
  "Buttons14",
  "Buttons15",
  "Buttons16",
  "Buttons17",
  "Buttons18",
  "Buttons19",
  "Buttons20",
  "Buttons21",
  "Buttons22",
  "Buttons23",
  "Buttons24",
  "Buttons25",
  "Buttons26",
  "Buttons27",
  "Buttons28",
  "Buttons29",
  "Buttons30",
  "Buttons31",
  "Buttons32",
  "Buttons33",
  "Buttons34",
  "Buttons35",
  "Buttons36",
  "Buttons37",
  "Buttons38",
  "Buttons39",
  "Buttons40",
  "Buttons41",
  "Buttons42",
  "Buttons43",
  "Buttons44",
  "Buttons45",
  "Buttons46",
  "Buttons47",
  "Buttons48",
  "Buttons49",
  "Buttons50",
  "Buttons51",
  "Buttons52",
  "Buttons53",
  "Buttons54",
  "Buttons55",
  "Buttons56",
  "Buttons57",
  "Buttons58",
  "Buttons59",
  "Buttons60",
  "Buttons61",
  "Buttons62",
  "Buttons63",
  "Buttons64",
  "Buttons65",
  "Buttons66",
  "Buttons67",
  "Buttons68",
  "Buttons69",
  "Buttons70",
  "Buttons71",
  "Buttons72",
  "Buttons73",
  "Buttons74",
  "Buttons75",
  "Buttons76",
  "Buttons77",
  "Buttons78",
  "Buttons79",
  "Buttons80",
  "Buttons81",
  "Buttons82",
  "Buttons83",
  "Buttons84",
  "Buttons85",
  "Buttons86",
  "Buttons87",
  "Buttons88",
  "Buttons89",
  "Buttons90",
  "Buttons91",
  "Buttons92",
  "Buttons93",
  "Buttons94",
  "Buttons95",
  "Buttons96",
  "Buttons97",
  "Buttons98",
  "Buttons99",
  "Buttons100",
  "Buttons101",
  "Buttons102",
  "Buttons103",
  "Buttons104",
  "Buttons105",
  "Buttons106",
  "Buttons107",
  "Buttons108",
  "Buttons109",
  "Buttons110",
  "Buttons111",
  "Buttons112",
  "Buttons113",
  "Buttons114",
  "Buttons115",
  "Buttons116",
  "Buttons117",
  "Buttons118",
  "Buttons119",
  "Buttons120",
  "Buttons121",
  "Buttons122",
  "Buttons123",
  "Buttons124",
  "Buttons125",
  "Buttons126",
  "Buttons127",
  "VelocityX",
  "VelocityY",
  "VelocityZ",
  "AngularVelocityX",
  "AngularVelocityY",
  "AngularVelocityZ",
  "VelocitySliders0",
  "VelocitySliders1",
  "AccelerationX",
  "AccelerationY",
  "AccelerationZ",
  "AngularAccelerationX",
  "AngularAccelerationY",
  "AngularAccelerationZ",
  "AccelerationSliders0",
  "AccelerationSliders1",
  "ForceX",
  "ForceY",
  "ForceZ",
  "TorqueX",
  "TorqueY",
  "TorqueZ",
  "ForceSliders0",
  "ForceSliders1"
};
const std::map<int, const char*> _JoystickOffset_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(164, _kJoystickOffsetValues, _kJoystickOffsetNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const JoystickOffset::type& val) {
  std::map<int, const char*>::const_iterator it = _JoystickOffset_VALUES_TO_NAMES.find(val);
  if (it != _JoystickOffset_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


RuyiGamePadInput::~RuyiGamePadInput() throw() {
}


void RuyiGamePadInput::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void RuyiGamePadInput::__set_UserId(const std::string& val) {
  this->UserId = val;
}

void RuyiGamePadInput::__set_ButtonFlags(const int32_t val) {
  this->ButtonFlags = val;
}

void RuyiGamePadInput::__set_LeftTrigger(const int8_t val) {
  this->LeftTrigger = val;
}

void RuyiGamePadInput::__set_RightTrigger(const int8_t val) {
  this->RightTrigger = val;
}

void RuyiGamePadInput::__set_LeftThumbX(const int16_t val) {
  this->LeftThumbX = val;
}

void RuyiGamePadInput::__set_LeftThumbY(const int16_t val) {
  this->LeftThumbY = val;
}

void RuyiGamePadInput::__set_RightThumbX(const int16_t val) {
  this->RightThumbX = val;
}

void RuyiGamePadInput::__set_RightThumbY(const int16_t val) {
  this->RightThumbY = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiGamePadInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiGamePadInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserId);
          this->__isset.UserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ButtonFlags);
          this->__isset.ButtonFlags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->LeftTrigger);
          this->__isset.LeftTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->RightTrigger);
          this->__isset.RightTrigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbX);
          this->__isset.LeftThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->LeftThumbY);
          this->__isset.LeftThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbX);
          this->__isset.RightThumbX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->RightThumbY);
          this->__isset.RightThumbY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiGamePadInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiGamePadInput");

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ButtonFlags", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ButtonFlags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftTrigger", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->LeftTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightTrigger", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->RightTrigger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbX", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->LeftThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("LeftThumbY", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->LeftThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbX", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->RightThumbX);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RightThumbY", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->RightThumbY);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiGamePadInput &a, RuyiGamePadInput &b) {
  using ::std::swap;
  swap(a.DeviceId, b.DeviceId);
  swap(a.UserId, b.UserId);
  swap(a.ButtonFlags, b.ButtonFlags);
  swap(a.LeftTrigger, b.LeftTrigger);
  swap(a.RightTrigger, b.RightTrigger);
  swap(a.LeftThumbX, b.LeftThumbX);
  swap(a.LeftThumbY, b.LeftThumbY);
  swap(a.RightThumbX, b.RightThumbX);
  swap(a.RightThumbY, b.RightThumbY);
  swap(a.__isset, b.__isset);
}

RuyiGamePadInput::RuyiGamePadInput(const RuyiGamePadInput& other0) {
  DeviceId = other0.DeviceId;
  UserId = other0.UserId;
  ButtonFlags = other0.ButtonFlags;
  LeftTrigger = other0.LeftTrigger;
  RightTrigger = other0.RightTrigger;
  LeftThumbX = other0.LeftThumbX;
  LeftThumbY = other0.LeftThumbY;
  RightThumbX = other0.RightThumbX;
  RightThumbY = other0.RightThumbY;
  __isset = other0.__isset;
}
RuyiGamePadInput& RuyiGamePadInput::operator=(const RuyiGamePadInput& other1) {
  DeviceId = other1.DeviceId;
  UserId = other1.UserId;
  ButtonFlags = other1.ButtonFlags;
  LeftTrigger = other1.LeftTrigger;
  RightTrigger = other1.RightTrigger;
  LeftThumbX = other1.LeftThumbX;
  LeftThumbY = other1.LeftThumbY;
  RightThumbX = other1.RightThumbX;
  RightThumbY = other1.RightThumbY;
  __isset = other1.__isset;
  return *this;
}
void RuyiGamePadInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiGamePadInput(";
  out << "DeviceId=" << to_string(DeviceId);
  out << ", " << "UserId=" << to_string(UserId);
  out << ", " << "ButtonFlags=" << to_string(ButtonFlags);
  out << ", " << "LeftTrigger=" << to_string(LeftTrigger);
  out << ", " << "RightTrigger=" << to_string(RightTrigger);
  out << ", " << "LeftThumbX=" << to_string(LeftThumbX);
  out << ", " << "LeftThumbY=" << to_string(LeftThumbY);
  out << ", " << "RightThumbX=" << to_string(RightThumbX);
  out << ", " << "RightThumbY=" << to_string(RightThumbY);
  out << ")";
}


RuyiKeyboardInput::~RuyiKeyboardInput() throw() {
}


void RuyiKeyboardInput::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void RuyiKeyboardInput::__set_UserId(const std::string& val) {
  this->UserId = val;
}

void RuyiKeyboardInput::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiKeyboardInput::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiKeyboardInput::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiKeyboardInput::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiKeyboardInput::__set_Key(const Key::type val) {
  this->Key = val;
}

void RuyiKeyboardInput::__set_IsPressed(const bool val) {
  this->IsPressed = val;
}

void RuyiKeyboardInput::__set_IsReleased(const bool val) {
  this->IsReleased = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiKeyboardInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiKeyboardInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserId);
          this->__isset.UserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->Key = (Key::type)ecast2;
          this->__isset.Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsPressed);
          this->__isset.IsPressed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsReleased);
          this->__isset.IsReleased = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiKeyboardInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiKeyboardInput");

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsPressed", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsPressed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsReleased", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->IsReleased);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiKeyboardInput &a, RuyiKeyboardInput &b) {
  using ::std::swap;
  swap(a.DeviceId, b.DeviceId);
  swap(a.UserId, b.UserId);
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Key, b.Key);
  swap(a.IsPressed, b.IsPressed);
  swap(a.IsReleased, b.IsReleased);
  swap(a.__isset, b.__isset);
}

RuyiKeyboardInput::RuyiKeyboardInput(const RuyiKeyboardInput& other3) {
  DeviceId = other3.DeviceId;
  UserId = other3.UserId;
  RawOffset = other3.RawOffset;
  Value = other3.Value;
  Timestamp = other3.Timestamp;
  Sequence = other3.Sequence;
  Key = other3.Key;
  IsPressed = other3.IsPressed;
  IsReleased = other3.IsReleased;
  __isset = other3.__isset;
}
RuyiKeyboardInput& RuyiKeyboardInput::operator=(const RuyiKeyboardInput& other4) {
  DeviceId = other4.DeviceId;
  UserId = other4.UserId;
  RawOffset = other4.RawOffset;
  Value = other4.Value;
  Timestamp = other4.Timestamp;
  Sequence = other4.Sequence;
  Key = other4.Key;
  IsPressed = other4.IsPressed;
  IsReleased = other4.IsReleased;
  __isset = other4.__isset;
  return *this;
}
void RuyiKeyboardInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiKeyboardInput(";
  out << "DeviceId=" << to_string(DeviceId);
  out << ", " << "UserId=" << to_string(UserId);
  out << ", " << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Key=" << to_string(Key);
  out << ", " << "IsPressed=" << to_string(IsPressed);
  out << ", " << "IsReleased=" << to_string(IsReleased);
  out << ")";
}


RuyiMouseInput::~RuyiMouseInput() throw() {
}


void RuyiMouseInput::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void RuyiMouseInput::__set_UserId(const std::string& val) {
  this->UserId = val;
}

void RuyiMouseInput::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiMouseInput::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiMouseInput::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiMouseInput::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiMouseInput::__set_Offset(const MouseOffset::type val) {
  this->Offset = val;
}

void RuyiMouseInput::__set_IsButton(const bool val) {
  this->IsButton = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiMouseInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiMouseInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserId);
          this->__isset.UserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->Offset = (MouseOffset::type)ecast5;
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->IsButton);
          this->__isset.IsButton = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiMouseInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiMouseInput");

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IsButton", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->IsButton);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiMouseInput &a, RuyiMouseInput &b) {
  using ::std::swap;
  swap(a.DeviceId, b.DeviceId);
  swap(a.UserId, b.UserId);
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.IsButton, b.IsButton);
  swap(a.__isset, b.__isset);
}

RuyiMouseInput::RuyiMouseInput(const RuyiMouseInput& other6) {
  DeviceId = other6.DeviceId;
  UserId = other6.UserId;
  RawOffset = other6.RawOffset;
  Value = other6.Value;
  Timestamp = other6.Timestamp;
  Sequence = other6.Sequence;
  Offset = other6.Offset;
  IsButton = other6.IsButton;
  __isset = other6.__isset;
}
RuyiMouseInput& RuyiMouseInput::operator=(const RuyiMouseInput& other7) {
  DeviceId = other7.DeviceId;
  UserId = other7.UserId;
  RawOffset = other7.RawOffset;
  Value = other7.Value;
  Timestamp = other7.Timestamp;
  Sequence = other7.Sequence;
  Offset = other7.Offset;
  IsButton = other7.IsButton;
  __isset = other7.__isset;
  return *this;
}
void RuyiMouseInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiMouseInput(";
  out << "DeviceId=" << to_string(DeviceId);
  out << ", " << "UserId=" << to_string(UserId);
  out << ", " << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ", " << "IsButton=" << to_string(IsButton);
  out << ")";
}


RuyiJoystickInput::~RuyiJoystickInput() throw() {
}


void RuyiJoystickInput::__set_DeviceId(const std::string& val) {
  this->DeviceId = val;
}

void RuyiJoystickInput::__set_UserId(const std::string& val) {
  this->UserId = val;
}

void RuyiJoystickInput::__set_RawOffset(const int32_t val) {
  this->RawOffset = val;
}

void RuyiJoystickInput::__set_Value(const int32_t val) {
  this->Value = val;
}

void RuyiJoystickInput::__set_Timestamp(const int32_t val) {
  this->Timestamp = val;
}

void RuyiJoystickInput::__set_Sequence(const int32_t val) {
  this->Sequence = val;
}

void RuyiJoystickInput::__set_Offset(const JoystickOffset::type val) {
  this->Offset = val;
}
std::ostream& operator<<(std::ostream& out, const RuyiJoystickInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t RuyiJoystickInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->DeviceId);
          this->__isset.DeviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->UserId);
          this->__isset.UserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RawOffset);
          this->__isset.RawOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Value);
          this->__isset.Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Timestamp);
          this->__isset.Timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Sequence);
          this->__isset.Sequence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->Offset = (JoystickOffset::type)ecast8;
          this->__isset.Offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RuyiJoystickInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RuyiJoystickInput");

  xfer += oprot->writeFieldBegin("DeviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->DeviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("UserId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->UserId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RawOffset", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->RawOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Timestamp", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sequence", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->Sequence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Offset", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->Offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RuyiJoystickInput &a, RuyiJoystickInput &b) {
  using ::std::swap;
  swap(a.DeviceId, b.DeviceId);
  swap(a.UserId, b.UserId);
  swap(a.RawOffset, b.RawOffset);
  swap(a.Value, b.Value);
  swap(a.Timestamp, b.Timestamp);
  swap(a.Sequence, b.Sequence);
  swap(a.Offset, b.Offset);
  swap(a.__isset, b.__isset);
}

RuyiJoystickInput::RuyiJoystickInput(const RuyiJoystickInput& other9) {
  DeviceId = other9.DeviceId;
  UserId = other9.UserId;
  RawOffset = other9.RawOffset;
  Value = other9.Value;
  Timestamp = other9.Timestamp;
  Sequence = other9.Sequence;
  Offset = other9.Offset;
  __isset = other9.__isset;
}
RuyiJoystickInput& RuyiJoystickInput::operator=(const RuyiJoystickInput& other10) {
  DeviceId = other10.DeviceId;
  UserId = other10.UserId;
  RawOffset = other10.RawOffset;
  Value = other10.Value;
  Timestamp = other10.Timestamp;
  Sequence = other10.Sequence;
  Offset = other10.Offset;
  __isset = other10.__isset;
  return *this;
}
void RuyiJoystickInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RuyiJoystickInput(";
  out << "DeviceId=" << to_string(DeviceId);
  out << ", " << "UserId=" << to_string(UserId);
  out << ", " << "RawOffset=" << to_string(RawOffset);
  out << ", " << "Value=" << to_string(Value);
  out << ", " << "Timestamp=" << to_string(Timestamp);
  out << ", " << "Sequence=" << to_string(Sequence);
  out << ", " << "Offset=" << to_string(Offset);
  out << ")";
}


InputActionTriggered::~InputActionTriggered() throw() {
}


void InputActionTriggered::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void InputActionTriggered::__set_userId(const std::string& val) {
  this->userId = val;
}

void InputActionTriggered::__set_name(const std::string& val) {
  this->name = val;
}

void InputActionTriggered::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void InputActionTriggered::__set_trigger(const  ::Ruyi::SDK::CommonType::ActionTrigger& val) {
  this->trigger = val;
}
std::ostream& operator<<(std::ostream& out, const InputActionTriggered& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InputActionTriggered::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->trigger.read(iprot);
          this->__isset.trigger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InputActionTriggered::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InputActionTriggered");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("trigger", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->trigger.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InputActionTriggered &a, InputActionTriggered &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.userId, b.userId);
  swap(a.name, b.name);
  swap(a.timestamp, b.timestamp);
  swap(a.trigger, b.trigger);
  swap(a.__isset, b.__isset);
}

InputActionTriggered::InputActionTriggered(const InputActionTriggered& other11) {
  deviceId = other11.deviceId;
  userId = other11.userId;
  name = other11.name;
  timestamp = other11.timestamp;
  trigger = other11.trigger;
  __isset = other11.__isset;
}
InputActionTriggered& InputActionTriggered::operator=(const InputActionTriggered& other12) {
  deviceId = other12.deviceId;
  userId = other12.userId;
  name = other12.name;
  timestamp = other12.timestamp;
  trigger = other12.trigger;
  __isset = other12.__isset;
  return *this;
}
void InputActionTriggered::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InputActionTriggered(";
  out << "deviceId=" << to_string(deviceId);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "trigger=" << to_string(trigger);
  out << ")";
}


AxisActionTriggered::~AxisActionTriggered() throw() {
}


void AxisActionTriggered::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void AxisActionTriggered::__set_userId(const std::string& val) {
  this->userId = val;
}

void AxisActionTriggered::__set_name(const std::string& val) {
  this->name = val;
}

void AxisActionTriggered::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void AxisActionTriggered::__set_scale(const _float val) {
  this->scale = val;
}
std::ostream& operator<<(std::ostream& out, const AxisActionTriggered& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AxisActionTriggered::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->scale);
          this->__isset.scale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AxisActionTriggered::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AxisActionTriggered");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scale", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->scale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AxisActionTriggered &a, AxisActionTriggered &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.userId, b.userId);
  swap(a.name, b.name);
  swap(a.timestamp, b.timestamp);
  swap(a.scale, b.scale);
  swap(a.__isset, b.__isset);
}

AxisActionTriggered::AxisActionTriggered(const AxisActionTriggered& other13) {
  deviceId = other13.deviceId;
  userId = other13.userId;
  name = other13.name;
  timestamp = other13.timestamp;
  scale = other13.scale;
  __isset = other13.__isset;
}
AxisActionTriggered& AxisActionTriggered::operator=(const AxisActionTriggered& other14) {
  deviceId = other14.deviceId;
  userId = other14.userId;
  name = other14.name;
  timestamp = other14.timestamp;
  scale = other14.scale;
  __isset = other14.__isset;
  return *this;
}
void AxisActionTriggered::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AxisActionTriggered(";
  out << "deviceId=" << to_string(deviceId);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "name=" << to_string(name);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "scale=" << to_string(scale);
  out << ")";
}


GamepadInfo::~GamepadInfo() throw() {
}


void GamepadInfo::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void GamepadInfo::__set_isWireless(const bool val) {
  this->isWireless = val;
}
std::ostream& operator<<(std::ostream& out, const GamepadInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GamepadInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isWireless);
          this->__isset.isWireless = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GamepadInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GamepadInfo");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isWireless", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isWireless);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GamepadInfo &a, GamepadInfo &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.isWireless, b.isWireless);
  swap(a.__isset, b.__isset);
}

GamepadInfo::GamepadInfo(const GamepadInfo& other15) {
  deviceId = other15.deviceId;
  isWireless = other15.isWireless;
  __isset = other15.__isset;
}
GamepadInfo& GamepadInfo::operator=(const GamepadInfo& other16) {
  deviceId = other16.deviceId;
  isWireless = other16.isWireless;
  __isset = other16.__isset;
  return *this;
}
void GamepadInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GamepadInfo(";
  out << "deviceId=" << to_string(deviceId);
  out << ", " << "isWireless=" << to_string(isWireless);
  out << ")";
}

}}} // namespace
