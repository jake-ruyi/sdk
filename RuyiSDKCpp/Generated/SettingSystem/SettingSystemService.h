/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SettingSystemService_H
#define SettingSystemService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "SettingSystemSDKServices_types.h"

namespace Ruyi { namespace SDK { namespace SettingSystem { namespace Api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SettingSystemServiceIf {
 public:
  virtual ~SettingSystemServiceIf() {}

  /**
   * Get a setting data of the module.
   * 
   * @param id The setting's unique id in current module.
   */
  virtual void GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return, const std::string& id) = 0;

  /**
   * Get a list of setting data of the module.
   * 
   * @param category Category to filter the settings. Null indicates getting all settings of the module
   * 
   * @param includeChildren Whecher to get the settings of children cagegories.
   */
  virtual void GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return, const std::string& category, const bool includeChildren) = 0;

  /**
   * Search a set of settings using a json format string.
   * According to the format of json string your write, searching can be separated to 3 types: simple search, lambda search and complicated search. And each of they can be combined with the other.
   * 
   * @param filterJson Json string used to search.
   */
  virtual void SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return, const std::string& filterJson) = 0;

  /**
   * Get settings and categories in a tree
   */
  virtual void GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return) = 0;

  /**
   * Get child nodes of specified setting item or setting category
   * 
   * @param parent The parent node
   * 
   * @param nodeType Specifies whether the child nodes containing setting item or setting category, or both
   * 
   * @param param The parameter passed to the function which will be called while getting the item value
   */
  virtual void GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return, const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param) = 0;

  /**
   * Set the specified setting's "dataValue" with the new value
   * 
   * @param key Identity of the setting
   * 
   * @param val Value to be set
   */
  virtual bool SetSettingItem(const std::string& key, const std::string& val) = 0;

  /**
   * Set a set of settings' "dataValue"
   * 
   * @param keyValues The key-values to be set.
   */
  virtual int32_t SetSettingItems(const std::map<std::string, std::string> & keyValues) = 0;

  /**
   * Restore a module setting to default
   * 
   * @param moduleName Module name specifies the module to be restored.
   * 
   * @param category The category of which to restored. Null indicates all settings.
   */
  virtual bool RestoreDefault(const std::string& moduleName, const std::string& category) = 0;
  virtual bool RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category) = 0;

  /**
   * Update the module settings from an older version to the latest one
   * 
   * @param moduleName Module of the setting
   */
  virtual bool UpdateModuleVersion(const std::string& moduleName) = 0;
  virtual int32_t SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems) = 0;
  virtual void GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return, const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys) = 0;
  virtual int32_t RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys) = 0;

  /**
   * Notify layer0 that a setting item has specific event
   * 
   * @param key The item's ID
   * 
   * @param contents Optional. The arguments of the notification. In json string format
   */
  virtual bool SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents) = 0;
  virtual void GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return) = 0;
  virtual void GetLanNetworkName(std::string& _return) = 0;
  virtual bool SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS) = 0;
  virtual bool SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort) = 0;
  virtual bool ConnectToWifi(const std::string& profileName, const std::string& key) = 0;
  virtual bool ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key) = 0;
  virtual void GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return) = 0;
  virtual void GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return) = 0;
  virtual void RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return) = 0;
  virtual bool RuyiStartNetworkSpeedTest(const int32_t userindex) = 0;
  virtual bool RuyiStopNetworkSpeedTest(const int32_t userindex) = 0;
  virtual void GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return) = 0;
  virtual bool DisconnectWifi() = 0;
  virtual bool DiscoverBluetoothDevice() = 0;
  virtual bool ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) = 0;
  virtual bool DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) = 0;
  virtual bool RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) = 0;
};

class SettingSystemServiceIfFactory {
 public:
  typedef SettingSystemServiceIf Handler;

  virtual ~SettingSystemServiceIfFactory() {}

  virtual SettingSystemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SettingSystemServiceIf* /* handler */) = 0;
};

class SettingSystemServiceIfSingletonFactory : virtual public SettingSystemServiceIfFactory {
 public:
  SettingSystemServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf>& iface) : iface_(iface) {}
  virtual ~SettingSystemServiceIfSingletonFactory() {}

  virtual SettingSystemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SettingSystemServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> iface_;
};

class SettingSystemServiceNull : virtual public SettingSystemServiceIf {
 public:
  virtual ~SettingSystemServiceNull() {}
  void GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& /* _return */, const std::string& /* id */) {
    return;
  }
  void GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & /* _return */, const std::string& /* category */, const bool /* includeChildren */) {
    return;
  }
  void SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & /* _return */, const std::string& /* filterJson */) {
    return;
  }
  void GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& /* _return */) {
    return;
  }
  void GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& /* _return */, const std::string& /* parent */, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type /* nodeType */, const std::string& /* param */) {
    return;
  }
  bool SetSettingItem(const std::string& /* key */, const std::string& /* val */) {
    bool _return = false;
    return _return;
  }
  int32_t SetSettingItems(const std::map<std::string, std::string> & /* keyValues */) {
    int32_t _return = 0;
    return _return;
  }
  bool RestoreDefault(const std::string& /* moduleName */, const std::string& /* category */) {
    bool _return = false;
    return _return;
  }
  bool RestoreUserDefault(const std::string& /* userId */, const std::string& /* moduleName */, const std::string& /* category */) {
    bool _return = false;
    return _return;
  }
  bool UpdateModuleVersion(const std::string& /* moduleName */) {
    bool _return = false;
    return _return;
  }
  int32_t SetUserAppData(const std::string& /* userId */, const std::string& /* category */, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & /* settingItems */) {
    int32_t _return = 0;
    return _return;
  }
  void GetUserAppData( ::Ruyi::SDK::CommonType::AppData& /* _return */, const std::string& /* userId */, const std::string& /* category */, const std::vector<std::string> & /* settingKeys */) {
    return;
  }
  int32_t RemoveUserAppData(const std::string& /* userId */, const std::string& /* category */, const std::vector<std::string> & /* settingKeys */) {
    int32_t _return = 0;
    return _return;
  }
  bool SettingItemNotify(const std::string& /* key */, const  ::Ruyi::SDK::SettingSystem::Api::JSON& /* contents */) {
    bool _return = false;
    return _return;
  }
  void GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& /* _return */) {
    return;
  }
  void GetLanNetworkName(std::string& /* _return */) {
    return;
  }
  bool SetNetworkSettings(const bool /* isWLan */, const bool /* EnableDHCP */, const std::string& /* IpAddress */, const std::string& /* SubMask */, const std::string& /* Gateway */, const std::string& /* MainDNS */, const std::string& /* SubDNS */) {
    bool _return = false;
    return _return;
  }
  bool SetNetworkProxy(const std::string& /* ProxyServer */, const std::string& /* ProxyPort */) {
    bool _return = false;
    return _return;
  }
  bool ConnectToWifi(const std::string& /* profileName */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  bool ConnectToAppointedWifi(const std::string& /* profileName */, const std::string& /* Auth */, const std::string& /* Ciper */, const std::string& /* KeyType */, const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
  void GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& /* _return */) {
    return;
  }
  void GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& /* _return */) {
    return;
  }
  void RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& /* _return */) {
    return;
  }
  bool RuyiStartNetworkSpeedTest(const int32_t /* userindex */) {
    bool _return = false;
    return _return;
  }
  bool RuyiStopNetworkSpeedTest(const int32_t /* userindex */) {
    bool _return = false;
    return _return;
  }
  void GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & /* _return */) {
    return;
  }
  bool DisconnectWifi() {
    bool _return = false;
    return _return;
  }
  bool DiscoverBluetoothDevice() {
    bool _return = false;
    return _return;
  }
  bool ConnectBluetoothDevice(const std::string& /* DeviceName */, const std::string& /* DeviceAddress */) {
    bool _return = false;
    return _return;
  }
  bool DisconnectBluetoothDevice(const std::string& /* DeviceName */, const std::string& /* DeviceAddress */) {
    bool _return = false;
    return _return;
  }
  bool RemoveBluetoothDevice(const std::string& /* DeviceName */, const std::string& /* DeviceAddress */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SettingSystemService_GetSettingItem_args__isset {
  _SettingSystemService_GetSettingItem_args__isset() : id(false) {}
  bool id :1;
} _SettingSystemService_GetSettingItem_args__isset;

class SettingSystemService_GetSettingItem_args {
 public:

  SettingSystemService_GetSettingItem_args(const SettingSystemService_GetSettingItem_args&);
  SettingSystemService_GetSettingItem_args& operator=(const SettingSystemService_GetSettingItem_args&);
  SettingSystemService_GetSettingItem_args() : id() {
  }

  virtual ~SettingSystemService_GetSettingItem_args() throw();
  std::string id;

  _SettingSystemService_GetSettingItem_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const SettingSystemService_GetSettingItem_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetSettingItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetSettingItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetSettingItem_pargs {
 public:


  virtual ~SettingSystemService_GetSettingItem_pargs() throw();
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetSettingItem_result__isset {
  _SettingSystemService_GetSettingItem_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetSettingItem_result__isset;

class SettingSystemService_GetSettingItem_result {
 public:

  SettingSystemService_GetSettingItem_result(const SettingSystemService_GetSettingItem_result&);
  SettingSystemService_GetSettingItem_result& operator=(const SettingSystemService_GetSettingItem_result&);
  SettingSystemService_GetSettingItem_result() {
  }

  virtual ~SettingSystemService_GetSettingItem_result() throw();
   ::Ruyi::SDK::CommonType::SettingItem success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetSettingItem_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::CommonType::SettingItem& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetSettingItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetSettingItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetSettingItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetSettingItem_presult__isset {
  _SettingSystemService_GetSettingItem_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetSettingItem_presult__isset;

class SettingSystemService_GetSettingItem_presult {
 public:


  virtual ~SettingSystemService_GetSettingItem_presult() throw();
   ::Ruyi::SDK::CommonType::SettingItem* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetSettingItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_GetSettingItems_args__isset {
  _SettingSystemService_GetSettingItems_args__isset() : category(false), includeChildren(false) {}
  bool category :1;
  bool includeChildren :1;
} _SettingSystemService_GetSettingItems_args__isset;

class SettingSystemService_GetSettingItems_args {
 public:

  SettingSystemService_GetSettingItems_args(const SettingSystemService_GetSettingItems_args&);
  SettingSystemService_GetSettingItems_args& operator=(const SettingSystemService_GetSettingItems_args&);
  SettingSystemService_GetSettingItems_args() : category(), includeChildren(0) {
  }

  virtual ~SettingSystemService_GetSettingItems_args() throw();
  std::string category;
  bool includeChildren;

  _SettingSystemService_GetSettingItems_args__isset __isset;

  void __set_category(const std::string& val);

  void __set_includeChildren(const bool val);

  bool operator == (const SettingSystemService_GetSettingItems_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(includeChildren == rhs.includeChildren))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetSettingItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetSettingItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetSettingItems_pargs {
 public:


  virtual ~SettingSystemService_GetSettingItems_pargs() throw();
  const std::string* category;
  const bool* includeChildren;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetSettingItems_result__isset {
  _SettingSystemService_GetSettingItems_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetSettingItems_result__isset;

class SettingSystemService_GetSettingItems_result {
 public:

  SettingSystemService_GetSettingItems_result(const SettingSystemService_GetSettingItems_result&);
  SettingSystemService_GetSettingItems_result& operator=(const SettingSystemService_GetSettingItems_result&);
  SettingSystemService_GetSettingItems_result() {
  }

  virtual ~SettingSystemService_GetSettingItems_result() throw();
  std::vector< ::Ruyi::SDK::CommonType::SettingItem>  success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetSettingItems_result__isset __isset;

  void __set_success(const std::vector< ::Ruyi::SDK::CommonType::SettingItem> & val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetSettingItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetSettingItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetSettingItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetSettingItems_presult__isset {
  _SettingSystemService_GetSettingItems_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetSettingItems_presult__isset;

class SettingSystemService_GetSettingItems_presult {
 public:


  virtual ~SettingSystemService_GetSettingItems_presult() throw();
  std::vector< ::Ruyi::SDK::CommonType::SettingItem> * success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetSettingItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SearchSettingItems_args__isset {
  _SettingSystemService_SearchSettingItems_args__isset() : filterJson(false) {}
  bool filterJson :1;
} _SettingSystemService_SearchSettingItems_args__isset;

class SettingSystemService_SearchSettingItems_args {
 public:

  SettingSystemService_SearchSettingItems_args(const SettingSystemService_SearchSettingItems_args&);
  SettingSystemService_SearchSettingItems_args& operator=(const SettingSystemService_SearchSettingItems_args&);
  SettingSystemService_SearchSettingItems_args() : filterJson() {
  }

  virtual ~SettingSystemService_SearchSettingItems_args() throw();
  std::string filterJson;

  _SettingSystemService_SearchSettingItems_args__isset __isset;

  void __set_filterJson(const std::string& val);

  bool operator == (const SettingSystemService_SearchSettingItems_args & rhs) const
  {
    if (!(filterJson == rhs.filterJson))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SearchSettingItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SearchSettingItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SearchSettingItems_pargs {
 public:


  virtual ~SettingSystemService_SearchSettingItems_pargs() throw();
  const std::string* filterJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SearchSettingItems_result__isset {
  _SettingSystemService_SearchSettingItems_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SearchSettingItems_result__isset;

class SettingSystemService_SearchSettingItems_result {
 public:

  SettingSystemService_SearchSettingItems_result(const SettingSystemService_SearchSettingItems_result&);
  SettingSystemService_SearchSettingItems_result& operator=(const SettingSystemService_SearchSettingItems_result&);
  SettingSystemService_SearchSettingItems_result() {
  }

  virtual ~SettingSystemService_SearchSettingItems_result() throw();
  std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult>  success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SearchSettingItems_result__isset __isset;

  void __set_success(const std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_SearchSettingItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SearchSettingItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SearchSettingItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SearchSettingItems_presult__isset {
  _SettingSystemService_SearchSettingItems_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SearchSettingItems_presult__isset;

class SettingSystemService_SearchSettingItems_presult {
 public:


  virtual ~SettingSystemService_SearchSettingItems_presult() throw();
  std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> * success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SearchSettingItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetCategoryNode_args {
 public:

  SettingSystemService_GetCategoryNode_args(const SettingSystemService_GetCategoryNode_args&);
  SettingSystemService_GetCategoryNode_args& operator=(const SettingSystemService_GetCategoryNode_args&);
  SettingSystemService_GetCategoryNode_args() {
  }

  virtual ~SettingSystemService_GetCategoryNode_args() throw();

  bool operator == (const SettingSystemService_GetCategoryNode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetCategoryNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetCategoryNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetCategoryNode_pargs {
 public:


  virtual ~SettingSystemService_GetCategoryNode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetCategoryNode_result__isset {
  _SettingSystemService_GetCategoryNode_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetCategoryNode_result__isset;

class SettingSystemService_GetCategoryNode_result {
 public:

  SettingSystemService_GetCategoryNode_result(const SettingSystemService_GetCategoryNode_result&);
  SettingSystemService_GetCategoryNode_result& operator=(const SettingSystemService_GetCategoryNode_result&);
  SettingSystemService_GetCategoryNode_result() {
  }

  virtual ~SettingSystemService_GetCategoryNode_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::SettingTree success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetCategoryNode_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::SettingTree& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetCategoryNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetCategoryNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetCategoryNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetCategoryNode_presult__isset {
  _SettingSystemService_GetCategoryNode_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetCategoryNode_presult__isset;

class SettingSystemService_GetCategoryNode_presult {
 public:


  virtual ~SettingSystemService_GetCategoryNode_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::SettingTree* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetCategoryNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_GetChildNode_args__isset {
  _SettingSystemService_GetChildNode_args__isset() : parent(false), nodeType(false), param(false) {}
  bool parent :1;
  bool nodeType :1;
  bool param :1;
} _SettingSystemService_GetChildNode_args__isset;

class SettingSystemService_GetChildNode_args {
 public:

  SettingSystemService_GetChildNode_args(const SettingSystemService_GetChildNode_args&);
  SettingSystemService_GetChildNode_args& operator=(const SettingSystemService_GetChildNode_args&);
  SettingSystemService_GetChildNode_args() : parent(), nodeType(( ::Ruyi::SDK::SettingSystem::Api::NodeType::type)0), param() {
  }

  virtual ~SettingSystemService_GetChildNode_args() throw();
  std::string parent;
   ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType;
  std::string param;

  _SettingSystemService_GetChildNode_args__isset __isset;

  void __set_parent(const std::string& val);

  void __set_nodeType(const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type val);

  void __set_param(const std::string& val);

  bool operator == (const SettingSystemService_GetChildNode_args & rhs) const
  {
    if (!(parent == rhs.parent))
      return false;
    if (!(nodeType == rhs.nodeType))
      return false;
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetChildNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetChildNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetChildNode_pargs {
 public:


  virtual ~SettingSystemService_GetChildNode_pargs() throw();
  const std::string* parent;
  const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type* nodeType;
  const std::string* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetChildNode_result__isset {
  _SettingSystemService_GetChildNode_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetChildNode_result__isset;

class SettingSystemService_GetChildNode_result {
 public:

  SettingSystemService_GetChildNode_result(const SettingSystemService_GetChildNode_result&);
  SettingSystemService_GetChildNode_result& operator=(const SettingSystemService_GetChildNode_result&);
  SettingSystemService_GetChildNode_result() {
  }

  virtual ~SettingSystemService_GetChildNode_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::NodeList success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetChildNode_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::NodeList& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetChildNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetChildNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetChildNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetChildNode_presult__isset {
  _SettingSystemService_GetChildNode_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetChildNode_presult__isset;

class SettingSystemService_GetChildNode_presult {
 public:


  virtual ~SettingSystemService_GetChildNode_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::NodeList* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetChildNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SetSettingItem_args__isset {
  _SettingSystemService_SetSettingItem_args__isset() : key(false), val(false) {}
  bool key :1;
  bool val :1;
} _SettingSystemService_SetSettingItem_args__isset;

class SettingSystemService_SetSettingItem_args {
 public:

  SettingSystemService_SetSettingItem_args(const SettingSystemService_SetSettingItem_args&);
  SettingSystemService_SetSettingItem_args& operator=(const SettingSystemService_SetSettingItem_args&);
  SettingSystemService_SetSettingItem_args() : key(), val() {
  }

  virtual ~SettingSystemService_SetSettingItem_args() throw();
  std::string key;
  std::string val;

  _SettingSystemService_SetSettingItem_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  bool operator == (const SettingSystemService_SetSettingItem_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetSettingItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetSettingItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SetSettingItem_pargs {
 public:


  virtual ~SettingSystemService_SetSettingItem_pargs() throw();
  const std::string* key;
  const std::string* val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetSettingItem_result__isset {
  _SettingSystemService_SetSettingItem_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetSettingItem_result__isset;

class SettingSystemService_SetSettingItem_result {
 public:

  SettingSystemService_SetSettingItem_result(const SettingSystemService_SetSettingItem_result&);
  SettingSystemService_SetSettingItem_result& operator=(const SettingSystemService_SetSettingItem_result&);
  SettingSystemService_SetSettingItem_result() : success(0) {
  }

  virtual ~SettingSystemService_SetSettingItem_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetSettingItem_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_SetSettingItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetSettingItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetSettingItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetSettingItem_presult__isset {
  _SettingSystemService_SetSettingItem_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetSettingItem_presult__isset;

class SettingSystemService_SetSettingItem_presult {
 public:


  virtual ~SettingSystemService_SetSettingItem_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetSettingItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SetSettingItems_args__isset {
  _SettingSystemService_SetSettingItems_args__isset() : keyValues(false) {}
  bool keyValues :1;
} _SettingSystemService_SetSettingItems_args__isset;

class SettingSystemService_SetSettingItems_args {
 public:

  SettingSystemService_SetSettingItems_args(const SettingSystemService_SetSettingItems_args&);
  SettingSystemService_SetSettingItems_args& operator=(const SettingSystemService_SetSettingItems_args&);
  SettingSystemService_SetSettingItems_args() {
  }

  virtual ~SettingSystemService_SetSettingItems_args() throw();
  std::map<std::string, std::string>  keyValues;

  _SettingSystemService_SetSettingItems_args__isset __isset;

  void __set_keyValues(const std::map<std::string, std::string> & val);

  bool operator == (const SettingSystemService_SetSettingItems_args & rhs) const
  {
    if (!(keyValues == rhs.keyValues))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetSettingItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetSettingItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SetSettingItems_pargs {
 public:


  virtual ~SettingSystemService_SetSettingItems_pargs() throw();
  const std::map<std::string, std::string> * keyValues;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetSettingItems_result__isset {
  _SettingSystemService_SetSettingItems_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetSettingItems_result__isset;

class SettingSystemService_SetSettingItems_result {
 public:

  SettingSystemService_SetSettingItems_result(const SettingSystemService_SetSettingItems_result&);
  SettingSystemService_SetSettingItems_result& operator=(const SettingSystemService_SetSettingItems_result&);
  SettingSystemService_SetSettingItems_result() : success(0) {
  }

  virtual ~SettingSystemService_SetSettingItems_result() throw();
  int32_t success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetSettingItems_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_SetSettingItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetSettingItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetSettingItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetSettingItems_presult__isset {
  _SettingSystemService_SetSettingItems_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetSettingItems_presult__isset;

class SettingSystemService_SetSettingItems_presult {
 public:


  virtual ~SettingSystemService_SetSettingItems_presult() throw();
  int32_t* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetSettingItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RestoreDefault_args__isset {
  _SettingSystemService_RestoreDefault_args__isset() : moduleName(false), category(false) {}
  bool moduleName :1;
  bool category :1;
} _SettingSystemService_RestoreDefault_args__isset;

class SettingSystemService_RestoreDefault_args {
 public:

  SettingSystemService_RestoreDefault_args(const SettingSystemService_RestoreDefault_args&);
  SettingSystemService_RestoreDefault_args& operator=(const SettingSystemService_RestoreDefault_args&);
  SettingSystemService_RestoreDefault_args() : moduleName(), category() {
  }

  virtual ~SettingSystemService_RestoreDefault_args() throw();
  std::string moduleName;
  std::string category;

  _SettingSystemService_RestoreDefault_args__isset __isset;

  void __set_moduleName(const std::string& val);

  void __set_category(const std::string& val);

  bool operator == (const SettingSystemService_RestoreDefault_args & rhs) const
  {
    if (!(moduleName == rhs.moduleName))
      return false;
    if (!(category == rhs.category))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RestoreDefault_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RestoreDefault_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RestoreDefault_pargs {
 public:


  virtual ~SettingSystemService_RestoreDefault_pargs() throw();
  const std::string* moduleName;
  const std::string* category;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RestoreDefault_result__isset {
  _SettingSystemService_RestoreDefault_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RestoreDefault_result__isset;

class SettingSystemService_RestoreDefault_result {
 public:

  SettingSystemService_RestoreDefault_result(const SettingSystemService_RestoreDefault_result&);
  SettingSystemService_RestoreDefault_result& operator=(const SettingSystemService_RestoreDefault_result&);
  SettingSystemService_RestoreDefault_result() : success(0) {
  }

  virtual ~SettingSystemService_RestoreDefault_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RestoreDefault_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RestoreDefault_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RestoreDefault_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RestoreDefault_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RestoreDefault_presult__isset {
  _SettingSystemService_RestoreDefault_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RestoreDefault_presult__isset;

class SettingSystemService_RestoreDefault_presult {
 public:


  virtual ~SettingSystemService_RestoreDefault_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RestoreDefault_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RestoreUserDefault_args__isset {
  _SettingSystemService_RestoreUserDefault_args__isset() : userId(false), moduleName(false), category(false) {}
  bool userId :1;
  bool moduleName :1;
  bool category :1;
} _SettingSystemService_RestoreUserDefault_args__isset;

class SettingSystemService_RestoreUserDefault_args {
 public:

  SettingSystemService_RestoreUserDefault_args(const SettingSystemService_RestoreUserDefault_args&);
  SettingSystemService_RestoreUserDefault_args& operator=(const SettingSystemService_RestoreUserDefault_args&);
  SettingSystemService_RestoreUserDefault_args() : userId(), moduleName(), category() {
  }

  virtual ~SettingSystemService_RestoreUserDefault_args() throw();
  std::string userId;
  std::string moduleName;
  std::string category;

  _SettingSystemService_RestoreUserDefault_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_moduleName(const std::string& val);

  void __set_category(const std::string& val);

  bool operator == (const SettingSystemService_RestoreUserDefault_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(moduleName == rhs.moduleName))
      return false;
    if (!(category == rhs.category))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RestoreUserDefault_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RestoreUserDefault_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RestoreUserDefault_pargs {
 public:


  virtual ~SettingSystemService_RestoreUserDefault_pargs() throw();
  const std::string* userId;
  const std::string* moduleName;
  const std::string* category;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RestoreUserDefault_result__isset {
  _SettingSystemService_RestoreUserDefault_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RestoreUserDefault_result__isset;

class SettingSystemService_RestoreUserDefault_result {
 public:

  SettingSystemService_RestoreUserDefault_result(const SettingSystemService_RestoreUserDefault_result&);
  SettingSystemService_RestoreUserDefault_result& operator=(const SettingSystemService_RestoreUserDefault_result&);
  SettingSystemService_RestoreUserDefault_result() : success(0) {
  }

  virtual ~SettingSystemService_RestoreUserDefault_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RestoreUserDefault_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RestoreUserDefault_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RestoreUserDefault_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RestoreUserDefault_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RestoreUserDefault_presult__isset {
  _SettingSystemService_RestoreUserDefault_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RestoreUserDefault_presult__isset;

class SettingSystemService_RestoreUserDefault_presult {
 public:


  virtual ~SettingSystemService_RestoreUserDefault_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RestoreUserDefault_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_UpdateModuleVersion_args__isset {
  _SettingSystemService_UpdateModuleVersion_args__isset() : moduleName(false) {}
  bool moduleName :1;
} _SettingSystemService_UpdateModuleVersion_args__isset;

class SettingSystemService_UpdateModuleVersion_args {
 public:

  SettingSystemService_UpdateModuleVersion_args(const SettingSystemService_UpdateModuleVersion_args&);
  SettingSystemService_UpdateModuleVersion_args& operator=(const SettingSystemService_UpdateModuleVersion_args&);
  SettingSystemService_UpdateModuleVersion_args() : moduleName() {
  }

  virtual ~SettingSystemService_UpdateModuleVersion_args() throw();
  std::string moduleName;

  _SettingSystemService_UpdateModuleVersion_args__isset __isset;

  void __set_moduleName(const std::string& val);

  bool operator == (const SettingSystemService_UpdateModuleVersion_args & rhs) const
  {
    if (!(moduleName == rhs.moduleName))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_UpdateModuleVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_UpdateModuleVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_UpdateModuleVersion_pargs {
 public:


  virtual ~SettingSystemService_UpdateModuleVersion_pargs() throw();
  const std::string* moduleName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_UpdateModuleVersion_result__isset {
  _SettingSystemService_UpdateModuleVersion_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_UpdateModuleVersion_result__isset;

class SettingSystemService_UpdateModuleVersion_result {
 public:

  SettingSystemService_UpdateModuleVersion_result(const SettingSystemService_UpdateModuleVersion_result&);
  SettingSystemService_UpdateModuleVersion_result& operator=(const SettingSystemService_UpdateModuleVersion_result&);
  SettingSystemService_UpdateModuleVersion_result() : success(0) {
  }

  virtual ~SettingSystemService_UpdateModuleVersion_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_UpdateModuleVersion_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_UpdateModuleVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_UpdateModuleVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_UpdateModuleVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_UpdateModuleVersion_presult__isset {
  _SettingSystemService_UpdateModuleVersion_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_UpdateModuleVersion_presult__isset;

class SettingSystemService_UpdateModuleVersion_presult {
 public:


  virtual ~SettingSystemService_UpdateModuleVersion_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_UpdateModuleVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SetUserAppData_args__isset {
  _SettingSystemService_SetUserAppData_args__isset() : userId(false), category(false), settingItems(false) {}
  bool userId :1;
  bool category :1;
  bool settingItems :1;
} _SettingSystemService_SetUserAppData_args__isset;

class SettingSystemService_SetUserAppData_args {
 public:

  SettingSystemService_SetUserAppData_args(const SettingSystemService_SetUserAppData_args&);
  SettingSystemService_SetUserAppData_args& operator=(const SettingSystemService_SetUserAppData_args&);
  SettingSystemService_SetUserAppData_args() : userId(), category() {
  }

  virtual ~SettingSystemService_SetUserAppData_args() throw();
  std::string userId;
  std::string category;
  std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue>  settingItems;

  _SettingSystemService_SetUserAppData_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_category(const std::string& val);

  void __set_settingItems(const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & val);

  bool operator == (const SettingSystemService_SetUserAppData_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(settingItems == rhs.settingItems))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetUserAppData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetUserAppData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SetUserAppData_pargs {
 public:


  virtual ~SettingSystemService_SetUserAppData_pargs() throw();
  const std::string* userId;
  const std::string* category;
  const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> * settingItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetUserAppData_result__isset {
  _SettingSystemService_SetUserAppData_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetUserAppData_result__isset;

class SettingSystemService_SetUserAppData_result {
 public:

  SettingSystemService_SetUserAppData_result(const SettingSystemService_SetUserAppData_result&);
  SettingSystemService_SetUserAppData_result& operator=(const SettingSystemService_SetUserAppData_result&);
  SettingSystemService_SetUserAppData_result() : success(0) {
  }

  virtual ~SettingSystemService_SetUserAppData_result() throw();
  int32_t success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetUserAppData_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_SetUserAppData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetUserAppData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetUserAppData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetUserAppData_presult__isset {
  _SettingSystemService_SetUserAppData_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SetUserAppData_presult__isset;

class SettingSystemService_SetUserAppData_presult {
 public:


  virtual ~SettingSystemService_SetUserAppData_presult() throw();
  int32_t* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SetUserAppData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_GetUserAppData_args__isset {
  _SettingSystemService_GetUserAppData_args__isset() : userId(false), category(false), settingKeys(false) {}
  bool userId :1;
  bool category :1;
  bool settingKeys :1;
} _SettingSystemService_GetUserAppData_args__isset;

class SettingSystemService_GetUserAppData_args {
 public:

  SettingSystemService_GetUserAppData_args(const SettingSystemService_GetUserAppData_args&);
  SettingSystemService_GetUserAppData_args& operator=(const SettingSystemService_GetUserAppData_args&);
  SettingSystemService_GetUserAppData_args() : userId(), category() {
  }

  virtual ~SettingSystemService_GetUserAppData_args() throw();
  std::string userId;
  std::string category;
  std::vector<std::string>  settingKeys;

  _SettingSystemService_GetUserAppData_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_category(const std::string& val);

  void __set_settingKeys(const std::vector<std::string> & val);

  bool operator == (const SettingSystemService_GetUserAppData_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(settingKeys == rhs.settingKeys))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetUserAppData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetUserAppData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetUserAppData_pargs {
 public:


  virtual ~SettingSystemService_GetUserAppData_pargs() throw();
  const std::string* userId;
  const std::string* category;
  const std::vector<std::string> * settingKeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetUserAppData_result__isset {
  _SettingSystemService_GetUserAppData_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetUserAppData_result__isset;

class SettingSystemService_GetUserAppData_result {
 public:

  SettingSystemService_GetUserAppData_result(const SettingSystemService_GetUserAppData_result&);
  SettingSystemService_GetUserAppData_result& operator=(const SettingSystemService_GetUserAppData_result&);
  SettingSystemService_GetUserAppData_result() {
  }

  virtual ~SettingSystemService_GetUserAppData_result() throw();
   ::Ruyi::SDK::CommonType::AppData success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetUserAppData_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::CommonType::AppData& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetUserAppData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetUserAppData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetUserAppData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetUserAppData_presult__isset {
  _SettingSystemService_GetUserAppData_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetUserAppData_presult__isset;

class SettingSystemService_GetUserAppData_presult {
 public:


  virtual ~SettingSystemService_GetUserAppData_presult() throw();
   ::Ruyi::SDK::CommonType::AppData* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetUserAppData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RemoveUserAppData_args__isset {
  _SettingSystemService_RemoveUserAppData_args__isset() : userId(false), category(false), settingKeys(false) {}
  bool userId :1;
  bool category :1;
  bool settingKeys :1;
} _SettingSystemService_RemoveUserAppData_args__isset;

class SettingSystemService_RemoveUserAppData_args {
 public:

  SettingSystemService_RemoveUserAppData_args(const SettingSystemService_RemoveUserAppData_args&);
  SettingSystemService_RemoveUserAppData_args& operator=(const SettingSystemService_RemoveUserAppData_args&);
  SettingSystemService_RemoveUserAppData_args() : userId(), category() {
  }

  virtual ~SettingSystemService_RemoveUserAppData_args() throw();
  std::string userId;
  std::string category;
  std::vector<std::string>  settingKeys;

  _SettingSystemService_RemoveUserAppData_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_category(const std::string& val);

  void __set_settingKeys(const std::vector<std::string> & val);

  bool operator == (const SettingSystemService_RemoveUserAppData_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(settingKeys == rhs.settingKeys))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RemoveUserAppData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RemoveUserAppData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RemoveUserAppData_pargs {
 public:


  virtual ~SettingSystemService_RemoveUserAppData_pargs() throw();
  const std::string* userId;
  const std::string* category;
  const std::vector<std::string> * settingKeys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RemoveUserAppData_result__isset {
  _SettingSystemService_RemoveUserAppData_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RemoveUserAppData_result__isset;

class SettingSystemService_RemoveUserAppData_result {
 public:

  SettingSystemService_RemoveUserAppData_result(const SettingSystemService_RemoveUserAppData_result&);
  SettingSystemService_RemoveUserAppData_result& operator=(const SettingSystemService_RemoveUserAppData_result&);
  SettingSystemService_RemoveUserAppData_result() : success(0) {
  }

  virtual ~SettingSystemService_RemoveUserAppData_result() throw();
  int32_t success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RemoveUserAppData_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RemoveUserAppData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RemoveUserAppData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RemoveUserAppData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RemoveUserAppData_presult__isset {
  _SettingSystemService_RemoveUserAppData_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RemoveUserAppData_presult__isset;

class SettingSystemService_RemoveUserAppData_presult {
 public:


  virtual ~SettingSystemService_RemoveUserAppData_presult() throw();
  int32_t* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RemoveUserAppData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SettingItemNotify_args__isset {
  _SettingSystemService_SettingItemNotify_args__isset() : key(false), contents(false) {}
  bool key :1;
  bool contents :1;
} _SettingSystemService_SettingItemNotify_args__isset;

class SettingSystemService_SettingItemNotify_args {
 public:

  SettingSystemService_SettingItemNotify_args(const SettingSystemService_SettingItemNotify_args&);
  SettingSystemService_SettingItemNotify_args& operator=(const SettingSystemService_SettingItemNotify_args&);
  SettingSystemService_SettingItemNotify_args() : key(), contents() {
  }

  virtual ~SettingSystemService_SettingItemNotify_args() throw();
  std::string key;
   ::Ruyi::SDK::SettingSystem::Api::JSON contents;

  _SettingSystemService_SettingItemNotify_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_contents(const  ::Ruyi::SDK::SettingSystem::Api::JSON& val);

  bool operator == (const SettingSystemService_SettingItemNotify_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(contents == rhs.contents))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SettingItemNotify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SettingItemNotify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SettingItemNotify_pargs {
 public:


  virtual ~SettingSystemService_SettingItemNotify_pargs() throw();
  const std::string* key;
  const  ::Ruyi::SDK::SettingSystem::Api::JSON* contents;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SettingItemNotify_result__isset {
  _SettingSystemService_SettingItemNotify_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SettingItemNotify_result__isset;

class SettingSystemService_SettingItemNotify_result {
 public:

  SettingSystemService_SettingItemNotify_result(const SettingSystemService_SettingItemNotify_result&);
  SettingSystemService_SettingItemNotify_result& operator=(const SettingSystemService_SettingItemNotify_result&);
  SettingSystemService_SettingItemNotify_result() : success(0) {
  }

  virtual ~SettingSystemService_SettingItemNotify_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SettingItemNotify_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_SettingItemNotify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SettingItemNotify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SettingItemNotify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SettingItemNotify_presult__isset {
  _SettingSystemService_SettingItemNotify_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_SettingItemNotify_presult__isset;

class SettingSystemService_SettingItemNotify_presult {
 public:


  virtual ~SettingSystemService_SettingItemNotify_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_SettingItemNotify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetNetworkAdapterSettings_args {
 public:

  SettingSystemService_GetNetworkAdapterSettings_args(const SettingSystemService_GetNetworkAdapterSettings_args&);
  SettingSystemService_GetNetworkAdapterSettings_args& operator=(const SettingSystemService_GetNetworkAdapterSettings_args&);
  SettingSystemService_GetNetworkAdapterSettings_args() {
  }

  virtual ~SettingSystemService_GetNetworkAdapterSettings_args() throw();

  bool operator == (const SettingSystemService_GetNetworkAdapterSettings_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkAdapterSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkAdapterSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetNetworkAdapterSettings_pargs {
 public:


  virtual ~SettingSystemService_GetNetworkAdapterSettings_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkAdapterSettings_result__isset {
  _SettingSystemService_GetNetworkAdapterSettings_result__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_GetNetworkAdapterSettings_result__isset;

class SettingSystemService_GetNetworkAdapterSettings_result {
 public:

  SettingSystemService_GetNetworkAdapterSettings_result(const SettingSystemService_GetNetworkAdapterSettings_result&);
  SettingSystemService_GetNetworkAdapterSettings_result& operator=(const SettingSystemService_GetNetworkAdapterSettings_result&);
  SettingSystemService_GetNetworkAdapterSettings_result() {
  }

  virtual ~SettingSystemService_GetNetworkAdapterSettings_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::NetworkSettings success;

  _SettingSystemService_GetNetworkAdapterSettings_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& val);

  bool operator == (const SettingSystemService_GetNetworkAdapterSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkAdapterSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkAdapterSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkAdapterSettings_presult__isset {
  _SettingSystemService_GetNetworkAdapterSettings_presult__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_GetNetworkAdapterSettings_presult__isset;

class SettingSystemService_GetNetworkAdapterSettings_presult {
 public:


  virtual ~SettingSystemService_GetNetworkAdapterSettings_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::NetworkSettings* success;

  _SettingSystemService_GetNetworkAdapterSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetLanNetworkName_args {
 public:

  SettingSystemService_GetLanNetworkName_args(const SettingSystemService_GetLanNetworkName_args&);
  SettingSystemService_GetLanNetworkName_args& operator=(const SettingSystemService_GetLanNetworkName_args&);
  SettingSystemService_GetLanNetworkName_args() {
  }

  virtual ~SettingSystemService_GetLanNetworkName_args() throw();

  bool operator == (const SettingSystemService_GetLanNetworkName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetLanNetworkName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetLanNetworkName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetLanNetworkName_pargs {
 public:


  virtual ~SettingSystemService_GetLanNetworkName_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetLanNetworkName_result__isset {
  _SettingSystemService_GetLanNetworkName_result__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_GetLanNetworkName_result__isset;

class SettingSystemService_GetLanNetworkName_result {
 public:

  SettingSystemService_GetLanNetworkName_result(const SettingSystemService_GetLanNetworkName_result&);
  SettingSystemService_GetLanNetworkName_result& operator=(const SettingSystemService_GetLanNetworkName_result&);
  SettingSystemService_GetLanNetworkName_result() : success() {
  }

  virtual ~SettingSystemService_GetLanNetworkName_result() throw();
  std::string success;

  _SettingSystemService_GetLanNetworkName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SettingSystemService_GetLanNetworkName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetLanNetworkName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetLanNetworkName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetLanNetworkName_presult__isset {
  _SettingSystemService_GetLanNetworkName_presult__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_GetLanNetworkName_presult__isset;

class SettingSystemService_GetLanNetworkName_presult {
 public:


  virtual ~SettingSystemService_GetLanNetworkName_presult() throw();
  std::string* success;

  _SettingSystemService_GetLanNetworkName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SetNetworkSettings_args__isset {
  _SettingSystemService_SetNetworkSettings_args__isset() : isWLan(false), EnableDHCP(false), IpAddress(false), SubMask(false), Gateway(false), MainDNS(false), SubDNS(false) {}
  bool isWLan :1;
  bool EnableDHCP :1;
  bool IpAddress :1;
  bool SubMask :1;
  bool Gateway :1;
  bool MainDNS :1;
  bool SubDNS :1;
} _SettingSystemService_SetNetworkSettings_args__isset;

class SettingSystemService_SetNetworkSettings_args {
 public:

  SettingSystemService_SetNetworkSettings_args(const SettingSystemService_SetNetworkSettings_args&);
  SettingSystemService_SetNetworkSettings_args& operator=(const SettingSystemService_SetNetworkSettings_args&);
  SettingSystemService_SetNetworkSettings_args() : isWLan(0), EnableDHCP(0), IpAddress(), SubMask(), Gateway(), MainDNS(), SubDNS() {
  }

  virtual ~SettingSystemService_SetNetworkSettings_args() throw();
  bool isWLan;
  bool EnableDHCP;
  std::string IpAddress;
  std::string SubMask;
  std::string Gateway;
  std::string MainDNS;
  std::string SubDNS;

  _SettingSystemService_SetNetworkSettings_args__isset __isset;

  void __set_isWLan(const bool val);

  void __set_EnableDHCP(const bool val);

  void __set_IpAddress(const std::string& val);

  void __set_SubMask(const std::string& val);

  void __set_Gateway(const std::string& val);

  void __set_MainDNS(const std::string& val);

  void __set_SubDNS(const std::string& val);

  bool operator == (const SettingSystemService_SetNetworkSettings_args & rhs) const
  {
    if (!(isWLan == rhs.isWLan))
      return false;
    if (!(EnableDHCP == rhs.EnableDHCP))
      return false;
    if (!(IpAddress == rhs.IpAddress))
      return false;
    if (!(SubMask == rhs.SubMask))
      return false;
    if (!(Gateway == rhs.Gateway))
      return false;
    if (!(MainDNS == rhs.MainDNS))
      return false;
    if (!(SubDNS == rhs.SubDNS))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetNetworkSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetNetworkSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SetNetworkSettings_pargs {
 public:


  virtual ~SettingSystemService_SetNetworkSettings_pargs() throw();
  const bool* isWLan;
  const bool* EnableDHCP;
  const std::string* IpAddress;
  const std::string* SubMask;
  const std::string* Gateway;
  const std::string* MainDNS;
  const std::string* SubDNS;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetNetworkSettings_result__isset {
  _SettingSystemService_SetNetworkSettings_result__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_SetNetworkSettings_result__isset;

class SettingSystemService_SetNetworkSettings_result {
 public:

  SettingSystemService_SetNetworkSettings_result(const SettingSystemService_SetNetworkSettings_result&);
  SettingSystemService_SetNetworkSettings_result& operator=(const SettingSystemService_SetNetworkSettings_result&);
  SettingSystemService_SetNetworkSettings_result() : success(0) {
  }

  virtual ~SettingSystemService_SetNetworkSettings_result() throw();
  bool success;

  _SettingSystemService_SetNetworkSettings_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SettingSystemService_SetNetworkSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetNetworkSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetNetworkSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetNetworkSettings_presult__isset {
  _SettingSystemService_SetNetworkSettings_presult__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_SetNetworkSettings_presult__isset;

class SettingSystemService_SetNetworkSettings_presult {
 public:


  virtual ~SettingSystemService_SetNetworkSettings_presult() throw();
  bool* success;

  _SettingSystemService_SetNetworkSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_SetNetworkProxy_args__isset {
  _SettingSystemService_SetNetworkProxy_args__isset() : ProxyServer(false), ProxyPort(false) {}
  bool ProxyServer :1;
  bool ProxyPort :1;
} _SettingSystemService_SetNetworkProxy_args__isset;

class SettingSystemService_SetNetworkProxy_args {
 public:

  SettingSystemService_SetNetworkProxy_args(const SettingSystemService_SetNetworkProxy_args&);
  SettingSystemService_SetNetworkProxy_args& operator=(const SettingSystemService_SetNetworkProxy_args&);
  SettingSystemService_SetNetworkProxy_args() : ProxyServer(), ProxyPort() {
  }

  virtual ~SettingSystemService_SetNetworkProxy_args() throw();
  std::string ProxyServer;
  std::string ProxyPort;

  _SettingSystemService_SetNetworkProxy_args__isset __isset;

  void __set_ProxyServer(const std::string& val);

  void __set_ProxyPort(const std::string& val);

  bool operator == (const SettingSystemService_SetNetworkProxy_args & rhs) const
  {
    if (!(ProxyServer == rhs.ProxyServer))
      return false;
    if (!(ProxyPort == rhs.ProxyPort))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetNetworkProxy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetNetworkProxy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_SetNetworkProxy_pargs {
 public:


  virtual ~SettingSystemService_SetNetworkProxy_pargs() throw();
  const std::string* ProxyServer;
  const std::string* ProxyPort;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetNetworkProxy_result__isset {
  _SettingSystemService_SetNetworkProxy_result__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_SetNetworkProxy_result__isset;

class SettingSystemService_SetNetworkProxy_result {
 public:

  SettingSystemService_SetNetworkProxy_result(const SettingSystemService_SetNetworkProxy_result&);
  SettingSystemService_SetNetworkProxy_result& operator=(const SettingSystemService_SetNetworkProxy_result&);
  SettingSystemService_SetNetworkProxy_result() : success(0) {
  }

  virtual ~SettingSystemService_SetNetworkProxy_result() throw();
  bool success;

  _SettingSystemService_SetNetworkProxy_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SettingSystemService_SetNetworkProxy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_SetNetworkProxy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_SetNetworkProxy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_SetNetworkProxy_presult__isset {
  _SettingSystemService_SetNetworkProxy_presult__isset() : success(false) {}
  bool success :1;
} _SettingSystemService_SetNetworkProxy_presult__isset;

class SettingSystemService_SetNetworkProxy_presult {
 public:


  virtual ~SettingSystemService_SetNetworkProxy_presult() throw();
  bool* success;

  _SettingSystemService_SetNetworkProxy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_ConnectToWifi_args__isset {
  _SettingSystemService_ConnectToWifi_args__isset() : profileName(false), key(false) {}
  bool profileName :1;
  bool key :1;
} _SettingSystemService_ConnectToWifi_args__isset;

class SettingSystemService_ConnectToWifi_args {
 public:

  SettingSystemService_ConnectToWifi_args(const SettingSystemService_ConnectToWifi_args&);
  SettingSystemService_ConnectToWifi_args& operator=(const SettingSystemService_ConnectToWifi_args&);
  SettingSystemService_ConnectToWifi_args() : profileName(), key() {
  }

  virtual ~SettingSystemService_ConnectToWifi_args() throw();
  std::string profileName;
  std::string key;

  _SettingSystemService_ConnectToWifi_args__isset __isset;

  void __set_profileName(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const SettingSystemService_ConnectToWifi_args & rhs) const
  {
    if (!(profileName == rhs.profileName))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectToWifi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectToWifi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_ConnectToWifi_pargs {
 public:


  virtual ~SettingSystemService_ConnectToWifi_pargs() throw();
  const std::string* profileName;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectToWifi_result__isset {
  _SettingSystemService_ConnectToWifi_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectToWifi_result__isset;

class SettingSystemService_ConnectToWifi_result {
 public:

  SettingSystemService_ConnectToWifi_result(const SettingSystemService_ConnectToWifi_result&);
  SettingSystemService_ConnectToWifi_result& operator=(const SettingSystemService_ConnectToWifi_result&);
  SettingSystemService_ConnectToWifi_result() : success(0) {
  }

  virtual ~SettingSystemService_ConnectToWifi_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectToWifi_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_ConnectToWifi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectToWifi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectToWifi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectToWifi_presult__isset {
  _SettingSystemService_ConnectToWifi_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectToWifi_presult__isset;

class SettingSystemService_ConnectToWifi_presult {
 public:


  virtual ~SettingSystemService_ConnectToWifi_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectToWifi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_ConnectToAppointedWifi_args__isset {
  _SettingSystemService_ConnectToAppointedWifi_args__isset() : profileName(false), Auth(false), Ciper(false), KeyType(false), key(false) {}
  bool profileName :1;
  bool Auth :1;
  bool Ciper :1;
  bool KeyType :1;
  bool key :1;
} _SettingSystemService_ConnectToAppointedWifi_args__isset;

class SettingSystemService_ConnectToAppointedWifi_args {
 public:

  SettingSystemService_ConnectToAppointedWifi_args(const SettingSystemService_ConnectToAppointedWifi_args&);
  SettingSystemService_ConnectToAppointedWifi_args& operator=(const SettingSystemService_ConnectToAppointedWifi_args&);
  SettingSystemService_ConnectToAppointedWifi_args() : profileName(), Auth(), Ciper(), KeyType(), key() {
  }

  virtual ~SettingSystemService_ConnectToAppointedWifi_args() throw();
  std::string profileName;
  std::string Auth;
  std::string Ciper;
  std::string KeyType;
  std::string key;

  _SettingSystemService_ConnectToAppointedWifi_args__isset __isset;

  void __set_profileName(const std::string& val);

  void __set_Auth(const std::string& val);

  void __set_Ciper(const std::string& val);

  void __set_KeyType(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const SettingSystemService_ConnectToAppointedWifi_args & rhs) const
  {
    if (!(profileName == rhs.profileName))
      return false;
    if (!(Auth == rhs.Auth))
      return false;
    if (!(Ciper == rhs.Ciper))
      return false;
    if (!(KeyType == rhs.KeyType))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectToAppointedWifi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectToAppointedWifi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_ConnectToAppointedWifi_pargs {
 public:


  virtual ~SettingSystemService_ConnectToAppointedWifi_pargs() throw();
  const std::string* profileName;
  const std::string* Auth;
  const std::string* Ciper;
  const std::string* KeyType;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectToAppointedWifi_result__isset {
  _SettingSystemService_ConnectToAppointedWifi_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectToAppointedWifi_result__isset;

class SettingSystemService_ConnectToAppointedWifi_result {
 public:

  SettingSystemService_ConnectToAppointedWifi_result(const SettingSystemService_ConnectToAppointedWifi_result&);
  SettingSystemService_ConnectToAppointedWifi_result& operator=(const SettingSystemService_ConnectToAppointedWifi_result&);
  SettingSystemService_ConnectToAppointedWifi_result() : success(0) {
  }

  virtual ~SettingSystemService_ConnectToAppointedWifi_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectToAppointedWifi_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_ConnectToAppointedWifi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectToAppointedWifi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectToAppointedWifi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectToAppointedWifi_presult__isset {
  _SettingSystemService_ConnectToAppointedWifi_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectToAppointedWifi_presult__isset;

class SettingSystemService_ConnectToAppointedWifi_presult {
 public:


  virtual ~SettingSystemService_ConnectToAppointedWifi_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectToAppointedWifi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetNetworkSettings_args {
 public:

  SettingSystemService_GetNetworkSettings_args(const SettingSystemService_GetNetworkSettings_args&);
  SettingSystemService_GetNetworkSettings_args& operator=(const SettingSystemService_GetNetworkSettings_args&);
  SettingSystemService_GetNetworkSettings_args() {
  }

  virtual ~SettingSystemService_GetNetworkSettings_args() throw();

  bool operator == (const SettingSystemService_GetNetworkSettings_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkSettings_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkSettings_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetNetworkSettings_pargs {
 public:


  virtual ~SettingSystemService_GetNetworkSettings_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkSettings_result__isset {
  _SettingSystemService_GetNetworkSettings_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetNetworkSettings_result__isset;

class SettingSystemService_GetNetworkSettings_result {
 public:

  SettingSystemService_GetNetworkSettings_result(const SettingSystemService_GetNetworkSettings_result&);
  SettingSystemService_GetNetworkSettings_result& operator=(const SettingSystemService_GetNetworkSettings_result&);
  SettingSystemService_GetNetworkSettings_result() {
  }

  virtual ~SettingSystemService_GetNetworkSettings_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetNetworkSettings_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetNetworkSettings_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkSettings_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkSettings_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkSettings_presult__isset {
  _SettingSystemService_GetNetworkSettings_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetNetworkSettings_presult__isset;

class SettingSystemService_GetNetworkSettings_presult {
 public:


  virtual ~SettingSystemService_GetNetworkSettings_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetNetworkSettings_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetNetworkStatus_args {
 public:

  SettingSystemService_GetNetworkStatus_args(const SettingSystemService_GetNetworkStatus_args&);
  SettingSystemService_GetNetworkStatus_args& operator=(const SettingSystemService_GetNetworkStatus_args&);
  SettingSystemService_GetNetworkStatus_args() {
  }

  virtual ~SettingSystemService_GetNetworkStatus_args() throw();

  bool operator == (const SettingSystemService_GetNetworkStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetNetworkStatus_pargs {
 public:


  virtual ~SettingSystemService_GetNetworkStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkStatus_result__isset {
  _SettingSystemService_GetNetworkStatus_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetNetworkStatus_result__isset;

class SettingSystemService_GetNetworkStatus_result {
 public:

  SettingSystemService_GetNetworkStatus_result(const SettingSystemService_GetNetworkStatus_result&);
  SettingSystemService_GetNetworkStatus_result& operator=(const SettingSystemService_GetNetworkStatus_result&);
  SettingSystemService_GetNetworkStatus_result() {
  }

  virtual ~SettingSystemService_GetNetworkStatus_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetNetworkStatus_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetNetworkStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetNetworkStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetNetworkStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetNetworkStatus_presult__isset {
  _SettingSystemService_GetNetworkStatus_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetNetworkStatus_presult__isset;

class SettingSystemService_GetNetworkStatus_presult {
 public:


  virtual ~SettingSystemService_GetNetworkStatus_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetNetworkStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_RuyiTestNetwork_args {
 public:

  SettingSystemService_RuyiTestNetwork_args(const SettingSystemService_RuyiTestNetwork_args&);
  SettingSystemService_RuyiTestNetwork_args& operator=(const SettingSystemService_RuyiTestNetwork_args&);
  SettingSystemService_RuyiTestNetwork_args() {
  }

  virtual ~SettingSystemService_RuyiTestNetwork_args() throw();

  bool operator == (const SettingSystemService_RuyiTestNetwork_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_RuyiTestNetwork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiTestNetwork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RuyiTestNetwork_pargs {
 public:


  virtual ~SettingSystemService_RuyiTestNetwork_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiTestNetwork_result__isset {
  _SettingSystemService_RuyiTestNetwork_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiTestNetwork_result__isset;

class SettingSystemService_RuyiTestNetwork_result {
 public:

  SettingSystemService_RuyiTestNetwork_result(const SettingSystemService_RuyiTestNetwork_result&);
  SettingSystemService_RuyiTestNetwork_result& operator=(const SettingSystemService_RuyiTestNetwork_result&);
  SettingSystemService_RuyiTestNetwork_result() {
  }

  virtual ~SettingSystemService_RuyiTestNetwork_result() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiTestNetwork_result__isset __isset;

  void __set_success(const  ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RuyiTestNetwork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RuyiTestNetwork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiTestNetwork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiTestNetwork_presult__isset {
  _SettingSystemService_RuyiTestNetwork_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiTestNetwork_presult__isset;

class SettingSystemService_RuyiTestNetwork_presult {
 public:


  virtual ~SettingSystemService_RuyiTestNetwork_presult() throw();
   ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiTestNetwork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RuyiStartNetworkSpeedTest_args__isset {
  _SettingSystemService_RuyiStartNetworkSpeedTest_args__isset() : userindex(false) {}
  bool userindex :1;
} _SettingSystemService_RuyiStartNetworkSpeedTest_args__isset;

class SettingSystemService_RuyiStartNetworkSpeedTest_args {
 public:

  SettingSystemService_RuyiStartNetworkSpeedTest_args(const SettingSystemService_RuyiStartNetworkSpeedTest_args&);
  SettingSystemService_RuyiStartNetworkSpeedTest_args& operator=(const SettingSystemService_RuyiStartNetworkSpeedTest_args&);
  SettingSystemService_RuyiStartNetworkSpeedTest_args() : userindex(0) {
  }

  virtual ~SettingSystemService_RuyiStartNetworkSpeedTest_args() throw();
  int32_t userindex;

  _SettingSystemService_RuyiStartNetworkSpeedTest_args__isset __isset;

  void __set_userindex(const int32_t val);

  bool operator == (const SettingSystemService_RuyiStartNetworkSpeedTest_args & rhs) const
  {
    if (!(userindex == rhs.userindex))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RuyiStartNetworkSpeedTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiStartNetworkSpeedTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RuyiStartNetworkSpeedTest_pargs {
 public:


  virtual ~SettingSystemService_RuyiStartNetworkSpeedTest_pargs() throw();
  const int32_t* userindex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiStartNetworkSpeedTest_result__isset {
  _SettingSystemService_RuyiStartNetworkSpeedTest_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiStartNetworkSpeedTest_result__isset;

class SettingSystemService_RuyiStartNetworkSpeedTest_result {
 public:

  SettingSystemService_RuyiStartNetworkSpeedTest_result(const SettingSystemService_RuyiStartNetworkSpeedTest_result&);
  SettingSystemService_RuyiStartNetworkSpeedTest_result& operator=(const SettingSystemService_RuyiStartNetworkSpeedTest_result&);
  SettingSystemService_RuyiStartNetworkSpeedTest_result() : success(0) {
  }

  virtual ~SettingSystemService_RuyiStartNetworkSpeedTest_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiStartNetworkSpeedTest_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RuyiStartNetworkSpeedTest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RuyiStartNetworkSpeedTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiStartNetworkSpeedTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiStartNetworkSpeedTest_presult__isset {
  _SettingSystemService_RuyiStartNetworkSpeedTest_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiStartNetworkSpeedTest_presult__isset;

class SettingSystemService_RuyiStartNetworkSpeedTest_presult {
 public:


  virtual ~SettingSystemService_RuyiStartNetworkSpeedTest_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiStartNetworkSpeedTest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RuyiStopNetworkSpeedTest_args__isset {
  _SettingSystemService_RuyiStopNetworkSpeedTest_args__isset() : userindex(false) {}
  bool userindex :1;
} _SettingSystemService_RuyiStopNetworkSpeedTest_args__isset;

class SettingSystemService_RuyiStopNetworkSpeedTest_args {
 public:

  SettingSystemService_RuyiStopNetworkSpeedTest_args(const SettingSystemService_RuyiStopNetworkSpeedTest_args&);
  SettingSystemService_RuyiStopNetworkSpeedTest_args& operator=(const SettingSystemService_RuyiStopNetworkSpeedTest_args&);
  SettingSystemService_RuyiStopNetworkSpeedTest_args() : userindex(0) {
  }

  virtual ~SettingSystemService_RuyiStopNetworkSpeedTest_args() throw();
  int32_t userindex;

  _SettingSystemService_RuyiStopNetworkSpeedTest_args__isset __isset;

  void __set_userindex(const int32_t val);

  bool operator == (const SettingSystemService_RuyiStopNetworkSpeedTest_args & rhs) const
  {
    if (!(userindex == rhs.userindex))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RuyiStopNetworkSpeedTest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiStopNetworkSpeedTest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RuyiStopNetworkSpeedTest_pargs {
 public:


  virtual ~SettingSystemService_RuyiStopNetworkSpeedTest_pargs() throw();
  const int32_t* userindex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiStopNetworkSpeedTest_result__isset {
  _SettingSystemService_RuyiStopNetworkSpeedTest_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiStopNetworkSpeedTest_result__isset;

class SettingSystemService_RuyiStopNetworkSpeedTest_result {
 public:

  SettingSystemService_RuyiStopNetworkSpeedTest_result(const SettingSystemService_RuyiStopNetworkSpeedTest_result&);
  SettingSystemService_RuyiStopNetworkSpeedTest_result& operator=(const SettingSystemService_RuyiStopNetworkSpeedTest_result&);
  SettingSystemService_RuyiStopNetworkSpeedTest_result() : success(0) {
  }

  virtual ~SettingSystemService_RuyiStopNetworkSpeedTest_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiStopNetworkSpeedTest_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RuyiStopNetworkSpeedTest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RuyiStopNetworkSpeedTest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RuyiStopNetworkSpeedTest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RuyiStopNetworkSpeedTest_presult__isset {
  _SettingSystemService_RuyiStopNetworkSpeedTest_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RuyiStopNetworkSpeedTest_presult__isset;

class SettingSystemService_RuyiStopNetworkSpeedTest_presult {
 public:


  virtual ~SettingSystemService_RuyiStopNetworkSpeedTest_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RuyiStopNetworkSpeedTest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_GetAvailableWifi_args {
 public:

  SettingSystemService_GetAvailableWifi_args(const SettingSystemService_GetAvailableWifi_args&);
  SettingSystemService_GetAvailableWifi_args& operator=(const SettingSystemService_GetAvailableWifi_args&);
  SettingSystemService_GetAvailableWifi_args() {
  }

  virtual ~SettingSystemService_GetAvailableWifi_args() throw();

  bool operator == (const SettingSystemService_GetAvailableWifi_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_GetAvailableWifi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetAvailableWifi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_GetAvailableWifi_pargs {
 public:


  virtual ~SettingSystemService_GetAvailableWifi_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetAvailableWifi_result__isset {
  _SettingSystemService_GetAvailableWifi_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetAvailableWifi_result__isset;

class SettingSystemService_GetAvailableWifi_result {
 public:

  SettingSystemService_GetAvailableWifi_result(const SettingSystemService_GetAvailableWifi_result&);
  SettingSystemService_GetAvailableWifi_result& operator=(const SettingSystemService_GetAvailableWifi_result&);
  SettingSystemService_GetAvailableWifi_result() {
  }

  virtual ~SettingSystemService_GetAvailableWifi_result() throw();
  std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity>  success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetAvailableWifi_result__isset __isset;

  void __set_success(const std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_GetAvailableWifi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_GetAvailableWifi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_GetAvailableWifi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_GetAvailableWifi_presult__isset {
  _SettingSystemService_GetAvailableWifi_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_GetAvailableWifi_presult__isset;

class SettingSystemService_GetAvailableWifi_presult {
 public:


  virtual ~SettingSystemService_GetAvailableWifi_presult() throw();
  std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> * success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_GetAvailableWifi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_DisconnectWifi_args {
 public:

  SettingSystemService_DisconnectWifi_args(const SettingSystemService_DisconnectWifi_args&);
  SettingSystemService_DisconnectWifi_args& operator=(const SettingSystemService_DisconnectWifi_args&);
  SettingSystemService_DisconnectWifi_args() {
  }

  virtual ~SettingSystemService_DisconnectWifi_args() throw();

  bool operator == (const SettingSystemService_DisconnectWifi_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_DisconnectWifi_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DisconnectWifi_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_DisconnectWifi_pargs {
 public:


  virtual ~SettingSystemService_DisconnectWifi_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DisconnectWifi_result__isset {
  _SettingSystemService_DisconnectWifi_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DisconnectWifi_result__isset;

class SettingSystemService_DisconnectWifi_result {
 public:

  SettingSystemService_DisconnectWifi_result(const SettingSystemService_DisconnectWifi_result&);
  SettingSystemService_DisconnectWifi_result& operator=(const SettingSystemService_DisconnectWifi_result&);
  SettingSystemService_DisconnectWifi_result() : success(0) {
  }

  virtual ~SettingSystemService_DisconnectWifi_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DisconnectWifi_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_DisconnectWifi_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_DisconnectWifi_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DisconnectWifi_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DisconnectWifi_presult__isset {
  _SettingSystemService_DisconnectWifi_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DisconnectWifi_presult__isset;

class SettingSystemService_DisconnectWifi_presult {
 public:


  virtual ~SettingSystemService_DisconnectWifi_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DisconnectWifi_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SettingSystemService_DiscoverBluetoothDevice_args {
 public:

  SettingSystemService_DiscoverBluetoothDevice_args(const SettingSystemService_DiscoverBluetoothDevice_args&);
  SettingSystemService_DiscoverBluetoothDevice_args& operator=(const SettingSystemService_DiscoverBluetoothDevice_args&);
  SettingSystemService_DiscoverBluetoothDevice_args() {
  }

  virtual ~SettingSystemService_DiscoverBluetoothDevice_args() throw();

  bool operator == (const SettingSystemService_DiscoverBluetoothDevice_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SettingSystemService_DiscoverBluetoothDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DiscoverBluetoothDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_DiscoverBluetoothDevice_pargs {
 public:


  virtual ~SettingSystemService_DiscoverBluetoothDevice_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DiscoverBluetoothDevice_result__isset {
  _SettingSystemService_DiscoverBluetoothDevice_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DiscoverBluetoothDevice_result__isset;

class SettingSystemService_DiscoverBluetoothDevice_result {
 public:

  SettingSystemService_DiscoverBluetoothDevice_result(const SettingSystemService_DiscoverBluetoothDevice_result&);
  SettingSystemService_DiscoverBluetoothDevice_result& operator=(const SettingSystemService_DiscoverBluetoothDevice_result&);
  SettingSystemService_DiscoverBluetoothDevice_result() : success(0) {
  }

  virtual ~SettingSystemService_DiscoverBluetoothDevice_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DiscoverBluetoothDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_DiscoverBluetoothDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_DiscoverBluetoothDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DiscoverBluetoothDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DiscoverBluetoothDevice_presult__isset {
  _SettingSystemService_DiscoverBluetoothDevice_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DiscoverBluetoothDevice_presult__isset;

class SettingSystemService_DiscoverBluetoothDevice_presult {
 public:


  virtual ~SettingSystemService_DiscoverBluetoothDevice_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DiscoverBluetoothDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_ConnectBluetoothDevice_args__isset {
  _SettingSystemService_ConnectBluetoothDevice_args__isset() : DeviceName(false), DeviceAddress(false) {}
  bool DeviceName :1;
  bool DeviceAddress :1;
} _SettingSystemService_ConnectBluetoothDevice_args__isset;

class SettingSystemService_ConnectBluetoothDevice_args {
 public:

  SettingSystemService_ConnectBluetoothDevice_args(const SettingSystemService_ConnectBluetoothDevice_args&);
  SettingSystemService_ConnectBluetoothDevice_args& operator=(const SettingSystemService_ConnectBluetoothDevice_args&);
  SettingSystemService_ConnectBluetoothDevice_args() : DeviceName(), DeviceAddress() {
  }

  virtual ~SettingSystemService_ConnectBluetoothDevice_args() throw();
  std::string DeviceName;
  std::string DeviceAddress;

  _SettingSystemService_ConnectBluetoothDevice_args__isset __isset;

  void __set_DeviceName(const std::string& val);

  void __set_DeviceAddress(const std::string& val);

  bool operator == (const SettingSystemService_ConnectBluetoothDevice_args & rhs) const
  {
    if (!(DeviceName == rhs.DeviceName))
      return false;
    if (!(DeviceAddress == rhs.DeviceAddress))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectBluetoothDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectBluetoothDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_ConnectBluetoothDevice_pargs {
 public:


  virtual ~SettingSystemService_ConnectBluetoothDevice_pargs() throw();
  const std::string* DeviceName;
  const std::string* DeviceAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectBluetoothDevice_result__isset {
  _SettingSystemService_ConnectBluetoothDevice_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectBluetoothDevice_result__isset;

class SettingSystemService_ConnectBluetoothDevice_result {
 public:

  SettingSystemService_ConnectBluetoothDevice_result(const SettingSystemService_ConnectBluetoothDevice_result&);
  SettingSystemService_ConnectBluetoothDevice_result& operator=(const SettingSystemService_ConnectBluetoothDevice_result&);
  SettingSystemService_ConnectBluetoothDevice_result() : success(0) {
  }

  virtual ~SettingSystemService_ConnectBluetoothDevice_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectBluetoothDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_ConnectBluetoothDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_ConnectBluetoothDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_ConnectBluetoothDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_ConnectBluetoothDevice_presult__isset {
  _SettingSystemService_ConnectBluetoothDevice_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_ConnectBluetoothDevice_presult__isset;

class SettingSystemService_ConnectBluetoothDevice_presult {
 public:


  virtual ~SettingSystemService_ConnectBluetoothDevice_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_ConnectBluetoothDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_DisconnectBluetoothDevice_args__isset {
  _SettingSystemService_DisconnectBluetoothDevice_args__isset() : DeviceName(false), DeviceAddress(false) {}
  bool DeviceName :1;
  bool DeviceAddress :1;
} _SettingSystemService_DisconnectBluetoothDevice_args__isset;

class SettingSystemService_DisconnectBluetoothDevice_args {
 public:

  SettingSystemService_DisconnectBluetoothDevice_args(const SettingSystemService_DisconnectBluetoothDevice_args&);
  SettingSystemService_DisconnectBluetoothDevice_args& operator=(const SettingSystemService_DisconnectBluetoothDevice_args&);
  SettingSystemService_DisconnectBluetoothDevice_args() : DeviceName(), DeviceAddress() {
  }

  virtual ~SettingSystemService_DisconnectBluetoothDevice_args() throw();
  std::string DeviceName;
  std::string DeviceAddress;

  _SettingSystemService_DisconnectBluetoothDevice_args__isset __isset;

  void __set_DeviceName(const std::string& val);

  void __set_DeviceAddress(const std::string& val);

  bool operator == (const SettingSystemService_DisconnectBluetoothDevice_args & rhs) const
  {
    if (!(DeviceName == rhs.DeviceName))
      return false;
    if (!(DeviceAddress == rhs.DeviceAddress))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_DisconnectBluetoothDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DisconnectBluetoothDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_DisconnectBluetoothDevice_pargs {
 public:


  virtual ~SettingSystemService_DisconnectBluetoothDevice_pargs() throw();
  const std::string* DeviceName;
  const std::string* DeviceAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DisconnectBluetoothDevice_result__isset {
  _SettingSystemService_DisconnectBluetoothDevice_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DisconnectBluetoothDevice_result__isset;

class SettingSystemService_DisconnectBluetoothDevice_result {
 public:

  SettingSystemService_DisconnectBluetoothDevice_result(const SettingSystemService_DisconnectBluetoothDevice_result&);
  SettingSystemService_DisconnectBluetoothDevice_result& operator=(const SettingSystemService_DisconnectBluetoothDevice_result&);
  SettingSystemService_DisconnectBluetoothDevice_result() : success(0) {
  }

  virtual ~SettingSystemService_DisconnectBluetoothDevice_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DisconnectBluetoothDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_DisconnectBluetoothDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_DisconnectBluetoothDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_DisconnectBluetoothDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_DisconnectBluetoothDevice_presult__isset {
  _SettingSystemService_DisconnectBluetoothDevice_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_DisconnectBluetoothDevice_presult__isset;

class SettingSystemService_DisconnectBluetoothDevice_presult {
 public:


  virtual ~SettingSystemService_DisconnectBluetoothDevice_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_DisconnectBluetoothDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SettingSystemService_RemoveBluetoothDevice_args__isset {
  _SettingSystemService_RemoveBluetoothDevice_args__isset() : DeviceName(false), DeviceAddress(false) {}
  bool DeviceName :1;
  bool DeviceAddress :1;
} _SettingSystemService_RemoveBluetoothDevice_args__isset;

class SettingSystemService_RemoveBluetoothDevice_args {
 public:

  SettingSystemService_RemoveBluetoothDevice_args(const SettingSystemService_RemoveBluetoothDevice_args&);
  SettingSystemService_RemoveBluetoothDevice_args& operator=(const SettingSystemService_RemoveBluetoothDevice_args&);
  SettingSystemService_RemoveBluetoothDevice_args() : DeviceName(), DeviceAddress() {
  }

  virtual ~SettingSystemService_RemoveBluetoothDevice_args() throw();
  std::string DeviceName;
  std::string DeviceAddress;

  _SettingSystemService_RemoveBluetoothDevice_args__isset __isset;

  void __set_DeviceName(const std::string& val);

  void __set_DeviceAddress(const std::string& val);

  bool operator == (const SettingSystemService_RemoveBluetoothDevice_args & rhs) const
  {
    if (!(DeviceName == rhs.DeviceName))
      return false;
    if (!(DeviceAddress == rhs.DeviceAddress))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RemoveBluetoothDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RemoveBluetoothDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SettingSystemService_RemoveBluetoothDevice_pargs {
 public:


  virtual ~SettingSystemService_RemoveBluetoothDevice_pargs() throw();
  const std::string* DeviceName;
  const std::string* DeviceAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RemoveBluetoothDevice_result__isset {
  _SettingSystemService_RemoveBluetoothDevice_result__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RemoveBluetoothDevice_result__isset;

class SettingSystemService_RemoveBluetoothDevice_result {
 public:

  SettingSystemService_RemoveBluetoothDevice_result(const SettingSystemService_RemoveBluetoothDevice_result&);
  SettingSystemService_RemoveBluetoothDevice_result& operator=(const SettingSystemService_RemoveBluetoothDevice_result&);
  SettingSystemService_RemoveBluetoothDevice_result() : success(0) {
  }

  virtual ~SettingSystemService_RemoveBluetoothDevice_result() throw();
  bool success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RemoveBluetoothDevice_result__isset __isset;

  void __set_success(const bool val);

  void __set_error1(const  ::Ruyi::SDK::CommonType::ErrorException& val);

  bool operator == (const SettingSystemService_RemoveBluetoothDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error1 == rhs.error1))
      return false;
    return true;
  }
  bool operator != (const SettingSystemService_RemoveBluetoothDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SettingSystemService_RemoveBluetoothDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SettingSystemService_RemoveBluetoothDevice_presult__isset {
  _SettingSystemService_RemoveBluetoothDevice_presult__isset() : success(false), error1(false) {}
  bool success :1;
  bool error1 :1;
} _SettingSystemService_RemoveBluetoothDevice_presult__isset;

class SettingSystemService_RemoveBluetoothDevice_presult {
 public:


  virtual ~SettingSystemService_RemoveBluetoothDevice_presult() throw();
  bool* success;
   ::Ruyi::SDK::CommonType::ErrorException error1;

  _SettingSystemService_RemoveBluetoothDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SettingSystemServiceClient : virtual public SettingSystemServiceIf {
 public:
  SettingSystemServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SettingSystemServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return, const std::string& id);
  void send_GetSettingItem(const std::string& id);
  void recv_GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return);
  void GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return, const std::string& category, const bool includeChildren);
  void send_GetSettingItems(const std::string& category, const bool includeChildren);
  void recv_GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return);
  void SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return, const std::string& filterJson);
  void send_SearchSettingItems(const std::string& filterJson);
  void recv_SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return);
  void GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return);
  void send_GetCategoryNode();
  void recv_GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return);
  void GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return, const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param);
  void send_GetChildNode(const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param);
  void recv_GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return);
  bool SetSettingItem(const std::string& key, const std::string& val);
  void send_SetSettingItem(const std::string& key, const std::string& val);
  bool recv_SetSettingItem();
  int32_t SetSettingItems(const std::map<std::string, std::string> & keyValues);
  void send_SetSettingItems(const std::map<std::string, std::string> & keyValues);
  int32_t recv_SetSettingItems();
  bool RestoreDefault(const std::string& moduleName, const std::string& category);
  void send_RestoreDefault(const std::string& moduleName, const std::string& category);
  bool recv_RestoreDefault();
  bool RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category);
  void send_RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category);
  bool recv_RestoreUserDefault();
  bool UpdateModuleVersion(const std::string& moduleName);
  void send_UpdateModuleVersion(const std::string& moduleName);
  bool recv_UpdateModuleVersion();
  int32_t SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems);
  void send_SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems);
  int32_t recv_SetUserAppData();
  void GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return, const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  void send_GetUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  void recv_GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return);
  int32_t RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  void send_RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  int32_t recv_RemoveUserAppData();
  bool SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents);
  void send_SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents);
  bool recv_SettingItemNotify();
  void GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return);
  void send_GetNetworkAdapterSettings();
  void recv_GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return);
  void GetLanNetworkName(std::string& _return);
  void send_GetLanNetworkName();
  void recv_GetLanNetworkName(std::string& _return);
  bool SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS);
  void send_SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS);
  bool recv_SetNetworkSettings();
  bool SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort);
  void send_SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort);
  bool recv_SetNetworkProxy();
  bool ConnectToWifi(const std::string& profileName, const std::string& key);
  void send_ConnectToWifi(const std::string& profileName, const std::string& key);
  bool recv_ConnectToWifi();
  bool ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key);
  void send_ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key);
  bool recv_ConnectToAppointedWifi();
  void GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return);
  void send_GetNetworkSettings();
  void recv_GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return);
  void GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return);
  void send_GetNetworkStatus();
  void recv_GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return);
  void RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return);
  void send_RuyiTestNetwork();
  void recv_RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return);
  bool RuyiStartNetworkSpeedTest(const int32_t userindex);
  void send_RuyiStartNetworkSpeedTest(const int32_t userindex);
  bool recv_RuyiStartNetworkSpeedTest();
  bool RuyiStopNetworkSpeedTest(const int32_t userindex);
  void send_RuyiStopNetworkSpeedTest(const int32_t userindex);
  bool recv_RuyiStopNetworkSpeedTest();
  void GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return);
  void send_GetAvailableWifi();
  void recv_GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return);
  bool DisconnectWifi();
  void send_DisconnectWifi();
  bool recv_DisconnectWifi();
  bool DiscoverBluetoothDevice();
  void send_DiscoverBluetoothDevice();
  bool recv_DiscoverBluetoothDevice();
  bool ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  void send_ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_ConnectBluetoothDevice();
  bool DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  void send_DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_DisconnectBluetoothDevice();
  bool RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  void send_RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_RemoveBluetoothDevice();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SettingSystemServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SettingSystemServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetSettingItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetSettingItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SearchSettingItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetCategoryNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetChildNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSettingItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetSettingItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreDefault(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RestoreUserDefault(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateModuleVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetUserAppData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUserAppData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveUserAppData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SettingItemNotify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNetworkAdapterSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLanNetworkName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNetworkSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetNetworkProxy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConnectToWifi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConnectToAppointedWifi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNetworkSettings(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetNetworkStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RuyiTestNetwork(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RuyiStartNetworkSpeedTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RuyiStopNetworkSpeedTest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAvailableWifi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisconnectWifi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DiscoverBluetoothDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConnectBluetoothDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisconnectBluetoothDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemoveBluetoothDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SettingSystemServiceProcessor(::apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> iface) :
    iface_(iface) {
    processMap_["GetSettingItem"] = &SettingSystemServiceProcessor::process_GetSettingItem;
    processMap_["GetSettingItems"] = &SettingSystemServiceProcessor::process_GetSettingItems;
    processMap_["SearchSettingItems"] = &SettingSystemServiceProcessor::process_SearchSettingItems;
    processMap_["GetCategoryNode"] = &SettingSystemServiceProcessor::process_GetCategoryNode;
    processMap_["GetChildNode"] = &SettingSystemServiceProcessor::process_GetChildNode;
    processMap_["SetSettingItem"] = &SettingSystemServiceProcessor::process_SetSettingItem;
    processMap_["SetSettingItems"] = &SettingSystemServiceProcessor::process_SetSettingItems;
    processMap_["RestoreDefault"] = &SettingSystemServiceProcessor::process_RestoreDefault;
    processMap_["RestoreUserDefault"] = &SettingSystemServiceProcessor::process_RestoreUserDefault;
    processMap_["UpdateModuleVersion"] = &SettingSystemServiceProcessor::process_UpdateModuleVersion;
    processMap_["SetUserAppData"] = &SettingSystemServiceProcessor::process_SetUserAppData;
    processMap_["GetUserAppData"] = &SettingSystemServiceProcessor::process_GetUserAppData;
    processMap_["RemoveUserAppData"] = &SettingSystemServiceProcessor::process_RemoveUserAppData;
    processMap_["SettingItemNotify"] = &SettingSystemServiceProcessor::process_SettingItemNotify;
    processMap_["GetNetworkAdapterSettings"] = &SettingSystemServiceProcessor::process_GetNetworkAdapterSettings;
    processMap_["GetLanNetworkName"] = &SettingSystemServiceProcessor::process_GetLanNetworkName;
    processMap_["SetNetworkSettings"] = &SettingSystemServiceProcessor::process_SetNetworkSettings;
    processMap_["SetNetworkProxy"] = &SettingSystemServiceProcessor::process_SetNetworkProxy;
    processMap_["ConnectToWifi"] = &SettingSystemServiceProcessor::process_ConnectToWifi;
    processMap_["ConnectToAppointedWifi"] = &SettingSystemServiceProcessor::process_ConnectToAppointedWifi;
    processMap_["GetNetworkSettings"] = &SettingSystemServiceProcessor::process_GetNetworkSettings;
    processMap_["GetNetworkStatus"] = &SettingSystemServiceProcessor::process_GetNetworkStatus;
    processMap_["RuyiTestNetwork"] = &SettingSystemServiceProcessor::process_RuyiTestNetwork;
    processMap_["RuyiStartNetworkSpeedTest"] = &SettingSystemServiceProcessor::process_RuyiStartNetworkSpeedTest;
    processMap_["RuyiStopNetworkSpeedTest"] = &SettingSystemServiceProcessor::process_RuyiStopNetworkSpeedTest;
    processMap_["GetAvailableWifi"] = &SettingSystemServiceProcessor::process_GetAvailableWifi;
    processMap_["DisconnectWifi"] = &SettingSystemServiceProcessor::process_DisconnectWifi;
    processMap_["DiscoverBluetoothDevice"] = &SettingSystemServiceProcessor::process_DiscoverBluetoothDevice;
    processMap_["ConnectBluetoothDevice"] = &SettingSystemServiceProcessor::process_ConnectBluetoothDevice;
    processMap_["DisconnectBluetoothDevice"] = &SettingSystemServiceProcessor::process_DisconnectBluetoothDevice;
    processMap_["RemoveBluetoothDevice"] = &SettingSystemServiceProcessor::process_RemoveBluetoothDevice;
  }

  virtual ~SettingSystemServiceProcessor() {}
};

class SettingSystemServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SettingSystemServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SettingSystemServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SettingSystemServiceIfFactory > handlerFactory_;
};

class SettingSystemServiceMultiface : virtual public SettingSystemServiceIf {
 public:
  SettingSystemServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SettingSystemServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> > ifaces_;
  SettingSystemServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SettingSystemServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSettingItem(_return, id);
    }
    ifaces_[i]->GetSettingItem(_return, id);
    return;
  }

  void GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return, const std::string& category, const bool includeChildren) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetSettingItems(_return, category, includeChildren);
    }
    ifaces_[i]->GetSettingItems(_return, category, includeChildren);
    return;
  }

  void SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return, const std::string& filterJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SearchSettingItems(_return, filterJson);
    }
    ifaces_[i]->SearchSettingItems(_return, filterJson);
    return;
  }

  void GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetCategoryNode(_return);
    }
    ifaces_[i]->GetCategoryNode(_return);
    return;
  }

  void GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return, const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetChildNode(_return, parent, nodeType, param);
    }
    ifaces_[i]->GetChildNode(_return, parent, nodeType, param);
    return;
  }

  bool SetSettingItem(const std::string& key, const std::string& val) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetSettingItem(key, val);
    }
    return ifaces_[i]->SetSettingItem(key, val);
  }

  int32_t SetSettingItems(const std::map<std::string, std::string> & keyValues) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetSettingItems(keyValues);
    }
    return ifaces_[i]->SetSettingItems(keyValues);
  }

  bool RestoreDefault(const std::string& moduleName, const std::string& category) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreDefault(moduleName, category);
    }
    return ifaces_[i]->RestoreDefault(moduleName, category);
  }

  bool RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RestoreUserDefault(userId, moduleName, category);
    }
    return ifaces_[i]->RestoreUserDefault(userId, moduleName, category);
  }

  bool UpdateModuleVersion(const std::string& moduleName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateModuleVersion(moduleName);
    }
    return ifaces_[i]->UpdateModuleVersion(moduleName);
  }

  int32_t SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetUserAppData(userId, category, settingItems);
    }
    return ifaces_[i]->SetUserAppData(userId, category, settingItems);
  }

  void GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return, const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUserAppData(_return, userId, category, settingKeys);
    }
    ifaces_[i]->GetUserAppData(_return, userId, category, settingKeys);
    return;
  }

  int32_t RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveUserAppData(userId, category, settingKeys);
    }
    return ifaces_[i]->RemoveUserAppData(userId, category, settingKeys);
  }

  bool SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SettingItemNotify(key, contents);
    }
    return ifaces_[i]->SettingItemNotify(key, contents);
  }

  void GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNetworkAdapterSettings(_return);
    }
    ifaces_[i]->GetNetworkAdapterSettings(_return);
    return;
  }

  void GetLanNetworkName(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLanNetworkName(_return);
    }
    ifaces_[i]->GetLanNetworkName(_return);
    return;
  }

  bool SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetNetworkSettings(isWLan, EnableDHCP, IpAddress, SubMask, Gateway, MainDNS, SubDNS);
    }
    return ifaces_[i]->SetNetworkSettings(isWLan, EnableDHCP, IpAddress, SubMask, Gateway, MainDNS, SubDNS);
  }

  bool SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetNetworkProxy(ProxyServer, ProxyPort);
    }
    return ifaces_[i]->SetNetworkProxy(ProxyServer, ProxyPort);
  }

  bool ConnectToWifi(const std::string& profileName, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectToWifi(profileName, key);
    }
    return ifaces_[i]->ConnectToWifi(profileName, key);
  }

  bool ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectToAppointedWifi(profileName, Auth, Ciper, KeyType, key);
    }
    return ifaces_[i]->ConnectToAppointedWifi(profileName, Auth, Ciper, KeyType, key);
  }

  void GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNetworkSettings(_return);
    }
    ifaces_[i]->GetNetworkSettings(_return);
    return;
  }

  void GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetNetworkStatus(_return);
    }
    ifaces_[i]->GetNetworkStatus(_return);
    return;
  }

  void RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RuyiTestNetwork(_return);
    }
    ifaces_[i]->RuyiTestNetwork(_return);
    return;
  }

  bool RuyiStartNetworkSpeedTest(const int32_t userindex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RuyiStartNetworkSpeedTest(userindex);
    }
    return ifaces_[i]->RuyiStartNetworkSpeedTest(userindex);
  }

  bool RuyiStopNetworkSpeedTest(const int32_t userindex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RuyiStopNetworkSpeedTest(userindex);
    }
    return ifaces_[i]->RuyiStopNetworkSpeedTest(userindex);
  }

  void GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAvailableWifi(_return);
    }
    ifaces_[i]->GetAvailableWifi(_return);
    return;
  }

  bool DisconnectWifi() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisconnectWifi();
    }
    return ifaces_[i]->DisconnectWifi();
  }

  bool DiscoverBluetoothDevice() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DiscoverBluetoothDevice();
    }
    return ifaces_[i]->DiscoverBluetoothDevice();
  }

  bool ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectBluetoothDevice(DeviceName, DeviceAddress);
    }
    return ifaces_[i]->ConnectBluetoothDevice(DeviceName, DeviceAddress);
  }

  bool DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisconnectBluetoothDevice(DeviceName, DeviceAddress);
    }
    return ifaces_[i]->DisconnectBluetoothDevice(DeviceName, DeviceAddress);
  }

  bool RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemoveBluetoothDevice(DeviceName, DeviceAddress);
    }
    return ifaces_[i]->RemoveBluetoothDevice(DeviceName, DeviceAddress);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SettingSystemServiceConcurrentClient : virtual public SettingSystemServiceIf {
 public:
  SettingSystemServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SettingSystemServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return, const std::string& id);
  int32_t send_GetSettingItem(const std::string& id);
  void recv_GetSettingItem( ::Ruyi::SDK::CommonType::SettingItem& _return, const int32_t seqid);
  void GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return, const std::string& category, const bool includeChildren);
  int32_t send_GetSettingItems(const std::string& category, const bool includeChildren);
  void recv_GetSettingItems(std::vector< ::Ruyi::SDK::CommonType::SettingItem> & _return, const int32_t seqid);
  void SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return, const std::string& filterJson);
  int32_t send_SearchSettingItems(const std::string& filterJson);
  void recv_SearchSettingItems(std::map<std::string,  ::Ruyi::SDK::SettingSystem::Api::SettingSearchResult> & _return, const int32_t seqid);
  void GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return);
  int32_t send_GetCategoryNode();
  void recv_GetCategoryNode( ::Ruyi::SDK::SettingSystem::Api::SettingTree& _return, const int32_t seqid);
  void GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return, const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param);
  int32_t send_GetChildNode(const std::string& parent, const  ::Ruyi::SDK::SettingSystem::Api::NodeType::type nodeType, const std::string& param);
  void recv_GetChildNode( ::Ruyi::SDK::SettingSystem::Api::NodeList& _return, const int32_t seqid);
  bool SetSettingItem(const std::string& key, const std::string& val);
  int32_t send_SetSettingItem(const std::string& key, const std::string& val);
  bool recv_SetSettingItem(const int32_t seqid);
  int32_t SetSettingItems(const std::map<std::string, std::string> & keyValues);
  int32_t send_SetSettingItems(const std::map<std::string, std::string> & keyValues);
  int32_t recv_SetSettingItems(const int32_t seqid);
  bool RestoreDefault(const std::string& moduleName, const std::string& category);
  int32_t send_RestoreDefault(const std::string& moduleName, const std::string& category);
  bool recv_RestoreDefault(const int32_t seqid);
  bool RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category);
  int32_t send_RestoreUserDefault(const std::string& userId, const std::string& moduleName, const std::string& category);
  bool recv_RestoreUserDefault(const int32_t seqid);
  bool UpdateModuleVersion(const std::string& moduleName);
  int32_t send_UpdateModuleVersion(const std::string& moduleName);
  bool recv_UpdateModuleVersion(const int32_t seqid);
  int32_t SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems);
  int32_t send_SetUserAppData(const std::string& userId, const std::string& category, const std::map<std::string,  ::Ruyi::SDK::CommonType::SettingValue> & settingItems);
  int32_t recv_SetUserAppData(const int32_t seqid);
  void GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return, const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  int32_t send_GetUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  void recv_GetUserAppData( ::Ruyi::SDK::CommonType::AppData& _return, const int32_t seqid);
  int32_t RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  int32_t send_RemoveUserAppData(const std::string& userId, const std::string& category, const std::vector<std::string> & settingKeys);
  int32_t recv_RemoveUserAppData(const int32_t seqid);
  bool SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents);
  int32_t send_SettingItemNotify(const std::string& key, const  ::Ruyi::SDK::SettingSystem::Api::JSON& contents);
  bool recv_SettingItemNotify(const int32_t seqid);
  void GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return);
  int32_t send_GetNetworkAdapterSettings();
  void recv_GetNetworkAdapterSettings( ::Ruyi::SDK::SettingSystem::Api::NetworkSettings& _return, const int32_t seqid);
  void GetLanNetworkName(std::string& _return);
  int32_t send_GetLanNetworkName();
  void recv_GetLanNetworkName(std::string& _return, const int32_t seqid);
  bool SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS);
  int32_t send_SetNetworkSettings(const bool isWLan, const bool EnableDHCP, const std::string& IpAddress, const std::string& SubMask, const std::string& Gateway, const std::string& MainDNS, const std::string& SubDNS);
  bool recv_SetNetworkSettings(const int32_t seqid);
  bool SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort);
  int32_t send_SetNetworkProxy(const std::string& ProxyServer, const std::string& ProxyPort);
  bool recv_SetNetworkProxy(const int32_t seqid);
  bool ConnectToWifi(const std::string& profileName, const std::string& key);
  int32_t send_ConnectToWifi(const std::string& profileName, const std::string& key);
  bool recv_ConnectToWifi(const int32_t seqid);
  bool ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key);
  int32_t send_ConnectToAppointedWifi(const std::string& profileName, const std::string& Auth, const std::string& Ciper, const std::string& KeyType, const std::string& key);
  bool recv_ConnectToAppointedWifi(const int32_t seqid);
  void GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return);
  int32_t send_GetNetworkSettings();
  void recv_GetNetworkSettings( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkSettings& _return, const int32_t seqid);
  void GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return);
  int32_t send_GetNetworkStatus();
  void recv_GetNetworkStatus( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkStatus& _return, const int32_t seqid);
  void RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return);
  int32_t send_RuyiTestNetwork();
  void recv_RuyiTestNetwork( ::Ruyi::SDK::SettingSystem::Api::RuyiNetworkTestResult& _return, const int32_t seqid);
  bool RuyiStartNetworkSpeedTest(const int32_t userindex);
  int32_t send_RuyiStartNetworkSpeedTest(const int32_t userindex);
  bool recv_RuyiStartNetworkSpeedTest(const int32_t seqid);
  bool RuyiStopNetworkSpeedTest(const int32_t userindex);
  int32_t send_RuyiStopNetworkSpeedTest(const int32_t userindex);
  bool recv_RuyiStopNetworkSpeedTest(const int32_t seqid);
  void GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return);
  int32_t send_GetAvailableWifi();
  void recv_GetAvailableWifi(std::vector< ::Ruyi::SDK::SettingSystem::Api::WifiEntity> & _return, const int32_t seqid);
  bool DisconnectWifi();
  int32_t send_DisconnectWifi();
  bool recv_DisconnectWifi(const int32_t seqid);
  bool DiscoverBluetoothDevice();
  int32_t send_DiscoverBluetoothDevice();
  bool recv_DiscoverBluetoothDevice(const int32_t seqid);
  bool ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  int32_t send_ConnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_ConnectBluetoothDevice(const int32_t seqid);
  bool DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  int32_t send_DisconnectBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_DisconnectBluetoothDevice(const int32_t seqid);
  bool RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  int32_t send_RemoveBluetoothDevice(const std::string& DeviceName, const std::string& DeviceAddress);
  bool recv_RemoveBluetoothDevice(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
