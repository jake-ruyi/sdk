/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserServiceExternalSDKDataTypes_TYPES_H
#define UserServiceExternalSDKDataTypes_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "CommonTypeSDKDataTypes_types.h"


namespace Ruyi { namespace SDK { namespace UserServiceExternal {

struct UserGender {
  enum type {
    Unknown = 0,
    Male = 1,
    Female = 2
  };
};

extern const std::map<int, const char*> _UserGender_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const UserGender::type& val);

typedef std::string JSON;

class TriggerKeys;

class InputActionEvent;

class UserEvent;

class UserInfo_Public;

typedef struct _TriggerKeys__isset {
  _TriggerKeys__isset() : DeviceType(false), Key(false), NewValue(false), OldValue(false) {}
  bool DeviceType :1;
  bool Key :1;
  bool NewValue :1;
  bool OldValue :1;
} _TriggerKeys__isset;

class TriggerKeys : public virtual ::apache::thrift::TBase {
 public:

  TriggerKeys(const TriggerKeys&);
  TriggerKeys& operator=(const TriggerKeys&);
  TriggerKeys() : DeviceType(0), Key(0), NewValue(0), OldValue(0) {
  }

  virtual ~TriggerKeys() throw();
  int8_t DeviceType;
  int32_t Key;
  int8_t NewValue;
  int8_t OldValue;

  _TriggerKeys__isset __isset;

  void __set_DeviceType(const int8_t val);

  void __set_Key(const int32_t val);

  void __set_NewValue(const int8_t val);

  void __set_OldValue(const int8_t val);

  bool operator == (const TriggerKeys & rhs) const
  {
    if (!(DeviceType == rhs.DeviceType))
      return false;
    if (!(Key == rhs.Key))
      return false;
    if (!(NewValue == rhs.NewValue))
      return false;
    if (!(OldValue == rhs.OldValue))
      return false;
    return true;
  }
  bool operator != (const TriggerKeys &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TriggerKeys & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TriggerKeys &a, TriggerKeys &b);

std::ostream& operator<<(std::ostream& out, const TriggerKeys& obj);

typedef struct _InputActionEvent__isset {
  _InputActionEvent__isset() : userId(false), action(false), timestamp(false), Triggers(false) {}
  bool userId :1;
  bool action :1;
  bool timestamp :1;
  bool Triggers :1;
} _InputActionEvent__isset;

class InputActionEvent : public virtual ::apache::thrift::TBase {
 public:

  InputActionEvent(const InputActionEvent&);
  InputActionEvent& operator=(const InputActionEvent&);
  InputActionEvent() : userId(), action(), timestamp(0) {
  }

  virtual ~InputActionEvent() throw();
  std::string userId;
  std::string action;
  int64_t timestamp;
  std::vector<TriggerKeys>  Triggers;

  _InputActionEvent__isset __isset;

  void __set_userId(const std::string& val);

  void __set_action(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_Triggers(const std::vector<TriggerKeys> & val);

  bool operator == (const InputActionEvent & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(Triggers == rhs.Triggers))
      return false;
    return true;
  }
  bool operator != (const InputActionEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InputActionEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InputActionEvent &a, InputActionEvent &b);

std::ostream& operator<<(std::ostream& out, const InputActionEvent& obj);

typedef struct _UserEvent__isset {
  _UserEvent__isset() : userId(false), action(false), jsonData(true) {}
  bool userId :1;
  bool action :1;
  bool jsonData :1;
} _UserEvent__isset;

class UserEvent : public virtual ::apache::thrift::TBase {
 public:

  UserEvent(const UserEvent&);
  UserEvent& operator=(const UserEvent&);
  UserEvent() : userId(), action(), jsonData("{}") {
  }

  virtual ~UserEvent() throw();
  std::string userId;
  std::string action;
  JSON jsonData;

  _UserEvent__isset __isset;

  void __set_userId(const std::string& val);

  void __set_action(const std::string& val);

  void __set_jsonData(const JSON& val);

  bool operator == (const UserEvent & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(action == rhs.action))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    return true;
  }
  bool operator != (const UserEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserEvent &a, UserEvent &b);

std::ostream& operator<<(std::ostream& out, const UserEvent& obj);

typedef struct _UserInfo_Public__isset {
  _UserInfo_Public__isset() : userId(false), nickname(false), portrait(false), gender(false) {}
  bool userId :1;
  bool nickname :1;
  bool portrait :1;
  bool gender :1;
} _UserInfo_Public__isset;

class UserInfo_Public : public virtual ::apache::thrift::TBase {
 public:

  UserInfo_Public(const UserInfo_Public&);
  UserInfo_Public& operator=(const UserInfo_Public&);
  UserInfo_Public() : userId(), nickname(), portrait(), gender((UserGender::type)0) {
  }

  virtual ~UserInfo_Public() throw();
  std::string userId;
  std::string nickname;
  std::string portrait;
  UserGender::type gender;

  _UserInfo_Public__isset __isset;

  void __set_userId(const std::string& val);

  void __set_nickname(const std::string& val);

  void __set_portrait(const std::string& val);

  void __set_gender(const UserGender::type val);

  bool operator == (const UserInfo_Public & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(portrait == rhs.portrait))
      return false;
    if (!(gender == rhs.gender))
      return false;
    return true;
  }
  bool operator != (const UserInfo_Public &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo_Public & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserInfo_Public &a, UserInfo_Public &b);

std::ostream& operator<<(std::ostream& out, const UserInfo_Public& obj);

}}} // namespace

#endif
