/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GamesDBSDKDataTypes_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Ruyi { namespace SDK { namespace CommonType {

int _kCondTypeValues[] = {
  CondType::ExePresent,
  CondType::FilePresent,
  CondType::FileAbsent,
  CondType::ArgPresent,
  CondType::ArgAbsent
};
const char* _kCondTypeNames[] = {
  "ExePresent",
  "FilePresent",
  "FileAbsent",
  "ArgPresent",
  "ArgAbsent"
};
const std::map<int, const char*> _CondType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kCondTypeValues, _kCondTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CondType::type& val) {
  std::map<int, const char*>::const_iterator it = _CondType_VALUES_TO_NAMES.find(val);
  if (it != _CondType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Runtime::~Runtime() throw() {
}

std::ostream& operator<<(std::ostream& out, const Runtime& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Runtime::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Runtime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Runtime");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Runtime &a, Runtime &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Runtime::Runtime(const Runtime& other0) {
  (void) other0;
}
Runtime& Runtime::operator=(const Runtime& other1) {
  (void) other1;
  return *this;
}
void Runtime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Runtime(";
  out << ")";
}


GameDB::~GameDB() throw() {
}


void GameDB::__set_id(const int32_t val) {
  this->id = val;
}

void GameDB::__set_name(const std::string& val) {
  this->name = val;
}

void GameDB::__set_conditions(const std::vector<Cond> & val) {
  this->conditions = val;
}

void GameDB::__set_detection(const std::vector<Variant> & val) {
  this->detection = val;
}

void GameDB::__set_runtime(const Runtime& val) {
  this->runtime = val;
}
std::ostream& operator<<(std::ostream& out, const GameDB& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GameDB::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->conditions.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->conditions.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->conditions[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.conditions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->detection.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->detection.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->detection[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.detection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->runtime.read(iprot);
          this->__isset.runtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GameDB::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GameDB");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conditions", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->conditions.size()));
    std::vector<Cond> ::const_iterator _iter12;
    for (_iter12 = this->conditions.begin(); _iter12 != this->conditions.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("detection", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->detection.size()));
    std::vector<Variant> ::const_iterator _iter13;
    for (_iter13 = this->detection.begin(); _iter13 != this->detection.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("runtime", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->runtime.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GameDB &a, GameDB &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.conditions, b.conditions);
  swap(a.detection, b.detection);
  swap(a.runtime, b.runtime);
  swap(a.__isset, b.__isset);
}

GameDB::GameDB(const GameDB& other14) {
  id = other14.id;
  name = other14.name;
  conditions = other14.conditions;
  detection = other14.detection;
  runtime = other14.runtime;
  __isset = other14.__isset;
}
GameDB& GameDB::operator=(const GameDB& other15) {
  id = other15.id;
  name = other15.name;
  conditions = other15.conditions;
  detection = other15.detection;
  runtime = other15.runtime;
  __isset = other15.__isset;
  return *this;
}
void GameDB::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GameDB(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "conditions=" << to_string(conditions);
  out << ", " << "detection=" << to_string(detection);
  out << ", " << "runtime=" << to_string(runtime);
  out << ")";
}


Cond::~Cond() throw() {
}


void Cond::__set_name(const std::string& val) {
  this->name = val;
}

void Cond::__set_type(const CondType::type val) {
  this->type = val;
}

void Cond::__set_additionalArg(const std::string& val) {
  this->additionalArg = val;
}
std::ostream& operator<<(std::ostream& out, const Cond& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Cond::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->type = (CondType::type)ecast16;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->additionalArg);
          this->__isset.additionalArg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Cond::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Cond");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("additionalArg", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->additionalArg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Cond &a, Cond &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.additionalArg, b.additionalArg);
  swap(a.__isset, b.__isset);
}

Cond::Cond(const Cond& other17) {
  name = other17.name;
  type = other17.type;
  additionalArg = other17.additionalArg;
  __isset = other17.__isset;
}
Cond& Cond::operator=(const Cond& other18) {
  name = other18.name;
  type = other18.type;
  additionalArg = other18.additionalArg;
  __isset = other18.__isset;
  return *this;
}
void Cond::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Cond(";
  out << "name=" << to_string(name);
  out << ", " << "type=" << to_string(type);
  out << ", " << "additionalArg=" << to_string(additionalArg);
  out << ")";
}


Variant::~Variant() throw() {
}


void Variant::__set_name(const std::string& val) {
  this->name = val;
}

void Variant::__set_id(const std::string& val) {
  this->id = val;
}

void Variant::__set_order(const std::string& val) {
  this->order = val;
}

void Variant::__set_rules(const std::vector<If> & val) {
  this->rules = val;
}
std::ostream& operator<<(std::ostream& out, const Variant& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Variant::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order);
          this->__isset.order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rules.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->rules.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->rules[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Variant::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Variant");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rules", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rules.size()));
    std::vector<If> ::const_iterator _iter24;
    for (_iter24 = this->rules.begin(); _iter24 != this->rules.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Variant &a, Variant &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.order, b.order);
  swap(a.rules, b.rules);
  swap(a.__isset, b.__isset);
}

Variant::Variant(const Variant& other25) {
  name = other25.name;
  id = other25.id;
  order = other25.order;
  rules = other25.rules;
  __isset = other25.__isset;
}
Variant& Variant::operator=(const Variant& other26) {
  name = other26.name;
  id = other26.id;
  order = other26.order;
  rules = other26.rules;
  __isset = other26.__isset;
  return *this;
}
void Variant::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Variant(";
  out << "name=" << to_string(name);
  out << ", " << "id=" << to_string(id);
  out << ", " << "order=" << to_string(order);
  out << ", " << "rules=" << to_string(rules);
  out << ")";
}


If::~If() throw() {
}


void If::__set_cond(const std::string& val) {
  this->cond = val;
}
std::ostream& operator<<(std::ostream& out, const If& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t If::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cond);
          this->__isset.cond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t If::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("If");

  xfer += oprot->writeFieldBegin("cond", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cond);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(If &a, If &b) {
  using ::std::swap;
  swap(a.cond, b.cond);
  swap(a.__isset, b.__isset);
}

If::If(const If& other27) {
  cond = other27.cond;
  __isset = other27.__isset;
}
If& If::operator=(const If& other28) {
  cond = other28.cond;
  __isset = other28.__isset;
  return *this;
}
void If::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "If(";
  out << "cond=" << to_string(cond);
  out << ")";
}

}}} // namespace
