/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BrainCloudService_H
#define BrainCloudService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "BrainCloudServiceSDKServices_types.h"

namespace Ruyi { namespace SDK { namespace BrainCloudApi {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BrainCloudServiceIf {
 public:
  virtual ~BrainCloudServiceIf() {}

  /**
   * Creates an instance of an asynchronous match.
   * 
   * @param jsonOpponentIds JSON string identifying the opponent platform and id for this match.
   * 
   * Platforms are identified as:
   * BC - a brainCloud profile id
   * FB - a Facebook id
   * 
   * An exmaple of this string would be:
   * [
   *     {
   *         "platform": "BC",
   *         "id": "some-braincloud-profile"
   *     },
   *     {
   *         "platform": "FB",
   *         "id": "some-facebook-id"
   *     }
   * ]
   * 
   * @param pushNotificationMessage Optional push notification message to send to the other party.
   * Refer to the Push Notification functions for the syntax required.
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_CreateMatch(std::string& _return, const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex) = 0;

  /**
   * Creates an instance of an asynchronous match with an initial turn.
   * 
   * @param jsonOpponentIds JSON string identifying the opponent platform and id for this match.
   * 
   * Platforms are identified as:
   * BC - a brainCloud profile id
   * FB - a Facebook id
   * 
   * An exmaple of this string would be:
   * [
   *     {
   *         "platform": "BC",
   *         "id": "some-braincloud-profile"
   *     },
   *     {
   *         "platform": "FB",
   *         "id": "some-facebook-id"
   *     }
   * ]
   * 
   * @param jsonMatchState JSON string blob provided by the caller
   * 
   * @param pushNotificationMessage Optional push notification message to send to the other party.
   * Refer to the Push Notification functions for the syntax required.
   * 
   * @param nextPlayer Optionally, force the next player player to be a specific player
   * 
   * @param jsonSummary Optional JSON string defining what the other player will see as a summary of the game when listing their games
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_CreateMatchWithInitialTurn(std::string& _return, const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex) = 0;

  /**
   * Submits a turn for the given match.
   * 
   * @param ownerId Match owner identfier
   * 
   * @param matchId Match identifier
   * 
   * @param version Game state version to ensure turns are submitted once and in order
   * 
   * @param jsonMatchState JSON string blob provided by the caller
   * 
   * @param pushNotificationMessage Optional push notification message to send to the other party.
   * Refer to the Push Notification functions for the syntax required.
   * 
   * @param nextPlayer Optionally, force the next player player to be a specific player
   * 
   * @param jsonSummary Optional JSON string that other players will see as a summary of the game when listing their games
   * 
   * @param jsonStatistics Optional JSON string blob provided by the caller
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_SubmitTurn(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex) = 0;

  /**
   * Allows the current player (only) to update Summary data without having to submit a whole turn.
   * 
   * @param ownerId Match owner identfier
   * 
   * @param matchId Match identifier
   * 
   * @param version Game state version to ensure turns are submitted once and in order
   * 
   * @param jsonSummary JSON string provided by the caller that other players will see as a summary of the game when listing their games
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_UpdateMatchSummaryData(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex) = 0;

  /**
   * Marks the given match as complete.
   * 
   * @param ownerId Match owner identifier
   * 
   * @param matchId Match identifier
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_CompleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) = 0;

  /**
   * Returns the current state of the given match.
   * 
   * @param ownerId Match owner identifier
   * 
   * @param matchId Match identifier
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_ReadMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) = 0;

  /**
   * Returns the match history of the given match.
   * 
   * @param ownerId Match owner identifier
   * 
   * @param matchId Match identifier
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_ReadMatchHistory(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) = 0;

  /**
   * Returns all matches that are NOT in a COMPLETE state for which the player is involved.
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_FindMatches(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Returns all matches that are in a COMPLETE state for which the player is involved.
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_FindCompleteMatches(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Marks the given match as abandoned.
   * 
   * @param ownerId Match owner identifier
   * 
   * @param matchId Match identifier
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_AbandonMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) = 0;

  /**
   * Removes the match and match history from the server. DEBUG ONLY, in production it is recommended
   * the user leave it as completed.
   * 
   * @param ownerId Match owner identifier
   * 
   * @param matchId Match identifier
   * 
   * @param clientIndex
   */
  virtual void AsyncMatch_DeleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) = 0;

  /**
   * Used to create the anonymous installation id for the brainCloud profile.
   * 
   * @param clientIndex
   */
  virtual void Authentication_GenerateAnonymousId(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Initialize - initializes the identity service with a saved
   * anonymous installation id and most recently used profile id
   * 
   * @param profileId The id of the profile id that was most recently used by the app (on this device)
   * 
   * @param anonymousId The anonymous installation id that was generated for this device
   * 
   * @param clientIndex
   */
  virtual void Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex) = 0;

  /**
   * Used to clear the saved profile id - to use in cases when the user is
   * attempting to switch to a different app profile.
   * 
   * @param clientIndex
   */
  virtual void Authentication_ClearSavedProfileID(const int32_t clientIndex) = 0;

  /**
   * Authenticate a user anonymously with brainCloud - used for apps that don't want to bother
   * the user to login, or for users who are sensitive to their privacy
   * 
   * @param forceCreate Should a new profile be created if it does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticateAnonymous(std::string& _return, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Authenticate the user with a custom Email and Password.  Note that the client app
   * is responsible for collecting (and storing) the e-mail and potentially password
   * (for convenience) in the client data.  For the greatest security,
   * force the user to re-enter their password at each login.
   * (Or at least give them that option).
   * 
   * @param email The e-mail address of the user
   * 
   * @param password The password of the user
   * 
   * @param forceCreate Should a new profile be created for this user if the account does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticateEmailPassword(std::string& _return, const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Authenticate the user using a userId and password (without any validation on the userId).
   * Similar to AuthenticateEmailPassword - except that that method has additional features to
   * allow for e-mail validation, password resets, etc.
   * 
   * @param userId
   * @param password The password of the user
   * 
   * @param forceCreate Should a new profile be created for this user if the account does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticateUniversal(std::string& _return, const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Authenticate the user via cloud code (which in turn validates the supplied credentials against an external system).
   * This allows the developer to extend brainCloud authentication to support other backend authentication systems.
   * 
   * @param userId The user id
   * 
   * @param token The user token (password etc)
   * 
   * @param externalAuthName The name of the cloud script to call for external authentication
   * 
   * @param forceCreate Should a new profile be created for this user if the account does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticateExternal(std::string& _return, const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Authenticate the user via wechat
   * 
   * @param phoneNumber The phone number to authenticate with
   * 
   * @param authCode The code sent to the mobile phone
   * 
   * @param forceCreate Should a new profile be created for this user if the account does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticatePhone(std::string& _return, const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Authenticate the user via wechat
   * 
   * @param openId The open id passed from wechat
   * 
   * @param token The access token passed from wechat
   * 
   * @param forceCreate Should a new profile be created for this user if the account does not exist?
   * 
   * @param clientIndex
   */
  virtual void Authentication_AuthenticateWechat(std::string& _return, const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Reset Email password - Sends a password reset email to the specified address
   * 
   * @param externalId The email address to send the reset email to.
   * 
   * @param clientIndex
   */
  virtual void Authentication_ResetEmailPassword(std::string& _return, const std::string& externalId, const int32_t clientIndex) = 0;

  /**
   * Request an SMS code sent to a phone prior to authentication.
   * 
   * @param phoneNumber The phone number to send the code to.
   * 
   * @param forceCreate Whether or not to create a new player if they don't exist.
   * 
   * @param clientIndex
   */
  virtual void Authentication_RequestSmsCode(std::string& _return, const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Returns the sessionId or empty string if no session present.
   * 
   * @param clientIndex
   */
  virtual void Client_GetSessionId(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Returns true if the user is currently authenticated.
   * If a session time out or session invalidation is returned from executing a
   * sever API call, this flag will reset back to false.
   * 
   * @param clientIndex
   */
  virtual bool Client_IsAuthenticated(const int32_t clientIndex) = 0;

  /**
   * Returns true if brainCloud has been initialized.
   * 
   * @param clientIndex
   */
  virtual bool Client_IsInitialized(const int32_t clientIndex) = 0;

  /**
   * Method initializes the BrainCloudClient.
   * 
   * @param secretKey The secret key for your app
   * 
   * @param appId
   * @param appVersion The app version
   * 
   * @param clientIndex
   */
  virtual void Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex) = 0;

  /**
   * Method initializes the BrainCloudClient.
   * 
   * @param serverURL The URL to the brainCloud server
   * 
   * @param secretKey The secret key for your app
   * 
   * @param appId The app id
   * 
   * @param appVersion The app version
   * 
   * @param clientIndex
   */
  virtual void Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex) = 0;

  /**
   * Initialize the identity aspects of brainCloud.
   * 
   * @param profileId The profile id
   * 
   * @param anonymousId The anonymous id
   * 
   * @param clientIndex
   */
  virtual void Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex) = 0;

  /**
   * Update method needs to be called regularly in order
   * to process incoming and outgoing messages.
   * 
   * @param clientIndex
   */
  virtual void Client_Update(const int32_t clientIndex) = 0;

  /**
   * Enable logging of brainCloud transactions (comms etc)
   * 
   * @param enable True if logging is to be enabled
   * 
   * @param clientIndex
   */
  virtual void Client_EnableLogging(const bool enable, const int32_t clientIndex) = 0;

  /**
   * Resets all messages and calls to the server
   * 
   * @param clientIndex
   */
  virtual void Client_ResetCommunication(const int32_t clientIndex) = 0;

  /**
   * Sets the packet timeouts using a list of integers that
   * represent timeout values for each packet retry. The
   * first item in the list represents the timeout for the first packet
   * attempt, the second for the second packet attempt, and so on.
   * 
   * The number of entries in this array determines how many packet
   * retries will occur.
   * 
   * By default, the packet timeout array is {10, 10, 10}
   * 
   * Note that this method does not change the timeout for authentication
   * packets (use SetAuthenticationPacketTimeout method).
   * 
   * @param timeouts An array of packet timeouts.
   * 
   * @param clientIndex
   */
  virtual void Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex) = 0;

  /**
   * Sets the packet timeouts back to default.
   * 
   * @param clientIndex
   */
  virtual void Client_SetPacketTimeoutsToDefault(const int32_t clientIndex) = 0;

  /**
   * Returns the list of packet timeouts.
   * 
   * @param clientIndex
   */
  virtual void Client_GetPacketTimeouts(std::vector<int32_t> & _return, const int32_t clientIndex) = 0;

  /**
   * Sets the authentication packet timeout which is tracked separately
   * from all other packets. Note that authentication packets are never
   * retried and so this value represents the total time a client would
   * wait to receive a reply to an authentication API call. By default
   * this timeout is set to 15 seconds.
   * 
   * @param timeoutSecs
   * @param clientIndex
   */
  virtual void Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex) = 0;

  /**
   * Gets the authentication packet timeout which is tracked separately
   * from all other packets. Note that authentication packets are never
   * retried and so this value represents the total time a client would
   * wait to receive a reply to an authentication API call. By default
   * this timeout is set to 15 seconds.
   * 
   * @param clientIndex
   */
  virtual int32_t Client_GetAuthenticationPacketTimeout(const int32_t clientIndex) = 0;

  /**
   * Returns the low transfer rate timeout in secs
   * 
   * @param clientIndex
   */
  virtual int32_t Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex) = 0;

  /**
   * Sets the timeout in seconds of a low speed upload
   * (i.e. transfer rate which is underneath the low transfer rate threshold).
   * By default this is set to 120 secs.Setting this value to 0 will
   * turn off the timeout. Note that this timeout method
   * does not work on Unity mobile platforms.
   * 
   * @param timeoutSecs
   * @param clientIndex
   */
  virtual void Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex) = 0;

  /**
   * Returns the low transfer rate threshold in bytes/sec
   * 
   * @param clientIndex
   */
  virtual int32_t Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex) = 0;

  /**
   * Sets the low transfer rate threshold of an upload in bytes/sec.
   * If the transfer rate dips below the given threshold longer
   * than the specified timeout, the transfer will fail.
   * By default this is set to 50 bytes/sec. Note that this timeout method
   * does not work on Unity mobile platforms.
   * 
   * @param bytesPerSec The low transfer rate threshold in bytes/sec
   * 
   * @param clientIndex
   */
  virtual void Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex) = 0;

  /**
   * Enables the timeout message caching which is disabled by default.
   * Once enabled, if a client side timeout is encountered
   * (i.e. brainCloud server is unreachable presumably due to the client
   * network being down) the SDK will do the following:
   * 
   * 1 - cache the currently queued messages to brainCloud
   * 2 - call the network error callback
   * 3 - then expect the app to call either:
   *     a) RetryCachedMessages() to retry sending to brainCloud
   *     b) FlushCachedMessages() to dump all messages in the queue.
   * 
   * Between steps 2 and 3, the app can prompt the user to retry connecting
   * to brainCloud to determine whether to follow path 3a or 3b.
   * 
   * Note that if path 3a is followed, and another timeout is encountered,
   * the process will begin all over again from step 1.
   * 
   * WARNING - the brainCloud SDK will cache *all* API calls sent
   * when a timeout is encountered if this mechanism is enabled.
   * This effectively freezes all communication with brainCloud.
   * Apps must call either RetryCachedMessages() or FlushCachedMessages()
   * for the brainCloud SDK to resume sending messages.
   * ResetCommunication() will also clear the message cache.
   * 
   * @param enabled True if message should be cached on timeout
   * 
   * @param clientIndex
   */
  virtual void Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex) = 0;

  /**
   * Attempts to resend any cached messages. If no messages are in the cache,
   * this method does nothing.
   * 
   * @param clientIndex
   */
  virtual void Client_RetryCachedMessages(const int32_t clientIndex) = 0;

  /**
   * Flushes the cached messages to resume API call processing. This will dump
   * all of the cached messages in the queue.
   * 
   * @param sendApiErrorCallbacks If set to true API error callbacks will
   * be called for every cached message with statusCode CLIENT_NETWORK_ERROR and reasonCode CLIENT_NETWORK_ERROR_TIMEOUT.
   * 
   * @param clientIndex
   */
  virtual void Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex) = 0;

  /**
   * Inserts a marker which will tell the brainCloud comms layer
   * to close the message bundle off at this point. Any messages queued
   * before this method was called will likely be bundled together in
   * the next send to the server.
   * 
   * To ensure that only a single message is sent to the server you would
   * do something like this:
   * 
   * InsertEndOfMessageBundleMarker()
   * SomeApiCall()
   * InsertEndOfMessageBundleMarker()
   * 
   * @param clientIndex
   */
  virtual void Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex) = 0;

  /**
   * Sets the country code sent to brainCloud when a user authenticates.
   * Will override any auto detected country.
   * 
   * @param countryCode ISO 3166-1 two-letter country code
   * 
   * @param clientIndex
   */
  virtual void Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex) = 0;

  /**
   * Sets the language code sent to brainCloud when a user authenticates.
   * If the language is set to a non-ISO 639-1 standard value the game default will be used instead.
   * Will override any auto detected language.
   * 
   * @param languageCode ISO 639-1 two-letter language code
   * 
   * @param clientIndex
   */
  virtual void Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex) = 0;

  /**
   * Creates custom data stream page event
   * 
   * @param eventName The name of the event
   * 
   * @param jsonEventProperties The properties of the event
   * 
   * @param clientIndex
   */
  virtual void DataStream_CustomPageEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) = 0;

  /**
   * Creates custom data stream screen event
   * 
   * @param eventName The name of the event
   * 
   * @param jsonEventProperties The properties of the event
   * 
   * @param clientIndex
   */
  virtual void DataStream_CustomScreenEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) = 0;

  /**
   * Creates custom data stream track event
   * 
   * @param eventName The name of the event
   * 
   * @param jsonEventProperties The properties of the event
   * 
   * @param clientIndex
   */
  virtual void DataStream_CustomTrackEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) = 0;

  /**
   * Method creates a new entity on the server.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param jsonEntityData The entity's data as a json string
   * 
   * @param jsonEntityAcl The entity's access control list as json. A null acl implies default
   * permissions which make the entity readable/writeable by only the user.
   * 
   * @param clientIndex
   */
  virtual void Entity_CreateEntity(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex) = 0;

  /**
   * Method returns all user entities that match the given type.
   * 
   * @param entityType The entity type to search for
   * 
   * @param clientIndex
   */
  virtual void Entity_GetEntitiesByType(std::string& _return, const std::string& entityType, const int32_t clientIndex) = 0;

  /**
   * Method updates a new entity on the server. This operation results in the entity
   * data being completely replaced by the passed in JSON string.
   * 
   * @param entityId The id of the entity to update
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param jsonEntityData The entity's data as a json string.
   * 
   * @param jsonEntityAcl The entity's access control list as json. A null acl implies default
   * permissions which make the entity readable/writeable by only the user.
   * 
   * @param version Current version of the entity. If the version of the
   * entity on the server does not match the version passed in, the
   * server operation will fail. Use -1 to skip version checking.
   * 
   * @param clientIndex
   */
  virtual void Entity_UpdateEntity(std::string& _return, const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method updates a shared entity owned by another user. This operation results in the entity
   * data being completely replaced by the passed in JSON string.
   * 
   * @param entityId The id of the entity to update
   * 
   * @param targetProfileId The id of the entity's owner
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param jsonEntityData The entity's data as a json string.
   * 
   * @param version Current version of the entity. If the version of the
   * entity on the server does not match the version passed in, the
   * server operation will fail. Use -1 to skip version checking.
   * 
   * @param clientIndex
   */
  virtual void Entity_UpdateSharedEntity(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method deletes the given entity on the server.
   * 
   * @param entityId The id of the entity to update
   * 
   * @param version Current version of the entity. If the version of the
   * entity on the server does not match the version passed in, the
   * server operation will fail. Use -1 to skip version checking.
   * 
   * @param clientIndex
   */
  virtual void Entity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method updates a singleton entity on the server. This operation results in the entity
   * data being completely replaced by the passed in JSON string. If the entity doesn't exist it is created.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param jsonEntityData The entity's data as a json string.
   * 
   * @param jsonEntityAcl The entity's access control list as json. A null acl implies default
   * 
   * @param version Current version of the entity. If the version of the
   * entity on the server does not match the version passed in, the
   * server operation will fail. Use -1 to skip version checking.
   * 
   * @param clientIndex
   */
  virtual void Entity_UpdateSingleton(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method deletes the given singleton on the server.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param version Current version of the entity. If the version of the
   * entity on the server does not match the version passed in, the
   * server operation will fail. Use -1 to skip version checking.
   * 
   * @param clientIndex
   */
  virtual void Entity_DeleteSingleton(std::string& _return, const std::string& entityType, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method to get a specific entity.
   * 
   * @param entityId The id of the entity
   * 
   * @param clientIndex
   */
  virtual void Entity_GetEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex) = 0;

  /**
   * Method retrieves a singleton entity on the server. If the entity doesn't exist, null is returned.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param clientIndex
   */
  virtual void Entity_GetSingleton(std::string& _return, const std::string& entityType, const int32_t clientIndex) = 0;

  /**
   * Method returns a shared entity for the given profile and entity ID.
   * An entity is shared if its ACL allows for the currently logged
   * in user to read the data.
   * 
   * @param profileId The the profile ID of the user who owns the entity
   * 
   * @param entityId The ID of the entity that will be retrieved
   * 
   * @param clientIndex
   */
  virtual void Entity_GetSharedEntityForProfileId(std::string& _return, const std::string& profileId, const std::string& entityId, const int32_t clientIndex) = 0;

  /**
   * Method returns all shared entities for the given profile id.
   * An entity is shared if its ACL allows for the currently logged
   * in user to read the data.
   * 
   * @param profileId The profile id to retrieve shared entities for
   * 
   * @param clientIndex
   */
  virtual void Entity_GetSharedEntitiesForProfileId(std::string& _return, const std::string& profileId, const int32_t clientIndex) = 0;

  /**
   * Method gets list of entities from the server base on type and/or where clause
   * 
   * @param whereJson Mongo style query string
   * 
   * @param orderByJson Sort order
   * 
   * @param maxReturn The maximum number of entities to return
   * 
   * @param clientIndex
   */
  virtual void Entity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) = 0;

  /**
   * Method gets list of shared entities for the specified user based on type and/or where clause
   * 
   * @param profileId The profile ID to retrieve shared entities for
   * 
   * @param whereJson Mongo style query string
   * 
   * @param orderByJson Sort order
   * 
   * @param maxReturn The maximum number of entities to return
   * 
   * @param clientIndex
   */
  virtual void Entity_GetSharedEntitiesListForProfileId(std::string& _return, const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) = 0;

  /**
   * Method gets a count of entities based on the where clause
   * 
   * @param whereJson Mongo style query string
   * 
   * @param clientIndex
   */
  virtual void Entity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex) = 0;

  /**
   * Method uses a paging system to iterate through user entities.
   * After retrieving a page of entities with this method,
   * use GetPageOffset() to retrieve previous or next pages.
   * 
   * @param jsonContext The json context for the page request.
   * See the portal appendix documentation for format
   * 
   * @param clientIndex
   */
  virtual void Entity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) = 0;

  /**
   * Method to retrieve previous or next pages after having called
   * the GetPage method.
   * 
   * @param context The context string returned from the server from a previous call
   * to GetPage() or GetPageOffset()
   * 
   * @param pageOffset The positive or negative page offset to fetch. Uses the last page
   * retrieved using the context string to determine a starting point.
   * 
   * @param clientIndex
   */
  virtual void Entity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) = 0;

  /**
   * Partial increment of entity data field items. Partial set of items incremented as specified.
   * 
   * @param entityId The entity to increment
   * 
   * @param jsonData The subset of data to increment
   * 
   * @param clientIndex
   */
  virtual void Entity_IncrementUserEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Partial increment of shared entity data field items. Partial set of items incremented as specified.
   * 
   * @param entityId The entity to increment
   * 
   * @param targetProfileId Profile ID of the entity owner
   * 
   * @param jsonData The subset of data to increment
   * 
   * @param clientIndex
   */
  virtual void Entity_IncrementSharedUserEntityData(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Sends an event to the designated profile id with the attached json data.
   * Any events that have been sent to a user will show up in their
   * incoming event mailbox. If the recordLocally flag is set to true,
   * a copy of this event (with the exact same event id) will be stored
   * in the sending user's "sent" event mailbox.
   * 
   * @param toProfileId The id of the user who is being sent the event
   * 
   * @param eventType The user-defined type of the event.
   * 
   * @param jsonEventData The user-defined data for this event encoded in JSON.
   * 
   * @param clientIndex
   */
  virtual void Event_SendEvent(std::string& _return, const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex) = 0;

  /**
   * Updates an event in the user's incoming event mailbox.
   * 
   * @param evId The event id
   * 
   * @param jsonEventData The user-defined data for this event encoded in JSON.
   * 
   * @param clientIndex
   */
  virtual void Event_UpdateIncomingEventData(std::string& _return, const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex) = 0;

  /**
   * Delete an event out of the user's incoming mailbox.
   * 
   * @param evId The event id
   * 
   * @param clientIndex
   */
  virtual void Event_DeleteIncomingEvent(std::string& _return, const std::string& evId, const int32_t clientIndex) = 0;

  /**
   * Get the events currently queued for the user.
   * 
   * @param clientIndex
   */
  virtual void Event_GetEvents(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Prepares a user file upload. On success the file will begin uploading
   * to the brainCloud server.To be informed of success/failure of the upload
   * register an IFileUploadCallback with the BrainCloudClient class.
   * 
   * @param cloudPath The desired cloud path of the file
   * 
   * @param cloudFilename The desired cloud fileName of the file
   * 
   * @param shareable True if the file is shareable
   * 
   * @param replaceIfExists Whether to replace file if it exists
   * 
   * @param localPath The path and fileName of the local file
   * 
   * @param clientIndex
   */
  virtual void File_UploadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex) = 0;

  /**
   * Method cancels an upload. If an IFileUploadCallback has been registered with the BrainCloudClient class,
   * the fileUploadFailed callback method will be called once the upload has been canceled.
   * NOTE: The upload will still continue in the background on versions of Unity before 5.3
   * and on Unity mobile platforms.
   * 
   * @param uploadId Upload ID of the file to cancel
   * 
   * @param clientIndex
   */
  virtual void File_CancelUpload(const std::string& uploadId, const int32_t clientIndex) = 0;

  /**
   * Returns the progress of the given upload from 0.0 to 1.0 or -1 if upload not found.
   * NOTE: This will always return 1 on Unity mobile platforms.
   * 
   * @param uploadId The id of the upload
   * 
   * @param clientIndex
   */
  virtual double File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex) = 0;

  /**
   * Returns the number of bytes uploaded or -1 if upload not found.
   * NOTE: This will always return the total bytes to transfer on Unity mobile platforms.
   * 
   * @param uploadId The id of the upload
   * 
   * @param clientIndex
   */
  virtual int64_t File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex) = 0;

  /**
   * Returns the total number of bytes that will be uploaded or -1 if upload not found.
   * 
   * @param uploadId The id of the upload
   * 
   * @param clientIndex
   */
  virtual int64_t File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex) = 0;

  /**
   * List all user files
   * 
   * @param clientIndex
   */
  virtual void File_ListUserFiles_SFO(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * List user files from the given cloud path
   * 
   * @param cloudPath File path
   * 
   * @param recurse Whether to recurse down the path
   * 
   * @param clientIndex
   */
  virtual void File_ListUserFiles_SNSFO(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex) = 0;

  /**
   * Deletes a single user file.
   * 
   * @param cloudPath File path
   * 
   * @param cloudFileName
   * @param clientIndex
   */
  virtual void File_DeleteUserFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex) = 0;

  /**
   * Delete multiple user files
   * 
   * @param cloudPath File path
   * 
   * @param recurse Whether to recurse down the path
   * 
   * @param clientIndex
   */
  virtual void File_DeleteUserFiles(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex) = 0;

  /**
   * Returns the CDN URL for a file object.
   * 
   * @param cloudPath File path
   * 
   * @param cloudFilename Name of file
   * 
   * @param clientIndex
   */
  virtual void File_GetCDNUrl(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) = 0;

  /**
   * Returns a particular entity of a particular friend.
   * 
   * @param entityId Id of entity to retrieve.
   * 
   * @param friendId Profile Id of friend who owns entity.
   * 
   * @param clientIndex
   */
  virtual void Friend_ReadFriendEntity(std::string& _return, const std::string& entityId, const std::string& friendId, const int32_t clientIndex) = 0;

  /**
   * Returns entities of all friends based on type and/or subtype.
   * 
   * @param entityType Types of entities to retrieve.
   * 
   * @param clientIndex
   */
  virtual void Friend_ReadFriendsEntities(std::string& _return, const std::string& entityType, const int32_t clientIndex) = 0;

  /**
   * Returns user state of a particular friend.
   * 
   * @param friendId Profile Id of friend to retrieve user state for.
   * 
   * @param clientIndex
   */
  virtual void Friend_ReadFriendUserState(std::string& _return, const std::string& friendId, const int32_t clientIndex) = 0;

  /**
   * Returns user state of a particular user.
   * 
   * @param playerId
   * @param clientIndex
   */
  virtual void Friend_GetSummaryDataForProfileId(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;

  /**
   * Returns user state of a set of users.
   * 
   * @param playerIds Player Ids of users to retrieve player state for.
   * 
   * @param clientIndex
   */
  virtual void Friend_GetSummaryDataForProfileIds(std::string& _return, const std::vector<std::string> & playerIds, const int32_t clientIndex) = 0;

  /**
   * Returns user state of the player's friends.
   * 
   * @param clientIndex
   */
  virtual void Friend_GetSummaryDataForFriends(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Finds a list of users matching the search text by performing an exact
   * search of all user names.
   * 
   * @param searchText The string to search for.
   * 
   * @param maxResults Maximum number of results to return.
   * 
   * @param clientIndex
   */
  virtual void Friend_FindUsersByExactName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex) = 0;

  /**
   * Finds a list of users matching the search text by performing a substring
   * search of all user names.
   * 
   * @param searchText The substring to search for. Minimum length of 3 characters.
   * 
   * @param maxResults Maximum number of results to return.
   * 
   * @param clientIndex
   */
  virtual void Friend_FindUsersBySubstrName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex) = 0;

  /**
   * Retrieves a list of user and friend platform information for all friends of the current user.
   * 
   * @param friendPlatform Friend platform to query.
   * 
   * @param includeSummaryData True if including summary data; false otherwise.
   * 
   * @param clientIndex
   */
  virtual void Friend_ListFriends(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex) = 0;

  /**
   * Links the current user and the specified users as brainCloud friends.
   * 
   * @param profileIds Collection of profile IDs.
   * 
   * @param clientIndex
   */
  virtual void Friend_AddFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) = 0;

  /**
   * Unlinks the current user and the specified users as brainCloud friends.
   * 
   * @param profileIds Collection of profile IDs.
   * 
   * @param clientIndex
   */
  virtual void Friend_RemoveFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) = 0;

  /**
   * Get users online status
   * 
   * @param profileIds Collection of profile IDs.
   * 
   * @param clientIndex
   */
  virtual void Friend_GetUsersOnlineStatus(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) = 0;
  virtual void Friend_SendFriendInvitation(std::string& _return, const std::string& toPlayerId, const int32_t clientIndex) = 0;
  virtual void Friend_ListFriendInvitationsReceived(std::string& _return, const int32_t clientIndex) = 0;
  virtual void Friend_ListFriendInvitationsSent(std::string& _return, const int32_t clientIndex) = 0;
  virtual void Friend_AcceptFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex) = 0;
  virtual void Friend_RejectFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex) = 0;
  virtual void Friend_RemoveFriend(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;

  /**
   * Method retrieves all gamification data for the player.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadAllGamification(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method retrieves all milestones defined for the game.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Read all of the achievements defined for the game.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all defined xp levels and any rewards associated
   * with those xp levels.
   * 
   * @param clientIndex
   */
  virtual void Gamification_ReadXpLevelsMetaData(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Method retrives the list of achieved achievements.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadAchievedAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method retrieves the list of completed milestones.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadCompletedMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method retrieves the list of in progress milestones
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadInProgressMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method retrieves milestones of the given category.
   * 
   * @param category The milestone category
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadMilestonesByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method will award the achievements specified. On success, this will
   * call AwardThirdPartyAchievement to hook into the client-side Achievement
   * service (ie GameCentre, Facebook etc).
   * 
   * @param achievementIds A collection of achievement ids to award
   * 
   * @param clientIndex
   */
  virtual void Gamification_AwardAchievements(std::string& _return, const std::vector<std::string> & achievementIds, const int32_t clientIndex) = 0;

  /**
   * Method retrieves all of the quests defined for the game.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all completed quests.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadCompletedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all in progress quests.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadInProgressQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all quests that haven't been started.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadNotStartedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all quests with status.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadQuestsWithStatus(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all quests with a basic percentage.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadQuestsWithBasicPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all quests with a complex percentage.
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadQuestsWithComplexPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Method returns all quests for the given category.
   * 
   * @param category The quest category
   * 
   * @param includeMetaData
   * @param clientIndex
   */
  virtual void Gamification_ReadQuestsByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex) = 0;

  /**
   * Sets the specified milestones' statuses to LOCKED.
   * 
   * @param milestoneIds List of milestones to reset
   * 
   * @param clientIndex
   */
  virtual void Gamification_ResetMilestones(std::string& _return, const std::vector<std::string> & milestoneIds, const int32_t clientIndex) = 0;

  /**
   * Method reads all the global properties of the game
   * 
   * @param clientIndex
   */
  virtual void GlobalApp_ReadProperties(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Method creates a new entity on the server.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param timeToLive Sets expiry time for entity in milliseconds if > 0
   * 
   * @param jsonEntityAcl The entity's access control list as json. A null acl implies default
   * 
   * @param jsonEntityData The entity's data as a json string
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_CreateEntity(std::string& _return, const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex) = 0;

  /**
   * Method creates a new entity on the server with an indexed id.
   * 
   * @param entityType The entity type as defined by the user
   * 
   * @param indexedId A secondary ID that will be indexed
   * 
   * @param timeToLive Sets expiry time for entity in milliseconds if > 0
   * 
   * @param jsonEntityAcl The entity's access control list as json. A null acl implies default
   * 
   * @param jsonEntityData The entity's data as a json string
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_CreateEntityWithIndexedId(std::string& _return, const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex) = 0;

  /**
   * Method updates an existing entity on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity to update
   * 
   * @param jsonEntityData The entity's data as a json string
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_UpdateEntity(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex) = 0;

  /**
   * Method updates an existing entity's Acl on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity to update
   * 
   * @param jsonEntityAcl The entity's access control list as json.
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_UpdateEntityAcl(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex) = 0;

  /**
   * Method updates an existing entity's time to live on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity to update
   * 
   * @param timeToLive Sets expiry time for entity in milliseconds if > 0
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_UpdateEntityTimeToLive(std::string& _return, const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex) = 0;

  /**
   * Method deletes an existing entity on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity to delete
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex) = 0;

  /**
   * Method reads an existing entity from the server.
   * 
   * @param entityId The entity ID
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_ReadEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex) = 0;

  /**
   * Method gets list of entities from the server base on type and/or where clause
   * 
   * @param whereJson Mongo style query string
   * 
   * @param orderByJson Sort order
   * 
   * @param maxReturn The maximum number of entities to return
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) = 0;

  /**
   * Method gets list of entities from the server base on indexed id
   * 
   * @param entityIndexedId The entity indexed Id
   * 
   * @param maxReturn The maximum number of entities to return
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetListByIndexedId(std::string& _return, const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex) = 0;

  /**
   * Method gets a count of entities based on the where clause
   * 
   * @param whereJson Mongo style query string
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex) = 0;

  /**
   * Method uses a paging system to iterate through Global Entities.
   * After retrieving a page of Global Entities with this method,
   * use GetPageOffset() to retrieve previous or next pages.
   * 
   * @param jsonContext The json context for the page request.
   * See the portal appendix documentation for format
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) = 0;

  /**
   * Method to retrieve previous or next pages after having called
   * the GetPage method.
   * 
   * @param context The context string returned from the server from a previous call
   * to GetPage() or GetPageOffset()
   * 
   * @param pageOffset The positive or negative page offset to fetch. Uses the last page
   * retrieved using the context string to determine a starting point.
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) = 0;

  /**
   * Partial increment of global entity data field items. Partial set of items incremented as specified.
   * 
   * @param entityId The entity to increment
   * 
   * @param jsonData The subset of data to increment
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_IncrementGlobalEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Gets a list of up to randomCount randomly selected entities from the server based on the where condition and specified maximum return count.
   * 
   * @param whereJson
   * @param maxReturn The maximum number of entities to return
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_GetRandomEntitiesMatching(std::string& _return, const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex) = 0;

  /**
   * Method updates an existing entity's Owner and Acl on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity
   * 
   * @param ownerId The owner ID
   * 
   * @param acl The entity's access control list
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return, const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex) = 0;

  /**
   * Method clears the owner id of an existing entity and sets the Acl on the server.
   * 
   * @param entityId The entity ID
   * 
   * @param version The version of the entity
   * 
   * @param acl The entity's access control list
   * 
   * @param clientIndex
   */
  virtual void GlobalEntity_MakeSystemEntity(std::string& _return, const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex) = 0;

  /**
   * Method returns all of the global statistics.
   * 
   * @param clientIndex
   */
  virtual void GlobalStatistics_ReadAllGlobalStats(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Reads a subset of global statistics as defined by the input JSON.
   * 
   * @param globalStats A list containing the statistics to read
   * 
   * @param clientIndex
   */
  virtual void GlobalStatistics_ReadGlobalStatsSubset(std::string& _return, const std::vector<std::string> & globalStats, const int32_t clientIndex) = 0;

  /**
   * Method retrieves the global statistics for the given category.
   * 
   * @param category The global statistics category
   * 
   * @param clientIndex
   */
  virtual void GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex) = 0;

  /**
   * Atomically increment (or decrement) global statistics.
   * Global statistics are defined through the brainCloud portal.
   * 
   * @param jsonData The JSON encoded data to be sent to the server as follows:
   * {
   *   stat1: 10,
   *   stat2: -5.5,
   * }
   * would increment stat1 by 10 and decrement stat2 by 5.5.
   * For the full statistics grammer see the api.braincloudservers.com site.
   * There are many more complex operations supported such as:
   * {
   *   stat1:INC_TO_LIMIT#9#30
   * }
   * which increments stat1 by 9 up to a limit of 30.
   * 
   * @param clientIndex
   */
  virtual void GlobalStatistics_IncrementGlobalStats(std::string& _return, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Apply statistics grammar to a partial set of statistics.
   * 
   * @param statisticsData Example data to be passed to method:
   * {
   *     "DEAD_CATS": "RESET",
   *     "LIVES_LEFT": "SET#9",
   *     "MICE_KILLED": "INC#2",
   *     "DOG_SCARE_BONUS_POINTS": "INC#10",
   *     "TREES_CLIMBED": 1
   * }
   * 
   * @param clientIndex
   */
  virtual void GlobalStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex) = 0;

  /**
   * Accept an outstanding invitation to join the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_AcceptGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Add a member to the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the member being added.
   * 
   * @param role Role of the member being added.
   * 
   * @param jsonAttributes Attributes of the member being added.
   * 
   * @param clientIndex
   */
  virtual void Group_AddGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Approve an outstanding request to join the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the invitation being deleted.
   * 
   * @param role Role of the member being invited.
   * 
   * @param jsonAttributes Attributes of the member being invited.
   * 
   * @param clientIndex
   */
  virtual void Group_ApproveGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Automatically join an open group that matches the search criteria and has space available.
   * 
   * @param groupType Name of the associated group type.
   * 
   * @param autoJoinStrategy Selection strategy to employ when there are multiple matches
   * 
   * @param dataQueryJson Query parameters (optional)
   * 
   * @param clientIndex
   */
  virtual void Group_AutoJoinGroup(std::string& _return, const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex) = 0;

  /**
   * Cancel an outstanding invitation to the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the invitation being deleted.
   * 
   * @param clientIndex
   */
  virtual void Group_CancelGroupInvitation(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) = 0;

  /**
   * Create a group.
   * 
   * @param name Name of the group.
   * 
   * @param groupType Name of the type of group.
   * 
   * @param isOpenGroup true if group is open; false if closed.
   * 
   * @param acl The group's access control list. A null ACL implies default.
   * 
   * @param jsonData Custom application data.
   * 
   * @param jsonOwnerAttributes Attributes for the group owner (current user).
   * 
   * @param jsonDefaultMemberAttributes Default attributes for group members.
   * 
   * @param clientIndex
   */
  virtual void Group_CreateGroup(std::string& _return, const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex) = 0;

  /**
   * Create a group entity.
   * 
   * @param groupId ID of the group.
   * 
   * @param entityType
   * @param isOwnedByGroupMember true if entity is owned by a member; false if owned by the entire group.
   * 
   * @param acl Access control list for the group entity.
   * 
   * @param jsonData Custom application data.
   * 
   * @param clientIndex
   */
  virtual void Group_CreateGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Delete a group.
   * 
   * @param groupId ID of the group.
   * 
   * @param version Current version of the group
   * 
   * @param clientIndex
   */
  virtual void Group_DeleteGroup(std::string& _return, const std::string& groupId, const int64_t version, const int32_t clientIndex) = 0;

  /**
   * Delete a group entity.
   * 
   * @param groupId ID of the group.
   * 
   * @param entityId ID of the entity.
   * 
   * @param version The current version of the group entity (for concurrency checking).
   * 
   * @param clientIndex
   */
  virtual void Group_DeleteGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex) = 0;

  /**
   * Read information on groups to which the current user belongs.
   * 
   * @param clientIndex
   */
  virtual void Group_GetMyGroups(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Increment elements for the group's data field.
   * 
   * @param groupId ID of the group.
   * 
   * @param jsonData Partial data map with incremental values.
   * 
   * @param clientIndex
   */
  virtual void Group_IncrementGroupData(std::string& _return, const std::string& groupId, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Increment elements for the group entity's data field.
   * 
   * @param groupId ID of the group.
   * 
   * @param entityId ID of the entity.
   * 
   * @param jsonData Partial data map with incremental values.
   * 
   * @param clientIndex
   */
  virtual void Group_IncrementGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Invite a member to the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the member being invited.
   * 
   * @param role Role of the member being invited.
   * 
   * @param jsonAttributes Attributes of the member being invited.
   * 
   * @param clientIndex
   */
  virtual void Group_InviteGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Join an open group or request to join a closed group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_JoinGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Leave a group in which the user is a member.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_LeaveGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Retrieve a page of group summary information based on the specified context.
   * 
   * @param jsonContext Query context.
   * 
   * @param clientIndex
   */
  virtual void Group_ListGroupsPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) = 0;

  /**
   * Retrieve a page of group summary information based on the encoded context
   * and specified page offset.
   * 
   * @param context Encoded reference query context.
   * 
   * @param pageOffset Number of pages by which to offset the query.
   * 
   * @param clientIndex
   */
  virtual void Group_ListGroupsPageByOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) = 0;

  /**
   * Read information on groups to which the specified user belongs.  Access is subject to restrictions.
   * 
   * @param profileId User to read groups for
   * 
   * @param clientIndex
   */
  virtual void Group_ListGroupsWithMember(std::string& _return, const std::string& profileId, const int32_t clientIndex) = 0;

  /**
   * Read the specified group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Read the data of the specified group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroupData(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Read a page of group entity information.
   * 
   * @param jsonContext Query context.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroupEntitiesPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) = 0;

  /**
   * Read a page of group entity information.
   * 
   * @param encodedContext Encoded reference query context.
   * 
   * @param pageOffset Number of pages by which to offset the query.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroupEntitiesPageByOffset(std::string& _return, const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex) = 0;

  /**
   * Read the specified group entity.
   * 
   * @param groupId ID of the group.
   * 
   * @param entityId ID of the entity.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int32_t clientIndex) = 0;

  /**
   * Read the members of the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_ReadGroupMembers(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Reject an outstanding invitation to join the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param clientIndex
   */
  virtual void Group_RejectGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Reject an outstanding request to join the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the invitation being deleted.
   * 
   * @param clientIndex
   */
  virtual void Group_RejectGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) = 0;

  /**
   * Remove a member from the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the member being deleted.
   * 
   * @param clientIndex
   */
  virtual void Group_RemoveGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) = 0;

  /**
   * Updates a group's data.
   * 
   * @param groupId ID of the group.
   * 
   * @param version Version to verify.
   * 
   * @param jsonData Data to apply.
   * 
   * @param clientIndex
   */
  virtual void Group_UpdateGroupData(std::string& _return, const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Update a group entity.
   * 
   * @param groupId ID of the group.
   * 
   * @param entityId ID of the entity.
   * 
   * @param version The current version of the group entity (for concurrency checking).
   * 
   * @param jsonData Custom application data.
   * 
   * @param clientIndex
   */
  virtual void Group_UpdateGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Update a member of the group.
   * 
   * @param groupId ID of the group.
   * 
   * @param profileId Profile ID of the member being updated.
   * 
   * @param role Role of the member being updated (optional).
   * 
   * @param jsonAttributes Attributes of the member being updated (optional).
   * 
   * @param clientIndex
   */
  virtual void Group_UpdateGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Updates a group's name.
   * 
   * @param groupId ID of the group.
   * 
   * @param name Name to apply.
   * 
   * @param clientIndex
   */
  virtual void Group_UpdateGroupName(std::string& _return, const std::string& groupId, const std::string& name, const int32_t clientIndex) = 0;

  /**
   * Attach a Email and Password identity to the current profile.
   * 
   * @param email The user's e-mail address
   * 
   * @param password The user's password
   * 
   * @param clientIndex
   */
  virtual void Identity_AttachEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex) = 0;

  /**
   * Merge the profile associated with the provided e=mail with the current profile.
   * 
   * @param email The user's e-mail address
   * 
   * @param password The user's password
   * 
   * @param clientIndex
   */
  virtual void Identity_MergeEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex) = 0;

  /**
   * Detach the e-mail identity from the current profile
   * 
   * @param email The user's e-mail address
   * 
   * @param continueAnon Proceed even if the profile will revert to anonymous?
   * 
   * @param clientIndex
   */
  virtual void Identity_DetachEmailIdentity(std::string& _return, const std::string& email, const bool continueAnon, const int32_t clientIndex) = 0;

  /**
   * Attach a Universal (userId + password) identity to the current profile.
   * 
   * @param userId The user's userId
   * 
   * @param password The user's password
   * 
   * @param clientIndex
   */
  virtual void Identity_AttachUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex) = 0;

  /**
   * Merge the profile associated with the provided e=mail with the current profile.
   * 
   * @param userId The user's userId
   * 
   * @param password The user's password
   * 
   * @param clientIndex
   */
  virtual void Identity_MergeUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex) = 0;

  /**
   * Detach the universal identity from the current profile
   * 
   * @param userId The user's userId
   * 
   * @param continueAnon Proceed even if the profile will revert to anonymous?
   * 
   * @param clientIndex
   */
  virtual void Identity_DetachUniversalIdentity(std::string& _return, const std::string& userId, const bool continueAnon, const int32_t clientIndex) = 0;

  /**
   * Switch to a Child Profile
   * 
   * @param childProfileId The profileId of the child profile to switch to
   * If null and forceCreate is true a new profile will be created
   * 
   * @param childAppId The appId of the child game to switch to
   * 
   * @param forceCreate Should a new profile be created if it does not exist?
   * 
   * @param clientIndex
   */
  virtual void Identity_SwitchToChildProfile(std::string& _return, const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Switches to the child profile of an app when only one profile exists
   * If multiple profiles exist this returns an error
   * 
   * @param childAppId The App ID of the child game to switch to
   * 
   * @param forceCreate Should a new profile be created if one does not exist?
   * 
   * @param clientIndex
   */
  virtual void Identity_SwitchToSingletonChildProfile(std::string& _return, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Attach a new identity to a parent app
   * 
   * @param externalId User ID
   * 
   * @param authenticationToken Password or client side token
   * 
   * @param authenticationType Type of authentication
   * 
   * @param externalAuthName Optional - if using AuthenticationType of external
   * 
   * @param forceCreate If the profile does not exist, should it be created?
   * 
   * @param clientIndex
   */
  virtual void Identity_AttachParentWithIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Switch to a Parent Profile
   * 
   * @param parentLevelName The level of the parent to switch to
   * 
   * @param clientIndex
   */
  virtual void Identity_SwitchToParentProfile(std::string& _return, const std::string& parentLevelName, const int32_t clientIndex) = 0;

  /**
   * Detaches parent from this user's profile
   * 
   * @param clientIndex
   */
  virtual void Identity_DetachParent(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Returns a list of all child profiles in child Apps
   * 
   * @param includeSummaryData Whether to return the summary friend data along with this call
   * 
   * @param clientIndex
   */
  virtual void Identity_GetChildProfiles(std::string& _return, const bool includeSummaryData, const int32_t clientIndex) = 0;

  /**
   * Retrieve list of identities
   * 
   * @param clientIndex
   */
  virtual void Identity_GetIdentities(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Retrieve list of expired identities
   * 
   * @param clientIndex
   */
  virtual void Identity_GetExpiredIdentities(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Refreshes an identity for this user
   * 
   * @param externalId User ID
   * 
   * @param authenticationToken Password or client side token
   * 
   * @param authenticationType Type of authentication
   * 
   * @param clientIndex
   */
  virtual void Identity_RefreshIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex) = 0;

  /**
   * Allows email identity email address to be changed
   * 
   * @param oldEmailAddress Old email address
   * 
   * @param password Password for identity
   * 
   * @param newEmailAddress New email address
   * 
   * @param updateContactEmail Whether to update contact email in profile
   * 
   * @param clientIndex
   */
  virtual void Identity_ChangeEmailIdentity(std::string& _return, const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex) = 0;

  /**
   * Attaches a peer identity to this user's profile
   * 
   * @param peer Name of the peer to connect to
   * 
   * @param externalId User ID
   * 
   * @param authenticationToken Password or client side token
   * 
   * @param authenticationType Type of authentication
   * 
   * @param externalAuthName Optional - if using AuthenticationType of external
   * 
   * @param forceCreate If the profile does not exist, should it be created?
   * 
   * @param clientIndex
   */
  virtual void Identity_AttachPeerProfile(std::string& _return, const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) = 0;

  /**
   * Detaches a peer identity from this user's profile
   * 
   * @param peer Name of the peer to connect to
   * 
   * @param clientIndex
   */
  virtual void Identity_DetachPeer(std::string& _return, const std::string& peer, const int32_t clientIndex) = 0;

  /**
   * Retrieves a list of attached peer profiles
   * 
   * @param clientIndex
   */
  virtual void Identity_GetPeerProfiles(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Sends a simple text email to the specified user
   * 
   * @param profileId
   * @param subject The email subject
   * 
   * @param body The email body
   * 
   * @param clientIndex
   */
  virtual void Mail_SendBasicEmail(std::string& _return, const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex) = 0;

  /**
   * Sends an advanced email to the specified user
   * 
   * @param profileId
   * @param jsonServiceParams Parameters to send to the email service. See the documentation for
   * a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
   * 
   * @param clientIndex
   */
  virtual void Mail_SendAdvancedEmail(std::string& _return, const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex) = 0;

  /**
   * Sends an advanced email to the specified email address
   * 
   * @param emailAddress The address to send the email to
   * 
   * @param jsonServiceParams Parameters to send to the email service. See the documentation for
   * a full list. http://getbraincloud.com/apidocs/apiref/#capi-mail
   * 
   * @param clientIndex
   */
  virtual void Mail_SendAdvancedEmailByAddress(std::string& _return, const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex) = 0;

  /**
   * Read match making record
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_Read(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Sets player rating
   * 
   * @param playerRating The new player rating.
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_SetPlayerRating(std::string& _return, const int64_t playerRating, const int32_t clientIndex) = 0;

  /**
   * Resets player rating
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_ResetPlayerRating(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Increments player rating
   * 
   * @param increment The increment amount
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_IncrementPlayerRating(std::string& _return, const int64_t increment, const int32_t clientIndex) = 0;

  /**
   * Decrements player rating
   * 
   * @param decrement The decrement amount
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_DecrementPlayerRating(std::string& _return, const int64_t decrement, const int32_t clientIndex) = 0;

  /**
   * Turns shield on
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_TurnShieldOn(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Turns shield on for the specified number of minutes
   * 
   * @param minutes Number of minutes to turn the shield on for
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_TurnShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex) = 0;

  /**
   * Turns shield off
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_TurnShieldOff(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Increases the shield on time by specified number of minutes
   * 
   * @param minutes Number of minutes to increase the shield time for
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_IncrementShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex) = 0;

  /**
   * Gets the shield expiry for the given player id. Passing in a null player id
   * will return the shield expiry for the current player. The value returned is
   * the time in UTC millis when the shield will expire.
   * 
   * @param playerId The player id or use null to retrieve for the current player
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_GetShieldExpiry(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;

  /**
   * Finds matchmaking enabled players
   * 
   * @param rangeDelta The range delta
   * 
   * @param numMatches The maximum number of matches to return
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_FindPlayers(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex) = 0;

  /**
   * Finds matchmaking enabled players with additional attributes
   * 
   * @param rangeDelta The range delta
   * 
   * @param numMatches The maximum number of matches to return
   * 
   * @param jsonAttributes Attributes match criteria
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_FindPlayersWithAttributes(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Finds matchmaking enabled players using a cloud code filter
   * 
   * @param rangeDelta The range delta
   * 
   * @param numMatches The maximum number of matches to return
   * 
   * @param jsonExtraParms Parameters to pass to the CloudCode filter script
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_FindPlayersUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex) = 0;

  /**
   * Finds matchmaking enabled players using a cloud code filter
   * and additional attributes
   * 
   * @param rangeDelta The range delta
   * 
   * @param numMatches The maximum number of matches to return
   * 
   * @param jsonAttributes Attributes match criteria
   * 
   * @param jsonExtraParms Parameters to pass to the CloudCode filter script
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex) = 0;

  /**
   * Enables Match Making for the Player
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_EnableMatchMaking(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Disables Match Making for the Player
   * 
   * @param clientIndex
   */
  virtual void MatchMaking_DisableMatchMaking(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Starts a match
   * 
   * @param otherPlayerId The player to start a match with
   * 
   * @param rangeDelta The range delta used for the initial match search
   * 
   * @param clientIndex
   */
  virtual void OneWayMatch_StartMatch(std::string& _return, const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex) = 0;

  /**
   * Cancels a match
   * 
   * @param playbackStreamId The playback stream id returned in the start match
   * 
   * @param clientIndex
   */
  virtual void OneWayMatch_CancelMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) = 0;

  /**
   * Completes a match
   * 
   * @param playbackStreamId The playback stream id returned in the initial start match
   * 
   * @param clientIndex
   */
  virtual void OneWayMatch_CompleteMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) = 0;

  /**
   * Starts a stream
   * 
   * @param targetPlayerId The player to start a stream with
   * 
   * @param includeSharedData Whether to include shared data in the stream
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_StartStream(std::string& _return, const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex) = 0;

  /**
   * Reads a stream
   * 
   * @param playbackStreamId Identifies the stream to read
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_ReadStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) = 0;

  /**
   * Ends a stream
   * 
   * @param playbackStreamId Identifies the stream to read
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_EndStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) = 0;

  /**
   * Deletes a stream
   * 
   * @param playbackStreamId Identifies the stream to read
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_DeleteStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) = 0;

  /**
   * Adds a stream event
   * 
   * @param playbackStreamId Identifies the stream to read
   * 
   * @param eventData Describes the event
   * 
   * @param summary Current summary data as of this event
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_AddEvent(std::string& _return, const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex) = 0;

  /**
   * Gets recent streams for initiating player
   * 
   * @param initiatingPlayerId The player that started the stream
   * 
   * @param maxNumStreams The player that started the stream
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return, const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex) = 0;

  /**
   * Gets recent streams for target player
   * 
   * @param targetPlayerId The player that started the stream
   * 
   * @param maxNumStreams The player that started the stream
   * 
   * @param clientIndex
   */
  virtual void PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return, const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex) = 0;

  /**
   * Read the state of the currently logged in user.
   * This method returns a JSON object describing most of the
   * player's data: entities, statistics, level, currency.
   * Apps will typically call this method after authenticating to get an
   * up-to-date view of the user's data.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_ReadUserState(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Completely deletes the user record and all data fully owned
   * by the user. After calling this method, the user will need
   * to re-authenticate and create a new profile.
   * This is mostly used for debugging/qa.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_DeleteUser(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * This method will delete *most* data for the currently logged in user.
   * Data which is not deleted includes: currency, credentials, and
   * purchase transactions. ResetUser is different from DeleteUser in that
   * the player record will continue to exist after the reset (so the user
   * does not need to re-authenticate).
   * 
   * @param clientIndex
   */
  virtual void PlayerState_ResetUser(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Logs user out of server.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_Logout(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Sets the user name.
   * 
   * @param userName The name of the user
   * 
   * @param clientIndex
   */
  virtual void PlayerState_UpdateUserName(std::string& _return, const std::string& userName, const int32_t clientIndex) = 0;

  /**
   * Updates the "friend summary data" associated with the logged in user.
   * Some operations will return this summary data. For instance the social
   * leaderboards will return the player's score in the leaderboard along
   * with the friend summary data. Generally this data is used to provide
   * a quick overview of the player without requiring a separate API call
   * to read their public stats or entity data.
   * 
   * @param jsonSummaryData A JSON string defining the summary data.
   * For example:
   * {
   *   "xp":123,
   *   "level":12,
   *   "highScore":45123
   * }
   * 
   * @param clientIndex
   */
  virtual void PlayerState_UpdateSummaryFriendData(std::string& _return, const std::string& jsonSummaryData, const int32_t clientIndex) = 0;

  /**
   * Retrieve the user's attributes.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_GetAttributes(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Update user's attributes.
   * 
   * @param jsonAttributes Single layer json string that is a set of key-value pairs
   * 
   * @param wipeExisting Whether to wipe existing attributes prior to update.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_UpdateAttributes(std::string& _return, const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex) = 0;

  /**
   * Remove user's attributes.
   * 
   * @param attributeNames List of attribute names.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_RemoveAttributes(std::string& _return, const std::vector<std::string> & attributeNames, const int32_t clientIndex) = 0;

  /**
   * Updates player's picture URL.
   * 
   * @param pictureUrl URL to apply.
   * 
   * @param clientIndex
   */
  virtual void PlayerState_UpdateUserPictureUrl(std::string& _return, const std::string& pictureUrl, const int32_t clientIndex) = 0;

  /**
   * Update the user's contact email.
   * Note this is unrelated to email authentication.
   * 
   * @param contactEmail Updated email
   * 
   * @param clientIndex
   */
  virtual void PlayerState_UpdateContactEmail(std::string& _return, const std::string& contactEmail, const int32_t clientIndex) = 0;

  /**
   * Read all available user statistics.
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_ReadAllUserStats(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Reads a subset of user statistics as defined by the input JSON.
   * 
   * @param playerStats
   * @param clientIndex
   */
  virtual void PlayerStatistics_ReadUserStatsSubset(std::string& _return, const std::vector<std::string> & playerStats, const int32_t clientIndex) = 0;

  /**
   * Method retrieves the user statistics for the given category.
   * 
   * @param category The user statistics category
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_ReadUserStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex) = 0;

  /**
   * Reset all of the statistics for this user back to their initial value.
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_ResetAllUserStats(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Atomically increment (or decrement) user statistics.
   * Any rewards that are triggered from user statistic increments
   * will be considered. User statistics are defined through the brainCloud portal.
   * Note also that the "xpCapped" property is returned (true/false depending on whether
   * the xp cap is turned on and whether the user has hit it).
   * 
   * @param jsonData The JSON encoded data to be sent to the server as follows:
   * {
   *   stat1: 10,
   *   stat2: -5.5,
   * }
   * would increment stat1 by 10 and decrement stat2 by 5.5.
   * For the full statistics grammer see the api.braincloudservers.com site.
   * There are many more complex operations supported such as:
   * {
   *   stat1:INC_TO_LIMIT#9#30
   * }
   * which increments stat1 by 9 up to a limit of 30.
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_IncrementUserStats_SSFO(std::string& _return, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Atomically increment (or decrement) user statistics.
   * Any rewards that are triggered from user statistic increments
   * will be considered. User statistics are defined through the brainCloud portal.
   * Note also that the "xpCapped" property is returned (true/false depending on whether
   * the xp cap is turned on and whether the user has hit it).
   * 
   * @param dictData Stats name and their increments:
   * {
   *  {"stat1", 10},
   *  {"stat1", -5}
   * }
   * 
   * would increment stat1 by 10 and decrement stat2 by 5.
   * For the full statistics grammer see the api.braincloudservers.com site.
   * There are many more complex operations supported such as:
   * {
   *   stat1:INC_TO_LIMIT#9#30
   * }
   * which increments stat1 by 9 up to a limit of 30.
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_IncrementUserStats_DSFO(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex) = 0;

  /**
   * Apply statistics grammar to a partial set of statistics.
   * 
   * @param statisticsData Example data to be passed to method:
   * {
   *     "DEAD_CATS": "RESET",
   *     "LIVES_LEFT": "SET#9",
   *     "MICE_KILLED": "INC#2",
   *     "DOG_SCARE_BONUS_POINTS": "INC#10",
   *     "TREES_CLIMBED": 1
   * }
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex) = 0;

  /**
   * Returns JSON representing the next experience level for the user.
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_GetNextExperienceLevel(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Increments the user's experience. If the user goes up a level,
   * the new level details will be returned along with a list of rewards.
   * 
   * @param xpValue The amount to increase the user's experience by
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_IncrementExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex) = 0;

  /**
   * Sets the user's experience to an absolute value. Note that this
   * is simply a set and will not reward the user if their level changes
   * as a result.
   * 
   * @param xpValue The amount to set the the player's experience to
   * 
   * @param clientIndex
   */
  virtual void PlayerStatistics_SetExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex) = 0;

  /**
   * Trigger an event server side that will increase the user statistics.
   * This may cause one or more awards to be sent back to the user -
   * could be achievements, experience, etc. Achievements will be sent by this
   * client library to the appropriate awards service (Apple Game Center, etc).
   * 
   * This mechanism supercedes the PlayerStatisticsService API methods, since
   * PlayerStatisticsService API method only update the raw statistics without
   * triggering the rewards.
   * 
   * @param eventName
   * @param eventMultiplier
   * @param clientIndex
   */
  virtual void PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return, const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex) = 0;

  /**
   * See documentation for TriggerStatsEvent for more
   * documentation.
   * 
   * @param jsonData jsonData
   * [
   *   {
   *     "eventName": "event1",
   *     "eventMultiplier": 1
   *   },
   *   {
   *     "eventName": "event2",
   *     "eventMultiplier": 1
   *   }
   * ]
   * 
   * @param clientIndex
   */
  virtual void PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Gets the player's currency for the given currency type
   * or all currency types if null passed in.
   * 
   * @param currencyType The currency type to retrieve or null
   * if all currency types are being requested.
   * 
   * @param clientIndex
   */
  virtual void Product_GetCurrency(std::string& _return, const std::string& currencyType, const int32_t clientIndex) = 0;

  /**
   * Method gets the active sales inventory for the passed-in
   * currency type.
   * 
   * @param platform The store platform. Valid stores are:
   * - itunes
   * - facebook
   * - appworld
   * - steam
   * - windows
   * - windowsPhone
   * - googlePlay
   * 
   * @param userCurrency The currency to retrieve the sales
   * inventory for. This is only used for Steam and Facebook stores.
   * 
   * @param clientIndex
   */
  virtual void Product_GetSalesInventory(std::string& _return, const std::string& platform, const std::string& userCurrency, const int32_t clientIndex) = 0;

  /**
   * Method gets the active sales inventory for the passed-in
   * currency type and category.
   * 
   * @param platform The store platform. Valid stores are:
   * - itunes
   * - facebook
   * - appworld
   * - steam
   * - windows
   * - windowsPhone
   * - googlePlay
   * 
   * @param userCurrency The currency to retrieve the sales
   * inventory for. This is only used for Steam and Facebook stores.
   * 
   * @param category The product category
   * 
   * @param clientIndex
   */
  virtual void Product_GetSalesInventoryByCategory(std::string& _return, const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex) = 0;

  /**
   * Verify Microsoft Receipt. On success, the player will be awarded the
   * associated currencies.
   * 
   * @param receipt Receipt XML
   * 
   * @param clientIndex
   */
  virtual void Product_VerifyMicrosoftReceipt(std::string& _return, const std::string& receipt, const int32_t clientIndex) = 0;

  /**
   * Returns the eligible promotions for the player.
   * 
   * @param clientIndex
   */
  virtual void Product_GetEligiblePromotions(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Verify ITunes Receipt. On success, the player will be awarded the
   * associated currencies.
   * 
   * @param base64EncReceiptData Base64 encoded receipt data
   * 
   * @param clientIndex
   */
  virtual void Product_VerifyItunesReceipt(std::string& _return, const std::string& base64EncReceiptData, const int32_t clientIndex) = 0;

  /**
   * Checks supplied text for profanity.
   * 
   * @param text The text to check
   * 
   * @param languages Optional comma delimited list of two character language codes
   * 
   * @param flagEmail Optional processing of email addresses
   * 
   * @param flagPhone Optional processing of phone numbers
   * 
   * @param flagUrls Optional processing of urls
   * 
   * @param clientIndex
   */
  virtual void Profanity_ProfanityCheck(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) = 0;

  /**
   * Replaces the characters of profanity text with a passed character(s).
   * 
   * @param text The text to check
   * 
   * @param replaceSymbol The text to replace individual characters of profanity text with
   * 
   * @param languages Optional comma delimited list of two character language codes
   * 
   * @param flagEmail Optional processing of email addresses
   * 
   * @param flagPhone Optional processing of phone numbers
   * 
   * @param flagUrls Optional processing of urls
   * 
   * @param clientIndex
   */
  virtual void Profanity_ProfanityReplaceText(std::string& _return, const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) = 0;

  /**
   * Checks supplied text for profanity and returns a list of bad wors.
   * 
   * @param text The text to check
   * 
   * @param languages Optional comma delimited list of two character language codes
   * 
   * @param flagEmail Optional processing of email addresses
   * 
   * @param flagPhone Optional processing of phone numbers
   * 
   * @param flagUrls Optional processing of urls
   * 
   * @param clientIndex
   */
  virtual void Profanity_ProfanityIdentifyBadWords(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) = 0;

  /**
   * Deregisters all device tokens currently registered to the user.
   * 
   * @param clientIndex
   */
  virtual void PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Deregisters the given device token from the server to disable this device
   * from receiving push notifications.
   * 
   * @param platform The device platform being registered.
   * 
   * @param token The platform-dependant device token needed for push notifications.
   * 
   * @param clientIndex
   */
  virtual void PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex) = 0;

  /**
   * Registers the given device token with the server to enable this device
   * to receive push notifications.
   * 
   * @param platform
   * @param token The platform-dependant device token needed for push notifications.
   * 
   * @param clientIndex
   */
  virtual void PushNotification_RegisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex) = 0;

  /**
   * Sends a simple push notification based on the passed in message.
   * NOTE: It is possible to send a push notification to oneself.
   * 
   * @param toProfileId The braincloud profileId of the user to receive the notification
   * 
   * @param message Text of the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendSimplePushNotification(std::string& _return, const std::string& toProfileId, const std::string& message, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to a user based on a brainCloud portal configured notification template.
   * NOTE: It is possible to send a push notification to oneself.
   * 
   * @param toProfileId The braincloud profileId of the user to receive the notification
   * 
   * @param notificationTemplateId Id of the notification template
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendRichPushNotification(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to a user based on a brainCloud portal configured notification template.
   * Includes JSON defining the substitution params to use with the template.
   * See the Portal documentation for more info.
   * NOTE: It is possible to send a push notification to oneself.
   * 
   * @param toProfileId The braincloud profileId of the user to receive the notification
   * 
   * @param notificationTemplateId Id of the notification template
   * 
   * @param substitutionJson JSON defining the substitution params to use with the template
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendRichPushNotificationWithParams(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
   * Includes JSON defining the substitution params to use with the template.
   * See the Portal documentation for more info.
   * 
   * @param groupId Target group
   * 
   * @param notificationTemplateId Id of the notification template
   * 
   * @param substitutionsJson JSON defining the substitution params to use with the template
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return, const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to a "group" of user based on a brainCloud portal configured notification template.
   * Includes JSON defining the substitution params to use with the template.
   * See the Portal documentation for more info.
   * 
   * @param groupId Target group
   * 
   * @param alertContentJson Body and title of alert
   * 
   * @param customDataJson Optional custom data
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) = 0;

  /**
   * Schedules raw notifications based on user local time.
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param fcmContent Valid Fcm data content
   * 
   * @param iosContent Valid ios data content
   * 
   * @param facebookContent Facebook template string
   * 
   * @param startTime Start time of sending the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleRawPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex) = 0;

  /**
   * Schedules raw notifications based on user local time.
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param fcmContent Valid Fcm data content
   * 
   * @param iosContent Valid ios data content
   * 
   * @param facebookContent Facebook template string
   * 
   * @param minutesFromNow Minutes from now to send the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex) = 0;

  /**
   * Sends a raw push notification to a target user.
   * 
   * @param toProfileId The profileId of the user to receive the notification
   * 
   * @param fcmContent Valid Fcm data content
   * 
   * @param iosContent Valid ios data content
   * 
   * @param facebookContent Facebook template string
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendRawPushNotification(std::string& _return, const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) = 0;

  /**
   * Sends a raw push notification to a target list of users.
   * 
   * @param profileIds Collection of profile IDs to send the notification to
   * 
   * @param fcmContent Valid Fcm data content
   * 
   * @param iosContent Valid ios data content
   * 
   * @param facebookContent Facebook template string
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendRawPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) = 0;

  /**
   * Sends a raw push notification to a target group.
   * 
   * @param groupId Target group
   * 
   * @param fcmContent Valid Fcm data content
   * 
   * @param iosContent Valid ios data content
   * 
   * @param facebookContent Facebook template string
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendRawPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) = 0;

  /**
   * Schedules a normalized push notification to a user
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param alertContentJson Body and title of alert
   * 
   * @param customDataJson Optional custom data
   * 
   * @param startTime Start time of sending the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex) = 0;

  /**
   * Schedules a normalized push notification to a user
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param alertContentJson Body and title of alert
   * 
   * @param customDataJson Optional custom data
   * 
   * @param minutesFromNow Minutes from now to send the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex) = 0;

  /**
   * Schedules a rich push notification to a user
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param notificationTemplateId Body and title of alert
   * 
   * @param substitutionsJson Optional custom data
   * 
   * @param startTime Start time of sending the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleRichPushNotificationUTC(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex) = 0;

  /**
   * Schedules a rich push notification to a user
   * 
   * @param profileId The profileId of the user to receive the notification
   * 
   * @param notificationTemplateId Body and title of alert
   * 
   * @param substitutionsJson Optional custom data
   * 
   * @param minutesFromNow Minutes from now to send the push notification
   * 
   * @param clientIndex
   */
  virtual void PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to a user consisting of alert content and custom data.
   * 
   * @param toProfileId The profileId of the user to receive the notification
   * 
   * @param alertContentJson Body and title of alert
   * 
   * @param customDataJson Optional custom data
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendNormalizedPushNotification(std::string& _return, const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) = 0;

  /**
   * Sends a notification to multiple users consisting of alert content and custom data.
   * 
   * @param profileIds Collection of profile IDs to send the notification to
   * 
   * @param alertContentJson Body and title of alert
   * 
   * @param customDataJson Optional custom data
   * 
   * @param clientIndex
   */
  virtual void PushNotification_SendNormalizedPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) = 0;

  /**
   * Executes a script on the server.
   * 
   * @param scriptName The name of the script to be run
   * 
   * @param jsonScriptData Data to be sent to the script in json format
   * 
   * @param clientIndex
   */
  virtual void Script_RunScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex) = 0;

  /**
   * Allows cloud script executions to be scheduled
   * 
   * @param scriptName Name of script
   * 
   * @param jsonScriptData JSON bundle to pass to script
   * 
   * @param startDateInUTC The start date as a DateTime object
   * 
   * @param clientIndex
   */
  virtual void Script_ScheduleRunScriptUTC(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex) = 0;

  /**
   * Allows cloud script executions to be scheduled
   * 
   * @param scriptName Name of script
   * 
   * @param jsonScriptData JSON bundle to pass to script
   * 
   * @param minutesFromNow Number of minutes from now to run script
   * 
   * @param clientIndex
   */
  virtual void Script_ScheduleRunScriptMinutes(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex) = 0;

  /**
   * Run a cloud script in a parent app
   * 
   * @param scriptName Name of script
   * 
   * @param jsonScriptData JSON bundle to pass to script
   * 
   * @param parentLevel The level name of the parent to run the script from
   * 
   * @param clientIndex
   */
  virtual void Script_RunParentScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex) = 0;

  /**
   * Cancels a scheduled cloud code script
   * 
   * @param jobId ID of script job to cancel
   * 
   * @param clientIndex
   */
  virtual void Script_CancelScheduledScript(std::string& _return, const std::string& jobId, const int32_t clientIndex) = 0;

  /**
   * Runs a script from the context of a peer
   * 
   * @param scriptName The name of the script to run
   * 
   * @param jsonScriptData JSON data to pass into the script
   * 
   * @param peer Identifies the peer
   * 
   * @param clientIndex
   */
  virtual void Script_RunPeerScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex) = 0;

  /**
   * Runs a script asynchronously from the context of a peer
   * This operation does not wait for the script to complete before returning
   * 
   * @param scriptName The name of the script to run
   * 
   * @param jsonScriptData JSON data to pass into the script
   * 
   * @param peer Identifies the peer
   * 
   * @param clientIndex
   */
  virtual void Script_RunPeerScriptAsynch(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex) = 0;

  /**
   * Method returns the social leaderboard. A player's social leaderboard is
   * comprised of players who are recognized as being your friend.
   * For now, this applies solely to Facebook connected players who are
   * friends with the logged in player (who also must be Facebook connected).
   * In the future this will expand to other identification means (such as
   * Game Centre, Google circles etc).
   * 
   * Leaderboards entries contain the player's score and optionally, some user-defined
   * data associated with the score. The currently logged in player will also
   * be returned in the social leaderboard.
   * 
   * Note: If no friends have played the game, the bestScore, createdAt, updatedAt
   * will contain NULL.
   * 
   * @param leaderboardId The id of the leaderboard to retrieve
   * 
   * @param replaceName If true, the currently logged in player's name will be replaced
   * by the string "You".
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex) = 0;

  /**
   * Reads multiple social leaderboards.
   * 
   * @param leaderboardIds Array of leaderboard id strings
   * 
   * @param leaderboardResultCount Maximum count of entries to return for each leaderboard.
   * 
   * @param replaceName If true, the currently logged in player's name will be replaced
   * by the string "You".
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex) = 0;

  /**
   * Method returns a page of global leaderboard results.
   * 
   * Leaderboards entries contain the player's score and optionally, some user-defined
   * data associated with the score.
   * 
   * Note: This method allows the client to retrieve pages from within the global leaderboard list
   * 
   * @param leaderboardId The id of the leaderboard to retrieve.
   * 
   * @param sort Sort key Sort order of page.
   * 
   * @param startIndex The index at which to start the page.
   * 
   * @param endIndex The index at which to end the page.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex) = 0;

  /**
   * Method returns a page of global leaderboard results. By using a non-current version id,
   * the user can retrieve a historical leaderboard. See GetGlobalLeaderboardVersions method
   * to retrieve the version id.
   * 
   * @param leaderboardId The id of the leaderboard to retrieve.
   * 
   * @param sort Sort key Sort order of page.
   * 
   * @param startIndex The index at which to start the page.
   * 
   * @param endIndex The index at which to end the page.
   * 
   * @param versionId The historical version to retrieve.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Method returns a view of global leaderboard results that centers on the current player.
   * 
   * Leaderboards entries contain the player's score and optionally, some user-defined
   * data associated with the score.
   * 
   * @param leaderboardId The id of the leaderboard to retrieve.
   * 
   * @param sort Sort key Sort order of page.
   * 
   * @param beforeCount The count of number of players before the current player to include.
   * 
   * @param afterCount The count of number of players after the current player to include.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex) = 0;

  /**
   * Method returns a view of global leaderboard results that centers on the current player.
   * By using a non-current version id, the user can retrieve a historical leaderboard.
   * See GetGlobalLeaderboardVersions method to retrieve the version id.
   * 
   * @param leaderboardId The id of the leaderboard to retrieve.
   * 
   * @param sort Sort key Sort order of page.
   * 
   * @param beforeCount The count of number of players before the current player to include.
   * 
   * @param afterCount The count of number of players after the current player to include.
   * 
   * @param versionId The historial version to retrieve. Use -1 for current leaderboard.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Gets the global leaderboard versions.
   * 
   * @param leaderboardId In_leaderboard identifier.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) = 0;

  /**
   * Retrieve the social leaderboard for a group.
   * 
   * @param leaderboardId The leaderboard to read
   * 
   * @param groupId The group ID
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex) = 0;

  /**
   * Post the players score to the given social leaderboard.
   * You can optionally send a user-defined json string of data
   * with the posted score. This string could include information
   * relevant to the posted score.
   * 
   * Note that the behaviour of posting a score can be modified in
   * the brainCloud portal. By default, the server will only keep
   * the player's best score.
   * 
   * @param leaderboardId The leaderboard to post to
   * 
   * @param score The score to post
   * 
   * @param jsonData
   * @param clientIndex
   */
  virtual void SocialLeaderboard_PostScoreToLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex) = 0;

  /**
   * Removes a player's score from the leaderboard
   * 
   * @param leaderboardId The ID of the leaderboard
   * 
   * @param versionId The version of the leaderboard
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_RemovePlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Post the players score to the given social leaderboard.
   * Pass leaderboard config data to dynamically create if necessary.
   * You can optionally send a user-defined json string of data
   * with the posted score. This string could include information
   * relevant to the posted score.
   * 
   * @param leaderboardId The leaderboard to post to
   * 
   * @param score The score to post
   * 
   * @param jsonData
   * @param leaderboardType leaderboard type
   * 
   * @param rotationType Type of rotation
   * 
   * @param rotationReset Date to reset the leaderboard UTC
   * 
   * @param retainedCount How many rotations to keep
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex) = 0;

  /**
   * Post the players score to the given social leaderboard with a rotation type of DAYS.
   * Pass leaderboard config data to dynamically create if necessary.
   * You can optionally send a user-defined json string of data
   * with the posted score. This string could include information
   * relevant to the posted score.
   * 
   * @param leaderboardId The leaderboard to post to
   * 
   * @param score The score to post
   * 
   * @param jsonData
   * @param leaderboardType leaderboard type
   * 
   * @param rotationReset Date to reset the leaderboard UTC
   * 
   * @param retainedCount How many rotations to keep
   * 
   * @param numDaysToRotate How many days between each rotation
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex) = 0;

  /**
   * Retrieve the social leaderboard for a list of players.
   * 
   * @param leaderboardId The ID of the leaderboard
   * 
   * @param profileIds The IDs of the players
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex) = 0;

  /**
   * Retrieve a list of all leaderboards
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_ListLeaderboards(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Gets the number of entries in a global leaderboard
   * 
   * @param leaderboardId The ID of the leaderboard
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) = 0;

  /**
   * Gets the number of entries in a global leaderboard
   * 
   * @param leaderboardId The ID of the leaderboard
   * 
   * @param versionId The version of the leaderboard
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Gets a player's score from a leaderboard
   * 
   * @param leaderboardId The ID of the leaderboard
   * 
   * @param versionId The version of the leaderboard. Use -1 for current.
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetPlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Gets a player's score from multiple leaderboards
   * 
   * @param leaderboardIds A collection of leaderboardIds to retrieve scores from
   * 
   * @param clientIndex
   */
  virtual void SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t clientIndex) = 0;

  /**
   * Method returns the server time in UTC. This is in UNIX millis time format.
   * For instance 1396378241893 represents 2014-04-01 2:50:41.893 in GMT-4.
   * 
   * @param clientIndex
   */
  virtual void Time_ReadServerTime(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Processes any outstanding rewards for the given player
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param versionId Version of the tournament to claim rewards for.
   * Use -1 for the latest version.
   * 
   * @param clientIndex
   */
  virtual void Tournament_ClaimTournamentReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Get tournament status associated with a leaderboard
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param versionId Version of the tournament. Use -1 for the latest version.
   * 
   * @param clientIndex
   */
  virtual void Tournament_GetTournamentStatus(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Join the specified tournament.
   * Any entry fees will be automatically collected.
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param tournamentCode Tournament to join
   * 
   * @param initialScore The initial score for players first joining a tournament
   * Usually 0, unless leaderboard is LOW_VALUE
   * 
   * @param clientIndex
   */
  virtual void Tournament_JoinTournament(std::string& _return, const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex) = 0;

  /**
   * Removes player's score from tournament leaderboard
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param clientIndex
   */
  virtual void Tournament_LeaveTournament(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) = 0;

  /**
   * Post the users score to the leaderboard
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param score The score to post
   * 
   * @param jsonData Optional data attached to the leaderboard entry
   * 
   * @param roundStartedTime Time the user started the match resulting in the score
   * being posted.
   * 
   * @param clientIndex
   */
  virtual void Tournament_PostTournamentScore(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex) = 0;

  /**
   * Post the users score to the leaderboard and returns the results
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param score The score to post
   * 
   * @param jsonData Optional data attached to the leaderboard entry
   * 
   * @param roundStartedTime Time the user started the match resulting in the score
   * being posted.
   * 
   * @param sort Sort key Sort order of page.
   * 
   * @param beforeCount The count of number of players before the current player to include.
   * 
   * @param afterCount The count of number of players after the current player to include.
   * 
   * @param initialScore The initial score for players first joining a tournament
   * Usually 0, unless leaderboard is LOW_VALUE
   * 
   * @param clientIndex
   */
  virtual void Tournament_PostTournamentScoreWithResults(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex) = 0;

  /**
   * Returns the user's expected reward based on the current scores
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param clientIndex
   */
  virtual void Tournament_ViewCurrentReward(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) = 0;

  /**
   * Returns the user's reward from a finished tournament
   * 
   * @param leaderboardId The leaderboard for the tournament
   * 
   * @param versionId Version of the tournament. Use -1 for the latest version.
   * 
   * @param clientIndex
   */
  virtual void Tournament_ViewReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) = 0;

  /**
   * Create a new lobby.
   * 
   * @param lobbyType The type of lobby to create, either "PLAYER" or "RANKED".
   * 
   * @param maxSlots The maximum number of players that can join the lobby.
   * 
   * @param isOpen Whether or not the lobby is open by default.
   * 
   * @param jsonAttributes A json string containing any custom attributes to attach to the lobby.
   * 
   * @param clientIndex
   */
  virtual void Lobby_CreateLobby(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Open a lobby so players can join.
   * 
   * @param lobbyId The ID of the lobby to open.
   * 
   * @param clientIndex
   */
  virtual void Lobby_OpenLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) = 0;

  /**
   * Close a lobby so players can't join.
   * 
   * @param lobbyId The ID of the lobby to close.
   * 
   * @param clientIndex
   */
  virtual void Lobby_CloseLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) = 0;

  /**
   * Find lobbies the player can join.
   * 
   * @param freeSlots
   * @param maxResults
   * @param jsonAttributes A json string containing any custom attributes to search for.
   * 
   * @param clientIndex
   */
  virtual void Lobby_FindLobbies(std::string& _return, const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex) = 0;

  /**
   * Find lobbies with the player's friends in them.
   * 
   * @param clientIndex
   */
  virtual void Lobby_FindFriendsLobbies(std::string& _return, const int32_t clientIndex) = 0;

  /**
   * Join a lobby.
   * 
   * @param lobbyId The ID of the lobby to join.
   * 
   * @param clientIndex
   */
  virtual void Lobby_JoinLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) = 0;

  /**
   * Leave a lobby.
   * 
   * @param lobbyId The ID of the lobby to leave.
   * 
   * @param clientIndex
   */
  virtual void Lobby_LeaveLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) = 0;

  /**
   * Destroy a lobby.
   * 
   * @param lobbyId The ID of the lobby to destroy.
   * 
   * @param clientIndex
   */
  virtual void Lobby_DestroyLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) = 0;

  /**
   * Start a lobby game.
   * 
   * @param lobbyId The ID of the lobby to destroy.
   * 
   * @param connectionString A string that can be used to connect to a real game (e.g an IP Address/port).
   * 
   * @param clientIndex
   */
  virtual void Lobby_StartGame(std::string& _return, const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex) = 0;

  /**
   * Get a list of lobbies the player is a member of.
   * 
   * @param clientIndex
   */
  virtual void Lobby_GetMyLobbies(std::string& _return, const int32_t clientIndex) = 0;
  virtual void Party_AcceptPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex) = 0;
  virtual void Party_GetPartyInfo(std::string& _return, const std::string& partyId, const int32_t clientIndex) = 0;
  virtual void Party_JoinParty(std::string& _return, const std::string& partyId, const int32_t clientIndex) = 0;
  virtual void Party_LeaveParty(std::string& _return, const std::string& partyId, const int32_t clientIndex) = 0;
  virtual void Party_RejectPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex) = 0;
  virtual void Party_SendPartyInvitation(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;
  virtual void Party_ListPartyInvitations(std::string& _return, const int32_t clientIndex) = 0;
  virtual void Party_GetFriendsParties(std::string& _return, const int32_t maxResults, const int32_t clientIndex) = 0;
  virtual void Party_GetMyParty(std::string& _return, const int32_t clientIndex) = 0;
  virtual void Patch_GetGameManifest(std::string& _return, const std::string& gameId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareVideo(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareScreenshot(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareAchievement(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareApp(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareChannel(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareLink(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ShareGameGuide(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ReadSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ReadFilteredSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ReadFriendsSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex) = 0;
  virtual void SocialFeed_PostComment(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex) = 0;
  virtual void SocialFeed_PostCommentReply(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ReadComments(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_ReadCommentReplies(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_LikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_LikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_UnlikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_UnlikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_SetFeedVisibility(std::string& _return, const std::string& visibility, const int32_t clientIndex) = 0;
  virtual void SocialFeed_BlockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_HidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_UnblockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_UnhidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) = 0;
  virtual void SocialFeed_GetActivity(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex) = 0;
  virtual void SocialFeed_GetComment(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex) = 0;
  virtual void Telemetry_StartTelemetrySession(std::string& _return, const int32_t timestamp, const int32_t clientIndex) = 0;
  virtual void Telemetry_EndTelemetrySession(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex) = 0;
  virtual void Telemetry_LogTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) = 0;
  virtual void Telemetry_StartTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) = 0;
  virtual void Telemetry_EndTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) = 0;
  virtual void Authentication_GetWeChatQRPageURL(std::string& _return, const int32_t clientIndex) = 0;
  virtual void File_DownloadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex) = 0;
  virtual void File_GetDownloadInfo(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) = 0;
  virtual void File_CancelDownload(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) = 0;
};

class BrainCloudServiceIfFactory {
 public:
  typedef BrainCloudServiceIf Handler;

  virtual ~BrainCloudServiceIfFactory() {}

  virtual BrainCloudServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BrainCloudServiceIf* /* handler */) = 0;
};

class BrainCloudServiceIfSingletonFactory : virtual public BrainCloudServiceIfFactory {
 public:
  BrainCloudServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf>& iface) : iface_(iface) {}
  virtual ~BrainCloudServiceIfSingletonFactory() {}

  virtual BrainCloudServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BrainCloudServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> iface_;
};

class BrainCloudServiceNull : virtual public BrainCloudServiceIf {
 public:
  virtual ~BrainCloudServiceNull() {}
  void AsyncMatch_CreateMatch(std::string& /* _return */, const std::string& /* jsonOpponentIds */, const std::string& /* pushNotificationMessage */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_CreateMatchWithInitialTurn(std::string& /* _return */, const std::string& /* jsonOpponentIds */, const std::string& /* jsonMatchState */, const std::string& /* pushNotificationMessage */, const std::string& /* nextPlayer */, const std::string& /* jsonSummary */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_SubmitTurn(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int64_t /* version */, const std::string& /* jsonMatchState */, const std::string& /* pushNotificationMessage */, const std::string& /* nextPlayer */, const std::string& /* jsonSummary */, const std::string& /* jsonStatistics */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_UpdateMatchSummaryData(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int64_t /* version */, const std::string& /* jsonSummary */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_CompleteMatch(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_ReadMatch(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_ReadMatchHistory(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_FindMatches(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_FindCompleteMatches(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_AbandonMatch(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int32_t /* clientIndex */) {
    return;
  }
  void AsyncMatch_DeleteMatch(std::string& /* _return */, const std::string& /* ownerId */, const std::string& /* matchId */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_GenerateAnonymousId(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_Initialize(const std::string& /* profileId */, const std::string& /* anonymousId */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_ClearSavedProfileID(const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticateAnonymous(std::string& /* _return */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticateEmailPassword(std::string& /* _return */, const std::string& /* email */, const std::string& /* password */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticateUniversal(std::string& /* _return */, const std::string& /* userId */, const std::string& /* password */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticateExternal(std::string& /* _return */, const std::string& /* userId */, const std::string& /* token */, const std::string& /* externalAuthName */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticatePhone(std::string& /* _return */, const std::string& /* phoneNumber */, const std::string& /* authCode */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_AuthenticateWechat(std::string& /* _return */, const std::string& /* openId */, const std::string& /* token */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_ResetEmailPassword(std::string& /* _return */, const std::string& /* externalId */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_RequestSmsCode(std::string& /* _return */, const std::string& /* phoneNumber */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_GetSessionId(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  bool Client_IsAuthenticated(const int32_t /* clientIndex */) {
    bool _return = false;
    return _return;
  }
  bool Client_IsInitialized(const int32_t /* clientIndex */) {
    bool _return = false;
    return _return;
  }
  void Client_Initialize_SSS(const std::string& /* secretKey */, const std::string& /* appId */, const std::string& /* appVersion */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_Initialize_SSSS(const std::string& /* serverURL */, const std::string& /* secretKey */, const std::string& /* appId */, const std::string& /* appVersion */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_InitializeIdentity(const std::string& /* profileId */, const std::string& /* anonymousId */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_Update(const int32_t /* clientIndex */) {
    return;
  }
  void Client_EnableLogging(const bool /* enable */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_ResetCommunication(const int32_t /* clientIndex */) {
    return;
  }
  void Client_SetPacketTimeouts(const std::vector<int32_t> & /* timeouts */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_SetPacketTimeoutsToDefault(const int32_t /* clientIndex */) {
    return;
  }
  void Client_GetPacketTimeouts(std::vector<int32_t> & /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_SetAuthenticationPacketTimeout(const int32_t /* timeoutSecs */, const int32_t /* clientIndex */) {
    return;
  }
  int32_t Client_GetAuthenticationPacketTimeout(const int32_t /* clientIndex */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t Client_GetUploadLowTransferRateTimeout(const int32_t /* clientIndex */) {
    int32_t _return = 0;
    return _return;
  }
  void Client_SetUploadLowTransferRateTimeout(const int32_t /* timeoutSecs */, const int32_t /* clientIndex */) {
    return;
  }
  int32_t Client_GetUploadLowTransferRateThreshold(const int32_t /* clientIndex */) {
    int32_t _return = 0;
    return _return;
  }
  void Client_SetUploadLowTransferRateThreshold(const int32_t /* bytesPerSec */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_EnableNetworkErrorMessageCaching(const bool /* enabled */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_RetryCachedMessages(const int32_t /* clientIndex */) {
    return;
  }
  void Client_FlushCachedMessages(const bool /* sendApiErrorCallbacks */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_InsertEndOfMessageBundleMarker(const int32_t /* clientIndex */) {
    return;
  }
  void Client_OverrideCountryCode(const std::string& /* countryCode */, const int32_t /* clientIndex */) {
    return;
  }
  void Client_OverrideLanguageCode(const std::string& /* languageCode */, const int32_t /* clientIndex */) {
    return;
  }
  void DataStream_CustomPageEvent(std::string& /* _return */, const std::string& /* eventName */, const std::string& /* jsonEventProperties */, const int32_t /* clientIndex */) {
    return;
  }
  void DataStream_CustomScreenEvent(std::string& /* _return */, const std::string& /* eventName */, const std::string& /* jsonEventProperties */, const int32_t /* clientIndex */) {
    return;
  }
  void DataStream_CustomTrackEvent(std::string& /* _return */, const std::string& /* eventName */, const std::string& /* jsonEventProperties */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_CreateEntity(std::string& /* _return */, const std::string& /* entityType */, const std::string& /* jsonEntityData */, const std::string& /* jsonEntityAcl */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetEntitiesByType(std::string& /* _return */, const std::string& /* entityType */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_UpdateEntity(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* entityType */, const std::string& /* jsonEntityData */, const std::string& /* jsonEntityAcl */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_UpdateSharedEntity(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* targetProfileId */, const std::string& /* entityType */, const std::string& /* jsonEntityData */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_DeleteEntity(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_UpdateSingleton(std::string& /* _return */, const std::string& /* entityType */, const std::string& /* jsonEntityData */, const std::string& /* jsonEntityAcl */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_DeleteSingleton(std::string& /* _return */, const std::string& /* entityType */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetEntity(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetSingleton(std::string& /* _return */, const std::string& /* entityType */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetSharedEntityForProfileId(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* entityId */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetSharedEntitiesForProfileId(std::string& /* _return */, const std::string& /* profileId */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetList(std::string& /* _return */, const std::string& /* whereJson */, const std::string& /* orderByJson */, const int32_t /* maxReturn */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetSharedEntitiesListForProfileId(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* whereJson */, const std::string& /* orderByJson */, const int32_t /* maxReturn */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetListCount(std::string& /* _return */, const std::string& /* whereJson */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetPage(std::string& /* _return */, const std::string& /* jsonContext */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_GetPageOffset(std::string& /* _return */, const std::string& /* context */, const int32_t /* pageOffset */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_IncrementUserEntityData(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Entity_IncrementSharedUserEntityData(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* targetProfileId */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Event_SendEvent(std::string& /* _return */, const std::string& /* toProfileId */, const std::string& /* eventType */, const std::string& /* jsonEventData */, const int32_t /* clientIndex */) {
    return;
  }
  void Event_UpdateIncomingEventData(std::string& /* _return */, const std::string& /* evId */, const std::string& /* jsonEventData */, const int32_t /* clientIndex */) {
    return;
  }
  void Event_DeleteIncomingEvent(std::string& /* _return */, const std::string& /* evId */, const int32_t /* clientIndex */) {
    return;
  }
  void Event_GetEvents(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void File_UploadFile(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFilename */, const bool /* shareable */, const bool /* replaceIfExists */, const std::string& /* localPath */, const int32_t /* clientIndex */) {
    return;
  }
  void File_CancelUpload(const std::string& /* uploadId */, const int32_t /* clientIndex */) {
    return;
  }
  double File_GetUploadProgress(const std::string& /* uploadId */, const int32_t /* clientIndex */) {
    double _return = (double)0;
    return _return;
  }
  int64_t File_GetUploadBytesTransferred(const std::string& /* uploadId */, const int32_t /* clientIndex */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t File_GetUploadTotalBytesToTransfer(const std::string& /* uploadId */, const int32_t /* clientIndex */) {
    int64_t _return = 0;
    return _return;
  }
  void File_ListUserFiles_SFO(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void File_ListUserFiles_SNSFO(std::string& /* _return */, const std::string& /* cloudPath */, const bool /* recurse */, const int32_t /* clientIndex */) {
    return;
  }
  void File_DeleteUserFile(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFileName */, const int32_t /* clientIndex */) {
    return;
  }
  void File_DeleteUserFiles(std::string& /* _return */, const std::string& /* cloudPath */, const bool /* recurse */, const int32_t /* clientIndex */) {
    return;
  }
  void File_GetCDNUrl(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFilename */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ReadFriendEntity(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* friendId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ReadFriendsEntities(std::string& /* _return */, const std::string& /* entityType */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ReadFriendUserState(std::string& /* _return */, const std::string& /* friendId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_GetSummaryDataForProfileId(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_GetSummaryDataForProfileIds(std::string& /* _return */, const std::vector<std::string> & /* playerIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_GetSummaryDataForFriends(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_FindUsersByExactName(std::string& /* _return */, const std::string& /* searchText */, const int32_t /* maxResults */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_FindUsersBySubstrName(std::string& /* _return */, const std::string& /* searchText */, const int32_t /* maxResults */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ListFriends(std::string& /* _return */, const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type /* friendPlatform */, const bool /* includeSummaryData */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_AddFriends(std::string& /* _return */, const std::vector<std::string> & /* profileIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_RemoveFriends(std::string& /* _return */, const std::vector<std::string> & /* profileIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_GetUsersOnlineStatus(std::string& /* _return */, const std::vector<std::string> & /* profileIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_SendFriendInvitation(std::string& /* _return */, const std::string& /* toPlayerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ListFriendInvitationsReceived(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_ListFriendInvitationsSent(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_AcceptFriendInvitation(std::string& /* _return */, const std::string& /* fromPlayerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_RejectFriendInvitation(std::string& /* _return */, const std::string& /* fromPlayerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Friend_RemoveFriend(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadAllGamification(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadMilestones(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadAchievements(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadXpLevelsMetaData(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadAchievedAchievements(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadCompletedMilestones(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadInProgressMilestones(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadMilestonesByCategory(std::string& /* _return */, const std::string& /* category */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_AwardAchievements(std::string& /* _return */, const std::vector<std::string> & /* achievementIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadQuests(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadCompletedQuests(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadInProgressQuests(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadNotStartedQuests(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadQuestsWithStatus(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadQuestsWithBasicPercentage(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadQuestsWithComplexPercentage(std::string& /* _return */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ReadQuestsByCategory(std::string& /* _return */, const std::string& /* category */, const bool /* includeMetaData */, const int32_t /* clientIndex */) {
    return;
  }
  void Gamification_ResetMilestones(std::string& /* _return */, const std::vector<std::string> & /* milestoneIds */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalApp_ReadProperties(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_CreateEntity(std::string& /* _return */, const std::string& /* entityType */, const int64_t /* timeToLive */, const std::string& /* jsonEntityAcl */, const std::string& /* jsonEntityData */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_CreateEntityWithIndexedId(std::string& /* _return */, const std::string& /* entityType */, const std::string& /* indexedId */, const int64_t /* timeToLive */, const std::string& /* jsonEntityAcl */, const std::string& /* jsonEntityData */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_UpdateEntity(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* version */, const std::string& /* jsonEntityData */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_UpdateEntityAcl(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* version */, const std::string& /* jsonEntityAcl */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_UpdateEntityTimeToLive(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* version */, const int64_t /* timeToLive */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_DeleteEntity(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_ReadEntity(std::string& /* _return */, const std::string& /* entityId */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetList(std::string& /* _return */, const std::string& /* whereJson */, const std::string& /* orderByJson */, const int32_t /* maxReturn */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetListByIndexedId(std::string& /* _return */, const std::string& /* entityIndexedId */, const int32_t /* maxReturn */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetListCount(std::string& /* _return */, const std::string& /* whereJson */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetPage(std::string& /* _return */, const std::string& /* jsonContext */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetPageOffset(std::string& /* _return */, const std::string& /* context */, const int32_t /* pageOffset */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_IncrementGlobalEntityData(std::string& /* _return */, const std::string& /* entityId */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_GetRandomEntitiesMatching(std::string& /* _return */, const std::string& /* whereJson */, const int32_t /* maxReturn */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_UpdateEntityOwnerAndAcl(std::string& /* _return */, const std::string& /* entityId */, const int64_t /* version */, const std::string& /* ownerId */, const  ::Ruyi::SDK::BrainCloudApi::JSON& /* acl */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalEntity_MakeSystemEntity(std::string& /* _return */, const std::string& /* entityId */, const int64_t /* version */, const  ::Ruyi::SDK::BrainCloudApi::JSON& /* acl */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalStatistics_ReadAllGlobalStats(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalStatistics_ReadGlobalStatsSubset(std::string& /* _return */, const std::vector<std::string> & /* globalStats */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalStatistics_ReadGlobalStatsForCategory(std::string& /* _return */, const std::string& /* category */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalStatistics_IncrementGlobalStats(std::string& /* _return */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void GlobalStatistics_ProcessStatistics(std::string& /* _return */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* statisticsData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_AcceptGroupInvitation(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_AddGroupMember(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const  ::Ruyi::SDK::BrainCloudApi::Role::type /* role */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ApproveGroupJoinRequest(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const  ::Ruyi::SDK::BrainCloudApi::Role::type /* role */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_AutoJoinGroup(std::string& /* _return */, const std::string& /* groupType */, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type /* autoJoinStrategy */, const std::string& /* dataQueryJson */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_CancelGroupInvitation(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_CreateGroup(std::string& /* _return */, const std::string& /* name */, const std::string& /* groupType */, const bool /* isOpenGroup */, const  ::Ruyi::SDK::BrainCloudApi::JSON& /* acl */, const std::string& /* jsonData */, const std::string& /* jsonOwnerAttributes */, const std::string& /* jsonDefaultMemberAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_CreateGroupEntity(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* entityType */, const bool /* isOwnedByGroupMember */, const  ::Ruyi::SDK::BrainCloudApi::JSON& /* acl */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_DeleteGroup(std::string& /* _return */, const std::string& /* groupId */, const int64_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_DeleteGroupEntity(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* entityId */, const int64_t /* version */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_GetMyGroups(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_IncrementGroupData(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_IncrementGroupEntityData(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* entityId */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_InviteGroupMember(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const  ::Ruyi::SDK::BrainCloudApi::Role::type /* role */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_JoinGroup(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_LeaveGroup(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ListGroupsPage(std::string& /* _return */, const std::string& /* jsonContext */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ListGroupsPageByOffset(std::string& /* _return */, const std::string& /* context */, const int32_t /* pageOffset */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ListGroupsWithMember(std::string& /* _return */, const std::string& /* profileId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroup(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroupData(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroupEntitiesPage(std::string& /* _return */, const std::string& /* jsonContext */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroupEntitiesPageByOffset(std::string& /* _return */, const std::string& /* encodedContext */, const int32_t /* pageOffset */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroupEntity(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* entityId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_ReadGroupMembers(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_RejectGroupInvitation(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_RejectGroupJoinRequest(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_RemoveGroupMember(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_UpdateGroupData(std::string& /* _return */, const std::string& /* groupId */, const int64_t /* version */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_UpdateGroupEntityData(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* entityId */, const int64_t /* version */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_UpdateGroupMember(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* profileId */, const  ::Ruyi::SDK::BrainCloudApi::Role::type /* role */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Group_UpdateGroupName(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* name */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_AttachEmailIdentity(std::string& /* _return */, const std::string& /* email */, const std::string& /* password */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_MergeEmailIdentity(std::string& /* _return */, const std::string& /* email */, const std::string& /* password */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_DetachEmailIdentity(std::string& /* _return */, const std::string& /* email */, const bool /* continueAnon */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_AttachUniversalIdentity(std::string& /* _return */, const std::string& /* userId */, const std::string& /* password */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_MergeUniversalIdentity(std::string& /* _return */, const std::string& /* userId */, const std::string& /* password */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_DetachUniversalIdentity(std::string& /* _return */, const std::string& /* userId */, const bool /* continueAnon */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_SwitchToChildProfile(std::string& /* _return */, const std::string& /* childProfileId */, const std::string& /* childAppId */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_SwitchToSingletonChildProfile(std::string& /* _return */, const std::string& /* childAppId */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_AttachParentWithIdentity(std::string& /* _return */, const std::string& /* externalId */, const std::string& /* authenticationToken */, const std::string& /* authenticationType */, const std::string& /* externalAuthName */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_SwitchToParentProfile(std::string& /* _return */, const std::string& /* parentLevelName */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_DetachParent(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_GetChildProfiles(std::string& /* _return */, const bool /* includeSummaryData */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_GetIdentities(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_GetExpiredIdentities(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_RefreshIdentity(std::string& /* _return */, const std::string& /* externalId */, const std::string& /* authenticationToken */, const std::string& /* authenticationType */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_ChangeEmailIdentity(std::string& /* _return */, const std::string& /* oldEmailAddress */, const std::string& /* password */, const std::string& /* newEmailAddress */, const bool /* updateContactEmail */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_AttachPeerProfile(std::string& /* _return */, const std::string& /* peer */, const std::string& /* externalId */, const std::string& /* authenticationToken */, const std::string& /* authenticationType */, const std::string& /* externalAuthName */, const bool /* forceCreate */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_DetachPeer(std::string& /* _return */, const std::string& /* peer */, const int32_t /* clientIndex */) {
    return;
  }
  void Identity_GetPeerProfiles(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Mail_SendBasicEmail(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* subject */, const std::string& /* body */, const int32_t /* clientIndex */) {
    return;
  }
  void Mail_SendAdvancedEmail(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* jsonServiceParams */, const int32_t /* clientIndex */) {
    return;
  }
  void Mail_SendAdvancedEmailByAddress(std::string& /* _return */, const std::string& /* emailAddress */, const std::string& /* jsonServiceParams */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_Read(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_SetPlayerRating(std::string& /* _return */, const int64_t /* playerRating */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_ResetPlayerRating(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_IncrementPlayerRating(std::string& /* _return */, const int64_t /* increment */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_DecrementPlayerRating(std::string& /* _return */, const int64_t /* decrement */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_TurnShieldOn(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_TurnShieldOnFor(std::string& /* _return */, const int32_t /* minutes */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_TurnShieldOff(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_IncrementShieldOnFor(std::string& /* _return */, const int32_t /* minutes */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_GetShieldExpiry(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_FindPlayers(std::string& /* _return */, const int64_t /* rangeDelta */, const int64_t /* numMatches */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_FindPlayersWithAttributes(std::string& /* _return */, const int64_t /* rangeDelta */, const int64_t /* numMatches */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_FindPlayersUsingFilter(std::string& /* _return */, const int64_t /* rangeDelta */, const int64_t /* numMatches */, const std::string& /* jsonExtraParms */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& /* _return */, const int64_t /* rangeDelta */, const int64_t /* numMatches */, const std::string& /* jsonAttributes */, const std::string& /* jsonExtraParms */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_EnableMatchMaking(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void MatchMaking_DisableMatchMaking(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void OneWayMatch_StartMatch(std::string& /* _return */, const std::string& /* otherPlayerId */, const int64_t /* rangeDelta */, const int32_t /* clientIndex */) {
    return;
  }
  void OneWayMatch_CancelMatch(std::string& /* _return */, const std::string& /* playbackStreamId */, const int32_t /* clientIndex */) {
    return;
  }
  void OneWayMatch_CompleteMatch(std::string& /* _return */, const std::string& /* playbackStreamId */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_StartStream(std::string& /* _return */, const std::string& /* targetPlayerId */, const bool /* includeSharedData */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_ReadStream(std::string& /* _return */, const std::string& /* playbackStreamId */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_EndStream(std::string& /* _return */, const std::string& /* playbackStreamId */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_DeleteStream(std::string& /* _return */, const std::string& /* playbackStreamId */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_AddEvent(std::string& /* _return */, const std::string& /* playbackStreamId */, const std::string& /* eventData */, const std::string& /* summary */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& /* _return */, const std::string& /* initiatingPlayerId */, const int32_t /* maxNumStreams */, const int32_t /* clientIndex */) {
    return;
  }
  void PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& /* _return */, const std::string& /* targetPlayerId */, const int32_t /* maxNumStreams */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_ReadUserState(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_DeleteUser(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_ResetUser(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_Logout(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_UpdateUserName(std::string& /* _return */, const std::string& /* userName */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_UpdateSummaryFriendData(std::string& /* _return */, const std::string& /* jsonSummaryData */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_GetAttributes(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_UpdateAttributes(std::string& /* _return */, const std::string& /* jsonAttributes */, const bool /* wipeExisting */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_RemoveAttributes(std::string& /* _return */, const std::vector<std::string> & /* attributeNames */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_UpdateUserPictureUrl(std::string& /* _return */, const std::string& /* pictureUrl */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerState_UpdateContactEmail(std::string& /* _return */, const std::string& /* contactEmail */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_ReadAllUserStats(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_ReadUserStatsSubset(std::string& /* _return */, const std::vector<std::string> & /* playerStats */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_ReadUserStatsForCategory(std::string& /* _return */, const std::string& /* category */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_ResetAllUserStats(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_IncrementUserStats_SSFO(std::string& /* _return */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_IncrementUserStats_DSFO(std::string& /* _return */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* dictData */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_ProcessStatistics(std::string& /* _return */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* statisticsData */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_GetNextExperienceLevel(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_IncrementExperiencePoints(std::string& /* _return */, const int32_t /* xpValue */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatistics_SetExperiencePoints(std::string& /* _return */, const int32_t /* xpValue */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatisticsEvent_TriggerStatsEvent(std::string& /* _return */, const std::string& /* eventName */, const int32_t /* eventMultiplier */, const int32_t /* clientIndex */) {
    return;
  }
  void PlayerStatisticsEvent_TriggerStatsEvents(std::string& /* _return */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_GetCurrency(std::string& /* _return */, const std::string& /* currencyType */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_GetSalesInventory(std::string& /* _return */, const std::string& /* platform */, const std::string& /* userCurrency */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_GetSalesInventoryByCategory(std::string& /* _return */, const std::string& /* platform */, const std::string& /* userCurrency */, const std::string& /* category */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_VerifyMicrosoftReceipt(std::string& /* _return */, const std::string& /* receipt */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_GetEligiblePromotions(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Product_VerifyItunesReceipt(std::string& /* _return */, const std::string& /* base64EncReceiptData */, const int32_t /* clientIndex */) {
    return;
  }
  void Profanity_ProfanityCheck(std::string& /* _return */, const std::string& /* text */, const std::string& /* languages */, const bool /* flagEmail */, const bool /* flagPhone */, const bool /* flagUrls */, const int32_t /* clientIndex */) {
    return;
  }
  void Profanity_ProfanityReplaceText(std::string& /* _return */, const std::string& /* text */, const std::string& /* replaceSymbol */, const std::string& /* languages */, const bool /* flagEmail */, const bool /* flagPhone */, const bool /* flagUrls */, const int32_t /* clientIndex */) {
    return;
  }
  void Profanity_ProfanityIdentifyBadWords(std::string& /* _return */, const std::string& /* text */, const std::string& /* languages */, const bool /* flagEmail */, const bool /* flagPhone */, const bool /* flagUrls */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_DeregisterPushNotificationDeviceToken(std::string& /* _return */, const std::string& /* platform */, const std::string& /* token */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_RegisterPushNotificationDeviceToken(std::string& /* _return */, const std::string& /* platform */, const std::string& /* token */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendSimplePushNotification(std::string& /* _return */, const std::string& /* toProfileId */, const std::string& /* message */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendRichPushNotification(std::string& /* _return */, const std::string& /* toProfileId */, const int32_t /* notificationTemplateId */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendRichPushNotificationWithParams(std::string& /* _return */, const std::string& /* toProfileId */, const int32_t /* notificationTemplateId */, const std::string& /* substitutionJson */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendTemplatedPushNotificationToGroup(std::string& /* _return */, const std::string& /* groupId */, const int32_t /* notificationTemplateId */, const std::string& /* substitutionsJson */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendNormalizedPushNotificationToGroup(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* alertContentJson */, const std::string& /* customDataJson */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleRawPushNotificationUTC(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* fcmContent */, const std::string& /* iosContent */, const std::string& /* facebookContent */, const int32_t /* startTime */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleRawPushNotificationMinutes(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* fcmContent */, const std::string& /* iosContent */, const std::string& /* facebookContent */, const int32_t /* minutesFromNow */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendRawPushNotification(std::string& /* _return */, const std::string& /* toProfileId */, const std::string& /* fcmContent */, const std::string& /* iosContent */, const std::string& /* facebookContent */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendRawPushNotificationBatch(std::string& /* _return */, const std::vector<std::string> & /* profileIds */, const std::string& /* fcmContent */, const std::string& /* iosContent */, const std::string& /* facebookContent */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendRawPushNotificationToGroup(std::string& /* _return */, const std::string& /* groupId */, const std::string& /* fcmContent */, const std::string& /* iosContent */, const std::string& /* facebookContent */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* alertContentJson */, const std::string& /* customDataJson */, const int32_t /* startTime */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& /* _return */, const std::string& /* profileId */, const std::string& /* alertContentJson */, const std::string& /* customDataJson */, const int32_t /* minutesFromNow */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleRichPushNotificationUTC(std::string& /* _return */, const std::string& /* profileId */, const int32_t /* notificationTemplateId */, const std::string& /* substitutionsJson */, const int32_t /* startTime */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_ScheduleRichPushNotificationMinutes(std::string& /* _return */, const std::string& /* profileId */, const int32_t /* notificationTemplateId */, const std::string& /* substitutionsJson */, const int32_t /* minutesFromNow */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendNormalizedPushNotification(std::string& /* _return */, const std::string& /* toProfileId */, const std::string& /* alertContentJson */, const std::string& /* customDataJson */, const int32_t /* clientIndex */) {
    return;
  }
  void PushNotification_SendNormalizedPushNotificationBatch(std::string& /* _return */, const std::vector<std::string> & /* profileIds */, const std::string& /* alertContentJson */, const std::string& /* customDataJson */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_RunScript(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_ScheduleRunScriptUTC(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const  ::Ruyi::SDK::BrainCloudApi::date /* startDateInUTC */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_ScheduleRunScriptMinutes(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const int64_t /* minutesFromNow */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_RunParentScript(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const std::string& /* parentLevel */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_CancelScheduledScript(std::string& /* _return */, const std::string& /* jobId */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_RunPeerScript(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const std::string& /* peer */, const int32_t /* clientIndex */) {
    return;
  }
  void Script_RunPeerScriptAsynch(std::string& /* _return */, const std::string& /* scriptName */, const std::string& /* jsonScriptData */, const std::string& /* peer */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetSocialLeaderboard(std::string& /* _return */, const std::string& /* leaderboardId */, const bool /* replaceName */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetMultiSocialLeaderboard(std::string& /* _return */, const std::vector<std::string> & /* leaderboardIds */, const int32_t /* leaderboardResultCount */, const bool /* replaceName */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardPage(std::string& /* _return */, const std::string& /* leaderboardId */, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type /* sort */, const int32_t /* startIndex */, const int32_t /* endIndex */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& /* _return */, const std::string& /* leaderboardId */, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type /* sort */, const int32_t /* startIndex */, const int32_t /* endIndex */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardView(std::string& /* _return */, const std::string& /* leaderboardId */, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type /* sort */, const int32_t /* beforeCount */, const int32_t /* afterCount */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& /* _return */, const std::string& /* leaderboardId */, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type /* sort */, const int32_t /* beforeCount */, const int32_t /* afterCount */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGroupSocialLeaderboard(std::string& /* _return */, const std::string& /* leaderboardId */, const std::string& /* groupId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_PostScoreToLeaderboard(std::string& /* _return */, const std::string& /* leaderboardId */, const int64_t /* score */, const std::string& /* jsonData */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_RemovePlayerScore(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& /* _return */, const std::string& /* leaderboardId */, const int64_t /* score */, const std::string& /* jsonData */, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type /* leaderboardType */, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type /* rotationType */, const  ::Ruyi::SDK::BrainCloudApi::date /* rotationReset */, const int32_t /* retainedCount */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& /* _return */, const std::string& /* leaderboardId */, const int64_t /* score */, const std::string& /* jsonData */, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type /* leaderboardType */, const  ::Ruyi::SDK::BrainCloudApi::date /* rotationReset */, const int32_t /* retainedCount */, const int32_t /* numDaysToRotate */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& /* _return */, const std::string& /* leaderboardId */, const std::vector<std::string> & /* profileIds */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_ListLeaderboards(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetPlayerScore(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& /* _return */, const std::vector<std::string> & /* leaderboardIds */, const int32_t /* clientIndex */) {
    return;
  }
  void Time_ReadServerTime(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_ClaimTournamentReward(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_GetTournamentStatus(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_JoinTournament(std::string& /* _return */, const std::string& /* leaderboardId */, const std::string& /* tournamentCode */, const int64_t /* initialScore */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_LeaveTournament(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_PostTournamentScore(std::string& /* _return */, const std::string& /* leaderboardId */, const int64_t /* score */, const std::string& /* jsonData */, const  ::Ruyi::SDK::BrainCloudApi::date /* roundStartedTime */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_PostTournamentScoreWithResults(std::string& /* _return */, const std::string& /* leaderboardId */, const int64_t /* score */, const std::string& /* jsonData */, const  ::Ruyi::SDK::BrainCloudApi::date /* roundStartedTime */, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type /* sort */, const int32_t /* beforeCount */, const int32_t /* afterCount */, const int64_t /* initialScore */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_ViewCurrentReward(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* clientIndex */) {
    return;
  }
  void Tournament_ViewReward(std::string& /* _return */, const std::string& /* leaderboardId */, const int32_t /* versionId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_CreateLobby(std::string& /* _return */, const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type /* lobbyType */, const int32_t /* maxSlots */, const bool /* isOpen */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_OpenLobby(std::string& /* _return */, const std::string& /* lobbyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_CloseLobby(std::string& /* _return */, const std::string& /* lobbyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_FindLobbies(std::string& /* _return */, const int32_t /* freeSlots */, const int32_t /* maxResults */, const std::string& /* jsonAttributes */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_FindFriendsLobbies(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_JoinLobby(std::string& /* _return */, const std::string& /* lobbyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_LeaveLobby(std::string& /* _return */, const std::string& /* lobbyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_DestroyLobby(std::string& /* _return */, const std::string& /* lobbyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_StartGame(std::string& /* _return */, const std::string& /* lobbyId */, const std::string& /* connectionString */, const int32_t /* clientIndex */) {
    return;
  }
  void Lobby_GetMyLobbies(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_AcceptPartyInvitation(std::string& /* _return */, const std::string& /* partyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_GetPartyInfo(std::string& /* _return */, const std::string& /* partyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_JoinParty(std::string& /* _return */, const std::string& /* partyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_LeaveParty(std::string& /* _return */, const std::string& /* partyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_RejectPartyInvitation(std::string& /* _return */, const std::string& /* partyId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_SendPartyInvitation(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_ListPartyInvitations(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_GetFriendsParties(std::string& /* _return */, const int32_t /* maxResults */, const int32_t /* clientIndex */) {
    return;
  }
  void Party_GetMyParty(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void Patch_GetGameManifest(std::string& /* _return */, const std::string& /* gameId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareVideo(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareScreenshot(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareAchievement(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareApp(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareChannel(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareLink(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ShareGameGuide(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* resource */, const std::vector<std::string> & /* tagged */, const std::vector<std::string> & /* show */, const std::vector<std::string> & /* block */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ReadSocialFeed(std::string& /* _return */, const int32_t /* skip */, const int32_t /* limit */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ReadFilteredSocialFeed(std::string& /* _return */, const int32_t /* skip */, const int32_t /* limit */, const std::vector<std::string> & /* playerIds */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ReadFriendsSocialFeed(std::string& /* _return */, const int32_t /* skip */, const int32_t /* limit */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_PostComment(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* parentId */, const std::string& /* content */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_PostCommentReply(std::string& /* _return */, const int32_t /* timestamp */, const std::string& /* parentId */, const std::string& /* content */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ReadComments(std::string& /* _return */, const int32_t /* skip */, const int32_t /* limit */, const std::string& /* parentId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_ReadCommentReplies(std::string& /* _return */, const int32_t /* skip */, const int32_t /* limit */, const std::string& /* parentId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_LikeComment(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_LikeActivity(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_UnlikeComment(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_UnlikeActivity(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_SetFeedVisibility(std::string& /* _return */, const std::string& /* visibility */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_BlockPlayer(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_HidePlayer(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_UnblockPlayer(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_UnhidePlayer(std::string& /* _return */, const std::string& /* playerId */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_GetActivity(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* depth */, const int32_t /* skip */, const int32_t /* limit */, const int32_t /* clientIndex */) {
    return;
  }
  void SocialFeed_GetComment(std::string& /* _return */, const std::string& /* socialFeedId */, const int32_t /* depth */, const int32_t /* skip */, const int32_t /* limit */, const int32_t /* clientIndex */) {
    return;
  }
  void Telemetry_StartTelemetrySession(std::string& /* _return */, const int32_t /* timestamp */, const int32_t /* clientIndex */) {
    return;
  }
  void Telemetry_EndTelemetrySession(std::string& /* _return */, const std::string& /* telemetrySessionId */, const int32_t /* timestamp */, const int32_t /* clientIndex */) {
    return;
  }
  void Telemetry_LogTelemetryEvent(std::string& /* _return */, const std::string& /* telemetrySessionId */, const int32_t /* timestamp */, const std::string& /* eventType */, const std::string& /* participantId */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* customData */, const int32_t /* clientIndex */) {
    return;
  }
  void Telemetry_StartTelemetryEvent(std::string& /* _return */, const std::string& /* telemetrySessionId */, const int32_t /* timestamp */, const std::string& /* eventType */, const std::string& /* participantId */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* customData */, const int32_t /* clientIndex */) {
    return;
  }
  void Telemetry_EndTelemetryEvent(std::string& /* _return */, const std::string& /* telemetrySessionId */, const int32_t /* timestamp */, const std::string& /* eventType */, const std::string& /* participantId */, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & /* customData */, const int32_t /* clientIndex */) {
    return;
  }
  void Authentication_GetWeChatQRPageURL(std::string& /* _return */, const int32_t /* clientIndex */) {
    return;
  }
  void File_DownloadFile(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFilename */, const bool /* replaceIfExists */, const int32_t /* clientIndex */) {
    return;
  }
  void File_GetDownloadInfo(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFilename */, const int32_t /* clientIndex */) {
    return;
  }
  void File_CancelDownload(std::string& /* _return */, const std::string& /* cloudPath */, const std::string& /* cloudFilename */, const int32_t /* clientIndex */) {
    return;
  }
};

typedef struct _BrainCloudService_AsyncMatch_CreateMatch_args__isset {
  _BrainCloudService_AsyncMatch_CreateMatch_args__isset() : jsonOpponentIds(false), pushNotificationMessage(false), clientIndex(false) {}
  bool jsonOpponentIds :1;
  bool pushNotificationMessage :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_CreateMatch_args__isset;

class BrainCloudService_AsyncMatch_CreateMatch_args {
 public:

  BrainCloudService_AsyncMatch_CreateMatch_args(const BrainCloudService_AsyncMatch_CreateMatch_args&);
  BrainCloudService_AsyncMatch_CreateMatch_args& operator=(const BrainCloudService_AsyncMatch_CreateMatch_args&);
  BrainCloudService_AsyncMatch_CreateMatch_args() : jsonOpponentIds(), pushNotificationMessage(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_CreateMatch_args() throw();
  std::string jsonOpponentIds;
  std::string pushNotificationMessage;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_CreateMatch_args__isset __isset;

  void __set_jsonOpponentIds(const std::string& val);

  void __set_pushNotificationMessage(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_CreateMatch_args & rhs) const
  {
    if (!(jsonOpponentIds == rhs.jsonOpponentIds))
      return false;
    if (!(pushNotificationMessage == rhs.pushNotificationMessage))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CreateMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CreateMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_CreateMatch_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_CreateMatch_pargs() throw();
  const std::string* jsonOpponentIds;
  const std::string* pushNotificationMessage;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CreateMatch_result__isset {
  _BrainCloudService_AsyncMatch_CreateMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CreateMatch_result__isset;

class BrainCloudService_AsyncMatch_CreateMatch_result {
 public:

  BrainCloudService_AsyncMatch_CreateMatch_result(const BrainCloudService_AsyncMatch_CreateMatch_result&);
  BrainCloudService_AsyncMatch_CreateMatch_result& operator=(const BrainCloudService_AsyncMatch_CreateMatch_result&);
  BrainCloudService_AsyncMatch_CreateMatch_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_CreateMatch_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_CreateMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_CreateMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CreateMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CreateMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CreateMatch_presult__isset {
  _BrainCloudService_AsyncMatch_CreateMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CreateMatch_presult__isset;

class BrainCloudService_AsyncMatch_CreateMatch_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_CreateMatch_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_CreateMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args__isset {
  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args__isset() : jsonOpponentIds(false), jsonMatchState(false), pushNotificationMessage(false), nextPlayer(false), jsonSummary(false), clientIndex(false) {}
  bool jsonOpponentIds :1;
  bool jsonMatchState :1;
  bool pushNotificationMessage :1;
  bool nextPlayer :1;
  bool jsonSummary :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args__isset;

class BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args {
 public:

  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args(const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args&);
  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args& operator=(const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args&);
  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args() : jsonOpponentIds(), jsonMatchState(), pushNotificationMessage(), nextPlayer(), jsonSummary(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args() throw();
  std::string jsonOpponentIds;
  std::string jsonMatchState;
  std::string pushNotificationMessage;
  std::string nextPlayer;
  std::string jsonSummary;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args__isset __isset;

  void __set_jsonOpponentIds(const std::string& val);

  void __set_jsonMatchState(const std::string& val);

  void __set_pushNotificationMessage(const std::string& val);

  void __set_nextPlayer(const std::string& val);

  void __set_jsonSummary(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args & rhs) const
  {
    if (!(jsonOpponentIds == rhs.jsonOpponentIds))
      return false;
    if (!(jsonMatchState == rhs.jsonMatchState))
      return false;
    if (!(pushNotificationMessage == rhs.pushNotificationMessage))
      return false;
    if (!(nextPlayer == rhs.nextPlayer))
      return false;
    if (!(jsonSummary == rhs.jsonSummary))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_pargs() throw();
  const std::string* jsonOpponentIds;
  const std::string* jsonMatchState;
  const std::string* pushNotificationMessage;
  const std::string* nextPlayer;
  const std::string* jsonSummary;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result__isset {
  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result__isset;

class BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result {
 public:

  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result(const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result&);
  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result& operator=(const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result&);
  BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult__isset {
  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult__isset;

class BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_CreateMatchWithInitialTurn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_SubmitTurn_args__isset {
  _BrainCloudService_AsyncMatch_SubmitTurn_args__isset() : ownerId(false), matchId(false), version(false), jsonMatchState(false), pushNotificationMessage(false), nextPlayer(false), jsonSummary(false), jsonStatistics(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool version :1;
  bool jsonMatchState :1;
  bool pushNotificationMessage :1;
  bool nextPlayer :1;
  bool jsonSummary :1;
  bool jsonStatistics :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_SubmitTurn_args__isset;

class BrainCloudService_AsyncMatch_SubmitTurn_args {
 public:

  BrainCloudService_AsyncMatch_SubmitTurn_args(const BrainCloudService_AsyncMatch_SubmitTurn_args&);
  BrainCloudService_AsyncMatch_SubmitTurn_args& operator=(const BrainCloudService_AsyncMatch_SubmitTurn_args&);
  BrainCloudService_AsyncMatch_SubmitTurn_args() : ownerId(), matchId(), version(0), jsonMatchState(), pushNotificationMessage(), nextPlayer(), jsonSummary(), jsonStatistics(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_SubmitTurn_args() throw();
  std::string ownerId;
  std::string matchId;
  int64_t version;
  std::string jsonMatchState;
  std::string pushNotificationMessage;
  std::string nextPlayer;
  std::string jsonSummary;
  std::string jsonStatistics;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_SubmitTurn_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_jsonMatchState(const std::string& val);

  void __set_pushNotificationMessage(const std::string& val);

  void __set_nextPlayer(const std::string& val);

  void __set_jsonSummary(const std::string& val);

  void __set_jsonStatistics(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_SubmitTurn_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonMatchState == rhs.jsonMatchState))
      return false;
    if (!(pushNotificationMessage == rhs.pushNotificationMessage))
      return false;
    if (!(nextPlayer == rhs.nextPlayer))
      return false;
    if (!(jsonSummary == rhs.jsonSummary))
      return false;
    if (!(jsonStatistics == rhs.jsonStatistics))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_SubmitTurn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_SubmitTurn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_SubmitTurn_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_SubmitTurn_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int64_t* version;
  const std::string* jsonMatchState;
  const std::string* pushNotificationMessage;
  const std::string* nextPlayer;
  const std::string* jsonSummary;
  const std::string* jsonStatistics;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_SubmitTurn_result__isset {
  _BrainCloudService_AsyncMatch_SubmitTurn_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_SubmitTurn_result__isset;

class BrainCloudService_AsyncMatch_SubmitTurn_result {
 public:

  BrainCloudService_AsyncMatch_SubmitTurn_result(const BrainCloudService_AsyncMatch_SubmitTurn_result&);
  BrainCloudService_AsyncMatch_SubmitTurn_result& operator=(const BrainCloudService_AsyncMatch_SubmitTurn_result&);
  BrainCloudService_AsyncMatch_SubmitTurn_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_SubmitTurn_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_SubmitTurn_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_SubmitTurn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_SubmitTurn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_SubmitTurn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_SubmitTurn_presult__isset {
  _BrainCloudService_AsyncMatch_SubmitTurn_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_SubmitTurn_presult__isset;

class BrainCloudService_AsyncMatch_SubmitTurn_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_SubmitTurn_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_SubmitTurn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args__isset {
  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args__isset() : ownerId(false), matchId(false), version(false), jsonSummary(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool version :1;
  bool jsonSummary :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args__isset;

class BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args {
 public:

  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args(const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args&);
  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args& operator=(const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args&);
  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args() : ownerId(), matchId(), version(0), jsonSummary(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args() throw();
  std::string ownerId;
  std::string matchId;
  int64_t version;
  std::string jsonSummary;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_jsonSummary(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonSummary == rhs.jsonSummary))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_UpdateMatchSummaryData_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_UpdateMatchSummaryData_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int64_t* version;
  const std::string* jsonSummary;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result__isset {
  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result__isset;

class BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result {
 public:

  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result(const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result&);
  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result& operator=(const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result&);
  BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_UpdateMatchSummaryData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult__isset {
  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult__isset;

class BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_UpdateMatchSummaryData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_CompleteMatch_args__isset {
  _BrainCloudService_AsyncMatch_CompleteMatch_args__isset() : ownerId(false), matchId(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_CompleteMatch_args__isset;

class BrainCloudService_AsyncMatch_CompleteMatch_args {
 public:

  BrainCloudService_AsyncMatch_CompleteMatch_args(const BrainCloudService_AsyncMatch_CompleteMatch_args&);
  BrainCloudService_AsyncMatch_CompleteMatch_args& operator=(const BrainCloudService_AsyncMatch_CompleteMatch_args&);
  BrainCloudService_AsyncMatch_CompleteMatch_args() : ownerId(), matchId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_CompleteMatch_args() throw();
  std::string ownerId;
  std::string matchId;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_CompleteMatch_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_CompleteMatch_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CompleteMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CompleteMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_CompleteMatch_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_CompleteMatch_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CompleteMatch_result__isset {
  _BrainCloudService_AsyncMatch_CompleteMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CompleteMatch_result__isset;

class BrainCloudService_AsyncMatch_CompleteMatch_result {
 public:

  BrainCloudService_AsyncMatch_CompleteMatch_result(const BrainCloudService_AsyncMatch_CompleteMatch_result&);
  BrainCloudService_AsyncMatch_CompleteMatch_result& operator=(const BrainCloudService_AsyncMatch_CompleteMatch_result&);
  BrainCloudService_AsyncMatch_CompleteMatch_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_CompleteMatch_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_CompleteMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_CompleteMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_CompleteMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_CompleteMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_CompleteMatch_presult__isset {
  _BrainCloudService_AsyncMatch_CompleteMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_CompleteMatch_presult__isset;

class BrainCloudService_AsyncMatch_CompleteMatch_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_CompleteMatch_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_CompleteMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatch_args__isset {
  _BrainCloudService_AsyncMatch_ReadMatch_args__isset() : ownerId(false), matchId(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_ReadMatch_args__isset;

class BrainCloudService_AsyncMatch_ReadMatch_args {
 public:

  BrainCloudService_AsyncMatch_ReadMatch_args(const BrainCloudService_AsyncMatch_ReadMatch_args&);
  BrainCloudService_AsyncMatch_ReadMatch_args& operator=(const BrainCloudService_AsyncMatch_ReadMatch_args&);
  BrainCloudService_AsyncMatch_ReadMatch_args() : ownerId(), matchId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_ReadMatch_args() throw();
  std::string ownerId;
  std::string matchId;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_ReadMatch_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_ReadMatch_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_ReadMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_ReadMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_ReadMatch_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_ReadMatch_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatch_result__isset {
  _BrainCloudService_AsyncMatch_ReadMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_ReadMatch_result__isset;

class BrainCloudService_AsyncMatch_ReadMatch_result {
 public:

  BrainCloudService_AsyncMatch_ReadMatch_result(const BrainCloudService_AsyncMatch_ReadMatch_result&);
  BrainCloudService_AsyncMatch_ReadMatch_result& operator=(const BrainCloudService_AsyncMatch_ReadMatch_result&);
  BrainCloudService_AsyncMatch_ReadMatch_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_ReadMatch_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_ReadMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_ReadMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_ReadMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_ReadMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatch_presult__isset {
  _BrainCloudService_AsyncMatch_ReadMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_ReadMatch_presult__isset;

class BrainCloudService_AsyncMatch_ReadMatch_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_ReadMatch_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_ReadMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatchHistory_args__isset {
  _BrainCloudService_AsyncMatch_ReadMatchHistory_args__isset() : ownerId(false), matchId(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_ReadMatchHistory_args__isset;

class BrainCloudService_AsyncMatch_ReadMatchHistory_args {
 public:

  BrainCloudService_AsyncMatch_ReadMatchHistory_args(const BrainCloudService_AsyncMatch_ReadMatchHistory_args&);
  BrainCloudService_AsyncMatch_ReadMatchHistory_args& operator=(const BrainCloudService_AsyncMatch_ReadMatchHistory_args&);
  BrainCloudService_AsyncMatch_ReadMatchHistory_args() : ownerId(), matchId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_ReadMatchHistory_args() throw();
  std::string ownerId;
  std::string matchId;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_ReadMatchHistory_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_ReadMatchHistory_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_ReadMatchHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_ReadMatchHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_ReadMatchHistory_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_ReadMatchHistory_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatchHistory_result__isset {
  _BrainCloudService_AsyncMatch_ReadMatchHistory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_ReadMatchHistory_result__isset;

class BrainCloudService_AsyncMatch_ReadMatchHistory_result {
 public:

  BrainCloudService_AsyncMatch_ReadMatchHistory_result(const BrainCloudService_AsyncMatch_ReadMatchHistory_result&);
  BrainCloudService_AsyncMatch_ReadMatchHistory_result& operator=(const BrainCloudService_AsyncMatch_ReadMatchHistory_result&);
  BrainCloudService_AsyncMatch_ReadMatchHistory_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_ReadMatchHistory_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_ReadMatchHistory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_ReadMatchHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_ReadMatchHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_ReadMatchHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_ReadMatchHistory_presult__isset {
  _BrainCloudService_AsyncMatch_ReadMatchHistory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_ReadMatchHistory_presult__isset;

class BrainCloudService_AsyncMatch_ReadMatchHistory_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_ReadMatchHistory_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_ReadMatchHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_FindMatches_args__isset {
  _BrainCloudService_AsyncMatch_FindMatches_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_FindMatches_args__isset;

class BrainCloudService_AsyncMatch_FindMatches_args {
 public:

  BrainCloudService_AsyncMatch_FindMatches_args(const BrainCloudService_AsyncMatch_FindMatches_args&);
  BrainCloudService_AsyncMatch_FindMatches_args& operator=(const BrainCloudService_AsyncMatch_FindMatches_args&);
  BrainCloudService_AsyncMatch_FindMatches_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_FindMatches_args() throw();
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_FindMatches_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_FindMatches_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_FindMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_FindMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_FindMatches_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_FindMatches_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_FindMatches_result__isset {
  _BrainCloudService_AsyncMatch_FindMatches_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_FindMatches_result__isset;

class BrainCloudService_AsyncMatch_FindMatches_result {
 public:

  BrainCloudService_AsyncMatch_FindMatches_result(const BrainCloudService_AsyncMatch_FindMatches_result&);
  BrainCloudService_AsyncMatch_FindMatches_result& operator=(const BrainCloudService_AsyncMatch_FindMatches_result&);
  BrainCloudService_AsyncMatch_FindMatches_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_FindMatches_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_FindMatches_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_FindMatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_FindMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_FindMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_FindMatches_presult__isset {
  _BrainCloudService_AsyncMatch_FindMatches_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_FindMatches_presult__isset;

class BrainCloudService_AsyncMatch_FindMatches_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_FindMatches_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_FindMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_FindCompleteMatches_args__isset {
  _BrainCloudService_AsyncMatch_FindCompleteMatches_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_FindCompleteMatches_args__isset;

class BrainCloudService_AsyncMatch_FindCompleteMatches_args {
 public:

  BrainCloudService_AsyncMatch_FindCompleteMatches_args(const BrainCloudService_AsyncMatch_FindCompleteMatches_args&);
  BrainCloudService_AsyncMatch_FindCompleteMatches_args& operator=(const BrainCloudService_AsyncMatch_FindCompleteMatches_args&);
  BrainCloudService_AsyncMatch_FindCompleteMatches_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_FindCompleteMatches_args() throw();
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_FindCompleteMatches_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_FindCompleteMatches_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_FindCompleteMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_FindCompleteMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_FindCompleteMatches_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_FindCompleteMatches_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_FindCompleteMatches_result__isset {
  _BrainCloudService_AsyncMatch_FindCompleteMatches_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_FindCompleteMatches_result__isset;

class BrainCloudService_AsyncMatch_FindCompleteMatches_result {
 public:

  BrainCloudService_AsyncMatch_FindCompleteMatches_result(const BrainCloudService_AsyncMatch_FindCompleteMatches_result&);
  BrainCloudService_AsyncMatch_FindCompleteMatches_result& operator=(const BrainCloudService_AsyncMatch_FindCompleteMatches_result&);
  BrainCloudService_AsyncMatch_FindCompleteMatches_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_FindCompleteMatches_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_FindCompleteMatches_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_FindCompleteMatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_FindCompleteMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_FindCompleteMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_FindCompleteMatches_presult__isset {
  _BrainCloudService_AsyncMatch_FindCompleteMatches_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_FindCompleteMatches_presult__isset;

class BrainCloudService_AsyncMatch_FindCompleteMatches_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_FindCompleteMatches_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_FindCompleteMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_AbandonMatch_args__isset {
  _BrainCloudService_AsyncMatch_AbandonMatch_args__isset() : ownerId(false), matchId(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_AbandonMatch_args__isset;

class BrainCloudService_AsyncMatch_AbandonMatch_args {
 public:

  BrainCloudService_AsyncMatch_AbandonMatch_args(const BrainCloudService_AsyncMatch_AbandonMatch_args&);
  BrainCloudService_AsyncMatch_AbandonMatch_args& operator=(const BrainCloudService_AsyncMatch_AbandonMatch_args&);
  BrainCloudService_AsyncMatch_AbandonMatch_args() : ownerId(), matchId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_AbandonMatch_args() throw();
  std::string ownerId;
  std::string matchId;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_AbandonMatch_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_AbandonMatch_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_AbandonMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_AbandonMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_AbandonMatch_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_AbandonMatch_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_AbandonMatch_result__isset {
  _BrainCloudService_AsyncMatch_AbandonMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_AbandonMatch_result__isset;

class BrainCloudService_AsyncMatch_AbandonMatch_result {
 public:

  BrainCloudService_AsyncMatch_AbandonMatch_result(const BrainCloudService_AsyncMatch_AbandonMatch_result&);
  BrainCloudService_AsyncMatch_AbandonMatch_result& operator=(const BrainCloudService_AsyncMatch_AbandonMatch_result&);
  BrainCloudService_AsyncMatch_AbandonMatch_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_AbandonMatch_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_AbandonMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_AbandonMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_AbandonMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_AbandonMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_AbandonMatch_presult__isset {
  _BrainCloudService_AsyncMatch_AbandonMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_AbandonMatch_presult__isset;

class BrainCloudService_AsyncMatch_AbandonMatch_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_AbandonMatch_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_AbandonMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_AsyncMatch_DeleteMatch_args__isset {
  _BrainCloudService_AsyncMatch_DeleteMatch_args__isset() : ownerId(false), matchId(false), clientIndex(false) {}
  bool ownerId :1;
  bool matchId :1;
  bool clientIndex :1;
} _BrainCloudService_AsyncMatch_DeleteMatch_args__isset;

class BrainCloudService_AsyncMatch_DeleteMatch_args {
 public:

  BrainCloudService_AsyncMatch_DeleteMatch_args(const BrainCloudService_AsyncMatch_DeleteMatch_args&);
  BrainCloudService_AsyncMatch_DeleteMatch_args& operator=(const BrainCloudService_AsyncMatch_DeleteMatch_args&);
  BrainCloudService_AsyncMatch_DeleteMatch_args() : ownerId(), matchId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_AsyncMatch_DeleteMatch_args() throw();
  std::string ownerId;
  std::string matchId;
  int32_t clientIndex;

  _BrainCloudService_AsyncMatch_DeleteMatch_args__isset __isset;

  void __set_ownerId(const std::string& val);

  void __set_matchId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_AsyncMatch_DeleteMatch_args & rhs) const
  {
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(matchId == rhs.matchId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_DeleteMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_DeleteMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_AsyncMatch_DeleteMatch_pargs {
 public:


  virtual ~BrainCloudService_AsyncMatch_DeleteMatch_pargs() throw();
  const std::string* ownerId;
  const std::string* matchId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_DeleteMatch_result__isset {
  _BrainCloudService_AsyncMatch_DeleteMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_DeleteMatch_result__isset;

class BrainCloudService_AsyncMatch_DeleteMatch_result {
 public:

  BrainCloudService_AsyncMatch_DeleteMatch_result(const BrainCloudService_AsyncMatch_DeleteMatch_result&);
  BrainCloudService_AsyncMatch_DeleteMatch_result& operator=(const BrainCloudService_AsyncMatch_DeleteMatch_result&);
  BrainCloudService_AsyncMatch_DeleteMatch_result() : success() {
  }

  virtual ~BrainCloudService_AsyncMatch_DeleteMatch_result() throw();
  std::string success;

  _BrainCloudService_AsyncMatch_DeleteMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_AsyncMatch_DeleteMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_AsyncMatch_DeleteMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_AsyncMatch_DeleteMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_AsyncMatch_DeleteMatch_presult__isset {
  _BrainCloudService_AsyncMatch_DeleteMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_AsyncMatch_DeleteMatch_presult__isset;

class BrainCloudService_AsyncMatch_DeleteMatch_presult {
 public:


  virtual ~BrainCloudService_AsyncMatch_DeleteMatch_presult() throw();
  std::string* success;

  _BrainCloudService_AsyncMatch_DeleteMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_GenerateAnonymousId_args__isset {
  _BrainCloudService_Authentication_GenerateAnonymousId_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Authentication_GenerateAnonymousId_args__isset;

class BrainCloudService_Authentication_GenerateAnonymousId_args {
 public:

  BrainCloudService_Authentication_GenerateAnonymousId_args(const BrainCloudService_Authentication_GenerateAnonymousId_args&);
  BrainCloudService_Authentication_GenerateAnonymousId_args& operator=(const BrainCloudService_Authentication_GenerateAnonymousId_args&);
  BrainCloudService_Authentication_GenerateAnonymousId_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_GenerateAnonymousId_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Authentication_GenerateAnonymousId_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_GenerateAnonymousId_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_GenerateAnonymousId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_GenerateAnonymousId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_GenerateAnonymousId_pargs {
 public:


  virtual ~BrainCloudService_Authentication_GenerateAnonymousId_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_GenerateAnonymousId_result__isset {
  _BrainCloudService_Authentication_GenerateAnonymousId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_GenerateAnonymousId_result__isset;

class BrainCloudService_Authentication_GenerateAnonymousId_result {
 public:

  BrainCloudService_Authentication_GenerateAnonymousId_result(const BrainCloudService_Authentication_GenerateAnonymousId_result&);
  BrainCloudService_Authentication_GenerateAnonymousId_result& operator=(const BrainCloudService_Authentication_GenerateAnonymousId_result&);
  BrainCloudService_Authentication_GenerateAnonymousId_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_GenerateAnonymousId_result() throw();
  std::string success;

  _BrainCloudService_Authentication_GenerateAnonymousId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_GenerateAnonymousId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_GenerateAnonymousId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_GenerateAnonymousId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_GenerateAnonymousId_presult__isset {
  _BrainCloudService_Authentication_GenerateAnonymousId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_GenerateAnonymousId_presult__isset;

class BrainCloudService_Authentication_GenerateAnonymousId_presult {
 public:


  virtual ~BrainCloudService_Authentication_GenerateAnonymousId_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_GenerateAnonymousId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_Initialize_args__isset {
  _BrainCloudService_Authentication_Initialize_args__isset() : profileId(false), anonymousId(false), clientIndex(false) {}
  bool profileId :1;
  bool anonymousId :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_Initialize_args__isset;

class BrainCloudService_Authentication_Initialize_args {
 public:

  BrainCloudService_Authentication_Initialize_args(const BrainCloudService_Authentication_Initialize_args&);
  BrainCloudService_Authentication_Initialize_args& operator=(const BrainCloudService_Authentication_Initialize_args&);
  BrainCloudService_Authentication_Initialize_args() : profileId(), anonymousId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_Initialize_args() throw();
  std::string profileId;
  std::string anonymousId;
  int32_t clientIndex;

  _BrainCloudService_Authentication_Initialize_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_anonymousId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_Initialize_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(anonymousId == rhs.anonymousId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_Initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_Initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_Initialize_pargs {
 public:


  virtual ~BrainCloudService_Authentication_Initialize_pargs() throw();
  const std::string* profileId;
  const std::string* anonymousId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_Initialize_result {
 public:

  BrainCloudService_Authentication_Initialize_result(const BrainCloudService_Authentication_Initialize_result&);
  BrainCloudService_Authentication_Initialize_result& operator=(const BrainCloudService_Authentication_Initialize_result&);
  BrainCloudService_Authentication_Initialize_result() {
  }

  virtual ~BrainCloudService_Authentication_Initialize_result() throw();

  bool operator == (const BrainCloudService_Authentication_Initialize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_Initialize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_Initialize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_Initialize_presult {
 public:


  virtual ~BrainCloudService_Authentication_Initialize_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_ClearSavedProfileID_args__isset {
  _BrainCloudService_Authentication_ClearSavedProfileID_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Authentication_ClearSavedProfileID_args__isset;

class BrainCloudService_Authentication_ClearSavedProfileID_args {
 public:

  BrainCloudService_Authentication_ClearSavedProfileID_args(const BrainCloudService_Authentication_ClearSavedProfileID_args&);
  BrainCloudService_Authentication_ClearSavedProfileID_args& operator=(const BrainCloudService_Authentication_ClearSavedProfileID_args&);
  BrainCloudService_Authentication_ClearSavedProfileID_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_ClearSavedProfileID_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Authentication_ClearSavedProfileID_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_ClearSavedProfileID_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_ClearSavedProfileID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_ClearSavedProfileID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_ClearSavedProfileID_pargs {
 public:


  virtual ~BrainCloudService_Authentication_ClearSavedProfileID_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_ClearSavedProfileID_result {
 public:

  BrainCloudService_Authentication_ClearSavedProfileID_result(const BrainCloudService_Authentication_ClearSavedProfileID_result&);
  BrainCloudService_Authentication_ClearSavedProfileID_result& operator=(const BrainCloudService_Authentication_ClearSavedProfileID_result&);
  BrainCloudService_Authentication_ClearSavedProfileID_result() {
  }

  virtual ~BrainCloudService_Authentication_ClearSavedProfileID_result() throw();

  bool operator == (const BrainCloudService_Authentication_ClearSavedProfileID_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_ClearSavedProfileID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_ClearSavedProfileID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_ClearSavedProfileID_presult {
 public:


  virtual ~BrainCloudService_Authentication_ClearSavedProfileID_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticateAnonymous_args__isset {
  _BrainCloudService_Authentication_AuthenticateAnonymous_args__isset() : forceCreate(false), clientIndex(false) {}
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticateAnonymous_args__isset;

class BrainCloudService_Authentication_AuthenticateAnonymous_args {
 public:

  BrainCloudService_Authentication_AuthenticateAnonymous_args(const BrainCloudService_Authentication_AuthenticateAnonymous_args&);
  BrainCloudService_Authentication_AuthenticateAnonymous_args& operator=(const BrainCloudService_Authentication_AuthenticateAnonymous_args&);
  BrainCloudService_Authentication_AuthenticateAnonymous_args() : forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateAnonymous_args() throw();
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticateAnonymous_args__isset __isset;

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateAnonymous_args & rhs) const
  {
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateAnonymous_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateAnonymous_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticateAnonymous_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateAnonymous_pargs() throw();
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateAnonymous_result__isset {
  _BrainCloudService_Authentication_AuthenticateAnonymous_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateAnonymous_result__isset;

class BrainCloudService_Authentication_AuthenticateAnonymous_result {
 public:

  BrainCloudService_Authentication_AuthenticateAnonymous_result(const BrainCloudService_Authentication_AuthenticateAnonymous_result&);
  BrainCloudService_Authentication_AuthenticateAnonymous_result& operator=(const BrainCloudService_Authentication_AuthenticateAnonymous_result&);
  BrainCloudService_Authentication_AuthenticateAnonymous_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateAnonymous_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticateAnonymous_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateAnonymous_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateAnonymous_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateAnonymous_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateAnonymous_presult__isset {
  _BrainCloudService_Authentication_AuthenticateAnonymous_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateAnonymous_presult__isset;

class BrainCloudService_Authentication_AuthenticateAnonymous_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateAnonymous_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticateAnonymous_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticateEmailPassword_args__isset {
  _BrainCloudService_Authentication_AuthenticateEmailPassword_args__isset() : email(false), password(false), forceCreate(false), clientIndex(false) {}
  bool email :1;
  bool password :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticateEmailPassword_args__isset;

class BrainCloudService_Authentication_AuthenticateEmailPassword_args {
 public:

  BrainCloudService_Authentication_AuthenticateEmailPassword_args(const BrainCloudService_Authentication_AuthenticateEmailPassword_args&);
  BrainCloudService_Authentication_AuthenticateEmailPassword_args& operator=(const BrainCloudService_Authentication_AuthenticateEmailPassword_args&);
  BrainCloudService_Authentication_AuthenticateEmailPassword_args() : email(), password(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateEmailPassword_args() throw();
  std::string email;
  std::string password;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticateEmailPassword_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateEmailPassword_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateEmailPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateEmailPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticateEmailPassword_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateEmailPassword_pargs() throw();
  const std::string* email;
  const std::string* password;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateEmailPassword_result__isset {
  _BrainCloudService_Authentication_AuthenticateEmailPassword_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateEmailPassword_result__isset;

class BrainCloudService_Authentication_AuthenticateEmailPassword_result {
 public:

  BrainCloudService_Authentication_AuthenticateEmailPassword_result(const BrainCloudService_Authentication_AuthenticateEmailPassword_result&);
  BrainCloudService_Authentication_AuthenticateEmailPassword_result& operator=(const BrainCloudService_Authentication_AuthenticateEmailPassword_result&);
  BrainCloudService_Authentication_AuthenticateEmailPassword_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateEmailPassword_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticateEmailPassword_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateEmailPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateEmailPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateEmailPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateEmailPassword_presult__isset {
  _BrainCloudService_Authentication_AuthenticateEmailPassword_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateEmailPassword_presult__isset;

class BrainCloudService_Authentication_AuthenticateEmailPassword_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateEmailPassword_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticateEmailPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticateUniversal_args__isset {
  _BrainCloudService_Authentication_AuthenticateUniversal_args__isset() : userId(false), password(false), forceCreate(false), clientIndex(false) {}
  bool userId :1;
  bool password :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticateUniversal_args__isset;

class BrainCloudService_Authentication_AuthenticateUniversal_args {
 public:

  BrainCloudService_Authentication_AuthenticateUniversal_args(const BrainCloudService_Authentication_AuthenticateUniversal_args&);
  BrainCloudService_Authentication_AuthenticateUniversal_args& operator=(const BrainCloudService_Authentication_AuthenticateUniversal_args&);
  BrainCloudService_Authentication_AuthenticateUniversal_args() : userId(), password(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateUniversal_args() throw();
  std::string userId;
  std::string password;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticateUniversal_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_password(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateUniversal_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateUniversal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateUniversal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticateUniversal_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateUniversal_pargs() throw();
  const std::string* userId;
  const std::string* password;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateUniversal_result__isset {
  _BrainCloudService_Authentication_AuthenticateUniversal_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateUniversal_result__isset;

class BrainCloudService_Authentication_AuthenticateUniversal_result {
 public:

  BrainCloudService_Authentication_AuthenticateUniversal_result(const BrainCloudService_Authentication_AuthenticateUniversal_result&);
  BrainCloudService_Authentication_AuthenticateUniversal_result& operator=(const BrainCloudService_Authentication_AuthenticateUniversal_result&);
  BrainCloudService_Authentication_AuthenticateUniversal_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateUniversal_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticateUniversal_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateUniversal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateUniversal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateUniversal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateUniversal_presult__isset {
  _BrainCloudService_Authentication_AuthenticateUniversal_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateUniversal_presult__isset;

class BrainCloudService_Authentication_AuthenticateUniversal_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateUniversal_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticateUniversal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticateExternal_args__isset {
  _BrainCloudService_Authentication_AuthenticateExternal_args__isset() : userId(false), token(false), externalAuthName(false), forceCreate(false), clientIndex(false) {}
  bool userId :1;
  bool token :1;
  bool externalAuthName :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticateExternal_args__isset;

class BrainCloudService_Authentication_AuthenticateExternal_args {
 public:

  BrainCloudService_Authentication_AuthenticateExternal_args(const BrainCloudService_Authentication_AuthenticateExternal_args&);
  BrainCloudService_Authentication_AuthenticateExternal_args& operator=(const BrainCloudService_Authentication_AuthenticateExternal_args&);
  BrainCloudService_Authentication_AuthenticateExternal_args() : userId(), token(), externalAuthName(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateExternal_args() throw();
  std::string userId;
  std::string token;
  std::string externalAuthName;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticateExternal_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_token(const std::string& val);

  void __set_externalAuthName(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateExternal_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(externalAuthName == rhs.externalAuthName))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateExternal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateExternal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticateExternal_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateExternal_pargs() throw();
  const std::string* userId;
  const std::string* token;
  const std::string* externalAuthName;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateExternal_result__isset {
  _BrainCloudService_Authentication_AuthenticateExternal_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateExternal_result__isset;

class BrainCloudService_Authentication_AuthenticateExternal_result {
 public:

  BrainCloudService_Authentication_AuthenticateExternal_result(const BrainCloudService_Authentication_AuthenticateExternal_result&);
  BrainCloudService_Authentication_AuthenticateExternal_result& operator=(const BrainCloudService_Authentication_AuthenticateExternal_result&);
  BrainCloudService_Authentication_AuthenticateExternal_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateExternal_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticateExternal_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateExternal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateExternal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateExternal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateExternal_presult__isset {
  _BrainCloudService_Authentication_AuthenticateExternal_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateExternal_presult__isset;

class BrainCloudService_Authentication_AuthenticateExternal_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateExternal_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticateExternal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticatePhone_args__isset {
  _BrainCloudService_Authentication_AuthenticatePhone_args__isset() : phoneNumber(false), authCode(false), forceCreate(false), clientIndex(false) {}
  bool phoneNumber :1;
  bool authCode :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticatePhone_args__isset;

class BrainCloudService_Authentication_AuthenticatePhone_args {
 public:

  BrainCloudService_Authentication_AuthenticatePhone_args(const BrainCloudService_Authentication_AuthenticatePhone_args&);
  BrainCloudService_Authentication_AuthenticatePhone_args& operator=(const BrainCloudService_Authentication_AuthenticatePhone_args&);
  BrainCloudService_Authentication_AuthenticatePhone_args() : phoneNumber(), authCode(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticatePhone_args() throw();
  std::string phoneNumber;
  std::string authCode;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticatePhone_args__isset __isset;

  void __set_phoneNumber(const std::string& val);

  void __set_authCode(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticatePhone_args & rhs) const
  {
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(authCode == rhs.authCode))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticatePhone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticatePhone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticatePhone_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticatePhone_pargs() throw();
  const std::string* phoneNumber;
  const std::string* authCode;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticatePhone_result__isset {
  _BrainCloudService_Authentication_AuthenticatePhone_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticatePhone_result__isset;

class BrainCloudService_Authentication_AuthenticatePhone_result {
 public:

  BrainCloudService_Authentication_AuthenticatePhone_result(const BrainCloudService_Authentication_AuthenticatePhone_result&);
  BrainCloudService_Authentication_AuthenticatePhone_result& operator=(const BrainCloudService_Authentication_AuthenticatePhone_result&);
  BrainCloudService_Authentication_AuthenticatePhone_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticatePhone_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticatePhone_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticatePhone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticatePhone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticatePhone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticatePhone_presult__isset {
  _BrainCloudService_Authentication_AuthenticatePhone_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticatePhone_presult__isset;

class BrainCloudService_Authentication_AuthenticatePhone_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticatePhone_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticatePhone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_AuthenticateWechat_args__isset {
  _BrainCloudService_Authentication_AuthenticateWechat_args__isset() : openId(false), token(false), forceCreate(false), clientIndex(false) {}
  bool openId :1;
  bool token :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_AuthenticateWechat_args__isset;

class BrainCloudService_Authentication_AuthenticateWechat_args {
 public:

  BrainCloudService_Authentication_AuthenticateWechat_args(const BrainCloudService_Authentication_AuthenticateWechat_args&);
  BrainCloudService_Authentication_AuthenticateWechat_args& operator=(const BrainCloudService_Authentication_AuthenticateWechat_args&);
  BrainCloudService_Authentication_AuthenticateWechat_args() : openId(), token(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateWechat_args() throw();
  std::string openId;
  std::string token;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_AuthenticateWechat_args__isset __isset;

  void __set_openId(const std::string& val);

  void __set_token(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateWechat_args & rhs) const
  {
    if (!(openId == rhs.openId))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateWechat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateWechat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_AuthenticateWechat_pargs {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateWechat_pargs() throw();
  const std::string* openId;
  const std::string* token;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateWechat_result__isset {
  _BrainCloudService_Authentication_AuthenticateWechat_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateWechat_result__isset;

class BrainCloudService_Authentication_AuthenticateWechat_result {
 public:

  BrainCloudService_Authentication_AuthenticateWechat_result(const BrainCloudService_Authentication_AuthenticateWechat_result&);
  BrainCloudService_Authentication_AuthenticateWechat_result& operator=(const BrainCloudService_Authentication_AuthenticateWechat_result&);
  BrainCloudService_Authentication_AuthenticateWechat_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_AuthenticateWechat_result() throw();
  std::string success;

  _BrainCloudService_Authentication_AuthenticateWechat_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_AuthenticateWechat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_AuthenticateWechat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_AuthenticateWechat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_AuthenticateWechat_presult__isset {
  _BrainCloudService_Authentication_AuthenticateWechat_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_AuthenticateWechat_presult__isset;

class BrainCloudService_Authentication_AuthenticateWechat_presult {
 public:


  virtual ~BrainCloudService_Authentication_AuthenticateWechat_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_AuthenticateWechat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_ResetEmailPassword_args__isset {
  _BrainCloudService_Authentication_ResetEmailPassword_args__isset() : externalId(false), clientIndex(false) {}
  bool externalId :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_ResetEmailPassword_args__isset;

class BrainCloudService_Authentication_ResetEmailPassword_args {
 public:

  BrainCloudService_Authentication_ResetEmailPassword_args(const BrainCloudService_Authentication_ResetEmailPassword_args&);
  BrainCloudService_Authentication_ResetEmailPassword_args& operator=(const BrainCloudService_Authentication_ResetEmailPassword_args&);
  BrainCloudService_Authentication_ResetEmailPassword_args() : externalId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_ResetEmailPassword_args() throw();
  std::string externalId;
  int32_t clientIndex;

  _BrainCloudService_Authentication_ResetEmailPassword_args__isset __isset;

  void __set_externalId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_ResetEmailPassword_args & rhs) const
  {
    if (!(externalId == rhs.externalId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_ResetEmailPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_ResetEmailPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_ResetEmailPassword_pargs {
 public:


  virtual ~BrainCloudService_Authentication_ResetEmailPassword_pargs() throw();
  const std::string* externalId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_ResetEmailPassword_result__isset {
  _BrainCloudService_Authentication_ResetEmailPassword_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_ResetEmailPassword_result__isset;

class BrainCloudService_Authentication_ResetEmailPassword_result {
 public:

  BrainCloudService_Authentication_ResetEmailPassword_result(const BrainCloudService_Authentication_ResetEmailPassword_result&);
  BrainCloudService_Authentication_ResetEmailPassword_result& operator=(const BrainCloudService_Authentication_ResetEmailPassword_result&);
  BrainCloudService_Authentication_ResetEmailPassword_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_ResetEmailPassword_result() throw();
  std::string success;

  _BrainCloudService_Authentication_ResetEmailPassword_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_ResetEmailPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_ResetEmailPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_ResetEmailPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_ResetEmailPassword_presult__isset {
  _BrainCloudService_Authentication_ResetEmailPassword_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_ResetEmailPassword_presult__isset;

class BrainCloudService_Authentication_ResetEmailPassword_presult {
 public:


  virtual ~BrainCloudService_Authentication_ResetEmailPassword_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_ResetEmailPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_RequestSmsCode_args__isset {
  _BrainCloudService_Authentication_RequestSmsCode_args__isset() : phoneNumber(false), forceCreate(false), clientIndex(false) {}
  bool phoneNumber :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Authentication_RequestSmsCode_args__isset;

class BrainCloudService_Authentication_RequestSmsCode_args {
 public:

  BrainCloudService_Authentication_RequestSmsCode_args(const BrainCloudService_Authentication_RequestSmsCode_args&);
  BrainCloudService_Authentication_RequestSmsCode_args& operator=(const BrainCloudService_Authentication_RequestSmsCode_args&);
  BrainCloudService_Authentication_RequestSmsCode_args() : phoneNumber(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_RequestSmsCode_args() throw();
  std::string phoneNumber;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Authentication_RequestSmsCode_args__isset __isset;

  void __set_phoneNumber(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_RequestSmsCode_args & rhs) const
  {
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_RequestSmsCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_RequestSmsCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_RequestSmsCode_pargs {
 public:


  virtual ~BrainCloudService_Authentication_RequestSmsCode_pargs() throw();
  const std::string* phoneNumber;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_RequestSmsCode_result__isset {
  _BrainCloudService_Authentication_RequestSmsCode_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_RequestSmsCode_result__isset;

class BrainCloudService_Authentication_RequestSmsCode_result {
 public:

  BrainCloudService_Authentication_RequestSmsCode_result(const BrainCloudService_Authentication_RequestSmsCode_result&);
  BrainCloudService_Authentication_RequestSmsCode_result& operator=(const BrainCloudService_Authentication_RequestSmsCode_result&);
  BrainCloudService_Authentication_RequestSmsCode_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_RequestSmsCode_result() throw();
  std::string success;

  _BrainCloudService_Authentication_RequestSmsCode_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_RequestSmsCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_RequestSmsCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_RequestSmsCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_RequestSmsCode_presult__isset {
  _BrainCloudService_Authentication_RequestSmsCode_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_RequestSmsCode_presult__isset;

class BrainCloudService_Authentication_RequestSmsCode_presult {
 public:


  virtual ~BrainCloudService_Authentication_RequestSmsCode_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_RequestSmsCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_GetSessionId_args__isset {
  _BrainCloudService_Client_GetSessionId_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_GetSessionId_args__isset;

class BrainCloudService_Client_GetSessionId_args {
 public:

  BrainCloudService_Client_GetSessionId_args(const BrainCloudService_Client_GetSessionId_args&);
  BrainCloudService_Client_GetSessionId_args& operator=(const BrainCloudService_Client_GetSessionId_args&);
  BrainCloudService_Client_GetSessionId_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_GetSessionId_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_GetSessionId_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetSessionId_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetSessionId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetSessionId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_GetSessionId_pargs {
 public:


  virtual ~BrainCloudService_Client_GetSessionId_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetSessionId_result__isset {
  _BrainCloudService_Client_GetSessionId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetSessionId_result__isset;

class BrainCloudService_Client_GetSessionId_result {
 public:

  BrainCloudService_Client_GetSessionId_result(const BrainCloudService_Client_GetSessionId_result&);
  BrainCloudService_Client_GetSessionId_result& operator=(const BrainCloudService_Client_GetSessionId_result&);
  BrainCloudService_Client_GetSessionId_result() : success() {
  }

  virtual ~BrainCloudService_Client_GetSessionId_result() throw();
  std::string success;

  _BrainCloudService_Client_GetSessionId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Client_GetSessionId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetSessionId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetSessionId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetSessionId_presult__isset {
  _BrainCloudService_Client_GetSessionId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetSessionId_presult__isset;

class BrainCloudService_Client_GetSessionId_presult {
 public:


  virtual ~BrainCloudService_Client_GetSessionId_presult() throw();
  std::string* success;

  _BrainCloudService_Client_GetSessionId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_IsAuthenticated_args__isset {
  _BrainCloudService_Client_IsAuthenticated_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_IsAuthenticated_args__isset;

class BrainCloudService_Client_IsAuthenticated_args {
 public:

  BrainCloudService_Client_IsAuthenticated_args(const BrainCloudService_Client_IsAuthenticated_args&);
  BrainCloudService_Client_IsAuthenticated_args& operator=(const BrainCloudService_Client_IsAuthenticated_args&);
  BrainCloudService_Client_IsAuthenticated_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_IsAuthenticated_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_IsAuthenticated_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_IsAuthenticated_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_IsAuthenticated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_IsAuthenticated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_IsAuthenticated_pargs {
 public:


  virtual ~BrainCloudService_Client_IsAuthenticated_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_IsAuthenticated_result__isset {
  _BrainCloudService_Client_IsAuthenticated_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_IsAuthenticated_result__isset;

class BrainCloudService_Client_IsAuthenticated_result {
 public:

  BrainCloudService_Client_IsAuthenticated_result(const BrainCloudService_Client_IsAuthenticated_result&);
  BrainCloudService_Client_IsAuthenticated_result& operator=(const BrainCloudService_Client_IsAuthenticated_result&);
  BrainCloudService_Client_IsAuthenticated_result() : success(0) {
  }

  virtual ~BrainCloudService_Client_IsAuthenticated_result() throw();
  bool success;

  _BrainCloudService_Client_IsAuthenticated_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const BrainCloudService_Client_IsAuthenticated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_IsAuthenticated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_IsAuthenticated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_IsAuthenticated_presult__isset {
  _BrainCloudService_Client_IsAuthenticated_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_IsAuthenticated_presult__isset;

class BrainCloudService_Client_IsAuthenticated_presult {
 public:


  virtual ~BrainCloudService_Client_IsAuthenticated_presult() throw();
  bool* success;

  _BrainCloudService_Client_IsAuthenticated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_IsInitialized_args__isset {
  _BrainCloudService_Client_IsInitialized_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_IsInitialized_args__isset;

class BrainCloudService_Client_IsInitialized_args {
 public:

  BrainCloudService_Client_IsInitialized_args(const BrainCloudService_Client_IsInitialized_args&);
  BrainCloudService_Client_IsInitialized_args& operator=(const BrainCloudService_Client_IsInitialized_args&);
  BrainCloudService_Client_IsInitialized_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_IsInitialized_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_IsInitialized_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_IsInitialized_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_IsInitialized_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_IsInitialized_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_IsInitialized_pargs {
 public:


  virtual ~BrainCloudService_Client_IsInitialized_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_IsInitialized_result__isset {
  _BrainCloudService_Client_IsInitialized_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_IsInitialized_result__isset;

class BrainCloudService_Client_IsInitialized_result {
 public:

  BrainCloudService_Client_IsInitialized_result(const BrainCloudService_Client_IsInitialized_result&);
  BrainCloudService_Client_IsInitialized_result& operator=(const BrainCloudService_Client_IsInitialized_result&);
  BrainCloudService_Client_IsInitialized_result() : success(0) {
  }

  virtual ~BrainCloudService_Client_IsInitialized_result() throw();
  bool success;

  _BrainCloudService_Client_IsInitialized_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const BrainCloudService_Client_IsInitialized_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_IsInitialized_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_IsInitialized_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_IsInitialized_presult__isset {
  _BrainCloudService_Client_IsInitialized_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_IsInitialized_presult__isset;

class BrainCloudService_Client_IsInitialized_presult {
 public:


  virtual ~BrainCloudService_Client_IsInitialized_presult() throw();
  bool* success;

  _BrainCloudService_Client_IsInitialized_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_Initialize_SSS_args__isset {
  _BrainCloudService_Client_Initialize_SSS_args__isset() : secretKey(false), appId(false), appVersion(false), clientIndex(false) {}
  bool secretKey :1;
  bool appId :1;
  bool appVersion :1;
  bool clientIndex :1;
} _BrainCloudService_Client_Initialize_SSS_args__isset;

class BrainCloudService_Client_Initialize_SSS_args {
 public:

  BrainCloudService_Client_Initialize_SSS_args(const BrainCloudService_Client_Initialize_SSS_args&);
  BrainCloudService_Client_Initialize_SSS_args& operator=(const BrainCloudService_Client_Initialize_SSS_args&);
  BrainCloudService_Client_Initialize_SSS_args() : secretKey(), appId(), appVersion(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_Initialize_SSS_args() throw();
  std::string secretKey;
  std::string appId;
  std::string appVersion;
  int32_t clientIndex;

  _BrainCloudService_Client_Initialize_SSS_args__isset __isset;

  void __set_secretKey(const std::string& val);

  void __set_appId(const std::string& val);

  void __set_appVersion(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_Initialize_SSS_args & rhs) const
  {
    if (!(secretKey == rhs.secretKey))
      return false;
    if (!(appId == rhs.appId))
      return false;
    if (!(appVersion == rhs.appVersion))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_Initialize_SSS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Initialize_SSS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSS_pargs {
 public:


  virtual ~BrainCloudService_Client_Initialize_SSS_pargs() throw();
  const std::string* secretKey;
  const std::string* appId;
  const std::string* appVersion;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSS_result {
 public:

  BrainCloudService_Client_Initialize_SSS_result(const BrainCloudService_Client_Initialize_SSS_result&);
  BrainCloudService_Client_Initialize_SSS_result& operator=(const BrainCloudService_Client_Initialize_SSS_result&);
  BrainCloudService_Client_Initialize_SSS_result() {
  }

  virtual ~BrainCloudService_Client_Initialize_SSS_result() throw();

  bool operator == (const BrainCloudService_Client_Initialize_SSS_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_Initialize_SSS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Initialize_SSS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSS_presult {
 public:


  virtual ~BrainCloudService_Client_Initialize_SSS_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_Initialize_SSSS_args__isset {
  _BrainCloudService_Client_Initialize_SSSS_args__isset() : serverURL(false), secretKey(false), appId(false), appVersion(false), clientIndex(false) {}
  bool serverURL :1;
  bool secretKey :1;
  bool appId :1;
  bool appVersion :1;
  bool clientIndex :1;
} _BrainCloudService_Client_Initialize_SSSS_args__isset;

class BrainCloudService_Client_Initialize_SSSS_args {
 public:

  BrainCloudService_Client_Initialize_SSSS_args(const BrainCloudService_Client_Initialize_SSSS_args&);
  BrainCloudService_Client_Initialize_SSSS_args& operator=(const BrainCloudService_Client_Initialize_SSSS_args&);
  BrainCloudService_Client_Initialize_SSSS_args() : serverURL(), secretKey(), appId(), appVersion(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_Initialize_SSSS_args() throw();
  std::string serverURL;
  std::string secretKey;
  std::string appId;
  std::string appVersion;
  int32_t clientIndex;

  _BrainCloudService_Client_Initialize_SSSS_args__isset __isset;

  void __set_serverURL(const std::string& val);

  void __set_secretKey(const std::string& val);

  void __set_appId(const std::string& val);

  void __set_appVersion(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_Initialize_SSSS_args & rhs) const
  {
    if (!(serverURL == rhs.serverURL))
      return false;
    if (!(secretKey == rhs.secretKey))
      return false;
    if (!(appId == rhs.appId))
      return false;
    if (!(appVersion == rhs.appVersion))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_Initialize_SSSS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Initialize_SSSS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSSS_pargs {
 public:


  virtual ~BrainCloudService_Client_Initialize_SSSS_pargs() throw();
  const std::string* serverURL;
  const std::string* secretKey;
  const std::string* appId;
  const std::string* appVersion;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSSS_result {
 public:

  BrainCloudService_Client_Initialize_SSSS_result(const BrainCloudService_Client_Initialize_SSSS_result&);
  BrainCloudService_Client_Initialize_SSSS_result& operator=(const BrainCloudService_Client_Initialize_SSSS_result&);
  BrainCloudService_Client_Initialize_SSSS_result() {
  }

  virtual ~BrainCloudService_Client_Initialize_SSSS_result() throw();

  bool operator == (const BrainCloudService_Client_Initialize_SSSS_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_Initialize_SSSS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Initialize_SSSS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Initialize_SSSS_presult {
 public:


  virtual ~BrainCloudService_Client_Initialize_SSSS_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_InitializeIdentity_args__isset {
  _BrainCloudService_Client_InitializeIdentity_args__isset() : profileId(false), anonymousId(false), clientIndex(false) {}
  bool profileId :1;
  bool anonymousId :1;
  bool clientIndex :1;
} _BrainCloudService_Client_InitializeIdentity_args__isset;

class BrainCloudService_Client_InitializeIdentity_args {
 public:

  BrainCloudService_Client_InitializeIdentity_args(const BrainCloudService_Client_InitializeIdentity_args&);
  BrainCloudService_Client_InitializeIdentity_args& operator=(const BrainCloudService_Client_InitializeIdentity_args&);
  BrainCloudService_Client_InitializeIdentity_args() : profileId(), anonymousId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_InitializeIdentity_args() throw();
  std::string profileId;
  std::string anonymousId;
  int32_t clientIndex;

  _BrainCloudService_Client_InitializeIdentity_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_anonymousId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_InitializeIdentity_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(anonymousId == rhs.anonymousId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_InitializeIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_InitializeIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InitializeIdentity_pargs {
 public:


  virtual ~BrainCloudService_Client_InitializeIdentity_pargs() throw();
  const std::string* profileId;
  const std::string* anonymousId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InitializeIdentity_result {
 public:

  BrainCloudService_Client_InitializeIdentity_result(const BrainCloudService_Client_InitializeIdentity_result&);
  BrainCloudService_Client_InitializeIdentity_result& operator=(const BrainCloudService_Client_InitializeIdentity_result&);
  BrainCloudService_Client_InitializeIdentity_result() {
  }

  virtual ~BrainCloudService_Client_InitializeIdentity_result() throw();

  bool operator == (const BrainCloudService_Client_InitializeIdentity_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_InitializeIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_InitializeIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InitializeIdentity_presult {
 public:


  virtual ~BrainCloudService_Client_InitializeIdentity_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_Update_args__isset {
  _BrainCloudService_Client_Update_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_Update_args__isset;

class BrainCloudService_Client_Update_args {
 public:

  BrainCloudService_Client_Update_args(const BrainCloudService_Client_Update_args&);
  BrainCloudService_Client_Update_args& operator=(const BrainCloudService_Client_Update_args&);
  BrainCloudService_Client_Update_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_Update_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_Update_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_Update_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Update_pargs {
 public:


  virtual ~BrainCloudService_Client_Update_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Update_result {
 public:

  BrainCloudService_Client_Update_result(const BrainCloudService_Client_Update_result&);
  BrainCloudService_Client_Update_result& operator=(const BrainCloudService_Client_Update_result&);
  BrainCloudService_Client_Update_result() {
  }

  virtual ~BrainCloudService_Client_Update_result() throw();

  bool operator == (const BrainCloudService_Client_Update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_Update_presult {
 public:


  virtual ~BrainCloudService_Client_Update_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_EnableLogging_args__isset {
  _BrainCloudService_Client_EnableLogging_args__isset() : enable(false), clientIndex(false) {}
  bool enable :1;
  bool clientIndex :1;
} _BrainCloudService_Client_EnableLogging_args__isset;

class BrainCloudService_Client_EnableLogging_args {
 public:

  BrainCloudService_Client_EnableLogging_args(const BrainCloudService_Client_EnableLogging_args&);
  BrainCloudService_Client_EnableLogging_args& operator=(const BrainCloudService_Client_EnableLogging_args&);
  BrainCloudService_Client_EnableLogging_args() : enable(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_EnableLogging_args() throw();
  bool enable;
  int32_t clientIndex;

  _BrainCloudService_Client_EnableLogging_args__isset __isset;

  void __set_enable(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_EnableLogging_args & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_EnableLogging_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_EnableLogging_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableLogging_pargs {
 public:


  virtual ~BrainCloudService_Client_EnableLogging_pargs() throw();
  const bool* enable;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableLogging_result {
 public:

  BrainCloudService_Client_EnableLogging_result(const BrainCloudService_Client_EnableLogging_result&);
  BrainCloudService_Client_EnableLogging_result& operator=(const BrainCloudService_Client_EnableLogging_result&);
  BrainCloudService_Client_EnableLogging_result() {
  }

  virtual ~BrainCloudService_Client_EnableLogging_result() throw();

  bool operator == (const BrainCloudService_Client_EnableLogging_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_EnableLogging_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_EnableLogging_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableLogging_presult {
 public:


  virtual ~BrainCloudService_Client_EnableLogging_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_ResetCommunication_args__isset {
  _BrainCloudService_Client_ResetCommunication_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_ResetCommunication_args__isset;

class BrainCloudService_Client_ResetCommunication_args {
 public:

  BrainCloudService_Client_ResetCommunication_args(const BrainCloudService_Client_ResetCommunication_args&);
  BrainCloudService_Client_ResetCommunication_args& operator=(const BrainCloudService_Client_ResetCommunication_args&);
  BrainCloudService_Client_ResetCommunication_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_ResetCommunication_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_ResetCommunication_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_ResetCommunication_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_ResetCommunication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_ResetCommunication_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_ResetCommunication_pargs {
 public:


  virtual ~BrainCloudService_Client_ResetCommunication_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_ResetCommunication_result {
 public:

  BrainCloudService_Client_ResetCommunication_result(const BrainCloudService_Client_ResetCommunication_result&);
  BrainCloudService_Client_ResetCommunication_result& operator=(const BrainCloudService_Client_ResetCommunication_result&);
  BrainCloudService_Client_ResetCommunication_result() {
  }

  virtual ~BrainCloudService_Client_ResetCommunication_result() throw();

  bool operator == (const BrainCloudService_Client_ResetCommunication_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_ResetCommunication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_ResetCommunication_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_ResetCommunication_presult {
 public:


  virtual ~BrainCloudService_Client_ResetCommunication_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_SetPacketTimeouts_args__isset {
  _BrainCloudService_Client_SetPacketTimeouts_args__isset() : timeouts(false), clientIndex(false) {}
  bool timeouts :1;
  bool clientIndex :1;
} _BrainCloudService_Client_SetPacketTimeouts_args__isset;

class BrainCloudService_Client_SetPacketTimeouts_args {
 public:

  BrainCloudService_Client_SetPacketTimeouts_args(const BrainCloudService_Client_SetPacketTimeouts_args&);
  BrainCloudService_Client_SetPacketTimeouts_args& operator=(const BrainCloudService_Client_SetPacketTimeouts_args&);
  BrainCloudService_Client_SetPacketTimeouts_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_SetPacketTimeouts_args() throw();
  std::vector<int32_t>  timeouts;
  int32_t clientIndex;

  _BrainCloudService_Client_SetPacketTimeouts_args__isset __isset;

  void __set_timeouts(const std::vector<int32_t> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_SetPacketTimeouts_args & rhs) const
  {
    if (!(timeouts == rhs.timeouts))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetPacketTimeouts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetPacketTimeouts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeouts_pargs {
 public:


  virtual ~BrainCloudService_Client_SetPacketTimeouts_pargs() throw();
  const std::vector<int32_t> * timeouts;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeouts_result {
 public:

  BrainCloudService_Client_SetPacketTimeouts_result(const BrainCloudService_Client_SetPacketTimeouts_result&);
  BrainCloudService_Client_SetPacketTimeouts_result& operator=(const BrainCloudService_Client_SetPacketTimeouts_result&);
  BrainCloudService_Client_SetPacketTimeouts_result() {
  }

  virtual ~BrainCloudService_Client_SetPacketTimeouts_result() throw();

  bool operator == (const BrainCloudService_Client_SetPacketTimeouts_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetPacketTimeouts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetPacketTimeouts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeouts_presult {
 public:


  virtual ~BrainCloudService_Client_SetPacketTimeouts_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_SetPacketTimeoutsToDefault_args__isset {
  _BrainCloudService_Client_SetPacketTimeoutsToDefault_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_SetPacketTimeoutsToDefault_args__isset;

class BrainCloudService_Client_SetPacketTimeoutsToDefault_args {
 public:

  BrainCloudService_Client_SetPacketTimeoutsToDefault_args(const BrainCloudService_Client_SetPacketTimeoutsToDefault_args&);
  BrainCloudService_Client_SetPacketTimeoutsToDefault_args& operator=(const BrainCloudService_Client_SetPacketTimeoutsToDefault_args&);
  BrainCloudService_Client_SetPacketTimeoutsToDefault_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_SetPacketTimeoutsToDefault_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_SetPacketTimeoutsToDefault_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_SetPacketTimeoutsToDefault_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetPacketTimeoutsToDefault_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetPacketTimeoutsToDefault_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeoutsToDefault_pargs {
 public:


  virtual ~BrainCloudService_Client_SetPacketTimeoutsToDefault_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeoutsToDefault_result {
 public:

  BrainCloudService_Client_SetPacketTimeoutsToDefault_result(const BrainCloudService_Client_SetPacketTimeoutsToDefault_result&);
  BrainCloudService_Client_SetPacketTimeoutsToDefault_result& operator=(const BrainCloudService_Client_SetPacketTimeoutsToDefault_result&);
  BrainCloudService_Client_SetPacketTimeoutsToDefault_result() {
  }

  virtual ~BrainCloudService_Client_SetPacketTimeoutsToDefault_result() throw();

  bool operator == (const BrainCloudService_Client_SetPacketTimeoutsToDefault_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetPacketTimeoutsToDefault_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetPacketTimeoutsToDefault_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetPacketTimeoutsToDefault_presult {
 public:


  virtual ~BrainCloudService_Client_SetPacketTimeoutsToDefault_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_GetPacketTimeouts_args__isset {
  _BrainCloudService_Client_GetPacketTimeouts_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_GetPacketTimeouts_args__isset;

class BrainCloudService_Client_GetPacketTimeouts_args {
 public:

  BrainCloudService_Client_GetPacketTimeouts_args(const BrainCloudService_Client_GetPacketTimeouts_args&);
  BrainCloudService_Client_GetPacketTimeouts_args& operator=(const BrainCloudService_Client_GetPacketTimeouts_args&);
  BrainCloudService_Client_GetPacketTimeouts_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_GetPacketTimeouts_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_GetPacketTimeouts_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetPacketTimeouts_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetPacketTimeouts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetPacketTimeouts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_GetPacketTimeouts_pargs {
 public:


  virtual ~BrainCloudService_Client_GetPacketTimeouts_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetPacketTimeouts_result__isset {
  _BrainCloudService_Client_GetPacketTimeouts_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetPacketTimeouts_result__isset;

class BrainCloudService_Client_GetPacketTimeouts_result {
 public:

  BrainCloudService_Client_GetPacketTimeouts_result(const BrainCloudService_Client_GetPacketTimeouts_result&);
  BrainCloudService_Client_GetPacketTimeouts_result& operator=(const BrainCloudService_Client_GetPacketTimeouts_result&);
  BrainCloudService_Client_GetPacketTimeouts_result() {
  }

  virtual ~BrainCloudService_Client_GetPacketTimeouts_result() throw();
  std::vector<int32_t>  success;

  _BrainCloudService_Client_GetPacketTimeouts_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const BrainCloudService_Client_GetPacketTimeouts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetPacketTimeouts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetPacketTimeouts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetPacketTimeouts_presult__isset {
  _BrainCloudService_Client_GetPacketTimeouts_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetPacketTimeouts_presult__isset;

class BrainCloudService_Client_GetPacketTimeouts_presult {
 public:


  virtual ~BrainCloudService_Client_GetPacketTimeouts_presult() throw();
  std::vector<int32_t> * success;

  _BrainCloudService_Client_GetPacketTimeouts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_SetAuthenticationPacketTimeout_args__isset {
  _BrainCloudService_Client_SetAuthenticationPacketTimeout_args__isset() : timeoutSecs(false), clientIndex(false) {}
  bool timeoutSecs :1;
  bool clientIndex :1;
} _BrainCloudService_Client_SetAuthenticationPacketTimeout_args__isset;

class BrainCloudService_Client_SetAuthenticationPacketTimeout_args {
 public:

  BrainCloudService_Client_SetAuthenticationPacketTimeout_args(const BrainCloudService_Client_SetAuthenticationPacketTimeout_args&);
  BrainCloudService_Client_SetAuthenticationPacketTimeout_args& operator=(const BrainCloudService_Client_SetAuthenticationPacketTimeout_args&);
  BrainCloudService_Client_SetAuthenticationPacketTimeout_args() : timeoutSecs(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_SetAuthenticationPacketTimeout_args() throw();
  int32_t timeoutSecs;
  int32_t clientIndex;

  _BrainCloudService_Client_SetAuthenticationPacketTimeout_args__isset __isset;

  void __set_timeoutSecs(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_SetAuthenticationPacketTimeout_args & rhs) const
  {
    if (!(timeoutSecs == rhs.timeoutSecs))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetAuthenticationPacketTimeout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetAuthenticationPacketTimeout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetAuthenticationPacketTimeout_pargs {
 public:


  virtual ~BrainCloudService_Client_SetAuthenticationPacketTimeout_pargs() throw();
  const int32_t* timeoutSecs;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetAuthenticationPacketTimeout_result {
 public:

  BrainCloudService_Client_SetAuthenticationPacketTimeout_result(const BrainCloudService_Client_SetAuthenticationPacketTimeout_result&);
  BrainCloudService_Client_SetAuthenticationPacketTimeout_result& operator=(const BrainCloudService_Client_SetAuthenticationPacketTimeout_result&);
  BrainCloudService_Client_SetAuthenticationPacketTimeout_result() {
  }

  virtual ~BrainCloudService_Client_SetAuthenticationPacketTimeout_result() throw();

  bool operator == (const BrainCloudService_Client_SetAuthenticationPacketTimeout_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetAuthenticationPacketTimeout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetAuthenticationPacketTimeout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetAuthenticationPacketTimeout_presult {
 public:


  virtual ~BrainCloudService_Client_SetAuthenticationPacketTimeout_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_GetAuthenticationPacketTimeout_args__isset {
  _BrainCloudService_Client_GetAuthenticationPacketTimeout_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_GetAuthenticationPacketTimeout_args__isset;

class BrainCloudService_Client_GetAuthenticationPacketTimeout_args {
 public:

  BrainCloudService_Client_GetAuthenticationPacketTimeout_args(const BrainCloudService_Client_GetAuthenticationPacketTimeout_args&);
  BrainCloudService_Client_GetAuthenticationPacketTimeout_args& operator=(const BrainCloudService_Client_GetAuthenticationPacketTimeout_args&);
  BrainCloudService_Client_GetAuthenticationPacketTimeout_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_GetAuthenticationPacketTimeout_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_GetAuthenticationPacketTimeout_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetAuthenticationPacketTimeout_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetAuthenticationPacketTimeout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetAuthenticationPacketTimeout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_GetAuthenticationPacketTimeout_pargs {
 public:


  virtual ~BrainCloudService_Client_GetAuthenticationPacketTimeout_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetAuthenticationPacketTimeout_result__isset {
  _BrainCloudService_Client_GetAuthenticationPacketTimeout_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetAuthenticationPacketTimeout_result__isset;

class BrainCloudService_Client_GetAuthenticationPacketTimeout_result {
 public:

  BrainCloudService_Client_GetAuthenticationPacketTimeout_result(const BrainCloudService_Client_GetAuthenticationPacketTimeout_result&);
  BrainCloudService_Client_GetAuthenticationPacketTimeout_result& operator=(const BrainCloudService_Client_GetAuthenticationPacketTimeout_result&);
  BrainCloudService_Client_GetAuthenticationPacketTimeout_result() : success(0) {
  }

  virtual ~BrainCloudService_Client_GetAuthenticationPacketTimeout_result() throw();
  int32_t success;

  _BrainCloudService_Client_GetAuthenticationPacketTimeout_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetAuthenticationPacketTimeout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetAuthenticationPacketTimeout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetAuthenticationPacketTimeout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetAuthenticationPacketTimeout_presult__isset {
  _BrainCloudService_Client_GetAuthenticationPacketTimeout_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetAuthenticationPacketTimeout_presult__isset;

class BrainCloudService_Client_GetAuthenticationPacketTimeout_presult {
 public:


  virtual ~BrainCloudService_Client_GetAuthenticationPacketTimeout_presult() throw();
  int32_t* success;

  _BrainCloudService_Client_GetAuthenticationPacketTimeout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateTimeout_args__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_GetUploadLowTransferRateTimeout_args__isset;

class BrainCloudService_Client_GetUploadLowTransferRateTimeout_args {
 public:

  BrainCloudService_Client_GetUploadLowTransferRateTimeout_args(const BrainCloudService_Client_GetUploadLowTransferRateTimeout_args&);
  BrainCloudService_Client_GetUploadLowTransferRateTimeout_args& operator=(const BrainCloudService_Client_GetUploadLowTransferRateTimeout_args&);
  BrainCloudService_Client_GetUploadLowTransferRateTimeout_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_GetUploadLowTransferRateTimeout_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_GetUploadLowTransferRateTimeout_pargs {
 public:


  virtual ~BrainCloudService_Client_GetUploadLowTransferRateTimeout_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateTimeout_result__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetUploadLowTransferRateTimeout_result__isset;

class BrainCloudService_Client_GetUploadLowTransferRateTimeout_result {
 public:

  BrainCloudService_Client_GetUploadLowTransferRateTimeout_result(const BrainCloudService_Client_GetUploadLowTransferRateTimeout_result&);
  BrainCloudService_Client_GetUploadLowTransferRateTimeout_result& operator=(const BrainCloudService_Client_GetUploadLowTransferRateTimeout_result&);
  BrainCloudService_Client_GetUploadLowTransferRateTimeout_result() : success(0) {
  }

  virtual ~BrainCloudService_Client_GetUploadLowTransferRateTimeout_result() throw();
  int32_t success;

  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetUploadLowTransferRateTimeout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult__isset;

class BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult {
 public:


  virtual ~BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult() throw();
  int32_t* success;

  _BrainCloudService_Client_GetUploadLowTransferRateTimeout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_SetUploadLowTransferRateTimeout_args__isset {
  _BrainCloudService_Client_SetUploadLowTransferRateTimeout_args__isset() : timeoutSecs(false), clientIndex(false) {}
  bool timeoutSecs :1;
  bool clientIndex :1;
} _BrainCloudService_Client_SetUploadLowTransferRateTimeout_args__isset;

class BrainCloudService_Client_SetUploadLowTransferRateTimeout_args {
 public:

  BrainCloudService_Client_SetUploadLowTransferRateTimeout_args(const BrainCloudService_Client_SetUploadLowTransferRateTimeout_args&);
  BrainCloudService_Client_SetUploadLowTransferRateTimeout_args& operator=(const BrainCloudService_Client_SetUploadLowTransferRateTimeout_args&);
  BrainCloudService_Client_SetUploadLowTransferRateTimeout_args() : timeoutSecs(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_SetUploadLowTransferRateTimeout_args() throw();
  int32_t timeoutSecs;
  int32_t clientIndex;

  _BrainCloudService_Client_SetUploadLowTransferRateTimeout_args__isset __isset;

  void __set_timeoutSecs(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_args & rhs) const
  {
    if (!(timeoutSecs == rhs.timeoutSecs))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateTimeout_pargs {
 public:


  virtual ~BrainCloudService_Client_SetUploadLowTransferRateTimeout_pargs() throw();
  const int32_t* timeoutSecs;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateTimeout_result {
 public:

  BrainCloudService_Client_SetUploadLowTransferRateTimeout_result(const BrainCloudService_Client_SetUploadLowTransferRateTimeout_result&);
  BrainCloudService_Client_SetUploadLowTransferRateTimeout_result& operator=(const BrainCloudService_Client_SetUploadLowTransferRateTimeout_result&);
  BrainCloudService_Client_SetUploadLowTransferRateTimeout_result() {
  }

  virtual ~BrainCloudService_Client_SetUploadLowTransferRateTimeout_result() throw();

  bool operator == (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetUploadLowTransferRateTimeout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateTimeout_presult {
 public:


  virtual ~BrainCloudService_Client_SetUploadLowTransferRateTimeout_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateThreshold_args__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_GetUploadLowTransferRateThreshold_args__isset;

class BrainCloudService_Client_GetUploadLowTransferRateThreshold_args {
 public:

  BrainCloudService_Client_GetUploadLowTransferRateThreshold_args(const BrainCloudService_Client_GetUploadLowTransferRateThreshold_args&);
  BrainCloudService_Client_GetUploadLowTransferRateThreshold_args& operator=(const BrainCloudService_Client_GetUploadLowTransferRateThreshold_args&);
  BrainCloudService_Client_GetUploadLowTransferRateThreshold_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_GetUploadLowTransferRateThreshold_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_GetUploadLowTransferRateThreshold_pargs {
 public:


  virtual ~BrainCloudService_Client_GetUploadLowTransferRateThreshold_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateThreshold_result__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetUploadLowTransferRateThreshold_result__isset;

class BrainCloudService_Client_GetUploadLowTransferRateThreshold_result {
 public:

  BrainCloudService_Client_GetUploadLowTransferRateThreshold_result(const BrainCloudService_Client_GetUploadLowTransferRateThreshold_result&);
  BrainCloudService_Client_GetUploadLowTransferRateThreshold_result& operator=(const BrainCloudService_Client_GetUploadLowTransferRateThreshold_result&);
  BrainCloudService_Client_GetUploadLowTransferRateThreshold_result() : success(0) {
  }

  virtual ~BrainCloudService_Client_GetUploadLowTransferRateThreshold_result() throw();
  int32_t success;

  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_GetUploadLowTransferRateThreshold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult__isset {
  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult__isset;

class BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult {
 public:


  virtual ~BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult() throw();
  int32_t* success;

  _BrainCloudService_Client_GetUploadLowTransferRateThreshold_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_SetUploadLowTransferRateThreshold_args__isset {
  _BrainCloudService_Client_SetUploadLowTransferRateThreshold_args__isset() : bytesPerSec(false), clientIndex(false) {}
  bool bytesPerSec :1;
  bool clientIndex :1;
} _BrainCloudService_Client_SetUploadLowTransferRateThreshold_args__isset;

class BrainCloudService_Client_SetUploadLowTransferRateThreshold_args {
 public:

  BrainCloudService_Client_SetUploadLowTransferRateThreshold_args(const BrainCloudService_Client_SetUploadLowTransferRateThreshold_args&);
  BrainCloudService_Client_SetUploadLowTransferRateThreshold_args& operator=(const BrainCloudService_Client_SetUploadLowTransferRateThreshold_args&);
  BrainCloudService_Client_SetUploadLowTransferRateThreshold_args() : bytesPerSec(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_SetUploadLowTransferRateThreshold_args() throw();
  int32_t bytesPerSec;
  int32_t clientIndex;

  _BrainCloudService_Client_SetUploadLowTransferRateThreshold_args__isset __isset;

  void __set_bytesPerSec(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_args & rhs) const
  {
    if (!(bytesPerSec == rhs.bytesPerSec))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateThreshold_pargs {
 public:


  virtual ~BrainCloudService_Client_SetUploadLowTransferRateThreshold_pargs() throw();
  const int32_t* bytesPerSec;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateThreshold_result {
 public:

  BrainCloudService_Client_SetUploadLowTransferRateThreshold_result(const BrainCloudService_Client_SetUploadLowTransferRateThreshold_result&);
  BrainCloudService_Client_SetUploadLowTransferRateThreshold_result& operator=(const BrainCloudService_Client_SetUploadLowTransferRateThreshold_result&);
  BrainCloudService_Client_SetUploadLowTransferRateThreshold_result() {
  }

  virtual ~BrainCloudService_Client_SetUploadLowTransferRateThreshold_result() throw();

  bool operator == (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_SetUploadLowTransferRateThreshold_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_SetUploadLowTransferRateThreshold_presult {
 public:


  virtual ~BrainCloudService_Client_SetUploadLowTransferRateThreshold_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_EnableNetworkErrorMessageCaching_args__isset {
  _BrainCloudService_Client_EnableNetworkErrorMessageCaching_args__isset() : enabled(false), clientIndex(false) {}
  bool enabled :1;
  bool clientIndex :1;
} _BrainCloudService_Client_EnableNetworkErrorMessageCaching_args__isset;

class BrainCloudService_Client_EnableNetworkErrorMessageCaching_args {
 public:

  BrainCloudService_Client_EnableNetworkErrorMessageCaching_args(const BrainCloudService_Client_EnableNetworkErrorMessageCaching_args&);
  BrainCloudService_Client_EnableNetworkErrorMessageCaching_args& operator=(const BrainCloudService_Client_EnableNetworkErrorMessageCaching_args&);
  BrainCloudService_Client_EnableNetworkErrorMessageCaching_args() : enabled(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_EnableNetworkErrorMessageCaching_args() throw();
  bool enabled;
  int32_t clientIndex;

  _BrainCloudService_Client_EnableNetworkErrorMessageCaching_args__isset __isset;

  void __set_enabled(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_args & rhs) const
  {
    if (!(enabled == rhs.enabled))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableNetworkErrorMessageCaching_pargs {
 public:


  virtual ~BrainCloudService_Client_EnableNetworkErrorMessageCaching_pargs() throw();
  const bool* enabled;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableNetworkErrorMessageCaching_result {
 public:

  BrainCloudService_Client_EnableNetworkErrorMessageCaching_result(const BrainCloudService_Client_EnableNetworkErrorMessageCaching_result&);
  BrainCloudService_Client_EnableNetworkErrorMessageCaching_result& operator=(const BrainCloudService_Client_EnableNetworkErrorMessageCaching_result&);
  BrainCloudService_Client_EnableNetworkErrorMessageCaching_result() {
  }

  virtual ~BrainCloudService_Client_EnableNetworkErrorMessageCaching_result() throw();

  bool operator == (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_EnableNetworkErrorMessageCaching_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_EnableNetworkErrorMessageCaching_presult {
 public:


  virtual ~BrainCloudService_Client_EnableNetworkErrorMessageCaching_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_RetryCachedMessages_args__isset {
  _BrainCloudService_Client_RetryCachedMessages_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_RetryCachedMessages_args__isset;

class BrainCloudService_Client_RetryCachedMessages_args {
 public:

  BrainCloudService_Client_RetryCachedMessages_args(const BrainCloudService_Client_RetryCachedMessages_args&);
  BrainCloudService_Client_RetryCachedMessages_args& operator=(const BrainCloudService_Client_RetryCachedMessages_args&);
  BrainCloudService_Client_RetryCachedMessages_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_RetryCachedMessages_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_RetryCachedMessages_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_RetryCachedMessages_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_RetryCachedMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_RetryCachedMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_RetryCachedMessages_pargs {
 public:


  virtual ~BrainCloudService_Client_RetryCachedMessages_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_RetryCachedMessages_result {
 public:

  BrainCloudService_Client_RetryCachedMessages_result(const BrainCloudService_Client_RetryCachedMessages_result&);
  BrainCloudService_Client_RetryCachedMessages_result& operator=(const BrainCloudService_Client_RetryCachedMessages_result&);
  BrainCloudService_Client_RetryCachedMessages_result() {
  }

  virtual ~BrainCloudService_Client_RetryCachedMessages_result() throw();

  bool operator == (const BrainCloudService_Client_RetryCachedMessages_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_RetryCachedMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_RetryCachedMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_RetryCachedMessages_presult {
 public:


  virtual ~BrainCloudService_Client_RetryCachedMessages_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_FlushCachedMessages_args__isset {
  _BrainCloudService_Client_FlushCachedMessages_args__isset() : sendApiErrorCallbacks(false), clientIndex(false) {}
  bool sendApiErrorCallbacks :1;
  bool clientIndex :1;
} _BrainCloudService_Client_FlushCachedMessages_args__isset;

class BrainCloudService_Client_FlushCachedMessages_args {
 public:

  BrainCloudService_Client_FlushCachedMessages_args(const BrainCloudService_Client_FlushCachedMessages_args&);
  BrainCloudService_Client_FlushCachedMessages_args& operator=(const BrainCloudService_Client_FlushCachedMessages_args&);
  BrainCloudService_Client_FlushCachedMessages_args() : sendApiErrorCallbacks(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_FlushCachedMessages_args() throw();
  bool sendApiErrorCallbacks;
  int32_t clientIndex;

  _BrainCloudService_Client_FlushCachedMessages_args__isset __isset;

  void __set_sendApiErrorCallbacks(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_FlushCachedMessages_args & rhs) const
  {
    if (!(sendApiErrorCallbacks == rhs.sendApiErrorCallbacks))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_FlushCachedMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_FlushCachedMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_FlushCachedMessages_pargs {
 public:


  virtual ~BrainCloudService_Client_FlushCachedMessages_pargs() throw();
  const bool* sendApiErrorCallbacks;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_FlushCachedMessages_result {
 public:

  BrainCloudService_Client_FlushCachedMessages_result(const BrainCloudService_Client_FlushCachedMessages_result&);
  BrainCloudService_Client_FlushCachedMessages_result& operator=(const BrainCloudService_Client_FlushCachedMessages_result&);
  BrainCloudService_Client_FlushCachedMessages_result() {
  }

  virtual ~BrainCloudService_Client_FlushCachedMessages_result() throw();

  bool operator == (const BrainCloudService_Client_FlushCachedMessages_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_FlushCachedMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_FlushCachedMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_FlushCachedMessages_presult {
 public:


  virtual ~BrainCloudService_Client_FlushCachedMessages_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_InsertEndOfMessageBundleMarker_args__isset {
  _BrainCloudService_Client_InsertEndOfMessageBundleMarker_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Client_InsertEndOfMessageBundleMarker_args__isset;

class BrainCloudService_Client_InsertEndOfMessageBundleMarker_args {
 public:

  BrainCloudService_Client_InsertEndOfMessageBundleMarker_args(const BrainCloudService_Client_InsertEndOfMessageBundleMarker_args&);
  BrainCloudService_Client_InsertEndOfMessageBundleMarker_args& operator=(const BrainCloudService_Client_InsertEndOfMessageBundleMarker_args&);
  BrainCloudService_Client_InsertEndOfMessageBundleMarker_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_InsertEndOfMessageBundleMarker_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Client_InsertEndOfMessageBundleMarker_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InsertEndOfMessageBundleMarker_pargs {
 public:


  virtual ~BrainCloudService_Client_InsertEndOfMessageBundleMarker_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InsertEndOfMessageBundleMarker_result {
 public:

  BrainCloudService_Client_InsertEndOfMessageBundleMarker_result(const BrainCloudService_Client_InsertEndOfMessageBundleMarker_result&);
  BrainCloudService_Client_InsertEndOfMessageBundleMarker_result& operator=(const BrainCloudService_Client_InsertEndOfMessageBundleMarker_result&);
  BrainCloudService_Client_InsertEndOfMessageBundleMarker_result() {
  }

  virtual ~BrainCloudService_Client_InsertEndOfMessageBundleMarker_result() throw();

  bool operator == (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_InsertEndOfMessageBundleMarker_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_InsertEndOfMessageBundleMarker_presult {
 public:


  virtual ~BrainCloudService_Client_InsertEndOfMessageBundleMarker_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_OverrideCountryCode_args__isset {
  _BrainCloudService_Client_OverrideCountryCode_args__isset() : countryCode(false), clientIndex(false) {}
  bool countryCode :1;
  bool clientIndex :1;
} _BrainCloudService_Client_OverrideCountryCode_args__isset;

class BrainCloudService_Client_OverrideCountryCode_args {
 public:

  BrainCloudService_Client_OverrideCountryCode_args(const BrainCloudService_Client_OverrideCountryCode_args&);
  BrainCloudService_Client_OverrideCountryCode_args& operator=(const BrainCloudService_Client_OverrideCountryCode_args&);
  BrainCloudService_Client_OverrideCountryCode_args() : countryCode(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_OverrideCountryCode_args() throw();
  std::string countryCode;
  int32_t clientIndex;

  _BrainCloudService_Client_OverrideCountryCode_args__isset __isset;

  void __set_countryCode(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_OverrideCountryCode_args & rhs) const
  {
    if (!(countryCode == rhs.countryCode))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_OverrideCountryCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_OverrideCountryCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideCountryCode_pargs {
 public:


  virtual ~BrainCloudService_Client_OverrideCountryCode_pargs() throw();
  const std::string* countryCode;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideCountryCode_result {
 public:

  BrainCloudService_Client_OverrideCountryCode_result(const BrainCloudService_Client_OverrideCountryCode_result&);
  BrainCloudService_Client_OverrideCountryCode_result& operator=(const BrainCloudService_Client_OverrideCountryCode_result&);
  BrainCloudService_Client_OverrideCountryCode_result() {
  }

  virtual ~BrainCloudService_Client_OverrideCountryCode_result() throw();

  bool operator == (const BrainCloudService_Client_OverrideCountryCode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_OverrideCountryCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_OverrideCountryCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideCountryCode_presult {
 public:


  virtual ~BrainCloudService_Client_OverrideCountryCode_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Client_OverrideLanguageCode_args__isset {
  _BrainCloudService_Client_OverrideLanguageCode_args__isset() : languageCode(false), clientIndex(false) {}
  bool languageCode :1;
  bool clientIndex :1;
} _BrainCloudService_Client_OverrideLanguageCode_args__isset;

class BrainCloudService_Client_OverrideLanguageCode_args {
 public:

  BrainCloudService_Client_OverrideLanguageCode_args(const BrainCloudService_Client_OverrideLanguageCode_args&);
  BrainCloudService_Client_OverrideLanguageCode_args& operator=(const BrainCloudService_Client_OverrideLanguageCode_args&);
  BrainCloudService_Client_OverrideLanguageCode_args() : languageCode(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Client_OverrideLanguageCode_args() throw();
  std::string languageCode;
  int32_t clientIndex;

  _BrainCloudService_Client_OverrideLanguageCode_args__isset __isset;

  void __set_languageCode(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Client_OverrideLanguageCode_args & rhs) const
  {
    if (!(languageCode == rhs.languageCode))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Client_OverrideLanguageCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_OverrideLanguageCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideLanguageCode_pargs {
 public:


  virtual ~BrainCloudService_Client_OverrideLanguageCode_pargs() throw();
  const std::string* languageCode;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideLanguageCode_result {
 public:

  BrainCloudService_Client_OverrideLanguageCode_result(const BrainCloudService_Client_OverrideLanguageCode_result&);
  BrainCloudService_Client_OverrideLanguageCode_result& operator=(const BrainCloudService_Client_OverrideLanguageCode_result&);
  BrainCloudService_Client_OverrideLanguageCode_result() {
  }

  virtual ~BrainCloudService_Client_OverrideLanguageCode_result() throw();

  bool operator == (const BrainCloudService_Client_OverrideLanguageCode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_Client_OverrideLanguageCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Client_OverrideLanguageCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Client_OverrideLanguageCode_presult {
 public:


  virtual ~BrainCloudService_Client_OverrideLanguageCode_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_DataStream_CustomPageEvent_args__isset {
  _BrainCloudService_DataStream_CustomPageEvent_args__isset() : eventName(false), jsonEventProperties(false), clientIndex(false) {}
  bool eventName :1;
  bool jsonEventProperties :1;
  bool clientIndex :1;
} _BrainCloudService_DataStream_CustomPageEvent_args__isset;

class BrainCloudService_DataStream_CustomPageEvent_args {
 public:

  BrainCloudService_DataStream_CustomPageEvent_args(const BrainCloudService_DataStream_CustomPageEvent_args&);
  BrainCloudService_DataStream_CustomPageEvent_args& operator=(const BrainCloudService_DataStream_CustomPageEvent_args&);
  BrainCloudService_DataStream_CustomPageEvent_args() : eventName(), jsonEventProperties(), clientIndex(0) {
  }

  virtual ~BrainCloudService_DataStream_CustomPageEvent_args() throw();
  std::string eventName;
  std::string jsonEventProperties;
  int32_t clientIndex;

  _BrainCloudService_DataStream_CustomPageEvent_args__isset __isset;

  void __set_eventName(const std::string& val);

  void __set_jsonEventProperties(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_DataStream_CustomPageEvent_args & rhs) const
  {
    if (!(eventName == rhs.eventName))
      return false;
    if (!(jsonEventProperties == rhs.jsonEventProperties))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomPageEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomPageEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_DataStream_CustomPageEvent_pargs {
 public:


  virtual ~BrainCloudService_DataStream_CustomPageEvent_pargs() throw();
  const std::string* eventName;
  const std::string* jsonEventProperties;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomPageEvent_result__isset {
  _BrainCloudService_DataStream_CustomPageEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomPageEvent_result__isset;

class BrainCloudService_DataStream_CustomPageEvent_result {
 public:

  BrainCloudService_DataStream_CustomPageEvent_result(const BrainCloudService_DataStream_CustomPageEvent_result&);
  BrainCloudService_DataStream_CustomPageEvent_result& operator=(const BrainCloudService_DataStream_CustomPageEvent_result&);
  BrainCloudService_DataStream_CustomPageEvent_result() : success() {
  }

  virtual ~BrainCloudService_DataStream_CustomPageEvent_result() throw();
  std::string success;

  _BrainCloudService_DataStream_CustomPageEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_DataStream_CustomPageEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomPageEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomPageEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomPageEvent_presult__isset {
  _BrainCloudService_DataStream_CustomPageEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomPageEvent_presult__isset;

class BrainCloudService_DataStream_CustomPageEvent_presult {
 public:


  virtual ~BrainCloudService_DataStream_CustomPageEvent_presult() throw();
  std::string* success;

  _BrainCloudService_DataStream_CustomPageEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_DataStream_CustomScreenEvent_args__isset {
  _BrainCloudService_DataStream_CustomScreenEvent_args__isset() : eventName(false), jsonEventProperties(false), clientIndex(false) {}
  bool eventName :1;
  bool jsonEventProperties :1;
  bool clientIndex :1;
} _BrainCloudService_DataStream_CustomScreenEvent_args__isset;

class BrainCloudService_DataStream_CustomScreenEvent_args {
 public:

  BrainCloudService_DataStream_CustomScreenEvent_args(const BrainCloudService_DataStream_CustomScreenEvent_args&);
  BrainCloudService_DataStream_CustomScreenEvent_args& operator=(const BrainCloudService_DataStream_CustomScreenEvent_args&);
  BrainCloudService_DataStream_CustomScreenEvent_args() : eventName(), jsonEventProperties(), clientIndex(0) {
  }

  virtual ~BrainCloudService_DataStream_CustomScreenEvent_args() throw();
  std::string eventName;
  std::string jsonEventProperties;
  int32_t clientIndex;

  _BrainCloudService_DataStream_CustomScreenEvent_args__isset __isset;

  void __set_eventName(const std::string& val);

  void __set_jsonEventProperties(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_DataStream_CustomScreenEvent_args & rhs) const
  {
    if (!(eventName == rhs.eventName))
      return false;
    if (!(jsonEventProperties == rhs.jsonEventProperties))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomScreenEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomScreenEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_DataStream_CustomScreenEvent_pargs {
 public:


  virtual ~BrainCloudService_DataStream_CustomScreenEvent_pargs() throw();
  const std::string* eventName;
  const std::string* jsonEventProperties;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomScreenEvent_result__isset {
  _BrainCloudService_DataStream_CustomScreenEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomScreenEvent_result__isset;

class BrainCloudService_DataStream_CustomScreenEvent_result {
 public:

  BrainCloudService_DataStream_CustomScreenEvent_result(const BrainCloudService_DataStream_CustomScreenEvent_result&);
  BrainCloudService_DataStream_CustomScreenEvent_result& operator=(const BrainCloudService_DataStream_CustomScreenEvent_result&);
  BrainCloudService_DataStream_CustomScreenEvent_result() : success() {
  }

  virtual ~BrainCloudService_DataStream_CustomScreenEvent_result() throw();
  std::string success;

  _BrainCloudService_DataStream_CustomScreenEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_DataStream_CustomScreenEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomScreenEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomScreenEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomScreenEvent_presult__isset {
  _BrainCloudService_DataStream_CustomScreenEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomScreenEvent_presult__isset;

class BrainCloudService_DataStream_CustomScreenEvent_presult {
 public:


  virtual ~BrainCloudService_DataStream_CustomScreenEvent_presult() throw();
  std::string* success;

  _BrainCloudService_DataStream_CustomScreenEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_DataStream_CustomTrackEvent_args__isset {
  _BrainCloudService_DataStream_CustomTrackEvent_args__isset() : eventName(false), jsonEventProperties(false), clientIndex(false) {}
  bool eventName :1;
  bool jsonEventProperties :1;
  bool clientIndex :1;
} _BrainCloudService_DataStream_CustomTrackEvent_args__isset;

class BrainCloudService_DataStream_CustomTrackEvent_args {
 public:

  BrainCloudService_DataStream_CustomTrackEvent_args(const BrainCloudService_DataStream_CustomTrackEvent_args&);
  BrainCloudService_DataStream_CustomTrackEvent_args& operator=(const BrainCloudService_DataStream_CustomTrackEvent_args&);
  BrainCloudService_DataStream_CustomTrackEvent_args() : eventName(), jsonEventProperties(), clientIndex(0) {
  }

  virtual ~BrainCloudService_DataStream_CustomTrackEvent_args() throw();
  std::string eventName;
  std::string jsonEventProperties;
  int32_t clientIndex;

  _BrainCloudService_DataStream_CustomTrackEvent_args__isset __isset;

  void __set_eventName(const std::string& val);

  void __set_jsonEventProperties(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_DataStream_CustomTrackEvent_args & rhs) const
  {
    if (!(eventName == rhs.eventName))
      return false;
    if (!(jsonEventProperties == rhs.jsonEventProperties))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomTrackEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomTrackEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_DataStream_CustomTrackEvent_pargs {
 public:


  virtual ~BrainCloudService_DataStream_CustomTrackEvent_pargs() throw();
  const std::string* eventName;
  const std::string* jsonEventProperties;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomTrackEvent_result__isset {
  _BrainCloudService_DataStream_CustomTrackEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomTrackEvent_result__isset;

class BrainCloudService_DataStream_CustomTrackEvent_result {
 public:

  BrainCloudService_DataStream_CustomTrackEvent_result(const BrainCloudService_DataStream_CustomTrackEvent_result&);
  BrainCloudService_DataStream_CustomTrackEvent_result& operator=(const BrainCloudService_DataStream_CustomTrackEvent_result&);
  BrainCloudService_DataStream_CustomTrackEvent_result() : success() {
  }

  virtual ~BrainCloudService_DataStream_CustomTrackEvent_result() throw();
  std::string success;

  _BrainCloudService_DataStream_CustomTrackEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_DataStream_CustomTrackEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_DataStream_CustomTrackEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_DataStream_CustomTrackEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_DataStream_CustomTrackEvent_presult__isset {
  _BrainCloudService_DataStream_CustomTrackEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_DataStream_CustomTrackEvent_presult__isset;

class BrainCloudService_DataStream_CustomTrackEvent_presult {
 public:


  virtual ~BrainCloudService_DataStream_CustomTrackEvent_presult() throw();
  std::string* success;

  _BrainCloudService_DataStream_CustomTrackEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_CreateEntity_args__isset {
  _BrainCloudService_Entity_CreateEntity_args__isset() : entityType(false), jsonEntityData(false), jsonEntityAcl(false), clientIndex(false) {}
  bool entityType :1;
  bool jsonEntityData :1;
  bool jsonEntityAcl :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_CreateEntity_args__isset;

class BrainCloudService_Entity_CreateEntity_args {
 public:

  BrainCloudService_Entity_CreateEntity_args(const BrainCloudService_Entity_CreateEntity_args&);
  BrainCloudService_Entity_CreateEntity_args& operator=(const BrainCloudService_Entity_CreateEntity_args&);
  BrainCloudService_Entity_CreateEntity_args() : entityType(), jsonEntityData(), jsonEntityAcl(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_CreateEntity_args() throw();
  std::string entityType;
  std::string jsonEntityData;
  std::string jsonEntityAcl;
  int32_t clientIndex;

  _BrainCloudService_Entity_CreateEntity_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_CreateEntity_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_CreateEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_CreateEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_CreateEntity_pargs {
 public:


  virtual ~BrainCloudService_Entity_CreateEntity_pargs() throw();
  const std::string* entityType;
  const std::string* jsonEntityData;
  const std::string* jsonEntityAcl;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_CreateEntity_result__isset {
  _BrainCloudService_Entity_CreateEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_CreateEntity_result__isset;

class BrainCloudService_Entity_CreateEntity_result {
 public:

  BrainCloudService_Entity_CreateEntity_result(const BrainCloudService_Entity_CreateEntity_result&);
  BrainCloudService_Entity_CreateEntity_result& operator=(const BrainCloudService_Entity_CreateEntity_result&);
  BrainCloudService_Entity_CreateEntity_result() : success() {
  }

  virtual ~BrainCloudService_Entity_CreateEntity_result() throw();
  std::string success;

  _BrainCloudService_Entity_CreateEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_CreateEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_CreateEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_CreateEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_CreateEntity_presult__isset {
  _BrainCloudService_Entity_CreateEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_CreateEntity_presult__isset;

class BrainCloudService_Entity_CreateEntity_presult {
 public:


  virtual ~BrainCloudService_Entity_CreateEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_CreateEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetEntitiesByType_args__isset {
  _BrainCloudService_Entity_GetEntitiesByType_args__isset() : entityType(false), clientIndex(false) {}
  bool entityType :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetEntitiesByType_args__isset;

class BrainCloudService_Entity_GetEntitiesByType_args {
 public:

  BrainCloudService_Entity_GetEntitiesByType_args(const BrainCloudService_Entity_GetEntitiesByType_args&);
  BrainCloudService_Entity_GetEntitiesByType_args& operator=(const BrainCloudService_Entity_GetEntitiesByType_args&);
  BrainCloudService_Entity_GetEntitiesByType_args() : entityType(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetEntitiesByType_args() throw();
  std::string entityType;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetEntitiesByType_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetEntitiesByType_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetEntitiesByType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetEntitiesByType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetEntitiesByType_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetEntitiesByType_pargs() throw();
  const std::string* entityType;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetEntitiesByType_result__isset {
  _BrainCloudService_Entity_GetEntitiesByType_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetEntitiesByType_result__isset;

class BrainCloudService_Entity_GetEntitiesByType_result {
 public:

  BrainCloudService_Entity_GetEntitiesByType_result(const BrainCloudService_Entity_GetEntitiesByType_result&);
  BrainCloudService_Entity_GetEntitiesByType_result& operator=(const BrainCloudService_Entity_GetEntitiesByType_result&);
  BrainCloudService_Entity_GetEntitiesByType_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetEntitiesByType_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetEntitiesByType_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetEntitiesByType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetEntitiesByType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetEntitiesByType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetEntitiesByType_presult__isset {
  _BrainCloudService_Entity_GetEntitiesByType_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetEntitiesByType_presult__isset;

class BrainCloudService_Entity_GetEntitiesByType_presult {
 public:


  virtual ~BrainCloudService_Entity_GetEntitiesByType_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetEntitiesByType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_UpdateEntity_args__isset {
  _BrainCloudService_Entity_UpdateEntity_args__isset() : entityId(false), entityType(false), jsonEntityData(false), jsonEntityAcl(false), version(false), clientIndex(false) {}
  bool entityId :1;
  bool entityType :1;
  bool jsonEntityData :1;
  bool jsonEntityAcl :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_UpdateEntity_args__isset;

class BrainCloudService_Entity_UpdateEntity_args {
 public:

  BrainCloudService_Entity_UpdateEntity_args(const BrainCloudService_Entity_UpdateEntity_args&);
  BrainCloudService_Entity_UpdateEntity_args& operator=(const BrainCloudService_Entity_UpdateEntity_args&);
  BrainCloudService_Entity_UpdateEntity_args() : entityId(), entityType(), jsonEntityData(), jsonEntityAcl(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_UpdateEntity_args() throw();
  std::string entityId;
  std::string entityType;
  std::string jsonEntityData;
  std::string jsonEntityAcl;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_Entity_UpdateEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_entityType(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_UpdateEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(entityType == rhs.entityType))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_UpdateEntity_pargs {
 public:


  virtual ~BrainCloudService_Entity_UpdateEntity_pargs() throw();
  const std::string* entityId;
  const std::string* entityType;
  const std::string* jsonEntityData;
  const std::string* jsonEntityAcl;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateEntity_result__isset {
  _BrainCloudService_Entity_UpdateEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateEntity_result__isset;

class BrainCloudService_Entity_UpdateEntity_result {
 public:

  BrainCloudService_Entity_UpdateEntity_result(const BrainCloudService_Entity_UpdateEntity_result&);
  BrainCloudService_Entity_UpdateEntity_result& operator=(const BrainCloudService_Entity_UpdateEntity_result&);
  BrainCloudService_Entity_UpdateEntity_result() : success() {
  }

  virtual ~BrainCloudService_Entity_UpdateEntity_result() throw();
  std::string success;

  _BrainCloudService_Entity_UpdateEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_UpdateEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateEntity_presult__isset {
  _BrainCloudService_Entity_UpdateEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateEntity_presult__isset;

class BrainCloudService_Entity_UpdateEntity_presult {
 public:


  virtual ~BrainCloudService_Entity_UpdateEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_UpdateEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_UpdateSharedEntity_args__isset {
  _BrainCloudService_Entity_UpdateSharedEntity_args__isset() : entityId(false), targetProfileId(false), entityType(false), jsonEntityData(false), version(false), clientIndex(false) {}
  bool entityId :1;
  bool targetProfileId :1;
  bool entityType :1;
  bool jsonEntityData :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_UpdateSharedEntity_args__isset;

class BrainCloudService_Entity_UpdateSharedEntity_args {
 public:

  BrainCloudService_Entity_UpdateSharedEntity_args(const BrainCloudService_Entity_UpdateSharedEntity_args&);
  BrainCloudService_Entity_UpdateSharedEntity_args& operator=(const BrainCloudService_Entity_UpdateSharedEntity_args&);
  BrainCloudService_Entity_UpdateSharedEntity_args() : entityId(), targetProfileId(), entityType(), jsonEntityData(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_UpdateSharedEntity_args() throw();
  std::string entityId;
  std::string targetProfileId;
  std::string entityType;
  std::string jsonEntityData;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_Entity_UpdateSharedEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_targetProfileId(const std::string& val);

  void __set_entityType(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_UpdateSharedEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(targetProfileId == rhs.targetProfileId))
      return false;
    if (!(entityType == rhs.entityType))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateSharedEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateSharedEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_UpdateSharedEntity_pargs {
 public:


  virtual ~BrainCloudService_Entity_UpdateSharedEntity_pargs() throw();
  const std::string* entityId;
  const std::string* targetProfileId;
  const std::string* entityType;
  const std::string* jsonEntityData;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateSharedEntity_result__isset {
  _BrainCloudService_Entity_UpdateSharedEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateSharedEntity_result__isset;

class BrainCloudService_Entity_UpdateSharedEntity_result {
 public:

  BrainCloudService_Entity_UpdateSharedEntity_result(const BrainCloudService_Entity_UpdateSharedEntity_result&);
  BrainCloudService_Entity_UpdateSharedEntity_result& operator=(const BrainCloudService_Entity_UpdateSharedEntity_result&);
  BrainCloudService_Entity_UpdateSharedEntity_result() : success() {
  }

  virtual ~BrainCloudService_Entity_UpdateSharedEntity_result() throw();
  std::string success;

  _BrainCloudService_Entity_UpdateSharedEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_UpdateSharedEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateSharedEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateSharedEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateSharedEntity_presult__isset {
  _BrainCloudService_Entity_UpdateSharedEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateSharedEntity_presult__isset;

class BrainCloudService_Entity_UpdateSharedEntity_presult {
 public:


  virtual ~BrainCloudService_Entity_UpdateSharedEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_UpdateSharedEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_DeleteEntity_args__isset {
  _BrainCloudService_Entity_DeleteEntity_args__isset() : entityId(false), version(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_DeleteEntity_args__isset;

class BrainCloudService_Entity_DeleteEntity_args {
 public:

  BrainCloudService_Entity_DeleteEntity_args(const BrainCloudService_Entity_DeleteEntity_args&);
  BrainCloudService_Entity_DeleteEntity_args& operator=(const BrainCloudService_Entity_DeleteEntity_args&);
  BrainCloudService_Entity_DeleteEntity_args() : entityId(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_DeleteEntity_args() throw();
  std::string entityId;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_Entity_DeleteEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_DeleteEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_DeleteEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_DeleteEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_DeleteEntity_pargs {
 public:


  virtual ~BrainCloudService_Entity_DeleteEntity_pargs() throw();
  const std::string* entityId;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_DeleteEntity_result__isset {
  _BrainCloudService_Entity_DeleteEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_DeleteEntity_result__isset;

class BrainCloudService_Entity_DeleteEntity_result {
 public:

  BrainCloudService_Entity_DeleteEntity_result(const BrainCloudService_Entity_DeleteEntity_result&);
  BrainCloudService_Entity_DeleteEntity_result& operator=(const BrainCloudService_Entity_DeleteEntity_result&);
  BrainCloudService_Entity_DeleteEntity_result() : success() {
  }

  virtual ~BrainCloudService_Entity_DeleteEntity_result() throw();
  std::string success;

  _BrainCloudService_Entity_DeleteEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_DeleteEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_DeleteEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_DeleteEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_DeleteEntity_presult__isset {
  _BrainCloudService_Entity_DeleteEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_DeleteEntity_presult__isset;

class BrainCloudService_Entity_DeleteEntity_presult {
 public:


  virtual ~BrainCloudService_Entity_DeleteEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_DeleteEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_UpdateSingleton_args__isset {
  _BrainCloudService_Entity_UpdateSingleton_args__isset() : entityType(false), jsonEntityData(false), jsonEntityAcl(false), version(false), clientIndex(false) {}
  bool entityType :1;
  bool jsonEntityData :1;
  bool jsonEntityAcl :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_UpdateSingleton_args__isset;

class BrainCloudService_Entity_UpdateSingleton_args {
 public:

  BrainCloudService_Entity_UpdateSingleton_args(const BrainCloudService_Entity_UpdateSingleton_args&);
  BrainCloudService_Entity_UpdateSingleton_args& operator=(const BrainCloudService_Entity_UpdateSingleton_args&);
  BrainCloudService_Entity_UpdateSingleton_args() : entityType(), jsonEntityData(), jsonEntityAcl(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_UpdateSingleton_args() throw();
  std::string entityType;
  std::string jsonEntityData;
  std::string jsonEntityAcl;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_Entity_UpdateSingleton_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_UpdateSingleton_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateSingleton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateSingleton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_UpdateSingleton_pargs {
 public:


  virtual ~BrainCloudService_Entity_UpdateSingleton_pargs() throw();
  const std::string* entityType;
  const std::string* jsonEntityData;
  const std::string* jsonEntityAcl;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateSingleton_result__isset {
  _BrainCloudService_Entity_UpdateSingleton_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateSingleton_result__isset;

class BrainCloudService_Entity_UpdateSingleton_result {
 public:

  BrainCloudService_Entity_UpdateSingleton_result(const BrainCloudService_Entity_UpdateSingleton_result&);
  BrainCloudService_Entity_UpdateSingleton_result& operator=(const BrainCloudService_Entity_UpdateSingleton_result&);
  BrainCloudService_Entity_UpdateSingleton_result() : success() {
  }

  virtual ~BrainCloudService_Entity_UpdateSingleton_result() throw();
  std::string success;

  _BrainCloudService_Entity_UpdateSingleton_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_UpdateSingleton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_UpdateSingleton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_UpdateSingleton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_UpdateSingleton_presult__isset {
  _BrainCloudService_Entity_UpdateSingleton_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_UpdateSingleton_presult__isset;

class BrainCloudService_Entity_UpdateSingleton_presult {
 public:


  virtual ~BrainCloudService_Entity_UpdateSingleton_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_UpdateSingleton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_DeleteSingleton_args__isset {
  _BrainCloudService_Entity_DeleteSingleton_args__isset() : entityType(false), version(false), clientIndex(false) {}
  bool entityType :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_DeleteSingleton_args__isset;

class BrainCloudService_Entity_DeleteSingleton_args {
 public:

  BrainCloudService_Entity_DeleteSingleton_args(const BrainCloudService_Entity_DeleteSingleton_args&);
  BrainCloudService_Entity_DeleteSingleton_args& operator=(const BrainCloudService_Entity_DeleteSingleton_args&);
  BrainCloudService_Entity_DeleteSingleton_args() : entityType(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_DeleteSingleton_args() throw();
  std::string entityType;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_Entity_DeleteSingleton_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_DeleteSingleton_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_DeleteSingleton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_DeleteSingleton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_DeleteSingleton_pargs {
 public:


  virtual ~BrainCloudService_Entity_DeleteSingleton_pargs() throw();
  const std::string* entityType;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_DeleteSingleton_result__isset {
  _BrainCloudService_Entity_DeleteSingleton_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_DeleteSingleton_result__isset;

class BrainCloudService_Entity_DeleteSingleton_result {
 public:

  BrainCloudService_Entity_DeleteSingleton_result(const BrainCloudService_Entity_DeleteSingleton_result&);
  BrainCloudService_Entity_DeleteSingleton_result& operator=(const BrainCloudService_Entity_DeleteSingleton_result&);
  BrainCloudService_Entity_DeleteSingleton_result() : success() {
  }

  virtual ~BrainCloudService_Entity_DeleteSingleton_result() throw();
  std::string success;

  _BrainCloudService_Entity_DeleteSingleton_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_DeleteSingleton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_DeleteSingleton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_DeleteSingleton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_DeleteSingleton_presult__isset {
  _BrainCloudService_Entity_DeleteSingleton_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_DeleteSingleton_presult__isset;

class BrainCloudService_Entity_DeleteSingleton_presult {
 public:


  virtual ~BrainCloudService_Entity_DeleteSingleton_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_DeleteSingleton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetEntity_args__isset {
  _BrainCloudService_Entity_GetEntity_args__isset() : entityId(false), clientIndex(false) {}
  bool entityId :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetEntity_args__isset;

class BrainCloudService_Entity_GetEntity_args {
 public:

  BrainCloudService_Entity_GetEntity_args(const BrainCloudService_Entity_GetEntity_args&);
  BrainCloudService_Entity_GetEntity_args& operator=(const BrainCloudService_Entity_GetEntity_args&);
  BrainCloudService_Entity_GetEntity_args() : entityId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetEntity_args() throw();
  std::string entityId;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetEntity_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetEntity_pargs() throw();
  const std::string* entityId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetEntity_result__isset {
  _BrainCloudService_Entity_GetEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetEntity_result__isset;

class BrainCloudService_Entity_GetEntity_result {
 public:

  BrainCloudService_Entity_GetEntity_result(const BrainCloudService_Entity_GetEntity_result&);
  BrainCloudService_Entity_GetEntity_result& operator=(const BrainCloudService_Entity_GetEntity_result&);
  BrainCloudService_Entity_GetEntity_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetEntity_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetEntity_presult__isset {
  _BrainCloudService_Entity_GetEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetEntity_presult__isset;

class BrainCloudService_Entity_GetEntity_presult {
 public:


  virtual ~BrainCloudService_Entity_GetEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetSingleton_args__isset {
  _BrainCloudService_Entity_GetSingleton_args__isset() : entityType(false), clientIndex(false) {}
  bool entityType :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetSingleton_args__isset;

class BrainCloudService_Entity_GetSingleton_args {
 public:

  BrainCloudService_Entity_GetSingleton_args(const BrainCloudService_Entity_GetSingleton_args&);
  BrainCloudService_Entity_GetSingleton_args& operator=(const BrainCloudService_Entity_GetSingleton_args&);
  BrainCloudService_Entity_GetSingleton_args() : entityType(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetSingleton_args() throw();
  std::string entityType;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetSingleton_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetSingleton_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSingleton_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSingleton_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetSingleton_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetSingleton_pargs() throw();
  const std::string* entityType;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSingleton_result__isset {
  _BrainCloudService_Entity_GetSingleton_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSingleton_result__isset;

class BrainCloudService_Entity_GetSingleton_result {
 public:

  BrainCloudService_Entity_GetSingleton_result(const BrainCloudService_Entity_GetSingleton_result&);
  BrainCloudService_Entity_GetSingleton_result& operator=(const BrainCloudService_Entity_GetSingleton_result&);
  BrainCloudService_Entity_GetSingleton_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetSingleton_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetSingleton_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetSingleton_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSingleton_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSingleton_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSingleton_presult__isset {
  _BrainCloudService_Entity_GetSingleton_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSingleton_presult__isset;

class BrainCloudService_Entity_GetSingleton_presult {
 public:


  virtual ~BrainCloudService_Entity_GetSingleton_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetSingleton_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetSharedEntityForProfileId_args__isset {
  _BrainCloudService_Entity_GetSharedEntityForProfileId_args__isset() : profileId(false), entityId(false), clientIndex(false) {}
  bool profileId :1;
  bool entityId :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetSharedEntityForProfileId_args__isset;

class BrainCloudService_Entity_GetSharedEntityForProfileId_args {
 public:

  BrainCloudService_Entity_GetSharedEntityForProfileId_args(const BrainCloudService_Entity_GetSharedEntityForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntityForProfileId_args& operator=(const BrainCloudService_Entity_GetSharedEntityForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntityForProfileId_args() : profileId(), entityId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntityForProfileId_args() throw();
  std::string profileId;
  std::string entityId;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetSharedEntityForProfileId_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_entityId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntityForProfileId_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntityForProfileId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntityForProfileId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetSharedEntityForProfileId_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntityForProfileId_pargs() throw();
  const std::string* profileId;
  const std::string* entityId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntityForProfileId_result__isset {
  _BrainCloudService_Entity_GetSharedEntityForProfileId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntityForProfileId_result__isset;

class BrainCloudService_Entity_GetSharedEntityForProfileId_result {
 public:

  BrainCloudService_Entity_GetSharedEntityForProfileId_result(const BrainCloudService_Entity_GetSharedEntityForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntityForProfileId_result& operator=(const BrainCloudService_Entity_GetSharedEntityForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntityForProfileId_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntityForProfileId_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetSharedEntityForProfileId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntityForProfileId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntityForProfileId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntityForProfileId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntityForProfileId_presult__isset {
  _BrainCloudService_Entity_GetSharedEntityForProfileId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntityForProfileId_presult__isset;

class BrainCloudService_Entity_GetSharedEntityForProfileId_presult {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntityForProfileId_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetSharedEntityForProfileId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesForProfileId_args__isset {
  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_args__isset() : profileId(false), clientIndex(false) {}
  bool profileId :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetSharedEntitiesForProfileId_args__isset;

class BrainCloudService_Entity_GetSharedEntitiesForProfileId_args {
 public:

  BrainCloudService_Entity_GetSharedEntitiesForProfileId_args(const BrainCloudService_Entity_GetSharedEntitiesForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntitiesForProfileId_args& operator=(const BrainCloudService_Entity_GetSharedEntitiesForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntitiesForProfileId_args() : profileId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntitiesForProfileId_args() throw();
  std::string profileId;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetSharedEntitiesForProfileId_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntitiesForProfileId_pargs() throw();
  const std::string* profileId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesForProfileId_result__isset {
  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntitiesForProfileId_result__isset;

class BrainCloudService_Entity_GetSharedEntitiesForProfileId_result {
 public:

  BrainCloudService_Entity_GetSharedEntitiesForProfileId_result(const BrainCloudService_Entity_GetSharedEntitiesForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntitiesForProfileId_result& operator=(const BrainCloudService_Entity_GetSharedEntitiesForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntitiesForProfileId_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntitiesForProfileId_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntitiesForProfileId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult__isset {
  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult__isset;

class BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetSharedEntitiesForProfileId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetList_args__isset {
  _BrainCloudService_Entity_GetList_args__isset() : whereJson(false), orderByJson(false), maxReturn(false), clientIndex(false) {}
  bool whereJson :1;
  bool orderByJson :1;
  bool maxReturn :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetList_args__isset;

class BrainCloudService_Entity_GetList_args {
 public:

  BrainCloudService_Entity_GetList_args(const BrainCloudService_Entity_GetList_args&);
  BrainCloudService_Entity_GetList_args& operator=(const BrainCloudService_Entity_GetList_args&);
  BrainCloudService_Entity_GetList_args() : whereJson(), orderByJson(), maxReturn(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetList_args() throw();
  std::string whereJson;
  std::string orderByJson;
  int32_t maxReturn;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetList_args__isset __isset;

  void __set_whereJson(const std::string& val);

  void __set_orderByJson(const std::string& val);

  void __set_maxReturn(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetList_args & rhs) const
  {
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(orderByJson == rhs.orderByJson))
      return false;
    if (!(maxReturn == rhs.maxReturn))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetList_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetList_pargs() throw();
  const std::string* whereJson;
  const std::string* orderByJson;
  const int32_t* maxReturn;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetList_result__isset {
  _BrainCloudService_Entity_GetList_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetList_result__isset;

class BrainCloudService_Entity_GetList_result {
 public:

  BrainCloudService_Entity_GetList_result(const BrainCloudService_Entity_GetList_result&);
  BrainCloudService_Entity_GetList_result& operator=(const BrainCloudService_Entity_GetList_result&);
  BrainCloudService_Entity_GetList_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetList_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetList_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetList_presult__isset {
  _BrainCloudService_Entity_GetList_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetList_presult__isset;

class BrainCloudService_Entity_GetList_presult {
 public:


  virtual ~BrainCloudService_Entity_GetList_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args__isset {
  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args__isset() : profileId(false), whereJson(false), orderByJson(false), maxReturn(false), clientIndex(false) {}
  bool profileId :1;
  bool whereJson :1;
  bool orderByJson :1;
  bool maxReturn :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args__isset;

class BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args {
 public:

  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args(const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args& operator=(const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args&);
  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args() : profileId(), whereJson(), orderByJson(), maxReturn(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args() throw();
  std::string profileId;
  std::string whereJson;
  std::string orderByJson;
  int32_t maxReturn;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_whereJson(const std::string& val);

  void __set_orderByJson(const std::string& val);

  void __set_maxReturn(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(orderByJson == rhs.orderByJson))
      return false;
    if (!(maxReturn == rhs.maxReturn))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetSharedEntitiesListForProfileId_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntitiesListForProfileId_pargs() throw();
  const std::string* profileId;
  const std::string* whereJson;
  const std::string* orderByJson;
  const int32_t* maxReturn;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result__isset {
  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result__isset;

class BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result {
 public:

  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result(const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result& operator=(const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result&);
  BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetSharedEntitiesListForProfileId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult__isset {
  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult__isset;

class BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult {
 public:


  virtual ~BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetSharedEntitiesListForProfileId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetListCount_args__isset {
  _BrainCloudService_Entity_GetListCount_args__isset() : whereJson(false), clientIndex(false) {}
  bool whereJson :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetListCount_args__isset;

class BrainCloudService_Entity_GetListCount_args {
 public:

  BrainCloudService_Entity_GetListCount_args(const BrainCloudService_Entity_GetListCount_args&);
  BrainCloudService_Entity_GetListCount_args& operator=(const BrainCloudService_Entity_GetListCount_args&);
  BrainCloudService_Entity_GetListCount_args() : whereJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetListCount_args() throw();
  std::string whereJson;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetListCount_args__isset __isset;

  void __set_whereJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetListCount_args & rhs) const
  {
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetListCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetListCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetListCount_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetListCount_pargs() throw();
  const std::string* whereJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetListCount_result__isset {
  _BrainCloudService_Entity_GetListCount_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetListCount_result__isset;

class BrainCloudService_Entity_GetListCount_result {
 public:

  BrainCloudService_Entity_GetListCount_result(const BrainCloudService_Entity_GetListCount_result&);
  BrainCloudService_Entity_GetListCount_result& operator=(const BrainCloudService_Entity_GetListCount_result&);
  BrainCloudService_Entity_GetListCount_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetListCount_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetListCount_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetListCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetListCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetListCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetListCount_presult__isset {
  _BrainCloudService_Entity_GetListCount_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetListCount_presult__isset;

class BrainCloudService_Entity_GetListCount_presult {
 public:


  virtual ~BrainCloudService_Entity_GetListCount_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetListCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetPage_args__isset {
  _BrainCloudService_Entity_GetPage_args__isset() : jsonContext(false), clientIndex(false) {}
  bool jsonContext :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetPage_args__isset;

class BrainCloudService_Entity_GetPage_args {
 public:

  BrainCloudService_Entity_GetPage_args(const BrainCloudService_Entity_GetPage_args&);
  BrainCloudService_Entity_GetPage_args& operator=(const BrainCloudService_Entity_GetPage_args&);
  BrainCloudService_Entity_GetPage_args() : jsonContext(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetPage_args() throw();
  std::string jsonContext;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetPage_args__isset __isset;

  void __set_jsonContext(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetPage_args & rhs) const
  {
    if (!(jsonContext == rhs.jsonContext))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetPage_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetPage_pargs() throw();
  const std::string* jsonContext;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetPage_result__isset {
  _BrainCloudService_Entity_GetPage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetPage_result__isset;

class BrainCloudService_Entity_GetPage_result {
 public:

  BrainCloudService_Entity_GetPage_result(const BrainCloudService_Entity_GetPage_result&);
  BrainCloudService_Entity_GetPage_result& operator=(const BrainCloudService_Entity_GetPage_result&);
  BrainCloudService_Entity_GetPage_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetPage_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetPage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetPage_presult__isset {
  _BrainCloudService_Entity_GetPage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetPage_presult__isset;

class BrainCloudService_Entity_GetPage_presult {
 public:


  virtual ~BrainCloudService_Entity_GetPage_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_GetPageOffset_args__isset {
  _BrainCloudService_Entity_GetPageOffset_args__isset() : context(false), pageOffset(false), clientIndex(false) {}
  bool context :1;
  bool pageOffset :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_GetPageOffset_args__isset;

class BrainCloudService_Entity_GetPageOffset_args {
 public:

  BrainCloudService_Entity_GetPageOffset_args(const BrainCloudService_Entity_GetPageOffset_args&);
  BrainCloudService_Entity_GetPageOffset_args& operator=(const BrainCloudService_Entity_GetPageOffset_args&);
  BrainCloudService_Entity_GetPageOffset_args() : context(), pageOffset(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_GetPageOffset_args() throw();
  std::string context;
  int32_t pageOffset;
  int32_t clientIndex;

  _BrainCloudService_Entity_GetPageOffset_args__isset __isset;

  void __set_context(const std::string& val);

  void __set_pageOffset(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_GetPageOffset_args & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    if (!(pageOffset == rhs.pageOffset))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetPageOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetPageOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_GetPageOffset_pargs {
 public:


  virtual ~BrainCloudService_Entity_GetPageOffset_pargs() throw();
  const std::string* context;
  const int32_t* pageOffset;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetPageOffset_result__isset {
  _BrainCloudService_Entity_GetPageOffset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetPageOffset_result__isset;

class BrainCloudService_Entity_GetPageOffset_result {
 public:

  BrainCloudService_Entity_GetPageOffset_result(const BrainCloudService_Entity_GetPageOffset_result&);
  BrainCloudService_Entity_GetPageOffset_result& operator=(const BrainCloudService_Entity_GetPageOffset_result&);
  BrainCloudService_Entity_GetPageOffset_result() : success() {
  }

  virtual ~BrainCloudService_Entity_GetPageOffset_result() throw();
  std::string success;

  _BrainCloudService_Entity_GetPageOffset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_GetPageOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_GetPageOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_GetPageOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_GetPageOffset_presult__isset {
  _BrainCloudService_Entity_GetPageOffset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_GetPageOffset_presult__isset;

class BrainCloudService_Entity_GetPageOffset_presult {
 public:


  virtual ~BrainCloudService_Entity_GetPageOffset_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_GetPageOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_IncrementUserEntityData_args__isset {
  _BrainCloudService_Entity_IncrementUserEntityData_args__isset() : entityId(false), jsonData(false), clientIndex(false) {}
  bool entityId :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_IncrementUserEntityData_args__isset;

class BrainCloudService_Entity_IncrementUserEntityData_args {
 public:

  BrainCloudService_Entity_IncrementUserEntityData_args(const BrainCloudService_Entity_IncrementUserEntityData_args&);
  BrainCloudService_Entity_IncrementUserEntityData_args& operator=(const BrainCloudService_Entity_IncrementUserEntityData_args&);
  BrainCloudService_Entity_IncrementUserEntityData_args() : entityId(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_IncrementUserEntityData_args() throw();
  std::string entityId;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Entity_IncrementUserEntityData_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_IncrementUserEntityData_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_IncrementUserEntityData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_IncrementUserEntityData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_IncrementUserEntityData_pargs {
 public:


  virtual ~BrainCloudService_Entity_IncrementUserEntityData_pargs() throw();
  const std::string* entityId;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_IncrementUserEntityData_result__isset {
  _BrainCloudService_Entity_IncrementUserEntityData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_IncrementUserEntityData_result__isset;

class BrainCloudService_Entity_IncrementUserEntityData_result {
 public:

  BrainCloudService_Entity_IncrementUserEntityData_result(const BrainCloudService_Entity_IncrementUserEntityData_result&);
  BrainCloudService_Entity_IncrementUserEntityData_result& operator=(const BrainCloudService_Entity_IncrementUserEntityData_result&);
  BrainCloudService_Entity_IncrementUserEntityData_result() : success() {
  }

  virtual ~BrainCloudService_Entity_IncrementUserEntityData_result() throw();
  std::string success;

  _BrainCloudService_Entity_IncrementUserEntityData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_IncrementUserEntityData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_IncrementUserEntityData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_IncrementUserEntityData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_IncrementUserEntityData_presult__isset {
  _BrainCloudService_Entity_IncrementUserEntityData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_IncrementUserEntityData_presult__isset;

class BrainCloudService_Entity_IncrementUserEntityData_presult {
 public:


  virtual ~BrainCloudService_Entity_IncrementUserEntityData_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_IncrementUserEntityData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Entity_IncrementSharedUserEntityData_args__isset {
  _BrainCloudService_Entity_IncrementSharedUserEntityData_args__isset() : entityId(false), targetProfileId(false), jsonData(false), clientIndex(false) {}
  bool entityId :1;
  bool targetProfileId :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Entity_IncrementSharedUserEntityData_args__isset;

class BrainCloudService_Entity_IncrementSharedUserEntityData_args {
 public:

  BrainCloudService_Entity_IncrementSharedUserEntityData_args(const BrainCloudService_Entity_IncrementSharedUserEntityData_args&);
  BrainCloudService_Entity_IncrementSharedUserEntityData_args& operator=(const BrainCloudService_Entity_IncrementSharedUserEntityData_args&);
  BrainCloudService_Entity_IncrementSharedUserEntityData_args() : entityId(), targetProfileId(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Entity_IncrementSharedUserEntityData_args() throw();
  std::string entityId;
  std::string targetProfileId;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Entity_IncrementSharedUserEntityData_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_targetProfileId(const std::string& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Entity_IncrementSharedUserEntityData_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(targetProfileId == rhs.targetProfileId))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_IncrementSharedUserEntityData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_IncrementSharedUserEntityData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Entity_IncrementSharedUserEntityData_pargs {
 public:


  virtual ~BrainCloudService_Entity_IncrementSharedUserEntityData_pargs() throw();
  const std::string* entityId;
  const std::string* targetProfileId;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_IncrementSharedUserEntityData_result__isset {
  _BrainCloudService_Entity_IncrementSharedUserEntityData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_IncrementSharedUserEntityData_result__isset;

class BrainCloudService_Entity_IncrementSharedUserEntityData_result {
 public:

  BrainCloudService_Entity_IncrementSharedUserEntityData_result(const BrainCloudService_Entity_IncrementSharedUserEntityData_result&);
  BrainCloudService_Entity_IncrementSharedUserEntityData_result& operator=(const BrainCloudService_Entity_IncrementSharedUserEntityData_result&);
  BrainCloudService_Entity_IncrementSharedUserEntityData_result() : success() {
  }

  virtual ~BrainCloudService_Entity_IncrementSharedUserEntityData_result() throw();
  std::string success;

  _BrainCloudService_Entity_IncrementSharedUserEntityData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Entity_IncrementSharedUserEntityData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Entity_IncrementSharedUserEntityData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Entity_IncrementSharedUserEntityData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Entity_IncrementSharedUserEntityData_presult__isset {
  _BrainCloudService_Entity_IncrementSharedUserEntityData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Entity_IncrementSharedUserEntityData_presult__isset;

class BrainCloudService_Entity_IncrementSharedUserEntityData_presult {
 public:


  virtual ~BrainCloudService_Entity_IncrementSharedUserEntityData_presult() throw();
  std::string* success;

  _BrainCloudService_Entity_IncrementSharedUserEntityData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Event_SendEvent_args__isset {
  _BrainCloudService_Event_SendEvent_args__isset() : toProfileId(false), eventType(false), jsonEventData(false), clientIndex(false) {}
  bool toProfileId :1;
  bool eventType :1;
  bool jsonEventData :1;
  bool clientIndex :1;
} _BrainCloudService_Event_SendEvent_args__isset;

class BrainCloudService_Event_SendEvent_args {
 public:

  BrainCloudService_Event_SendEvent_args(const BrainCloudService_Event_SendEvent_args&);
  BrainCloudService_Event_SendEvent_args& operator=(const BrainCloudService_Event_SendEvent_args&);
  BrainCloudService_Event_SendEvent_args() : toProfileId(), eventType(), jsonEventData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Event_SendEvent_args() throw();
  std::string toProfileId;
  std::string eventType;
  std::string jsonEventData;
  int32_t clientIndex;

  _BrainCloudService_Event_SendEvent_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_eventType(const std::string& val);

  void __set_jsonEventData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Event_SendEvent_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(jsonEventData == rhs.jsonEventData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_SendEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_SendEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Event_SendEvent_pargs {
 public:


  virtual ~BrainCloudService_Event_SendEvent_pargs() throw();
  const std::string* toProfileId;
  const std::string* eventType;
  const std::string* jsonEventData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_SendEvent_result__isset {
  _BrainCloudService_Event_SendEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_SendEvent_result__isset;

class BrainCloudService_Event_SendEvent_result {
 public:

  BrainCloudService_Event_SendEvent_result(const BrainCloudService_Event_SendEvent_result&);
  BrainCloudService_Event_SendEvent_result& operator=(const BrainCloudService_Event_SendEvent_result&);
  BrainCloudService_Event_SendEvent_result() : success() {
  }

  virtual ~BrainCloudService_Event_SendEvent_result() throw();
  std::string success;

  _BrainCloudService_Event_SendEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Event_SendEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_SendEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_SendEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_SendEvent_presult__isset {
  _BrainCloudService_Event_SendEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_SendEvent_presult__isset;

class BrainCloudService_Event_SendEvent_presult {
 public:


  virtual ~BrainCloudService_Event_SendEvent_presult() throw();
  std::string* success;

  _BrainCloudService_Event_SendEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Event_UpdateIncomingEventData_args__isset {
  _BrainCloudService_Event_UpdateIncomingEventData_args__isset() : evId(false), jsonEventData(false), clientIndex(false) {}
  bool evId :1;
  bool jsonEventData :1;
  bool clientIndex :1;
} _BrainCloudService_Event_UpdateIncomingEventData_args__isset;

class BrainCloudService_Event_UpdateIncomingEventData_args {
 public:

  BrainCloudService_Event_UpdateIncomingEventData_args(const BrainCloudService_Event_UpdateIncomingEventData_args&);
  BrainCloudService_Event_UpdateIncomingEventData_args& operator=(const BrainCloudService_Event_UpdateIncomingEventData_args&);
  BrainCloudService_Event_UpdateIncomingEventData_args() : evId(), jsonEventData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Event_UpdateIncomingEventData_args() throw();
  std::string evId;
  std::string jsonEventData;
  int32_t clientIndex;

  _BrainCloudService_Event_UpdateIncomingEventData_args__isset __isset;

  void __set_evId(const std::string& val);

  void __set_jsonEventData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Event_UpdateIncomingEventData_args & rhs) const
  {
    if (!(evId == rhs.evId))
      return false;
    if (!(jsonEventData == rhs.jsonEventData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_UpdateIncomingEventData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_UpdateIncomingEventData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Event_UpdateIncomingEventData_pargs {
 public:


  virtual ~BrainCloudService_Event_UpdateIncomingEventData_pargs() throw();
  const std::string* evId;
  const std::string* jsonEventData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_UpdateIncomingEventData_result__isset {
  _BrainCloudService_Event_UpdateIncomingEventData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_UpdateIncomingEventData_result__isset;

class BrainCloudService_Event_UpdateIncomingEventData_result {
 public:

  BrainCloudService_Event_UpdateIncomingEventData_result(const BrainCloudService_Event_UpdateIncomingEventData_result&);
  BrainCloudService_Event_UpdateIncomingEventData_result& operator=(const BrainCloudService_Event_UpdateIncomingEventData_result&);
  BrainCloudService_Event_UpdateIncomingEventData_result() : success() {
  }

  virtual ~BrainCloudService_Event_UpdateIncomingEventData_result() throw();
  std::string success;

  _BrainCloudService_Event_UpdateIncomingEventData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Event_UpdateIncomingEventData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_UpdateIncomingEventData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_UpdateIncomingEventData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_UpdateIncomingEventData_presult__isset {
  _BrainCloudService_Event_UpdateIncomingEventData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_UpdateIncomingEventData_presult__isset;

class BrainCloudService_Event_UpdateIncomingEventData_presult {
 public:


  virtual ~BrainCloudService_Event_UpdateIncomingEventData_presult() throw();
  std::string* success;

  _BrainCloudService_Event_UpdateIncomingEventData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Event_DeleteIncomingEvent_args__isset {
  _BrainCloudService_Event_DeleteIncomingEvent_args__isset() : evId(false), clientIndex(false) {}
  bool evId :1;
  bool clientIndex :1;
} _BrainCloudService_Event_DeleteIncomingEvent_args__isset;

class BrainCloudService_Event_DeleteIncomingEvent_args {
 public:

  BrainCloudService_Event_DeleteIncomingEvent_args(const BrainCloudService_Event_DeleteIncomingEvent_args&);
  BrainCloudService_Event_DeleteIncomingEvent_args& operator=(const BrainCloudService_Event_DeleteIncomingEvent_args&);
  BrainCloudService_Event_DeleteIncomingEvent_args() : evId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Event_DeleteIncomingEvent_args() throw();
  std::string evId;
  int32_t clientIndex;

  _BrainCloudService_Event_DeleteIncomingEvent_args__isset __isset;

  void __set_evId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Event_DeleteIncomingEvent_args & rhs) const
  {
    if (!(evId == rhs.evId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_DeleteIncomingEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_DeleteIncomingEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Event_DeleteIncomingEvent_pargs {
 public:


  virtual ~BrainCloudService_Event_DeleteIncomingEvent_pargs() throw();
  const std::string* evId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_DeleteIncomingEvent_result__isset {
  _BrainCloudService_Event_DeleteIncomingEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_DeleteIncomingEvent_result__isset;

class BrainCloudService_Event_DeleteIncomingEvent_result {
 public:

  BrainCloudService_Event_DeleteIncomingEvent_result(const BrainCloudService_Event_DeleteIncomingEvent_result&);
  BrainCloudService_Event_DeleteIncomingEvent_result& operator=(const BrainCloudService_Event_DeleteIncomingEvent_result&);
  BrainCloudService_Event_DeleteIncomingEvent_result() : success() {
  }

  virtual ~BrainCloudService_Event_DeleteIncomingEvent_result() throw();
  std::string success;

  _BrainCloudService_Event_DeleteIncomingEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Event_DeleteIncomingEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_DeleteIncomingEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_DeleteIncomingEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_DeleteIncomingEvent_presult__isset {
  _BrainCloudService_Event_DeleteIncomingEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_DeleteIncomingEvent_presult__isset;

class BrainCloudService_Event_DeleteIncomingEvent_presult {
 public:


  virtual ~BrainCloudService_Event_DeleteIncomingEvent_presult() throw();
  std::string* success;

  _BrainCloudService_Event_DeleteIncomingEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Event_GetEvents_args__isset {
  _BrainCloudService_Event_GetEvents_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Event_GetEvents_args__isset;

class BrainCloudService_Event_GetEvents_args {
 public:

  BrainCloudService_Event_GetEvents_args(const BrainCloudService_Event_GetEvents_args&);
  BrainCloudService_Event_GetEvents_args& operator=(const BrainCloudService_Event_GetEvents_args&);
  BrainCloudService_Event_GetEvents_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Event_GetEvents_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Event_GetEvents_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Event_GetEvents_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_GetEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_GetEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Event_GetEvents_pargs {
 public:


  virtual ~BrainCloudService_Event_GetEvents_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_GetEvents_result__isset {
  _BrainCloudService_Event_GetEvents_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_GetEvents_result__isset;

class BrainCloudService_Event_GetEvents_result {
 public:

  BrainCloudService_Event_GetEvents_result(const BrainCloudService_Event_GetEvents_result&);
  BrainCloudService_Event_GetEvents_result& operator=(const BrainCloudService_Event_GetEvents_result&);
  BrainCloudService_Event_GetEvents_result() : success() {
  }

  virtual ~BrainCloudService_Event_GetEvents_result() throw();
  std::string success;

  _BrainCloudService_Event_GetEvents_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Event_GetEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Event_GetEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Event_GetEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Event_GetEvents_presult__isset {
  _BrainCloudService_Event_GetEvents_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Event_GetEvents_presult__isset;

class BrainCloudService_Event_GetEvents_presult {
 public:


  virtual ~BrainCloudService_Event_GetEvents_presult() throw();
  std::string* success;

  _BrainCloudService_Event_GetEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_UploadFile_args__isset {
  _BrainCloudService_File_UploadFile_args__isset() : cloudPath(false), cloudFilename(false), shareable(false), replaceIfExists(false), localPath(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFilename :1;
  bool shareable :1;
  bool replaceIfExists :1;
  bool localPath :1;
  bool clientIndex :1;
} _BrainCloudService_File_UploadFile_args__isset;

class BrainCloudService_File_UploadFile_args {
 public:

  BrainCloudService_File_UploadFile_args(const BrainCloudService_File_UploadFile_args&);
  BrainCloudService_File_UploadFile_args& operator=(const BrainCloudService_File_UploadFile_args&);
  BrainCloudService_File_UploadFile_args() : cloudPath(), cloudFilename(), shareable(0), replaceIfExists(0), localPath(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_UploadFile_args() throw();
  std::string cloudPath;
  std::string cloudFilename;
  bool shareable;
  bool replaceIfExists;
  std::string localPath;
  int32_t clientIndex;

  _BrainCloudService_File_UploadFile_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFilename(const std::string& val);

  void __set_shareable(const bool val);

  void __set_replaceIfExists(const bool val);

  void __set_localPath(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_UploadFile_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFilename == rhs.cloudFilename))
      return false;
    if (!(shareable == rhs.shareable))
      return false;
    if (!(replaceIfExists == rhs.replaceIfExists))
      return false;
    if (!(localPath == rhs.localPath))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_UploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_UploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_UploadFile_pargs {
 public:


  virtual ~BrainCloudService_File_UploadFile_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFilename;
  const bool* shareable;
  const bool* replaceIfExists;
  const std::string* localPath;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_UploadFile_result__isset {
  _BrainCloudService_File_UploadFile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_UploadFile_result__isset;

class BrainCloudService_File_UploadFile_result {
 public:

  BrainCloudService_File_UploadFile_result(const BrainCloudService_File_UploadFile_result&);
  BrainCloudService_File_UploadFile_result& operator=(const BrainCloudService_File_UploadFile_result&);
  BrainCloudService_File_UploadFile_result() : success() {
  }

  virtual ~BrainCloudService_File_UploadFile_result() throw();
  std::string success;

  _BrainCloudService_File_UploadFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_UploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_UploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_UploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_UploadFile_presult__isset {
  _BrainCloudService_File_UploadFile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_UploadFile_presult__isset;

class BrainCloudService_File_UploadFile_presult {
 public:


  virtual ~BrainCloudService_File_UploadFile_presult() throw();
  std::string* success;

  _BrainCloudService_File_UploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_CancelUpload_args__isset {
  _BrainCloudService_File_CancelUpload_args__isset() : uploadId(false), clientIndex(false) {}
  bool uploadId :1;
  bool clientIndex :1;
} _BrainCloudService_File_CancelUpload_args__isset;

class BrainCloudService_File_CancelUpload_args {
 public:

  BrainCloudService_File_CancelUpload_args(const BrainCloudService_File_CancelUpload_args&);
  BrainCloudService_File_CancelUpload_args& operator=(const BrainCloudService_File_CancelUpload_args&);
  BrainCloudService_File_CancelUpload_args() : uploadId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_CancelUpload_args() throw();
  std::string uploadId;
  int32_t clientIndex;

  _BrainCloudService_File_CancelUpload_args__isset __isset;

  void __set_uploadId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_CancelUpload_args & rhs) const
  {
    if (!(uploadId == rhs.uploadId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_CancelUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_CancelUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_CancelUpload_pargs {
 public:


  virtual ~BrainCloudService_File_CancelUpload_pargs() throw();
  const std::string* uploadId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_CancelUpload_result {
 public:

  BrainCloudService_File_CancelUpload_result(const BrainCloudService_File_CancelUpload_result&);
  BrainCloudService_File_CancelUpload_result& operator=(const BrainCloudService_File_CancelUpload_result&);
  BrainCloudService_File_CancelUpload_result() {
  }

  virtual ~BrainCloudService_File_CancelUpload_result() throw();

  bool operator == (const BrainCloudService_File_CancelUpload_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BrainCloudService_File_CancelUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_CancelUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_CancelUpload_presult {
 public:


  virtual ~BrainCloudService_File_CancelUpload_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_GetUploadProgress_args__isset {
  _BrainCloudService_File_GetUploadProgress_args__isset() : uploadId(false), clientIndex(false) {}
  bool uploadId :1;
  bool clientIndex :1;
} _BrainCloudService_File_GetUploadProgress_args__isset;

class BrainCloudService_File_GetUploadProgress_args {
 public:

  BrainCloudService_File_GetUploadProgress_args(const BrainCloudService_File_GetUploadProgress_args&);
  BrainCloudService_File_GetUploadProgress_args& operator=(const BrainCloudService_File_GetUploadProgress_args&);
  BrainCloudService_File_GetUploadProgress_args() : uploadId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_GetUploadProgress_args() throw();
  std::string uploadId;
  int32_t clientIndex;

  _BrainCloudService_File_GetUploadProgress_args__isset __isset;

  void __set_uploadId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_GetUploadProgress_args & rhs) const
  {
    if (!(uploadId == rhs.uploadId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadProgress_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadProgress_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_GetUploadProgress_pargs {
 public:


  virtual ~BrainCloudService_File_GetUploadProgress_pargs() throw();
  const std::string* uploadId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadProgress_result__isset {
  _BrainCloudService_File_GetUploadProgress_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadProgress_result__isset;

class BrainCloudService_File_GetUploadProgress_result {
 public:

  BrainCloudService_File_GetUploadProgress_result(const BrainCloudService_File_GetUploadProgress_result&);
  BrainCloudService_File_GetUploadProgress_result& operator=(const BrainCloudService_File_GetUploadProgress_result&);
  BrainCloudService_File_GetUploadProgress_result() : success(0) {
  }

  virtual ~BrainCloudService_File_GetUploadProgress_result() throw();
  double success;

  _BrainCloudService_File_GetUploadProgress_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const BrainCloudService_File_GetUploadProgress_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadProgress_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadProgress_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadProgress_presult__isset {
  _BrainCloudService_File_GetUploadProgress_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadProgress_presult__isset;

class BrainCloudService_File_GetUploadProgress_presult {
 public:


  virtual ~BrainCloudService_File_GetUploadProgress_presult() throw();
  double* success;

  _BrainCloudService_File_GetUploadProgress_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_GetUploadBytesTransferred_args__isset {
  _BrainCloudService_File_GetUploadBytesTransferred_args__isset() : uploadId(false), clientIndex(false) {}
  bool uploadId :1;
  bool clientIndex :1;
} _BrainCloudService_File_GetUploadBytesTransferred_args__isset;

class BrainCloudService_File_GetUploadBytesTransferred_args {
 public:

  BrainCloudService_File_GetUploadBytesTransferred_args(const BrainCloudService_File_GetUploadBytesTransferred_args&);
  BrainCloudService_File_GetUploadBytesTransferred_args& operator=(const BrainCloudService_File_GetUploadBytesTransferred_args&);
  BrainCloudService_File_GetUploadBytesTransferred_args() : uploadId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_GetUploadBytesTransferred_args() throw();
  std::string uploadId;
  int32_t clientIndex;

  _BrainCloudService_File_GetUploadBytesTransferred_args__isset __isset;

  void __set_uploadId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_GetUploadBytesTransferred_args & rhs) const
  {
    if (!(uploadId == rhs.uploadId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadBytesTransferred_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadBytesTransferred_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_GetUploadBytesTransferred_pargs {
 public:


  virtual ~BrainCloudService_File_GetUploadBytesTransferred_pargs() throw();
  const std::string* uploadId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadBytesTransferred_result__isset {
  _BrainCloudService_File_GetUploadBytesTransferred_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadBytesTransferred_result__isset;

class BrainCloudService_File_GetUploadBytesTransferred_result {
 public:

  BrainCloudService_File_GetUploadBytesTransferred_result(const BrainCloudService_File_GetUploadBytesTransferred_result&);
  BrainCloudService_File_GetUploadBytesTransferred_result& operator=(const BrainCloudService_File_GetUploadBytesTransferred_result&);
  BrainCloudService_File_GetUploadBytesTransferred_result() : success(0) {
  }

  virtual ~BrainCloudService_File_GetUploadBytesTransferred_result() throw();
  int64_t success;

  _BrainCloudService_File_GetUploadBytesTransferred_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BrainCloudService_File_GetUploadBytesTransferred_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadBytesTransferred_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadBytesTransferred_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadBytesTransferred_presult__isset {
  _BrainCloudService_File_GetUploadBytesTransferred_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadBytesTransferred_presult__isset;

class BrainCloudService_File_GetUploadBytesTransferred_presult {
 public:


  virtual ~BrainCloudService_File_GetUploadBytesTransferred_presult() throw();
  int64_t* success;

  _BrainCloudService_File_GetUploadBytesTransferred_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_GetUploadTotalBytesToTransfer_args__isset {
  _BrainCloudService_File_GetUploadTotalBytesToTransfer_args__isset() : uploadId(false), clientIndex(false) {}
  bool uploadId :1;
  bool clientIndex :1;
} _BrainCloudService_File_GetUploadTotalBytesToTransfer_args__isset;

class BrainCloudService_File_GetUploadTotalBytesToTransfer_args {
 public:

  BrainCloudService_File_GetUploadTotalBytesToTransfer_args(const BrainCloudService_File_GetUploadTotalBytesToTransfer_args&);
  BrainCloudService_File_GetUploadTotalBytesToTransfer_args& operator=(const BrainCloudService_File_GetUploadTotalBytesToTransfer_args&);
  BrainCloudService_File_GetUploadTotalBytesToTransfer_args() : uploadId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_GetUploadTotalBytesToTransfer_args() throw();
  std::string uploadId;
  int32_t clientIndex;

  _BrainCloudService_File_GetUploadTotalBytesToTransfer_args__isset __isset;

  void __set_uploadId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_GetUploadTotalBytesToTransfer_args & rhs) const
  {
    if (!(uploadId == rhs.uploadId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadTotalBytesToTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadTotalBytesToTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_GetUploadTotalBytesToTransfer_pargs {
 public:


  virtual ~BrainCloudService_File_GetUploadTotalBytesToTransfer_pargs() throw();
  const std::string* uploadId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadTotalBytesToTransfer_result__isset {
  _BrainCloudService_File_GetUploadTotalBytesToTransfer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadTotalBytesToTransfer_result__isset;

class BrainCloudService_File_GetUploadTotalBytesToTransfer_result {
 public:

  BrainCloudService_File_GetUploadTotalBytesToTransfer_result(const BrainCloudService_File_GetUploadTotalBytesToTransfer_result&);
  BrainCloudService_File_GetUploadTotalBytesToTransfer_result& operator=(const BrainCloudService_File_GetUploadTotalBytesToTransfer_result&);
  BrainCloudService_File_GetUploadTotalBytesToTransfer_result() : success(0) {
  }

  virtual ~BrainCloudService_File_GetUploadTotalBytesToTransfer_result() throw();
  int64_t success;

  _BrainCloudService_File_GetUploadTotalBytesToTransfer_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const BrainCloudService_File_GetUploadTotalBytesToTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetUploadTotalBytesToTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetUploadTotalBytesToTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetUploadTotalBytesToTransfer_presult__isset {
  _BrainCloudService_File_GetUploadTotalBytesToTransfer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetUploadTotalBytesToTransfer_presult__isset;

class BrainCloudService_File_GetUploadTotalBytesToTransfer_presult {
 public:


  virtual ~BrainCloudService_File_GetUploadTotalBytesToTransfer_presult() throw();
  int64_t* success;

  _BrainCloudService_File_GetUploadTotalBytesToTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_ListUserFiles_SFO_args__isset {
  _BrainCloudService_File_ListUserFiles_SFO_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_File_ListUserFiles_SFO_args__isset;

class BrainCloudService_File_ListUserFiles_SFO_args {
 public:

  BrainCloudService_File_ListUserFiles_SFO_args(const BrainCloudService_File_ListUserFiles_SFO_args&);
  BrainCloudService_File_ListUserFiles_SFO_args& operator=(const BrainCloudService_File_ListUserFiles_SFO_args&);
  BrainCloudService_File_ListUserFiles_SFO_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_File_ListUserFiles_SFO_args() throw();
  int32_t clientIndex;

  _BrainCloudService_File_ListUserFiles_SFO_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_ListUserFiles_SFO_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_ListUserFiles_SFO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_ListUserFiles_SFO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_ListUserFiles_SFO_pargs {
 public:


  virtual ~BrainCloudService_File_ListUserFiles_SFO_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_ListUserFiles_SFO_result__isset {
  _BrainCloudService_File_ListUserFiles_SFO_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_ListUserFiles_SFO_result__isset;

class BrainCloudService_File_ListUserFiles_SFO_result {
 public:

  BrainCloudService_File_ListUserFiles_SFO_result(const BrainCloudService_File_ListUserFiles_SFO_result&);
  BrainCloudService_File_ListUserFiles_SFO_result& operator=(const BrainCloudService_File_ListUserFiles_SFO_result&);
  BrainCloudService_File_ListUserFiles_SFO_result() : success() {
  }

  virtual ~BrainCloudService_File_ListUserFiles_SFO_result() throw();
  std::string success;

  _BrainCloudService_File_ListUserFiles_SFO_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_ListUserFiles_SFO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_ListUserFiles_SFO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_ListUserFiles_SFO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_ListUserFiles_SFO_presult__isset {
  _BrainCloudService_File_ListUserFiles_SFO_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_ListUserFiles_SFO_presult__isset;

class BrainCloudService_File_ListUserFiles_SFO_presult {
 public:


  virtual ~BrainCloudService_File_ListUserFiles_SFO_presult() throw();
  std::string* success;

  _BrainCloudService_File_ListUserFiles_SFO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_ListUserFiles_SNSFO_args__isset {
  _BrainCloudService_File_ListUserFiles_SNSFO_args__isset() : cloudPath(false), recurse(false), clientIndex(false) {}
  bool cloudPath :1;
  bool recurse :1;
  bool clientIndex :1;
} _BrainCloudService_File_ListUserFiles_SNSFO_args__isset;

class BrainCloudService_File_ListUserFiles_SNSFO_args {
 public:

  BrainCloudService_File_ListUserFiles_SNSFO_args(const BrainCloudService_File_ListUserFiles_SNSFO_args&);
  BrainCloudService_File_ListUserFiles_SNSFO_args& operator=(const BrainCloudService_File_ListUserFiles_SNSFO_args&);
  BrainCloudService_File_ListUserFiles_SNSFO_args() : cloudPath(), recurse(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_ListUserFiles_SNSFO_args() throw();
  std::string cloudPath;
  bool recurse;
  int32_t clientIndex;

  _BrainCloudService_File_ListUserFiles_SNSFO_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_recurse(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_ListUserFiles_SNSFO_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(recurse == rhs.recurse))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_ListUserFiles_SNSFO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_ListUserFiles_SNSFO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_ListUserFiles_SNSFO_pargs {
 public:


  virtual ~BrainCloudService_File_ListUserFiles_SNSFO_pargs() throw();
  const std::string* cloudPath;
  const bool* recurse;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_ListUserFiles_SNSFO_result__isset {
  _BrainCloudService_File_ListUserFiles_SNSFO_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_ListUserFiles_SNSFO_result__isset;

class BrainCloudService_File_ListUserFiles_SNSFO_result {
 public:

  BrainCloudService_File_ListUserFiles_SNSFO_result(const BrainCloudService_File_ListUserFiles_SNSFO_result&);
  BrainCloudService_File_ListUserFiles_SNSFO_result& operator=(const BrainCloudService_File_ListUserFiles_SNSFO_result&);
  BrainCloudService_File_ListUserFiles_SNSFO_result() : success() {
  }

  virtual ~BrainCloudService_File_ListUserFiles_SNSFO_result() throw();
  std::string success;

  _BrainCloudService_File_ListUserFiles_SNSFO_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_ListUserFiles_SNSFO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_ListUserFiles_SNSFO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_ListUserFiles_SNSFO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_ListUserFiles_SNSFO_presult__isset {
  _BrainCloudService_File_ListUserFiles_SNSFO_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_ListUserFiles_SNSFO_presult__isset;

class BrainCloudService_File_ListUserFiles_SNSFO_presult {
 public:


  virtual ~BrainCloudService_File_ListUserFiles_SNSFO_presult() throw();
  std::string* success;

  _BrainCloudService_File_ListUserFiles_SNSFO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_DeleteUserFile_args__isset {
  _BrainCloudService_File_DeleteUserFile_args__isset() : cloudPath(false), cloudFileName(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFileName :1;
  bool clientIndex :1;
} _BrainCloudService_File_DeleteUserFile_args__isset;

class BrainCloudService_File_DeleteUserFile_args {
 public:

  BrainCloudService_File_DeleteUserFile_args(const BrainCloudService_File_DeleteUserFile_args&);
  BrainCloudService_File_DeleteUserFile_args& operator=(const BrainCloudService_File_DeleteUserFile_args&);
  BrainCloudService_File_DeleteUserFile_args() : cloudPath(), cloudFileName(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_DeleteUserFile_args() throw();
  std::string cloudPath;
  std::string cloudFileName;
  int32_t clientIndex;

  _BrainCloudService_File_DeleteUserFile_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFileName(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_DeleteUserFile_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFileName == rhs.cloudFileName))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DeleteUserFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DeleteUserFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_DeleteUserFile_pargs {
 public:


  virtual ~BrainCloudService_File_DeleteUserFile_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFileName;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DeleteUserFile_result__isset {
  _BrainCloudService_File_DeleteUserFile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DeleteUserFile_result__isset;

class BrainCloudService_File_DeleteUserFile_result {
 public:

  BrainCloudService_File_DeleteUserFile_result(const BrainCloudService_File_DeleteUserFile_result&);
  BrainCloudService_File_DeleteUserFile_result& operator=(const BrainCloudService_File_DeleteUserFile_result&);
  BrainCloudService_File_DeleteUserFile_result() : success() {
  }

  virtual ~BrainCloudService_File_DeleteUserFile_result() throw();
  std::string success;

  _BrainCloudService_File_DeleteUserFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_DeleteUserFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DeleteUserFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DeleteUserFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DeleteUserFile_presult__isset {
  _BrainCloudService_File_DeleteUserFile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DeleteUserFile_presult__isset;

class BrainCloudService_File_DeleteUserFile_presult {
 public:


  virtual ~BrainCloudService_File_DeleteUserFile_presult() throw();
  std::string* success;

  _BrainCloudService_File_DeleteUserFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_DeleteUserFiles_args__isset {
  _BrainCloudService_File_DeleteUserFiles_args__isset() : cloudPath(false), recurse(false), clientIndex(false) {}
  bool cloudPath :1;
  bool recurse :1;
  bool clientIndex :1;
} _BrainCloudService_File_DeleteUserFiles_args__isset;

class BrainCloudService_File_DeleteUserFiles_args {
 public:

  BrainCloudService_File_DeleteUserFiles_args(const BrainCloudService_File_DeleteUserFiles_args&);
  BrainCloudService_File_DeleteUserFiles_args& operator=(const BrainCloudService_File_DeleteUserFiles_args&);
  BrainCloudService_File_DeleteUserFiles_args() : cloudPath(), recurse(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_DeleteUserFiles_args() throw();
  std::string cloudPath;
  bool recurse;
  int32_t clientIndex;

  _BrainCloudService_File_DeleteUserFiles_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_recurse(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_DeleteUserFiles_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(recurse == rhs.recurse))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DeleteUserFiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DeleteUserFiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_DeleteUserFiles_pargs {
 public:


  virtual ~BrainCloudService_File_DeleteUserFiles_pargs() throw();
  const std::string* cloudPath;
  const bool* recurse;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DeleteUserFiles_result__isset {
  _BrainCloudService_File_DeleteUserFiles_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DeleteUserFiles_result__isset;

class BrainCloudService_File_DeleteUserFiles_result {
 public:

  BrainCloudService_File_DeleteUserFiles_result(const BrainCloudService_File_DeleteUserFiles_result&);
  BrainCloudService_File_DeleteUserFiles_result& operator=(const BrainCloudService_File_DeleteUserFiles_result&);
  BrainCloudService_File_DeleteUserFiles_result() : success() {
  }

  virtual ~BrainCloudService_File_DeleteUserFiles_result() throw();
  std::string success;

  _BrainCloudService_File_DeleteUserFiles_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_DeleteUserFiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DeleteUserFiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DeleteUserFiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DeleteUserFiles_presult__isset {
  _BrainCloudService_File_DeleteUserFiles_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DeleteUserFiles_presult__isset;

class BrainCloudService_File_DeleteUserFiles_presult {
 public:


  virtual ~BrainCloudService_File_DeleteUserFiles_presult() throw();
  std::string* success;

  _BrainCloudService_File_DeleteUserFiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_GetCDNUrl_args__isset {
  _BrainCloudService_File_GetCDNUrl_args__isset() : cloudPath(false), cloudFilename(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFilename :1;
  bool clientIndex :1;
} _BrainCloudService_File_GetCDNUrl_args__isset;

class BrainCloudService_File_GetCDNUrl_args {
 public:

  BrainCloudService_File_GetCDNUrl_args(const BrainCloudService_File_GetCDNUrl_args&);
  BrainCloudService_File_GetCDNUrl_args& operator=(const BrainCloudService_File_GetCDNUrl_args&);
  BrainCloudService_File_GetCDNUrl_args() : cloudPath(), cloudFilename(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_GetCDNUrl_args() throw();
  std::string cloudPath;
  std::string cloudFilename;
  int32_t clientIndex;

  _BrainCloudService_File_GetCDNUrl_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFilename(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_GetCDNUrl_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFilename == rhs.cloudFilename))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetCDNUrl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetCDNUrl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_GetCDNUrl_pargs {
 public:


  virtual ~BrainCloudService_File_GetCDNUrl_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFilename;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetCDNUrl_result__isset {
  _BrainCloudService_File_GetCDNUrl_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetCDNUrl_result__isset;

class BrainCloudService_File_GetCDNUrl_result {
 public:

  BrainCloudService_File_GetCDNUrl_result(const BrainCloudService_File_GetCDNUrl_result&);
  BrainCloudService_File_GetCDNUrl_result& operator=(const BrainCloudService_File_GetCDNUrl_result&);
  BrainCloudService_File_GetCDNUrl_result() : success() {
  }

  virtual ~BrainCloudService_File_GetCDNUrl_result() throw();
  std::string success;

  _BrainCloudService_File_GetCDNUrl_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_GetCDNUrl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetCDNUrl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetCDNUrl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetCDNUrl_presult__isset {
  _BrainCloudService_File_GetCDNUrl_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetCDNUrl_presult__isset;

class BrainCloudService_File_GetCDNUrl_presult {
 public:


  virtual ~BrainCloudService_File_GetCDNUrl_presult() throw();
  std::string* success;

  _BrainCloudService_File_GetCDNUrl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ReadFriendEntity_args__isset {
  _BrainCloudService_Friend_ReadFriendEntity_args__isset() : entityId(false), friendId(false), clientIndex(false) {}
  bool entityId :1;
  bool friendId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_ReadFriendEntity_args__isset;

class BrainCloudService_Friend_ReadFriendEntity_args {
 public:

  BrainCloudService_Friend_ReadFriendEntity_args(const BrainCloudService_Friend_ReadFriendEntity_args&);
  BrainCloudService_Friend_ReadFriendEntity_args& operator=(const BrainCloudService_Friend_ReadFriendEntity_args&);
  BrainCloudService_Friend_ReadFriendEntity_args() : entityId(), friendId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ReadFriendEntity_args() throw();
  std::string entityId;
  std::string friendId;
  int32_t clientIndex;

  _BrainCloudService_Friend_ReadFriendEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_friendId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ReadFriendEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(friendId == rhs.friendId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ReadFriendEntity_pargs {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendEntity_pargs() throw();
  const std::string* entityId;
  const std::string* friendId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendEntity_result__isset {
  _BrainCloudService_Friend_ReadFriendEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendEntity_result__isset;

class BrainCloudService_Friend_ReadFriendEntity_result {
 public:

  BrainCloudService_Friend_ReadFriendEntity_result(const BrainCloudService_Friend_ReadFriendEntity_result&);
  BrainCloudService_Friend_ReadFriendEntity_result& operator=(const BrainCloudService_Friend_ReadFriendEntity_result&);
  BrainCloudService_Friend_ReadFriendEntity_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ReadFriendEntity_result() throw();
  std::string success;

  _BrainCloudService_Friend_ReadFriendEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ReadFriendEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendEntity_presult__isset {
  _BrainCloudService_Friend_ReadFriendEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendEntity_presult__isset;

class BrainCloudService_Friend_ReadFriendEntity_presult {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ReadFriendEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ReadFriendsEntities_args__isset {
  _BrainCloudService_Friend_ReadFriendsEntities_args__isset() : entityType(false), clientIndex(false) {}
  bool entityType :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_ReadFriendsEntities_args__isset;

class BrainCloudService_Friend_ReadFriendsEntities_args {
 public:

  BrainCloudService_Friend_ReadFriendsEntities_args(const BrainCloudService_Friend_ReadFriendsEntities_args&);
  BrainCloudService_Friend_ReadFriendsEntities_args& operator=(const BrainCloudService_Friend_ReadFriendsEntities_args&);
  BrainCloudService_Friend_ReadFriendsEntities_args() : entityType(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ReadFriendsEntities_args() throw();
  std::string entityType;
  int32_t clientIndex;

  _BrainCloudService_Friend_ReadFriendsEntities_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ReadFriendsEntities_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendsEntities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendsEntities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ReadFriendsEntities_pargs {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendsEntities_pargs() throw();
  const std::string* entityType;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendsEntities_result__isset {
  _BrainCloudService_Friend_ReadFriendsEntities_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendsEntities_result__isset;

class BrainCloudService_Friend_ReadFriendsEntities_result {
 public:

  BrainCloudService_Friend_ReadFriendsEntities_result(const BrainCloudService_Friend_ReadFriendsEntities_result&);
  BrainCloudService_Friend_ReadFriendsEntities_result& operator=(const BrainCloudService_Friend_ReadFriendsEntities_result&);
  BrainCloudService_Friend_ReadFriendsEntities_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ReadFriendsEntities_result() throw();
  std::string success;

  _BrainCloudService_Friend_ReadFriendsEntities_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ReadFriendsEntities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendsEntities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendsEntities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendsEntities_presult__isset {
  _BrainCloudService_Friend_ReadFriendsEntities_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendsEntities_presult__isset;

class BrainCloudService_Friend_ReadFriendsEntities_presult {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendsEntities_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ReadFriendsEntities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ReadFriendUserState_args__isset {
  _BrainCloudService_Friend_ReadFriendUserState_args__isset() : friendId(false), clientIndex(false) {}
  bool friendId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_ReadFriendUserState_args__isset;

class BrainCloudService_Friend_ReadFriendUserState_args {
 public:

  BrainCloudService_Friend_ReadFriendUserState_args(const BrainCloudService_Friend_ReadFriendUserState_args&);
  BrainCloudService_Friend_ReadFriendUserState_args& operator=(const BrainCloudService_Friend_ReadFriendUserState_args&);
  BrainCloudService_Friend_ReadFriendUserState_args() : friendId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ReadFriendUserState_args() throw();
  std::string friendId;
  int32_t clientIndex;

  _BrainCloudService_Friend_ReadFriendUserState_args__isset __isset;

  void __set_friendId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ReadFriendUserState_args & rhs) const
  {
    if (!(friendId == rhs.friendId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendUserState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendUserState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ReadFriendUserState_pargs {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendUserState_pargs() throw();
  const std::string* friendId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendUserState_result__isset {
  _BrainCloudService_Friend_ReadFriendUserState_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendUserState_result__isset;

class BrainCloudService_Friend_ReadFriendUserState_result {
 public:

  BrainCloudService_Friend_ReadFriendUserState_result(const BrainCloudService_Friend_ReadFriendUserState_result&);
  BrainCloudService_Friend_ReadFriendUserState_result& operator=(const BrainCloudService_Friend_ReadFriendUserState_result&);
  BrainCloudService_Friend_ReadFriendUserState_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ReadFriendUserState_result() throw();
  std::string success;

  _BrainCloudService_Friend_ReadFriendUserState_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ReadFriendUserState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ReadFriendUserState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ReadFriendUserState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ReadFriendUserState_presult__isset {
  _BrainCloudService_Friend_ReadFriendUserState_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ReadFriendUserState_presult__isset;

class BrainCloudService_Friend_ReadFriendUserState_presult {
 public:


  virtual ~BrainCloudService_Friend_ReadFriendUserState_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ReadFriendUserState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileId_args__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileId_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileId_args__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileId_args {
 public:

  BrainCloudService_Friend_GetSummaryDataForProfileId_args(const BrainCloudService_Friend_GetSummaryDataForProfileId_args&);
  BrainCloudService_Friend_GetSummaryDataForProfileId_args& operator=(const BrainCloudService_Friend_GetSummaryDataForProfileId_args&);
  BrainCloudService_Friend_GetSummaryDataForProfileId_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileId_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_Friend_GetSummaryDataForProfileId_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForProfileId_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForProfileId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForProfileId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_GetSummaryDataForProfileId_pargs {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileId_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileId_result__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileId_result__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileId_result {
 public:

  BrainCloudService_Friend_GetSummaryDataForProfileId_result(const BrainCloudService_Friend_GetSummaryDataForProfileId_result&);
  BrainCloudService_Friend_GetSummaryDataForProfileId_result& operator=(const BrainCloudService_Friend_GetSummaryDataForProfileId_result&);
  BrainCloudService_Friend_GetSummaryDataForProfileId_result() : success() {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileId_result() throw();
  std::string success;

  _BrainCloudService_Friend_GetSummaryDataForProfileId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForProfileId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForProfileId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForProfileId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileId_presult__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileId_presult__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileId_presult {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileId_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_GetSummaryDataForProfileId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileIds_args__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileIds_args__isset() : playerIds(false), clientIndex(false) {}
  bool playerIds :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileIds_args__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileIds_args {
 public:

  BrainCloudService_Friend_GetSummaryDataForProfileIds_args(const BrainCloudService_Friend_GetSummaryDataForProfileIds_args&);
  BrainCloudService_Friend_GetSummaryDataForProfileIds_args& operator=(const BrainCloudService_Friend_GetSummaryDataForProfileIds_args&);
  BrainCloudService_Friend_GetSummaryDataForProfileIds_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileIds_args() throw();
  std::vector<std::string>  playerIds;
  int32_t clientIndex;

  _BrainCloudService_Friend_GetSummaryDataForProfileIds_args__isset __isset;

  void __set_playerIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForProfileIds_args & rhs) const
  {
    if (!(playerIds == rhs.playerIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForProfileIds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForProfileIds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_GetSummaryDataForProfileIds_pargs {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileIds_pargs() throw();
  const std::vector<std::string> * playerIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileIds_result__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileIds_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileIds_result__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileIds_result {
 public:

  BrainCloudService_Friend_GetSummaryDataForProfileIds_result(const BrainCloudService_Friend_GetSummaryDataForProfileIds_result&);
  BrainCloudService_Friend_GetSummaryDataForProfileIds_result& operator=(const BrainCloudService_Friend_GetSummaryDataForProfileIds_result&);
  BrainCloudService_Friend_GetSummaryDataForProfileIds_result() : success() {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileIds_result() throw();
  std::string success;

  _BrainCloudService_Friend_GetSummaryDataForProfileIds_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForProfileIds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForProfileIds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForProfileIds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForProfileIds_presult__isset {
  _BrainCloudService_Friend_GetSummaryDataForProfileIds_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForProfileIds_presult__isset;

class BrainCloudService_Friend_GetSummaryDataForProfileIds_presult {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForProfileIds_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_GetSummaryDataForProfileIds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForFriends_args__isset {
  _BrainCloudService_Friend_GetSummaryDataForFriends_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Friend_GetSummaryDataForFriends_args__isset;

class BrainCloudService_Friend_GetSummaryDataForFriends_args {
 public:

  BrainCloudService_Friend_GetSummaryDataForFriends_args(const BrainCloudService_Friend_GetSummaryDataForFriends_args&);
  BrainCloudService_Friend_GetSummaryDataForFriends_args& operator=(const BrainCloudService_Friend_GetSummaryDataForFriends_args&);
  BrainCloudService_Friend_GetSummaryDataForFriends_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForFriends_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Friend_GetSummaryDataForFriends_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForFriends_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForFriends_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForFriends_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_GetSummaryDataForFriends_pargs {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForFriends_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForFriends_result__isset {
  _BrainCloudService_Friend_GetSummaryDataForFriends_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForFriends_result__isset;

class BrainCloudService_Friend_GetSummaryDataForFriends_result {
 public:

  BrainCloudService_Friend_GetSummaryDataForFriends_result(const BrainCloudService_Friend_GetSummaryDataForFriends_result&);
  BrainCloudService_Friend_GetSummaryDataForFriends_result& operator=(const BrainCloudService_Friend_GetSummaryDataForFriends_result&);
  BrainCloudService_Friend_GetSummaryDataForFriends_result() : success() {
  }

  virtual ~BrainCloudService_Friend_GetSummaryDataForFriends_result() throw();
  std::string success;

  _BrainCloudService_Friend_GetSummaryDataForFriends_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_GetSummaryDataForFriends_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetSummaryDataForFriends_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetSummaryDataForFriends_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetSummaryDataForFriends_presult__isset {
  _BrainCloudService_Friend_GetSummaryDataForFriends_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetSummaryDataForFriends_presult__isset;

class BrainCloudService_Friend_GetSummaryDataForFriends_presult {
 public:


  virtual ~BrainCloudService_Friend_GetSummaryDataForFriends_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_GetSummaryDataForFriends_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_FindUsersByExactName_args__isset {
  _BrainCloudService_Friend_FindUsersByExactName_args__isset() : searchText(false), maxResults(false), clientIndex(false) {}
  bool searchText :1;
  bool maxResults :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_FindUsersByExactName_args__isset;

class BrainCloudService_Friend_FindUsersByExactName_args {
 public:

  BrainCloudService_Friend_FindUsersByExactName_args(const BrainCloudService_Friend_FindUsersByExactName_args&);
  BrainCloudService_Friend_FindUsersByExactName_args& operator=(const BrainCloudService_Friend_FindUsersByExactName_args&);
  BrainCloudService_Friend_FindUsersByExactName_args() : searchText(), maxResults(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_FindUsersByExactName_args() throw();
  std::string searchText;
  int32_t maxResults;
  int32_t clientIndex;

  _BrainCloudService_Friend_FindUsersByExactName_args__isset __isset;

  void __set_searchText(const std::string& val);

  void __set_maxResults(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_FindUsersByExactName_args & rhs) const
  {
    if (!(searchText == rhs.searchText))
      return false;
    if (!(maxResults == rhs.maxResults))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_FindUsersByExactName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_FindUsersByExactName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_FindUsersByExactName_pargs {
 public:


  virtual ~BrainCloudService_Friend_FindUsersByExactName_pargs() throw();
  const std::string* searchText;
  const int32_t* maxResults;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_FindUsersByExactName_result__isset {
  _BrainCloudService_Friend_FindUsersByExactName_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_FindUsersByExactName_result__isset;

class BrainCloudService_Friend_FindUsersByExactName_result {
 public:

  BrainCloudService_Friend_FindUsersByExactName_result(const BrainCloudService_Friend_FindUsersByExactName_result&);
  BrainCloudService_Friend_FindUsersByExactName_result& operator=(const BrainCloudService_Friend_FindUsersByExactName_result&);
  BrainCloudService_Friend_FindUsersByExactName_result() : success() {
  }

  virtual ~BrainCloudService_Friend_FindUsersByExactName_result() throw();
  std::string success;

  _BrainCloudService_Friend_FindUsersByExactName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_FindUsersByExactName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_FindUsersByExactName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_FindUsersByExactName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_FindUsersByExactName_presult__isset {
  _BrainCloudService_Friend_FindUsersByExactName_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_FindUsersByExactName_presult__isset;

class BrainCloudService_Friend_FindUsersByExactName_presult {
 public:


  virtual ~BrainCloudService_Friend_FindUsersByExactName_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_FindUsersByExactName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_FindUsersBySubstrName_args__isset {
  _BrainCloudService_Friend_FindUsersBySubstrName_args__isset() : searchText(false), maxResults(false), clientIndex(false) {}
  bool searchText :1;
  bool maxResults :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_FindUsersBySubstrName_args__isset;

class BrainCloudService_Friend_FindUsersBySubstrName_args {
 public:

  BrainCloudService_Friend_FindUsersBySubstrName_args(const BrainCloudService_Friend_FindUsersBySubstrName_args&);
  BrainCloudService_Friend_FindUsersBySubstrName_args& operator=(const BrainCloudService_Friend_FindUsersBySubstrName_args&);
  BrainCloudService_Friend_FindUsersBySubstrName_args() : searchText(), maxResults(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_FindUsersBySubstrName_args() throw();
  std::string searchText;
  int32_t maxResults;
  int32_t clientIndex;

  _BrainCloudService_Friend_FindUsersBySubstrName_args__isset __isset;

  void __set_searchText(const std::string& val);

  void __set_maxResults(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_FindUsersBySubstrName_args & rhs) const
  {
    if (!(searchText == rhs.searchText))
      return false;
    if (!(maxResults == rhs.maxResults))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_FindUsersBySubstrName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_FindUsersBySubstrName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_FindUsersBySubstrName_pargs {
 public:


  virtual ~BrainCloudService_Friend_FindUsersBySubstrName_pargs() throw();
  const std::string* searchText;
  const int32_t* maxResults;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_FindUsersBySubstrName_result__isset {
  _BrainCloudService_Friend_FindUsersBySubstrName_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_FindUsersBySubstrName_result__isset;

class BrainCloudService_Friend_FindUsersBySubstrName_result {
 public:

  BrainCloudService_Friend_FindUsersBySubstrName_result(const BrainCloudService_Friend_FindUsersBySubstrName_result&);
  BrainCloudService_Friend_FindUsersBySubstrName_result& operator=(const BrainCloudService_Friend_FindUsersBySubstrName_result&);
  BrainCloudService_Friend_FindUsersBySubstrName_result() : success() {
  }

  virtual ~BrainCloudService_Friend_FindUsersBySubstrName_result() throw();
  std::string success;

  _BrainCloudService_Friend_FindUsersBySubstrName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_FindUsersBySubstrName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_FindUsersBySubstrName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_FindUsersBySubstrName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_FindUsersBySubstrName_presult__isset {
  _BrainCloudService_Friend_FindUsersBySubstrName_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_FindUsersBySubstrName_presult__isset;

class BrainCloudService_Friend_FindUsersBySubstrName_presult {
 public:


  virtual ~BrainCloudService_Friend_FindUsersBySubstrName_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_FindUsersBySubstrName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ListFriends_args__isset {
  _BrainCloudService_Friend_ListFriends_args__isset() : friendPlatform(false), includeSummaryData(false), clientIndex(false) {}
  bool friendPlatform :1;
  bool includeSummaryData :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_ListFriends_args__isset;

class BrainCloudService_Friend_ListFriends_args {
 public:

  BrainCloudService_Friend_ListFriends_args(const BrainCloudService_Friend_ListFriends_args&);
  BrainCloudService_Friend_ListFriends_args& operator=(const BrainCloudService_Friend_ListFriends_args&);
  BrainCloudService_Friend_ListFriends_args() : friendPlatform(( ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type)0), includeSummaryData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ListFriends_args() throw();
   ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform;
  bool includeSummaryData;
  int32_t clientIndex;

  _BrainCloudService_Friend_ListFriends_args__isset __isset;

  void __set_friendPlatform(const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type val);

  void __set_includeSummaryData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ListFriends_args & rhs) const
  {
    if (!(friendPlatform == rhs.friendPlatform))
      return false;
    if (!(includeSummaryData == rhs.includeSummaryData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriends_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriends_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ListFriends_pargs {
 public:


  virtual ~BrainCloudService_Friend_ListFriends_pargs() throw();
  const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type* friendPlatform;
  const bool* includeSummaryData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriends_result__isset {
  _BrainCloudService_Friend_ListFriends_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriends_result__isset;

class BrainCloudService_Friend_ListFriends_result {
 public:

  BrainCloudService_Friend_ListFriends_result(const BrainCloudService_Friend_ListFriends_result&);
  BrainCloudService_Friend_ListFriends_result& operator=(const BrainCloudService_Friend_ListFriends_result&);
  BrainCloudService_Friend_ListFriends_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ListFriends_result() throw();
  std::string success;

  _BrainCloudService_Friend_ListFriends_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ListFriends_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriends_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriends_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriends_presult__isset {
  _BrainCloudService_Friend_ListFriends_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriends_presult__isset;

class BrainCloudService_Friend_ListFriends_presult {
 public:


  virtual ~BrainCloudService_Friend_ListFriends_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ListFriends_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_AddFriends_args__isset {
  _BrainCloudService_Friend_AddFriends_args__isset() : profileIds(false), clientIndex(false) {}
  bool profileIds :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_AddFriends_args__isset;

class BrainCloudService_Friend_AddFriends_args {
 public:

  BrainCloudService_Friend_AddFriends_args(const BrainCloudService_Friend_AddFriends_args&);
  BrainCloudService_Friend_AddFriends_args& operator=(const BrainCloudService_Friend_AddFriends_args&);
  BrainCloudService_Friend_AddFriends_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_AddFriends_args() throw();
  std::vector<std::string>  profileIds;
  int32_t clientIndex;

  _BrainCloudService_Friend_AddFriends_args__isset __isset;

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_AddFriends_args & rhs) const
  {
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_AddFriends_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_AddFriends_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_AddFriends_pargs {
 public:


  virtual ~BrainCloudService_Friend_AddFriends_pargs() throw();
  const std::vector<std::string> * profileIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_AddFriends_result__isset {
  _BrainCloudService_Friend_AddFriends_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_AddFriends_result__isset;

class BrainCloudService_Friend_AddFriends_result {
 public:

  BrainCloudService_Friend_AddFriends_result(const BrainCloudService_Friend_AddFriends_result&);
  BrainCloudService_Friend_AddFriends_result& operator=(const BrainCloudService_Friend_AddFriends_result&);
  BrainCloudService_Friend_AddFriends_result() : success() {
  }

  virtual ~BrainCloudService_Friend_AddFriends_result() throw();
  std::string success;

  _BrainCloudService_Friend_AddFriends_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_AddFriends_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_AddFriends_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_AddFriends_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_AddFriends_presult__isset {
  _BrainCloudService_Friend_AddFriends_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_AddFriends_presult__isset;

class BrainCloudService_Friend_AddFriends_presult {
 public:


  virtual ~BrainCloudService_Friend_AddFriends_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_AddFriends_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_RemoveFriends_args__isset {
  _BrainCloudService_Friend_RemoveFriends_args__isset() : profileIds(false), clientIndex(false) {}
  bool profileIds :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_RemoveFriends_args__isset;

class BrainCloudService_Friend_RemoveFriends_args {
 public:

  BrainCloudService_Friend_RemoveFriends_args(const BrainCloudService_Friend_RemoveFriends_args&);
  BrainCloudService_Friend_RemoveFriends_args& operator=(const BrainCloudService_Friend_RemoveFriends_args&);
  BrainCloudService_Friend_RemoveFriends_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_RemoveFriends_args() throw();
  std::vector<std::string>  profileIds;
  int32_t clientIndex;

  _BrainCloudService_Friend_RemoveFriends_args__isset __isset;

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_RemoveFriends_args & rhs) const
  {
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RemoveFriends_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RemoveFriends_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_RemoveFriends_pargs {
 public:


  virtual ~BrainCloudService_Friend_RemoveFriends_pargs() throw();
  const std::vector<std::string> * profileIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RemoveFriends_result__isset {
  _BrainCloudService_Friend_RemoveFriends_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RemoveFriends_result__isset;

class BrainCloudService_Friend_RemoveFriends_result {
 public:

  BrainCloudService_Friend_RemoveFriends_result(const BrainCloudService_Friend_RemoveFriends_result&);
  BrainCloudService_Friend_RemoveFriends_result& operator=(const BrainCloudService_Friend_RemoveFriends_result&);
  BrainCloudService_Friend_RemoveFriends_result() : success() {
  }

  virtual ~BrainCloudService_Friend_RemoveFriends_result() throw();
  std::string success;

  _BrainCloudService_Friend_RemoveFriends_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_RemoveFriends_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RemoveFriends_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RemoveFriends_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RemoveFriends_presult__isset {
  _BrainCloudService_Friend_RemoveFriends_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RemoveFriends_presult__isset;

class BrainCloudService_Friend_RemoveFriends_presult {
 public:


  virtual ~BrainCloudService_Friend_RemoveFriends_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_RemoveFriends_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_GetUsersOnlineStatus_args__isset {
  _BrainCloudService_Friend_GetUsersOnlineStatus_args__isset() : profileIds(false), clientIndex(false) {}
  bool profileIds :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_GetUsersOnlineStatus_args__isset;

class BrainCloudService_Friend_GetUsersOnlineStatus_args {
 public:

  BrainCloudService_Friend_GetUsersOnlineStatus_args(const BrainCloudService_Friend_GetUsersOnlineStatus_args&);
  BrainCloudService_Friend_GetUsersOnlineStatus_args& operator=(const BrainCloudService_Friend_GetUsersOnlineStatus_args&);
  BrainCloudService_Friend_GetUsersOnlineStatus_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_GetUsersOnlineStatus_args() throw();
  std::vector<std::string>  profileIds;
  int32_t clientIndex;

  _BrainCloudService_Friend_GetUsersOnlineStatus_args__isset __isset;

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_GetUsersOnlineStatus_args & rhs) const
  {
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetUsersOnlineStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetUsersOnlineStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_GetUsersOnlineStatus_pargs {
 public:


  virtual ~BrainCloudService_Friend_GetUsersOnlineStatus_pargs() throw();
  const std::vector<std::string> * profileIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetUsersOnlineStatus_result__isset {
  _BrainCloudService_Friend_GetUsersOnlineStatus_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetUsersOnlineStatus_result__isset;

class BrainCloudService_Friend_GetUsersOnlineStatus_result {
 public:

  BrainCloudService_Friend_GetUsersOnlineStatus_result(const BrainCloudService_Friend_GetUsersOnlineStatus_result&);
  BrainCloudService_Friend_GetUsersOnlineStatus_result& operator=(const BrainCloudService_Friend_GetUsersOnlineStatus_result&);
  BrainCloudService_Friend_GetUsersOnlineStatus_result() : success() {
  }

  virtual ~BrainCloudService_Friend_GetUsersOnlineStatus_result() throw();
  std::string success;

  _BrainCloudService_Friend_GetUsersOnlineStatus_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_GetUsersOnlineStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_GetUsersOnlineStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_GetUsersOnlineStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_GetUsersOnlineStatus_presult__isset {
  _BrainCloudService_Friend_GetUsersOnlineStatus_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_GetUsersOnlineStatus_presult__isset;

class BrainCloudService_Friend_GetUsersOnlineStatus_presult {
 public:


  virtual ~BrainCloudService_Friend_GetUsersOnlineStatus_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_GetUsersOnlineStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_SendFriendInvitation_args__isset {
  _BrainCloudService_Friend_SendFriendInvitation_args__isset() : toPlayerId(false), clientIndex(false) {}
  bool toPlayerId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_SendFriendInvitation_args__isset;

class BrainCloudService_Friend_SendFriendInvitation_args {
 public:

  BrainCloudService_Friend_SendFriendInvitation_args(const BrainCloudService_Friend_SendFriendInvitation_args&);
  BrainCloudService_Friend_SendFriendInvitation_args& operator=(const BrainCloudService_Friend_SendFriendInvitation_args&);
  BrainCloudService_Friend_SendFriendInvitation_args() : toPlayerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_SendFriendInvitation_args() throw();
  std::string toPlayerId;
  int32_t clientIndex;

  _BrainCloudService_Friend_SendFriendInvitation_args__isset __isset;

  void __set_toPlayerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_SendFriendInvitation_args & rhs) const
  {
    if (!(toPlayerId == rhs.toPlayerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_SendFriendInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_SendFriendInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_SendFriendInvitation_pargs {
 public:


  virtual ~BrainCloudService_Friend_SendFriendInvitation_pargs() throw();
  const std::string* toPlayerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_SendFriendInvitation_result__isset {
  _BrainCloudService_Friend_SendFriendInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_SendFriendInvitation_result__isset;

class BrainCloudService_Friend_SendFriendInvitation_result {
 public:

  BrainCloudService_Friend_SendFriendInvitation_result(const BrainCloudService_Friend_SendFriendInvitation_result&);
  BrainCloudService_Friend_SendFriendInvitation_result& operator=(const BrainCloudService_Friend_SendFriendInvitation_result&);
  BrainCloudService_Friend_SendFriendInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Friend_SendFriendInvitation_result() throw();
  std::string success;

  _BrainCloudService_Friend_SendFriendInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_SendFriendInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_SendFriendInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_SendFriendInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_SendFriendInvitation_presult__isset {
  _BrainCloudService_Friend_SendFriendInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_SendFriendInvitation_presult__isset;

class BrainCloudService_Friend_SendFriendInvitation_presult {
 public:


  virtual ~BrainCloudService_Friend_SendFriendInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_SendFriendInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsReceived_args__isset {
  _BrainCloudService_Friend_ListFriendInvitationsReceived_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Friend_ListFriendInvitationsReceived_args__isset;

class BrainCloudService_Friend_ListFriendInvitationsReceived_args {
 public:

  BrainCloudService_Friend_ListFriendInvitationsReceived_args(const BrainCloudService_Friend_ListFriendInvitationsReceived_args&);
  BrainCloudService_Friend_ListFriendInvitationsReceived_args& operator=(const BrainCloudService_Friend_ListFriendInvitationsReceived_args&);
  BrainCloudService_Friend_ListFriendInvitationsReceived_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ListFriendInvitationsReceived_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Friend_ListFriendInvitationsReceived_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ListFriendInvitationsReceived_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriendInvitationsReceived_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriendInvitationsReceived_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ListFriendInvitationsReceived_pargs {
 public:


  virtual ~BrainCloudService_Friend_ListFriendInvitationsReceived_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsReceived_result__isset {
  _BrainCloudService_Friend_ListFriendInvitationsReceived_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriendInvitationsReceived_result__isset;

class BrainCloudService_Friend_ListFriendInvitationsReceived_result {
 public:

  BrainCloudService_Friend_ListFriendInvitationsReceived_result(const BrainCloudService_Friend_ListFriendInvitationsReceived_result&);
  BrainCloudService_Friend_ListFriendInvitationsReceived_result& operator=(const BrainCloudService_Friend_ListFriendInvitationsReceived_result&);
  BrainCloudService_Friend_ListFriendInvitationsReceived_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ListFriendInvitationsReceived_result() throw();
  std::string success;

  _BrainCloudService_Friend_ListFriendInvitationsReceived_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ListFriendInvitationsReceived_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriendInvitationsReceived_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriendInvitationsReceived_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsReceived_presult__isset {
  _BrainCloudService_Friend_ListFriendInvitationsReceived_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriendInvitationsReceived_presult__isset;

class BrainCloudService_Friend_ListFriendInvitationsReceived_presult {
 public:


  virtual ~BrainCloudService_Friend_ListFriendInvitationsReceived_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ListFriendInvitationsReceived_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsSent_args__isset {
  _BrainCloudService_Friend_ListFriendInvitationsSent_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Friend_ListFriendInvitationsSent_args__isset;

class BrainCloudService_Friend_ListFriendInvitationsSent_args {
 public:

  BrainCloudService_Friend_ListFriendInvitationsSent_args(const BrainCloudService_Friend_ListFriendInvitationsSent_args&);
  BrainCloudService_Friend_ListFriendInvitationsSent_args& operator=(const BrainCloudService_Friend_ListFriendInvitationsSent_args&);
  BrainCloudService_Friend_ListFriendInvitationsSent_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_ListFriendInvitationsSent_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Friend_ListFriendInvitationsSent_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_ListFriendInvitationsSent_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriendInvitationsSent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriendInvitationsSent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_ListFriendInvitationsSent_pargs {
 public:


  virtual ~BrainCloudService_Friend_ListFriendInvitationsSent_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsSent_result__isset {
  _BrainCloudService_Friend_ListFriendInvitationsSent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriendInvitationsSent_result__isset;

class BrainCloudService_Friend_ListFriendInvitationsSent_result {
 public:

  BrainCloudService_Friend_ListFriendInvitationsSent_result(const BrainCloudService_Friend_ListFriendInvitationsSent_result&);
  BrainCloudService_Friend_ListFriendInvitationsSent_result& operator=(const BrainCloudService_Friend_ListFriendInvitationsSent_result&);
  BrainCloudService_Friend_ListFriendInvitationsSent_result() : success() {
  }

  virtual ~BrainCloudService_Friend_ListFriendInvitationsSent_result() throw();
  std::string success;

  _BrainCloudService_Friend_ListFriendInvitationsSent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_ListFriendInvitationsSent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_ListFriendInvitationsSent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_ListFriendInvitationsSent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_ListFriendInvitationsSent_presult__isset {
  _BrainCloudService_Friend_ListFriendInvitationsSent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_ListFriendInvitationsSent_presult__isset;

class BrainCloudService_Friend_ListFriendInvitationsSent_presult {
 public:


  virtual ~BrainCloudService_Friend_ListFriendInvitationsSent_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_ListFriendInvitationsSent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_AcceptFriendInvitation_args__isset {
  _BrainCloudService_Friend_AcceptFriendInvitation_args__isset() : fromPlayerId(false), clientIndex(false) {}
  bool fromPlayerId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_AcceptFriendInvitation_args__isset;

class BrainCloudService_Friend_AcceptFriendInvitation_args {
 public:

  BrainCloudService_Friend_AcceptFriendInvitation_args(const BrainCloudService_Friend_AcceptFriendInvitation_args&);
  BrainCloudService_Friend_AcceptFriendInvitation_args& operator=(const BrainCloudService_Friend_AcceptFriendInvitation_args&);
  BrainCloudService_Friend_AcceptFriendInvitation_args() : fromPlayerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_AcceptFriendInvitation_args() throw();
  std::string fromPlayerId;
  int32_t clientIndex;

  _BrainCloudService_Friend_AcceptFriendInvitation_args__isset __isset;

  void __set_fromPlayerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_AcceptFriendInvitation_args & rhs) const
  {
    if (!(fromPlayerId == rhs.fromPlayerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_AcceptFriendInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_AcceptFriendInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_AcceptFriendInvitation_pargs {
 public:


  virtual ~BrainCloudService_Friend_AcceptFriendInvitation_pargs() throw();
  const std::string* fromPlayerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_AcceptFriendInvitation_result__isset {
  _BrainCloudService_Friend_AcceptFriendInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_AcceptFriendInvitation_result__isset;

class BrainCloudService_Friend_AcceptFriendInvitation_result {
 public:

  BrainCloudService_Friend_AcceptFriendInvitation_result(const BrainCloudService_Friend_AcceptFriendInvitation_result&);
  BrainCloudService_Friend_AcceptFriendInvitation_result& operator=(const BrainCloudService_Friend_AcceptFriendInvitation_result&);
  BrainCloudService_Friend_AcceptFriendInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Friend_AcceptFriendInvitation_result() throw();
  std::string success;

  _BrainCloudService_Friend_AcceptFriendInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_AcceptFriendInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_AcceptFriendInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_AcceptFriendInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_AcceptFriendInvitation_presult__isset {
  _BrainCloudService_Friend_AcceptFriendInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_AcceptFriendInvitation_presult__isset;

class BrainCloudService_Friend_AcceptFriendInvitation_presult {
 public:


  virtual ~BrainCloudService_Friend_AcceptFriendInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_AcceptFriendInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_RejectFriendInvitation_args__isset {
  _BrainCloudService_Friend_RejectFriendInvitation_args__isset() : fromPlayerId(false), clientIndex(false) {}
  bool fromPlayerId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_RejectFriendInvitation_args__isset;

class BrainCloudService_Friend_RejectFriendInvitation_args {
 public:

  BrainCloudService_Friend_RejectFriendInvitation_args(const BrainCloudService_Friend_RejectFriendInvitation_args&);
  BrainCloudService_Friend_RejectFriendInvitation_args& operator=(const BrainCloudService_Friend_RejectFriendInvitation_args&);
  BrainCloudService_Friend_RejectFriendInvitation_args() : fromPlayerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_RejectFriendInvitation_args() throw();
  std::string fromPlayerId;
  int32_t clientIndex;

  _BrainCloudService_Friend_RejectFriendInvitation_args__isset __isset;

  void __set_fromPlayerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_RejectFriendInvitation_args & rhs) const
  {
    if (!(fromPlayerId == rhs.fromPlayerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RejectFriendInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RejectFriendInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_RejectFriendInvitation_pargs {
 public:


  virtual ~BrainCloudService_Friend_RejectFriendInvitation_pargs() throw();
  const std::string* fromPlayerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RejectFriendInvitation_result__isset {
  _BrainCloudService_Friend_RejectFriendInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RejectFriendInvitation_result__isset;

class BrainCloudService_Friend_RejectFriendInvitation_result {
 public:

  BrainCloudService_Friend_RejectFriendInvitation_result(const BrainCloudService_Friend_RejectFriendInvitation_result&);
  BrainCloudService_Friend_RejectFriendInvitation_result& operator=(const BrainCloudService_Friend_RejectFriendInvitation_result&);
  BrainCloudService_Friend_RejectFriendInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Friend_RejectFriendInvitation_result() throw();
  std::string success;

  _BrainCloudService_Friend_RejectFriendInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_RejectFriendInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RejectFriendInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RejectFriendInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RejectFriendInvitation_presult__isset {
  _BrainCloudService_Friend_RejectFriendInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RejectFriendInvitation_presult__isset;

class BrainCloudService_Friend_RejectFriendInvitation_presult {
 public:


  virtual ~BrainCloudService_Friend_RejectFriendInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_RejectFriendInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Friend_RemoveFriend_args__isset {
  _BrainCloudService_Friend_RemoveFriend_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_Friend_RemoveFriend_args__isset;

class BrainCloudService_Friend_RemoveFriend_args {
 public:

  BrainCloudService_Friend_RemoveFriend_args(const BrainCloudService_Friend_RemoveFriend_args&);
  BrainCloudService_Friend_RemoveFriend_args& operator=(const BrainCloudService_Friend_RemoveFriend_args&);
  BrainCloudService_Friend_RemoveFriend_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Friend_RemoveFriend_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_Friend_RemoveFriend_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Friend_RemoveFriend_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RemoveFriend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RemoveFriend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Friend_RemoveFriend_pargs {
 public:


  virtual ~BrainCloudService_Friend_RemoveFriend_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RemoveFriend_result__isset {
  _BrainCloudService_Friend_RemoveFriend_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RemoveFriend_result__isset;

class BrainCloudService_Friend_RemoveFriend_result {
 public:

  BrainCloudService_Friend_RemoveFriend_result(const BrainCloudService_Friend_RemoveFriend_result&);
  BrainCloudService_Friend_RemoveFriend_result& operator=(const BrainCloudService_Friend_RemoveFriend_result&);
  BrainCloudService_Friend_RemoveFriend_result() : success() {
  }

  virtual ~BrainCloudService_Friend_RemoveFriend_result() throw();
  std::string success;

  _BrainCloudService_Friend_RemoveFriend_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Friend_RemoveFriend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Friend_RemoveFriend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Friend_RemoveFriend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Friend_RemoveFriend_presult__isset {
  _BrainCloudService_Friend_RemoveFriend_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Friend_RemoveFriend_presult__isset;

class BrainCloudService_Friend_RemoveFriend_presult {
 public:


  virtual ~BrainCloudService_Friend_RemoveFriend_presult() throw();
  std::string* success;

  _BrainCloudService_Friend_RemoveFriend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadAllGamification_args__isset {
  _BrainCloudService_Gamification_ReadAllGamification_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadAllGamification_args__isset;

class BrainCloudService_Gamification_ReadAllGamification_args {
 public:

  BrainCloudService_Gamification_ReadAllGamification_args(const BrainCloudService_Gamification_ReadAllGamification_args&);
  BrainCloudService_Gamification_ReadAllGamification_args& operator=(const BrainCloudService_Gamification_ReadAllGamification_args&);
  BrainCloudService_Gamification_ReadAllGamification_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadAllGamification_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadAllGamification_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadAllGamification_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAllGamification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAllGamification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadAllGamification_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadAllGamification_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAllGamification_result__isset {
  _BrainCloudService_Gamification_ReadAllGamification_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAllGamification_result__isset;

class BrainCloudService_Gamification_ReadAllGamification_result {
 public:

  BrainCloudService_Gamification_ReadAllGamification_result(const BrainCloudService_Gamification_ReadAllGamification_result&);
  BrainCloudService_Gamification_ReadAllGamification_result& operator=(const BrainCloudService_Gamification_ReadAllGamification_result&);
  BrainCloudService_Gamification_ReadAllGamification_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadAllGamification_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadAllGamification_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadAllGamification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAllGamification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAllGamification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAllGamification_presult__isset {
  _BrainCloudService_Gamification_ReadAllGamification_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAllGamification_presult__isset;

class BrainCloudService_Gamification_ReadAllGamification_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadAllGamification_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadAllGamification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadMilestones_args__isset {
  _BrainCloudService_Gamification_ReadMilestones_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadMilestones_args__isset;

class BrainCloudService_Gamification_ReadMilestones_args {
 public:

  BrainCloudService_Gamification_ReadMilestones_args(const BrainCloudService_Gamification_ReadMilestones_args&);
  BrainCloudService_Gamification_ReadMilestones_args& operator=(const BrainCloudService_Gamification_ReadMilestones_args&);
  BrainCloudService_Gamification_ReadMilestones_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadMilestones_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadMilestones_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadMilestones_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadMilestones_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadMilestones_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadMilestones_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadMilestones_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadMilestones_result__isset {
  _BrainCloudService_Gamification_ReadMilestones_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadMilestones_result__isset;

class BrainCloudService_Gamification_ReadMilestones_result {
 public:

  BrainCloudService_Gamification_ReadMilestones_result(const BrainCloudService_Gamification_ReadMilestones_result&);
  BrainCloudService_Gamification_ReadMilestones_result& operator=(const BrainCloudService_Gamification_ReadMilestones_result&);
  BrainCloudService_Gamification_ReadMilestones_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadMilestones_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadMilestones_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadMilestones_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadMilestones_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadMilestones_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadMilestones_presult__isset {
  _BrainCloudService_Gamification_ReadMilestones_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadMilestones_presult__isset;

class BrainCloudService_Gamification_ReadMilestones_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadMilestones_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadMilestones_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadAchievements_args__isset {
  _BrainCloudService_Gamification_ReadAchievements_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadAchievements_args__isset;

class BrainCloudService_Gamification_ReadAchievements_args {
 public:

  BrainCloudService_Gamification_ReadAchievements_args(const BrainCloudService_Gamification_ReadAchievements_args&);
  BrainCloudService_Gamification_ReadAchievements_args& operator=(const BrainCloudService_Gamification_ReadAchievements_args&);
  BrainCloudService_Gamification_ReadAchievements_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadAchievements_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadAchievements_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadAchievements_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAchievements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAchievements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadAchievements_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadAchievements_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAchievements_result__isset {
  _BrainCloudService_Gamification_ReadAchievements_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAchievements_result__isset;

class BrainCloudService_Gamification_ReadAchievements_result {
 public:

  BrainCloudService_Gamification_ReadAchievements_result(const BrainCloudService_Gamification_ReadAchievements_result&);
  BrainCloudService_Gamification_ReadAchievements_result& operator=(const BrainCloudService_Gamification_ReadAchievements_result&);
  BrainCloudService_Gamification_ReadAchievements_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadAchievements_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadAchievements_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadAchievements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAchievements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAchievements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAchievements_presult__isset {
  _BrainCloudService_Gamification_ReadAchievements_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAchievements_presult__isset;

class BrainCloudService_Gamification_ReadAchievements_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadAchievements_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadAchievements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadXpLevelsMetaData_args__isset {
  _BrainCloudService_Gamification_ReadXpLevelsMetaData_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadXpLevelsMetaData_args__isset;

class BrainCloudService_Gamification_ReadXpLevelsMetaData_args {
 public:

  BrainCloudService_Gamification_ReadXpLevelsMetaData_args(const BrainCloudService_Gamification_ReadXpLevelsMetaData_args&);
  BrainCloudService_Gamification_ReadXpLevelsMetaData_args& operator=(const BrainCloudService_Gamification_ReadXpLevelsMetaData_args&);
  BrainCloudService_Gamification_ReadXpLevelsMetaData_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadXpLevelsMetaData_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadXpLevelsMetaData_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadXpLevelsMetaData_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadXpLevelsMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadXpLevelsMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadXpLevelsMetaData_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadXpLevelsMetaData_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadXpLevelsMetaData_result__isset {
  _BrainCloudService_Gamification_ReadXpLevelsMetaData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadXpLevelsMetaData_result__isset;

class BrainCloudService_Gamification_ReadXpLevelsMetaData_result {
 public:

  BrainCloudService_Gamification_ReadXpLevelsMetaData_result(const BrainCloudService_Gamification_ReadXpLevelsMetaData_result&);
  BrainCloudService_Gamification_ReadXpLevelsMetaData_result& operator=(const BrainCloudService_Gamification_ReadXpLevelsMetaData_result&);
  BrainCloudService_Gamification_ReadXpLevelsMetaData_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadXpLevelsMetaData_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadXpLevelsMetaData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadXpLevelsMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadXpLevelsMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadXpLevelsMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadXpLevelsMetaData_presult__isset {
  _BrainCloudService_Gamification_ReadXpLevelsMetaData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadXpLevelsMetaData_presult__isset;

class BrainCloudService_Gamification_ReadXpLevelsMetaData_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadXpLevelsMetaData_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadXpLevelsMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadAchievedAchievements_args__isset {
  _BrainCloudService_Gamification_ReadAchievedAchievements_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadAchievedAchievements_args__isset;

class BrainCloudService_Gamification_ReadAchievedAchievements_args {
 public:

  BrainCloudService_Gamification_ReadAchievedAchievements_args(const BrainCloudService_Gamification_ReadAchievedAchievements_args&);
  BrainCloudService_Gamification_ReadAchievedAchievements_args& operator=(const BrainCloudService_Gamification_ReadAchievedAchievements_args&);
  BrainCloudService_Gamification_ReadAchievedAchievements_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadAchievedAchievements_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadAchievedAchievements_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadAchievedAchievements_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAchievedAchievements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAchievedAchievements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadAchievedAchievements_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadAchievedAchievements_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAchievedAchievements_result__isset {
  _BrainCloudService_Gamification_ReadAchievedAchievements_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAchievedAchievements_result__isset;

class BrainCloudService_Gamification_ReadAchievedAchievements_result {
 public:

  BrainCloudService_Gamification_ReadAchievedAchievements_result(const BrainCloudService_Gamification_ReadAchievedAchievements_result&);
  BrainCloudService_Gamification_ReadAchievedAchievements_result& operator=(const BrainCloudService_Gamification_ReadAchievedAchievements_result&);
  BrainCloudService_Gamification_ReadAchievedAchievements_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadAchievedAchievements_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadAchievedAchievements_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadAchievedAchievements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadAchievedAchievements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadAchievedAchievements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadAchievedAchievements_presult__isset {
  _BrainCloudService_Gamification_ReadAchievedAchievements_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadAchievedAchievements_presult__isset;

class BrainCloudService_Gamification_ReadAchievedAchievements_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadAchievedAchievements_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadAchievedAchievements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadCompletedMilestones_args__isset {
  _BrainCloudService_Gamification_ReadCompletedMilestones_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadCompletedMilestones_args__isset;

class BrainCloudService_Gamification_ReadCompletedMilestones_args {
 public:

  BrainCloudService_Gamification_ReadCompletedMilestones_args(const BrainCloudService_Gamification_ReadCompletedMilestones_args&);
  BrainCloudService_Gamification_ReadCompletedMilestones_args& operator=(const BrainCloudService_Gamification_ReadCompletedMilestones_args&);
  BrainCloudService_Gamification_ReadCompletedMilestones_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadCompletedMilestones_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadCompletedMilestones_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadCompletedMilestones_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadCompletedMilestones_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadCompletedMilestones_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadCompletedMilestones_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadCompletedMilestones_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadCompletedMilestones_result__isset {
  _BrainCloudService_Gamification_ReadCompletedMilestones_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadCompletedMilestones_result__isset;

class BrainCloudService_Gamification_ReadCompletedMilestones_result {
 public:

  BrainCloudService_Gamification_ReadCompletedMilestones_result(const BrainCloudService_Gamification_ReadCompletedMilestones_result&);
  BrainCloudService_Gamification_ReadCompletedMilestones_result& operator=(const BrainCloudService_Gamification_ReadCompletedMilestones_result&);
  BrainCloudService_Gamification_ReadCompletedMilestones_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadCompletedMilestones_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadCompletedMilestones_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadCompletedMilestones_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadCompletedMilestones_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadCompletedMilestones_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadCompletedMilestones_presult__isset {
  _BrainCloudService_Gamification_ReadCompletedMilestones_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadCompletedMilestones_presult__isset;

class BrainCloudService_Gamification_ReadCompletedMilestones_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadCompletedMilestones_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadCompletedMilestones_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadInProgressMilestones_args__isset {
  _BrainCloudService_Gamification_ReadInProgressMilestones_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadInProgressMilestones_args__isset;

class BrainCloudService_Gamification_ReadInProgressMilestones_args {
 public:

  BrainCloudService_Gamification_ReadInProgressMilestones_args(const BrainCloudService_Gamification_ReadInProgressMilestones_args&);
  BrainCloudService_Gamification_ReadInProgressMilestones_args& operator=(const BrainCloudService_Gamification_ReadInProgressMilestones_args&);
  BrainCloudService_Gamification_ReadInProgressMilestones_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadInProgressMilestones_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadInProgressMilestones_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadInProgressMilestones_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadInProgressMilestones_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadInProgressMilestones_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadInProgressMilestones_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadInProgressMilestones_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadInProgressMilestones_result__isset {
  _BrainCloudService_Gamification_ReadInProgressMilestones_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadInProgressMilestones_result__isset;

class BrainCloudService_Gamification_ReadInProgressMilestones_result {
 public:

  BrainCloudService_Gamification_ReadInProgressMilestones_result(const BrainCloudService_Gamification_ReadInProgressMilestones_result&);
  BrainCloudService_Gamification_ReadInProgressMilestones_result& operator=(const BrainCloudService_Gamification_ReadInProgressMilestones_result&);
  BrainCloudService_Gamification_ReadInProgressMilestones_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadInProgressMilestones_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadInProgressMilestones_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadInProgressMilestones_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadInProgressMilestones_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadInProgressMilestones_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadInProgressMilestones_presult__isset {
  _BrainCloudService_Gamification_ReadInProgressMilestones_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadInProgressMilestones_presult__isset;

class BrainCloudService_Gamification_ReadInProgressMilestones_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadInProgressMilestones_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadInProgressMilestones_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadMilestonesByCategory_args__isset {
  _BrainCloudService_Gamification_ReadMilestonesByCategory_args__isset() : category(false), includeMetaData(false), clientIndex(false) {}
  bool category :1;
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadMilestonesByCategory_args__isset;

class BrainCloudService_Gamification_ReadMilestonesByCategory_args {
 public:

  BrainCloudService_Gamification_ReadMilestonesByCategory_args(const BrainCloudService_Gamification_ReadMilestonesByCategory_args&);
  BrainCloudService_Gamification_ReadMilestonesByCategory_args& operator=(const BrainCloudService_Gamification_ReadMilestonesByCategory_args&);
  BrainCloudService_Gamification_ReadMilestonesByCategory_args() : category(), includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadMilestonesByCategory_args() throw();
  std::string category;
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadMilestonesByCategory_args__isset __isset;

  void __set_category(const std::string& val);

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadMilestonesByCategory_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadMilestonesByCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadMilestonesByCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadMilestonesByCategory_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadMilestonesByCategory_pargs() throw();
  const std::string* category;
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadMilestonesByCategory_result__isset {
  _BrainCloudService_Gamification_ReadMilestonesByCategory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadMilestonesByCategory_result__isset;

class BrainCloudService_Gamification_ReadMilestonesByCategory_result {
 public:

  BrainCloudService_Gamification_ReadMilestonesByCategory_result(const BrainCloudService_Gamification_ReadMilestonesByCategory_result&);
  BrainCloudService_Gamification_ReadMilestonesByCategory_result& operator=(const BrainCloudService_Gamification_ReadMilestonesByCategory_result&);
  BrainCloudService_Gamification_ReadMilestonesByCategory_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadMilestonesByCategory_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadMilestonesByCategory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadMilestonesByCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadMilestonesByCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadMilestonesByCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadMilestonesByCategory_presult__isset {
  _BrainCloudService_Gamification_ReadMilestonesByCategory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadMilestonesByCategory_presult__isset;

class BrainCloudService_Gamification_ReadMilestonesByCategory_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadMilestonesByCategory_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadMilestonesByCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_AwardAchievements_args__isset {
  _BrainCloudService_Gamification_AwardAchievements_args__isset() : achievementIds(false), clientIndex(false) {}
  bool achievementIds :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_AwardAchievements_args__isset;

class BrainCloudService_Gamification_AwardAchievements_args {
 public:

  BrainCloudService_Gamification_AwardAchievements_args(const BrainCloudService_Gamification_AwardAchievements_args&);
  BrainCloudService_Gamification_AwardAchievements_args& operator=(const BrainCloudService_Gamification_AwardAchievements_args&);
  BrainCloudService_Gamification_AwardAchievements_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_AwardAchievements_args() throw();
  std::vector<std::string>  achievementIds;
  int32_t clientIndex;

  _BrainCloudService_Gamification_AwardAchievements_args__isset __isset;

  void __set_achievementIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_AwardAchievements_args & rhs) const
  {
    if (!(achievementIds == rhs.achievementIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_AwardAchievements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_AwardAchievements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_AwardAchievements_pargs {
 public:


  virtual ~BrainCloudService_Gamification_AwardAchievements_pargs() throw();
  const std::vector<std::string> * achievementIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_AwardAchievements_result__isset {
  _BrainCloudService_Gamification_AwardAchievements_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_AwardAchievements_result__isset;

class BrainCloudService_Gamification_AwardAchievements_result {
 public:

  BrainCloudService_Gamification_AwardAchievements_result(const BrainCloudService_Gamification_AwardAchievements_result&);
  BrainCloudService_Gamification_AwardAchievements_result& operator=(const BrainCloudService_Gamification_AwardAchievements_result&);
  BrainCloudService_Gamification_AwardAchievements_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_AwardAchievements_result() throw();
  std::string success;

  _BrainCloudService_Gamification_AwardAchievements_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_AwardAchievements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_AwardAchievements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_AwardAchievements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_AwardAchievements_presult__isset {
  _BrainCloudService_Gamification_AwardAchievements_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_AwardAchievements_presult__isset;

class BrainCloudService_Gamification_AwardAchievements_presult {
 public:


  virtual ~BrainCloudService_Gamification_AwardAchievements_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_AwardAchievements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadQuests_args__isset {
  _BrainCloudService_Gamification_ReadQuests_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadQuests_args__isset;

class BrainCloudService_Gamification_ReadQuests_args {
 public:

  BrainCloudService_Gamification_ReadQuests_args(const BrainCloudService_Gamification_ReadQuests_args&);
  BrainCloudService_Gamification_ReadQuests_args& operator=(const BrainCloudService_Gamification_ReadQuests_args&);
  BrainCloudService_Gamification_ReadQuests_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadQuests_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadQuests_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadQuests_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadQuests_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuests_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuests_result__isset {
  _BrainCloudService_Gamification_ReadQuests_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuests_result__isset;

class BrainCloudService_Gamification_ReadQuests_result {
 public:

  BrainCloudService_Gamification_ReadQuests_result(const BrainCloudService_Gamification_ReadQuests_result&);
  BrainCloudService_Gamification_ReadQuests_result& operator=(const BrainCloudService_Gamification_ReadQuests_result&);
  BrainCloudService_Gamification_ReadQuests_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadQuests_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadQuests_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadQuests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuests_presult__isset {
  _BrainCloudService_Gamification_ReadQuests_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuests_presult__isset;

class BrainCloudService_Gamification_ReadQuests_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuests_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadQuests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadCompletedQuests_args__isset {
  _BrainCloudService_Gamification_ReadCompletedQuests_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadCompletedQuests_args__isset;

class BrainCloudService_Gamification_ReadCompletedQuests_args {
 public:

  BrainCloudService_Gamification_ReadCompletedQuests_args(const BrainCloudService_Gamification_ReadCompletedQuests_args&);
  BrainCloudService_Gamification_ReadCompletedQuests_args& operator=(const BrainCloudService_Gamification_ReadCompletedQuests_args&);
  BrainCloudService_Gamification_ReadCompletedQuests_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadCompletedQuests_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadCompletedQuests_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadCompletedQuests_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadCompletedQuests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadCompletedQuests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadCompletedQuests_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadCompletedQuests_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadCompletedQuests_result__isset {
  _BrainCloudService_Gamification_ReadCompletedQuests_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadCompletedQuests_result__isset;

class BrainCloudService_Gamification_ReadCompletedQuests_result {
 public:

  BrainCloudService_Gamification_ReadCompletedQuests_result(const BrainCloudService_Gamification_ReadCompletedQuests_result&);
  BrainCloudService_Gamification_ReadCompletedQuests_result& operator=(const BrainCloudService_Gamification_ReadCompletedQuests_result&);
  BrainCloudService_Gamification_ReadCompletedQuests_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadCompletedQuests_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadCompletedQuests_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadCompletedQuests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadCompletedQuests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadCompletedQuests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadCompletedQuests_presult__isset {
  _BrainCloudService_Gamification_ReadCompletedQuests_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadCompletedQuests_presult__isset;

class BrainCloudService_Gamification_ReadCompletedQuests_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadCompletedQuests_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadCompletedQuests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadInProgressQuests_args__isset {
  _BrainCloudService_Gamification_ReadInProgressQuests_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadInProgressQuests_args__isset;

class BrainCloudService_Gamification_ReadInProgressQuests_args {
 public:

  BrainCloudService_Gamification_ReadInProgressQuests_args(const BrainCloudService_Gamification_ReadInProgressQuests_args&);
  BrainCloudService_Gamification_ReadInProgressQuests_args& operator=(const BrainCloudService_Gamification_ReadInProgressQuests_args&);
  BrainCloudService_Gamification_ReadInProgressQuests_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadInProgressQuests_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadInProgressQuests_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadInProgressQuests_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadInProgressQuests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadInProgressQuests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadInProgressQuests_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadInProgressQuests_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadInProgressQuests_result__isset {
  _BrainCloudService_Gamification_ReadInProgressQuests_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadInProgressQuests_result__isset;

class BrainCloudService_Gamification_ReadInProgressQuests_result {
 public:

  BrainCloudService_Gamification_ReadInProgressQuests_result(const BrainCloudService_Gamification_ReadInProgressQuests_result&);
  BrainCloudService_Gamification_ReadInProgressQuests_result& operator=(const BrainCloudService_Gamification_ReadInProgressQuests_result&);
  BrainCloudService_Gamification_ReadInProgressQuests_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadInProgressQuests_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadInProgressQuests_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadInProgressQuests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadInProgressQuests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadInProgressQuests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadInProgressQuests_presult__isset {
  _BrainCloudService_Gamification_ReadInProgressQuests_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadInProgressQuests_presult__isset;

class BrainCloudService_Gamification_ReadInProgressQuests_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadInProgressQuests_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadInProgressQuests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadNotStartedQuests_args__isset {
  _BrainCloudService_Gamification_ReadNotStartedQuests_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadNotStartedQuests_args__isset;

class BrainCloudService_Gamification_ReadNotStartedQuests_args {
 public:

  BrainCloudService_Gamification_ReadNotStartedQuests_args(const BrainCloudService_Gamification_ReadNotStartedQuests_args&);
  BrainCloudService_Gamification_ReadNotStartedQuests_args& operator=(const BrainCloudService_Gamification_ReadNotStartedQuests_args&);
  BrainCloudService_Gamification_ReadNotStartedQuests_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadNotStartedQuests_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadNotStartedQuests_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadNotStartedQuests_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadNotStartedQuests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadNotStartedQuests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadNotStartedQuests_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadNotStartedQuests_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadNotStartedQuests_result__isset {
  _BrainCloudService_Gamification_ReadNotStartedQuests_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadNotStartedQuests_result__isset;

class BrainCloudService_Gamification_ReadNotStartedQuests_result {
 public:

  BrainCloudService_Gamification_ReadNotStartedQuests_result(const BrainCloudService_Gamification_ReadNotStartedQuests_result&);
  BrainCloudService_Gamification_ReadNotStartedQuests_result& operator=(const BrainCloudService_Gamification_ReadNotStartedQuests_result&);
  BrainCloudService_Gamification_ReadNotStartedQuests_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadNotStartedQuests_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadNotStartedQuests_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadNotStartedQuests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadNotStartedQuests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadNotStartedQuests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadNotStartedQuests_presult__isset {
  _BrainCloudService_Gamification_ReadNotStartedQuests_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadNotStartedQuests_presult__isset;

class BrainCloudService_Gamification_ReadNotStartedQuests_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadNotStartedQuests_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadNotStartedQuests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithStatus_args__isset {
  _BrainCloudService_Gamification_ReadQuestsWithStatus_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadQuestsWithStatus_args__isset;

class BrainCloudService_Gamification_ReadQuestsWithStatus_args {
 public:

  BrainCloudService_Gamification_ReadQuestsWithStatus_args(const BrainCloudService_Gamification_ReadQuestsWithStatus_args&);
  BrainCloudService_Gamification_ReadQuestsWithStatus_args& operator=(const BrainCloudService_Gamification_ReadQuestsWithStatus_args&);
  BrainCloudService_Gamification_ReadQuestsWithStatus_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithStatus_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadQuestsWithStatus_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithStatus_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadQuestsWithStatus_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithStatus_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithStatus_result__isset {
  _BrainCloudService_Gamification_ReadQuestsWithStatus_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithStatus_result__isset;

class BrainCloudService_Gamification_ReadQuestsWithStatus_result {
 public:

  BrainCloudService_Gamification_ReadQuestsWithStatus_result(const BrainCloudService_Gamification_ReadQuestsWithStatus_result&);
  BrainCloudService_Gamification_ReadQuestsWithStatus_result& operator=(const BrainCloudService_Gamification_ReadQuestsWithStatus_result&);
  BrainCloudService_Gamification_ReadQuestsWithStatus_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithStatus_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadQuestsWithStatus_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithStatus_presult__isset {
  _BrainCloudService_Gamification_ReadQuestsWithStatus_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithStatus_presult__isset;

class BrainCloudService_Gamification_ReadQuestsWithStatus_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithStatus_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadQuestsWithStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args__isset {
  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args__isset;

class BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args {
 public:

  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args(const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args&);
  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args& operator=(const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args&);
  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result__isset {
  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result__isset;

class BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result {
 public:

  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result(const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result&);
  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result& operator=(const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result&);
  BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult__isset {
  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult__isset;

class BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadQuestsWithBasicPercentage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args__isset {
  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args__isset() : includeMetaData(false), clientIndex(false) {}
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args__isset;

class BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args {
 public:

  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args(const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args&);
  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args& operator=(const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args&);
  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args() : includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args() throw();
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args__isset __isset;

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args & rhs) const
  {
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_pargs() throw();
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result__isset {
  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result__isset;

class BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result {
 public:

  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result(const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result&);
  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result& operator=(const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result&);
  BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult__isset {
  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult__isset;

class BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadQuestsWithComplexPercentage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ReadQuestsByCategory_args__isset {
  _BrainCloudService_Gamification_ReadQuestsByCategory_args__isset() : category(false), includeMetaData(false), clientIndex(false) {}
  bool category :1;
  bool includeMetaData :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ReadQuestsByCategory_args__isset;

class BrainCloudService_Gamification_ReadQuestsByCategory_args {
 public:

  BrainCloudService_Gamification_ReadQuestsByCategory_args(const BrainCloudService_Gamification_ReadQuestsByCategory_args&);
  BrainCloudService_Gamification_ReadQuestsByCategory_args& operator=(const BrainCloudService_Gamification_ReadQuestsByCategory_args&);
  BrainCloudService_Gamification_ReadQuestsByCategory_args() : category(), includeMetaData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsByCategory_args() throw();
  std::string category;
  bool includeMetaData;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ReadQuestsByCategory_args__isset __isset;

  void __set_category(const std::string& val);

  void __set_includeMetaData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsByCategory_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(includeMetaData == rhs.includeMetaData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsByCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsByCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ReadQuestsByCategory_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsByCategory_pargs() throw();
  const std::string* category;
  const bool* includeMetaData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsByCategory_result__isset {
  _BrainCloudService_Gamification_ReadQuestsByCategory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsByCategory_result__isset;

class BrainCloudService_Gamification_ReadQuestsByCategory_result {
 public:

  BrainCloudService_Gamification_ReadQuestsByCategory_result(const BrainCloudService_Gamification_ReadQuestsByCategory_result&);
  BrainCloudService_Gamification_ReadQuestsByCategory_result& operator=(const BrainCloudService_Gamification_ReadQuestsByCategory_result&);
  BrainCloudService_Gamification_ReadQuestsByCategory_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ReadQuestsByCategory_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ReadQuestsByCategory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ReadQuestsByCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ReadQuestsByCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ReadQuestsByCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ReadQuestsByCategory_presult__isset {
  _BrainCloudService_Gamification_ReadQuestsByCategory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ReadQuestsByCategory_presult__isset;

class BrainCloudService_Gamification_ReadQuestsByCategory_presult {
 public:


  virtual ~BrainCloudService_Gamification_ReadQuestsByCategory_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ReadQuestsByCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Gamification_ResetMilestones_args__isset {
  _BrainCloudService_Gamification_ResetMilestones_args__isset() : milestoneIds(false), clientIndex(false) {}
  bool milestoneIds :1;
  bool clientIndex :1;
} _BrainCloudService_Gamification_ResetMilestones_args__isset;

class BrainCloudService_Gamification_ResetMilestones_args {
 public:

  BrainCloudService_Gamification_ResetMilestones_args(const BrainCloudService_Gamification_ResetMilestones_args&);
  BrainCloudService_Gamification_ResetMilestones_args& operator=(const BrainCloudService_Gamification_ResetMilestones_args&);
  BrainCloudService_Gamification_ResetMilestones_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Gamification_ResetMilestones_args() throw();
  std::vector<std::string>  milestoneIds;
  int32_t clientIndex;

  _BrainCloudService_Gamification_ResetMilestones_args__isset __isset;

  void __set_milestoneIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Gamification_ResetMilestones_args & rhs) const
  {
    if (!(milestoneIds == rhs.milestoneIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ResetMilestones_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ResetMilestones_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Gamification_ResetMilestones_pargs {
 public:


  virtual ~BrainCloudService_Gamification_ResetMilestones_pargs() throw();
  const std::vector<std::string> * milestoneIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ResetMilestones_result__isset {
  _BrainCloudService_Gamification_ResetMilestones_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ResetMilestones_result__isset;

class BrainCloudService_Gamification_ResetMilestones_result {
 public:

  BrainCloudService_Gamification_ResetMilestones_result(const BrainCloudService_Gamification_ResetMilestones_result&);
  BrainCloudService_Gamification_ResetMilestones_result& operator=(const BrainCloudService_Gamification_ResetMilestones_result&);
  BrainCloudService_Gamification_ResetMilestones_result() : success() {
  }

  virtual ~BrainCloudService_Gamification_ResetMilestones_result() throw();
  std::string success;

  _BrainCloudService_Gamification_ResetMilestones_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Gamification_ResetMilestones_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Gamification_ResetMilestones_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Gamification_ResetMilestones_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Gamification_ResetMilestones_presult__isset {
  _BrainCloudService_Gamification_ResetMilestones_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Gamification_ResetMilestones_presult__isset;

class BrainCloudService_Gamification_ResetMilestones_presult {
 public:


  virtual ~BrainCloudService_Gamification_ResetMilestones_presult() throw();
  std::string* success;

  _BrainCloudService_Gamification_ResetMilestones_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalApp_ReadProperties_args__isset {
  _BrainCloudService_GlobalApp_ReadProperties_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_GlobalApp_ReadProperties_args__isset;

class BrainCloudService_GlobalApp_ReadProperties_args {
 public:

  BrainCloudService_GlobalApp_ReadProperties_args(const BrainCloudService_GlobalApp_ReadProperties_args&);
  BrainCloudService_GlobalApp_ReadProperties_args& operator=(const BrainCloudService_GlobalApp_ReadProperties_args&);
  BrainCloudService_GlobalApp_ReadProperties_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalApp_ReadProperties_args() throw();
  int32_t clientIndex;

  _BrainCloudService_GlobalApp_ReadProperties_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalApp_ReadProperties_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalApp_ReadProperties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalApp_ReadProperties_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalApp_ReadProperties_pargs {
 public:


  virtual ~BrainCloudService_GlobalApp_ReadProperties_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalApp_ReadProperties_result__isset {
  _BrainCloudService_GlobalApp_ReadProperties_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalApp_ReadProperties_result__isset;

class BrainCloudService_GlobalApp_ReadProperties_result {
 public:

  BrainCloudService_GlobalApp_ReadProperties_result(const BrainCloudService_GlobalApp_ReadProperties_result&);
  BrainCloudService_GlobalApp_ReadProperties_result& operator=(const BrainCloudService_GlobalApp_ReadProperties_result&);
  BrainCloudService_GlobalApp_ReadProperties_result() : success() {
  }

  virtual ~BrainCloudService_GlobalApp_ReadProperties_result() throw();
  std::string success;

  _BrainCloudService_GlobalApp_ReadProperties_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalApp_ReadProperties_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalApp_ReadProperties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalApp_ReadProperties_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalApp_ReadProperties_presult__isset {
  _BrainCloudService_GlobalApp_ReadProperties_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalApp_ReadProperties_presult__isset;

class BrainCloudService_GlobalApp_ReadProperties_presult {
 public:


  virtual ~BrainCloudService_GlobalApp_ReadProperties_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalApp_ReadProperties_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntity_args__isset {
  _BrainCloudService_GlobalEntity_CreateEntity_args__isset() : entityType(false), timeToLive(false), jsonEntityAcl(false), jsonEntityData(false), clientIndex(false) {}
  bool entityType :1;
  bool timeToLive :1;
  bool jsonEntityAcl :1;
  bool jsonEntityData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_CreateEntity_args__isset;

class BrainCloudService_GlobalEntity_CreateEntity_args {
 public:

  BrainCloudService_GlobalEntity_CreateEntity_args(const BrainCloudService_GlobalEntity_CreateEntity_args&);
  BrainCloudService_GlobalEntity_CreateEntity_args& operator=(const BrainCloudService_GlobalEntity_CreateEntity_args&);
  BrainCloudService_GlobalEntity_CreateEntity_args() : entityType(), timeToLive(0), jsonEntityAcl(), jsonEntityData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_CreateEntity_args() throw();
  std::string entityType;
  int64_t timeToLive;
  std::string jsonEntityAcl;
  std::string jsonEntityData;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_CreateEntity_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_timeToLive(const int64_t val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_CreateEntity_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(timeToLive == rhs.timeToLive))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_CreateEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_CreateEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_CreateEntity_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_CreateEntity_pargs() throw();
  const std::string* entityType;
  const int64_t* timeToLive;
  const std::string* jsonEntityAcl;
  const std::string* jsonEntityData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntity_result__isset {
  _BrainCloudService_GlobalEntity_CreateEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_CreateEntity_result__isset;

class BrainCloudService_GlobalEntity_CreateEntity_result {
 public:

  BrainCloudService_GlobalEntity_CreateEntity_result(const BrainCloudService_GlobalEntity_CreateEntity_result&);
  BrainCloudService_GlobalEntity_CreateEntity_result& operator=(const BrainCloudService_GlobalEntity_CreateEntity_result&);
  BrainCloudService_GlobalEntity_CreateEntity_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_CreateEntity_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_CreateEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_CreateEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_CreateEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_CreateEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntity_presult__isset {
  _BrainCloudService_GlobalEntity_CreateEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_CreateEntity_presult__isset;

class BrainCloudService_GlobalEntity_CreateEntity_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_CreateEntity_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_CreateEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args__isset {
  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args__isset() : entityType(false), indexedId(false), timeToLive(false), jsonEntityAcl(false), jsonEntityData(false), clientIndex(false) {}
  bool entityType :1;
  bool indexedId :1;
  bool timeToLive :1;
  bool jsonEntityAcl :1;
  bool jsonEntityData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args__isset;

class BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args {
 public:

  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args(const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args&);
  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args& operator=(const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args&);
  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args() : entityType(), indexedId(), timeToLive(0), jsonEntityAcl(), jsonEntityData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args() throw();
  std::string entityType;
  std::string indexedId;
  int64_t timeToLive;
  std::string jsonEntityAcl;
  std::string jsonEntityData;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args__isset __isset;

  void __set_entityType(const std::string& val);

  void __set_indexedId(const std::string& val);

  void __set_timeToLive(const int64_t val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_jsonEntityData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args & rhs) const
  {
    if (!(entityType == rhs.entityType))
      return false;
    if (!(indexedId == rhs.indexedId))
      return false;
    if (!(timeToLive == rhs.timeToLive))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_pargs() throw();
  const std::string* entityType;
  const std::string* indexedId;
  const int64_t* timeToLive;
  const std::string* jsonEntityAcl;
  const std::string* jsonEntityData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result__isset {
  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result__isset;

class BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result {
 public:

  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result(const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result&);
  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result& operator=(const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result&);
  BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult__isset {
  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult__isset;

class BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_CreateEntityWithIndexedId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntity_args__isset {
  _BrainCloudService_GlobalEntity_UpdateEntity_args__isset() : entityId(false), version(false), jsonEntityData(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool jsonEntityData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_UpdateEntity_args__isset;

class BrainCloudService_GlobalEntity_UpdateEntity_args {
 public:

  BrainCloudService_GlobalEntity_UpdateEntity_args(const BrainCloudService_GlobalEntity_UpdateEntity_args&);
  BrainCloudService_GlobalEntity_UpdateEntity_args& operator=(const BrainCloudService_GlobalEntity_UpdateEntity_args&);
  BrainCloudService_GlobalEntity_UpdateEntity_args() : entityId(), version(0), jsonEntityData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntity_args() throw();
  std::string entityId;
  int32_t version;
  std::string jsonEntityData;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_UpdateEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int32_t val);

  void __set_jsonEntityData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonEntityData == rhs.jsonEntityData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_UpdateEntity_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntity_pargs() throw();
  const std::string* entityId;
  const int32_t* version;
  const std::string* jsonEntityData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntity_result__isset {
  _BrainCloudService_GlobalEntity_UpdateEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntity_result__isset;

class BrainCloudService_GlobalEntity_UpdateEntity_result {
 public:

  BrainCloudService_GlobalEntity_UpdateEntity_result(const BrainCloudService_GlobalEntity_UpdateEntity_result&);
  BrainCloudService_GlobalEntity_UpdateEntity_result& operator=(const BrainCloudService_GlobalEntity_UpdateEntity_result&);
  BrainCloudService_GlobalEntity_UpdateEntity_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntity_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_UpdateEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntity_presult__isset {
  _BrainCloudService_GlobalEntity_UpdateEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntity_presult__isset;

class BrainCloudService_GlobalEntity_UpdateEntity_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntity_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_UpdateEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityAcl_args__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityAcl_args__isset() : entityId(false), version(false), jsonEntityAcl(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool jsonEntityAcl :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_UpdateEntityAcl_args__isset;

class BrainCloudService_GlobalEntity_UpdateEntityAcl_args {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityAcl_args(const BrainCloudService_GlobalEntity_UpdateEntityAcl_args&);
  BrainCloudService_GlobalEntity_UpdateEntityAcl_args& operator=(const BrainCloudService_GlobalEntity_UpdateEntityAcl_args&);
  BrainCloudService_GlobalEntity_UpdateEntityAcl_args() : entityId(), version(0), jsonEntityAcl(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityAcl_args() throw();
  std::string entityId;
  int32_t version;
  std::string jsonEntityAcl;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_UpdateEntityAcl_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int32_t val);

  void __set_jsonEntityAcl(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityAcl_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonEntityAcl == rhs.jsonEntityAcl))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityAcl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityAcl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_UpdateEntityAcl_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityAcl_pargs() throw();
  const std::string* entityId;
  const int32_t* version;
  const std::string* jsonEntityAcl;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityAcl_result__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityAcl_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityAcl_result__isset;

class BrainCloudService_GlobalEntity_UpdateEntityAcl_result {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityAcl_result(const BrainCloudService_GlobalEntity_UpdateEntityAcl_result&);
  BrainCloudService_GlobalEntity_UpdateEntityAcl_result& operator=(const BrainCloudService_GlobalEntity_UpdateEntityAcl_result&);
  BrainCloudService_GlobalEntity_UpdateEntityAcl_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityAcl_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_UpdateEntityAcl_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityAcl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityAcl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityAcl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityAcl_presult__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityAcl_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityAcl_presult__isset;

class BrainCloudService_GlobalEntity_UpdateEntityAcl_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityAcl_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_UpdateEntityAcl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args__isset() : entityId(false), version(false), timeToLive(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool timeToLive :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args__isset;

class BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args(const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args&);
  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args& operator=(const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args&);
  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args() : entityId(), version(0), timeToLive(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args() throw();
  std::string entityId;
  int32_t version;
  int64_t timeToLive;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int32_t val);

  void __set_timeToLive(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(timeToLive == rhs.timeToLive))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_pargs() throw();
  const std::string* entityId;
  const int32_t* version;
  const int64_t* timeToLive;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result__isset;

class BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result(const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result&);
  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result& operator=(const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result&);
  BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult__isset;

class BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_UpdateEntityTimeToLive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_DeleteEntity_args__isset {
  _BrainCloudService_GlobalEntity_DeleteEntity_args__isset() : entityId(false), version(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_DeleteEntity_args__isset;

class BrainCloudService_GlobalEntity_DeleteEntity_args {
 public:

  BrainCloudService_GlobalEntity_DeleteEntity_args(const BrainCloudService_GlobalEntity_DeleteEntity_args&);
  BrainCloudService_GlobalEntity_DeleteEntity_args& operator=(const BrainCloudService_GlobalEntity_DeleteEntity_args&);
  BrainCloudService_GlobalEntity_DeleteEntity_args() : entityId(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_DeleteEntity_args() throw();
  std::string entityId;
  int32_t version;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_DeleteEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_DeleteEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_DeleteEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_DeleteEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_DeleteEntity_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_DeleteEntity_pargs() throw();
  const std::string* entityId;
  const int32_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_DeleteEntity_result__isset {
  _BrainCloudService_GlobalEntity_DeleteEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_DeleteEntity_result__isset;

class BrainCloudService_GlobalEntity_DeleteEntity_result {
 public:

  BrainCloudService_GlobalEntity_DeleteEntity_result(const BrainCloudService_GlobalEntity_DeleteEntity_result&);
  BrainCloudService_GlobalEntity_DeleteEntity_result& operator=(const BrainCloudService_GlobalEntity_DeleteEntity_result&);
  BrainCloudService_GlobalEntity_DeleteEntity_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_DeleteEntity_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_DeleteEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_DeleteEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_DeleteEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_DeleteEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_DeleteEntity_presult__isset {
  _BrainCloudService_GlobalEntity_DeleteEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_DeleteEntity_presult__isset;

class BrainCloudService_GlobalEntity_DeleteEntity_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_DeleteEntity_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_DeleteEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_ReadEntity_args__isset {
  _BrainCloudService_GlobalEntity_ReadEntity_args__isset() : entityId(false), clientIndex(false) {}
  bool entityId :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_ReadEntity_args__isset;

class BrainCloudService_GlobalEntity_ReadEntity_args {
 public:

  BrainCloudService_GlobalEntity_ReadEntity_args(const BrainCloudService_GlobalEntity_ReadEntity_args&);
  BrainCloudService_GlobalEntity_ReadEntity_args& operator=(const BrainCloudService_GlobalEntity_ReadEntity_args&);
  BrainCloudService_GlobalEntity_ReadEntity_args() : entityId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_ReadEntity_args() throw();
  std::string entityId;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_ReadEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_ReadEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_ReadEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_ReadEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_ReadEntity_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_ReadEntity_pargs() throw();
  const std::string* entityId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_ReadEntity_result__isset {
  _BrainCloudService_GlobalEntity_ReadEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_ReadEntity_result__isset;

class BrainCloudService_GlobalEntity_ReadEntity_result {
 public:

  BrainCloudService_GlobalEntity_ReadEntity_result(const BrainCloudService_GlobalEntity_ReadEntity_result&);
  BrainCloudService_GlobalEntity_ReadEntity_result& operator=(const BrainCloudService_GlobalEntity_ReadEntity_result&);
  BrainCloudService_GlobalEntity_ReadEntity_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_ReadEntity_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_ReadEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_ReadEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_ReadEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_ReadEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_ReadEntity_presult__isset {
  _BrainCloudService_GlobalEntity_ReadEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_ReadEntity_presult__isset;

class BrainCloudService_GlobalEntity_ReadEntity_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_ReadEntity_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_ReadEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetList_args__isset {
  _BrainCloudService_GlobalEntity_GetList_args__isset() : whereJson(false), orderByJson(false), maxReturn(false), clientIndex(false) {}
  bool whereJson :1;
  bool orderByJson :1;
  bool maxReturn :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetList_args__isset;

class BrainCloudService_GlobalEntity_GetList_args {
 public:

  BrainCloudService_GlobalEntity_GetList_args(const BrainCloudService_GlobalEntity_GetList_args&);
  BrainCloudService_GlobalEntity_GetList_args& operator=(const BrainCloudService_GlobalEntity_GetList_args&);
  BrainCloudService_GlobalEntity_GetList_args() : whereJson(), orderByJson(), maxReturn(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetList_args() throw();
  std::string whereJson;
  std::string orderByJson;
  int32_t maxReturn;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetList_args__isset __isset;

  void __set_whereJson(const std::string& val);

  void __set_orderByJson(const std::string& val);

  void __set_maxReturn(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetList_args & rhs) const
  {
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(orderByJson == rhs.orderByJson))
      return false;
    if (!(maxReturn == rhs.maxReturn))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetList_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetList_pargs() throw();
  const std::string* whereJson;
  const std::string* orderByJson;
  const int32_t* maxReturn;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetList_result__isset {
  _BrainCloudService_GlobalEntity_GetList_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetList_result__isset;

class BrainCloudService_GlobalEntity_GetList_result {
 public:

  BrainCloudService_GlobalEntity_GetList_result(const BrainCloudService_GlobalEntity_GetList_result&);
  BrainCloudService_GlobalEntity_GetList_result& operator=(const BrainCloudService_GlobalEntity_GetList_result&);
  BrainCloudService_GlobalEntity_GetList_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetList_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetList_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetList_presult__isset {
  _BrainCloudService_GlobalEntity_GetList_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetList_presult__isset;

class BrainCloudService_GlobalEntity_GetList_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetList_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetListByIndexedId_args__isset {
  _BrainCloudService_GlobalEntity_GetListByIndexedId_args__isset() : entityIndexedId(false), maxReturn(false), clientIndex(false) {}
  bool entityIndexedId :1;
  bool maxReturn :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetListByIndexedId_args__isset;

class BrainCloudService_GlobalEntity_GetListByIndexedId_args {
 public:

  BrainCloudService_GlobalEntity_GetListByIndexedId_args(const BrainCloudService_GlobalEntity_GetListByIndexedId_args&);
  BrainCloudService_GlobalEntity_GetListByIndexedId_args& operator=(const BrainCloudService_GlobalEntity_GetListByIndexedId_args&);
  BrainCloudService_GlobalEntity_GetListByIndexedId_args() : entityIndexedId(), maxReturn(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetListByIndexedId_args() throw();
  std::string entityIndexedId;
  int32_t maxReturn;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetListByIndexedId_args__isset __isset;

  void __set_entityIndexedId(const std::string& val);

  void __set_maxReturn(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetListByIndexedId_args & rhs) const
  {
    if (!(entityIndexedId == rhs.entityIndexedId))
      return false;
    if (!(maxReturn == rhs.maxReturn))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetListByIndexedId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetListByIndexedId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetListByIndexedId_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetListByIndexedId_pargs() throw();
  const std::string* entityIndexedId;
  const int32_t* maxReturn;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetListByIndexedId_result__isset {
  _BrainCloudService_GlobalEntity_GetListByIndexedId_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetListByIndexedId_result__isset;

class BrainCloudService_GlobalEntity_GetListByIndexedId_result {
 public:

  BrainCloudService_GlobalEntity_GetListByIndexedId_result(const BrainCloudService_GlobalEntity_GetListByIndexedId_result&);
  BrainCloudService_GlobalEntity_GetListByIndexedId_result& operator=(const BrainCloudService_GlobalEntity_GetListByIndexedId_result&);
  BrainCloudService_GlobalEntity_GetListByIndexedId_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetListByIndexedId_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetListByIndexedId_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetListByIndexedId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetListByIndexedId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetListByIndexedId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetListByIndexedId_presult__isset {
  _BrainCloudService_GlobalEntity_GetListByIndexedId_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetListByIndexedId_presult__isset;

class BrainCloudService_GlobalEntity_GetListByIndexedId_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetListByIndexedId_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetListByIndexedId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetListCount_args__isset {
  _BrainCloudService_GlobalEntity_GetListCount_args__isset() : whereJson(false), clientIndex(false) {}
  bool whereJson :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetListCount_args__isset;

class BrainCloudService_GlobalEntity_GetListCount_args {
 public:

  BrainCloudService_GlobalEntity_GetListCount_args(const BrainCloudService_GlobalEntity_GetListCount_args&);
  BrainCloudService_GlobalEntity_GetListCount_args& operator=(const BrainCloudService_GlobalEntity_GetListCount_args&);
  BrainCloudService_GlobalEntity_GetListCount_args() : whereJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetListCount_args() throw();
  std::string whereJson;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetListCount_args__isset __isset;

  void __set_whereJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetListCount_args & rhs) const
  {
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetListCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetListCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetListCount_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetListCount_pargs() throw();
  const std::string* whereJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetListCount_result__isset {
  _BrainCloudService_GlobalEntity_GetListCount_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetListCount_result__isset;

class BrainCloudService_GlobalEntity_GetListCount_result {
 public:

  BrainCloudService_GlobalEntity_GetListCount_result(const BrainCloudService_GlobalEntity_GetListCount_result&);
  BrainCloudService_GlobalEntity_GetListCount_result& operator=(const BrainCloudService_GlobalEntity_GetListCount_result&);
  BrainCloudService_GlobalEntity_GetListCount_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetListCount_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetListCount_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetListCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetListCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetListCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetListCount_presult__isset {
  _BrainCloudService_GlobalEntity_GetListCount_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetListCount_presult__isset;

class BrainCloudService_GlobalEntity_GetListCount_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetListCount_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetListCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetPage_args__isset {
  _BrainCloudService_GlobalEntity_GetPage_args__isset() : jsonContext(false), clientIndex(false) {}
  bool jsonContext :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetPage_args__isset;

class BrainCloudService_GlobalEntity_GetPage_args {
 public:

  BrainCloudService_GlobalEntity_GetPage_args(const BrainCloudService_GlobalEntity_GetPage_args&);
  BrainCloudService_GlobalEntity_GetPage_args& operator=(const BrainCloudService_GlobalEntity_GetPage_args&);
  BrainCloudService_GlobalEntity_GetPage_args() : jsonContext(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetPage_args() throw();
  std::string jsonContext;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetPage_args__isset __isset;

  void __set_jsonContext(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetPage_args & rhs) const
  {
    if (!(jsonContext == rhs.jsonContext))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetPage_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetPage_pargs() throw();
  const std::string* jsonContext;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetPage_result__isset {
  _BrainCloudService_GlobalEntity_GetPage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetPage_result__isset;

class BrainCloudService_GlobalEntity_GetPage_result {
 public:

  BrainCloudService_GlobalEntity_GetPage_result(const BrainCloudService_GlobalEntity_GetPage_result&);
  BrainCloudService_GlobalEntity_GetPage_result& operator=(const BrainCloudService_GlobalEntity_GetPage_result&);
  BrainCloudService_GlobalEntity_GetPage_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetPage_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetPage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetPage_presult__isset {
  _BrainCloudService_GlobalEntity_GetPage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetPage_presult__isset;

class BrainCloudService_GlobalEntity_GetPage_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetPage_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetPageOffset_args__isset {
  _BrainCloudService_GlobalEntity_GetPageOffset_args__isset() : context(false), pageOffset(false), clientIndex(false) {}
  bool context :1;
  bool pageOffset :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetPageOffset_args__isset;

class BrainCloudService_GlobalEntity_GetPageOffset_args {
 public:

  BrainCloudService_GlobalEntity_GetPageOffset_args(const BrainCloudService_GlobalEntity_GetPageOffset_args&);
  BrainCloudService_GlobalEntity_GetPageOffset_args& operator=(const BrainCloudService_GlobalEntity_GetPageOffset_args&);
  BrainCloudService_GlobalEntity_GetPageOffset_args() : context(), pageOffset(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetPageOffset_args() throw();
  std::string context;
  int32_t pageOffset;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetPageOffset_args__isset __isset;

  void __set_context(const std::string& val);

  void __set_pageOffset(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetPageOffset_args & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    if (!(pageOffset == rhs.pageOffset))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetPageOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetPageOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetPageOffset_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetPageOffset_pargs() throw();
  const std::string* context;
  const int32_t* pageOffset;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetPageOffset_result__isset {
  _BrainCloudService_GlobalEntity_GetPageOffset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetPageOffset_result__isset;

class BrainCloudService_GlobalEntity_GetPageOffset_result {
 public:

  BrainCloudService_GlobalEntity_GetPageOffset_result(const BrainCloudService_GlobalEntity_GetPageOffset_result&);
  BrainCloudService_GlobalEntity_GetPageOffset_result& operator=(const BrainCloudService_GlobalEntity_GetPageOffset_result&);
  BrainCloudService_GlobalEntity_GetPageOffset_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetPageOffset_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetPageOffset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetPageOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetPageOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetPageOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetPageOffset_presult__isset {
  _BrainCloudService_GlobalEntity_GetPageOffset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetPageOffset_presult__isset;

class BrainCloudService_GlobalEntity_GetPageOffset_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetPageOffset_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetPageOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args__isset {
  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args__isset() : entityId(false), jsonData(false), clientIndex(false) {}
  bool entityId :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args__isset;

class BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args {
 public:

  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args(const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args&);
  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args& operator=(const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args&);
  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args() : entityId(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args() throw();
  std::string entityId;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_IncrementGlobalEntityData_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_IncrementGlobalEntityData_pargs() throw();
  const std::string* entityId;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result__isset {
  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result__isset;

class BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result {
 public:

  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result(const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result&);
  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result& operator=(const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result&);
  BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_IncrementGlobalEntityData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult__isset {
  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult__isset;

class BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_IncrementGlobalEntityData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args__isset {
  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args__isset() : whereJson(false), maxReturn(false), clientIndex(false) {}
  bool whereJson :1;
  bool maxReturn :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args__isset;

class BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args {
 public:

  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args(const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args&);
  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args& operator=(const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args&);
  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args() : whereJson(), maxReturn(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args() throw();
  std::string whereJson;
  int32_t maxReturn;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args__isset __isset;

  void __set_whereJson(const std::string& val);

  void __set_maxReturn(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args & rhs) const
  {
    if (!(whereJson == rhs.whereJson))
      return false;
    if (!(maxReturn == rhs.maxReturn))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_pargs() throw();
  const std::string* whereJson;
  const int32_t* maxReturn;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result__isset {
  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result__isset;

class BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result {
 public:

  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result(const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result&);
  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result& operator=(const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result&);
  BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult__isset {
  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult__isset;

class BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_GetRandomEntitiesMatching_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args__isset() : entityId(false), version(false), ownerId(false), acl(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool ownerId :1;
  bool acl :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args__isset;

class BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args(const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args&);
  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args& operator=(const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args&);
  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args() : entityId(), version(0), ownerId(), acl(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args() throw();
  std::string entityId;
  int64_t version;
  std::string ownerId;
   ::Ruyi::SDK::BrainCloudApi::JSON acl;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_ownerId(const std::string& val);

  void __set_acl(const  ::Ruyi::SDK::BrainCloudApi::JSON& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(ownerId == rhs.ownerId))
      return false;
    if (!(acl == rhs.acl))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_pargs() throw();
  const std::string* entityId;
  const int64_t* version;
  const std::string* ownerId;
  const  ::Ruyi::SDK::BrainCloudApi::JSON* acl;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result__isset;

class BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result {
 public:

  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result(const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result&);
  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result& operator=(const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result&);
  BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult__isset {
  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult__isset;

class BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_UpdateEntityOwnerAndAcl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalEntity_MakeSystemEntity_args__isset {
  _BrainCloudService_GlobalEntity_MakeSystemEntity_args__isset() : entityId(false), version(false), acl(false), clientIndex(false) {}
  bool entityId :1;
  bool version :1;
  bool acl :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalEntity_MakeSystemEntity_args__isset;

class BrainCloudService_GlobalEntity_MakeSystemEntity_args {
 public:

  BrainCloudService_GlobalEntity_MakeSystemEntity_args(const BrainCloudService_GlobalEntity_MakeSystemEntity_args&);
  BrainCloudService_GlobalEntity_MakeSystemEntity_args& operator=(const BrainCloudService_GlobalEntity_MakeSystemEntity_args&);
  BrainCloudService_GlobalEntity_MakeSystemEntity_args() : entityId(), version(0), acl(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalEntity_MakeSystemEntity_args() throw();
  std::string entityId;
  int64_t version;
   ::Ruyi::SDK::BrainCloudApi::JSON acl;
  int32_t clientIndex;

  _BrainCloudService_GlobalEntity_MakeSystemEntity_args__isset __isset;

  void __set_entityId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_acl(const  ::Ruyi::SDK::BrainCloudApi::JSON& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalEntity_MakeSystemEntity_args & rhs) const
  {
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(acl == rhs.acl))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_MakeSystemEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_MakeSystemEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalEntity_MakeSystemEntity_pargs {
 public:


  virtual ~BrainCloudService_GlobalEntity_MakeSystemEntity_pargs() throw();
  const std::string* entityId;
  const int64_t* version;
  const  ::Ruyi::SDK::BrainCloudApi::JSON* acl;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_MakeSystemEntity_result__isset {
  _BrainCloudService_GlobalEntity_MakeSystemEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_MakeSystemEntity_result__isset;

class BrainCloudService_GlobalEntity_MakeSystemEntity_result {
 public:

  BrainCloudService_GlobalEntity_MakeSystemEntity_result(const BrainCloudService_GlobalEntity_MakeSystemEntity_result&);
  BrainCloudService_GlobalEntity_MakeSystemEntity_result& operator=(const BrainCloudService_GlobalEntity_MakeSystemEntity_result&);
  BrainCloudService_GlobalEntity_MakeSystemEntity_result() : success() {
  }

  virtual ~BrainCloudService_GlobalEntity_MakeSystemEntity_result() throw();
  std::string success;

  _BrainCloudService_GlobalEntity_MakeSystemEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalEntity_MakeSystemEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalEntity_MakeSystemEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalEntity_MakeSystemEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalEntity_MakeSystemEntity_presult__isset {
  _BrainCloudService_GlobalEntity_MakeSystemEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalEntity_MakeSystemEntity_presult__isset;

class BrainCloudService_GlobalEntity_MakeSystemEntity_presult {
 public:


  virtual ~BrainCloudService_GlobalEntity_MakeSystemEntity_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalEntity_MakeSystemEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args__isset {
  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args__isset;

class BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args {
 public:

  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args(const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args&);
  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args& operator=(const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args&);
  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args() throw();
  int32_t clientIndex;

  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalStatistics_ReadAllGlobalStats_pargs {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadAllGlobalStats_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result__isset {
  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result__isset;

class BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result {
 public:

  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result(const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result&);
  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result& operator=(const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result&);
  BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result() : success() {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result() throw();
  std::string success;

  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadAllGlobalStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult__isset {
  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult__isset;

class BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalStatistics_ReadAllGlobalStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args__isset() : globalStats(false), clientIndex(false) {}
  bool globalStats :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args {
 public:

  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args(const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args& operator=(const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args() throw();
  std::vector<std::string>  globalStats;
  int32_t clientIndex;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args__isset __isset;

  void __set_globalStats(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args & rhs) const
  {
    if (!(globalStats == rhs.globalStats))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_pargs {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_pargs() throw();
  const std::vector<std::string> * globalStats;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result {
 public:

  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result(const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result& operator=(const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result() : success() {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result() throw();
  std::string success;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsSubset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args__isset() : category(false), clientIndex(false) {}
  bool category :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args {
 public:

  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args(const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args& operator=(const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args() : category(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args() throw();
  std::string category;
  int32_t clientIndex;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args__isset __isset;

  void __set_category(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_pargs {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_pargs() throw();
  const std::string* category;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result {
 public:

  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result(const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result& operator=(const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result&);
  BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result() : success() {
  }

  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result() throw();
  std::string success;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult__isset {
  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult__isset;

class BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalStatistics_ReadGlobalStatsForCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalStatistics_IncrementGlobalStats_args__isset {
  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_args__isset() : jsonData(false), clientIndex(false) {}
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalStatistics_IncrementGlobalStats_args__isset;

class BrainCloudService_GlobalStatistics_IncrementGlobalStats_args {
 public:

  BrainCloudService_GlobalStatistics_IncrementGlobalStats_args(const BrainCloudService_GlobalStatistics_IncrementGlobalStats_args&);
  BrainCloudService_GlobalStatistics_IncrementGlobalStats_args& operator=(const BrainCloudService_GlobalStatistics_IncrementGlobalStats_args&);
  BrainCloudService_GlobalStatistics_IncrementGlobalStats_args() : jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalStatistics_IncrementGlobalStats_args() throw();
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_args__isset __isset;

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_args & rhs) const
  {
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalStatistics_IncrementGlobalStats_pargs {
 public:


  virtual ~BrainCloudService_GlobalStatistics_IncrementGlobalStats_pargs() throw();
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_IncrementGlobalStats_result__isset {
  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_IncrementGlobalStats_result__isset;

class BrainCloudService_GlobalStatistics_IncrementGlobalStats_result {
 public:

  BrainCloudService_GlobalStatistics_IncrementGlobalStats_result(const BrainCloudService_GlobalStatistics_IncrementGlobalStats_result&);
  BrainCloudService_GlobalStatistics_IncrementGlobalStats_result& operator=(const BrainCloudService_GlobalStatistics_IncrementGlobalStats_result&);
  BrainCloudService_GlobalStatistics_IncrementGlobalStats_result() : success() {
  }

  virtual ~BrainCloudService_GlobalStatistics_IncrementGlobalStats_result() throw();
  std::string success;

  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_IncrementGlobalStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult__isset {
  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult__isset;

class BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult {
 public:


  virtual ~BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalStatistics_IncrementGlobalStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_GlobalStatistics_ProcessStatistics_args__isset {
  _BrainCloudService_GlobalStatistics_ProcessStatistics_args__isset() : statisticsData(false), clientIndex(false) {}
  bool statisticsData :1;
  bool clientIndex :1;
} _BrainCloudService_GlobalStatistics_ProcessStatistics_args__isset;

class BrainCloudService_GlobalStatistics_ProcessStatistics_args {
 public:

  BrainCloudService_GlobalStatistics_ProcessStatistics_args(const BrainCloudService_GlobalStatistics_ProcessStatistics_args&);
  BrainCloudService_GlobalStatistics_ProcessStatistics_args& operator=(const BrainCloudService_GlobalStatistics_ProcessStatistics_args&);
  BrainCloudService_GlobalStatistics_ProcessStatistics_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_GlobalStatistics_ProcessStatistics_args() throw();
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  statisticsData;
  int32_t clientIndex;

  _BrainCloudService_GlobalStatistics_ProcessStatistics_args__isset __isset;

  void __set_statisticsData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_GlobalStatistics_ProcessStatistics_args & rhs) const
  {
    if (!(statisticsData == rhs.statisticsData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ProcessStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ProcessStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_GlobalStatistics_ProcessStatistics_pargs {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ProcessStatistics_pargs() throw();
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * statisticsData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ProcessStatistics_result__isset {
  _BrainCloudService_GlobalStatistics_ProcessStatistics_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ProcessStatistics_result__isset;

class BrainCloudService_GlobalStatistics_ProcessStatistics_result {
 public:

  BrainCloudService_GlobalStatistics_ProcessStatistics_result(const BrainCloudService_GlobalStatistics_ProcessStatistics_result&);
  BrainCloudService_GlobalStatistics_ProcessStatistics_result& operator=(const BrainCloudService_GlobalStatistics_ProcessStatistics_result&);
  BrainCloudService_GlobalStatistics_ProcessStatistics_result() : success() {
  }

  virtual ~BrainCloudService_GlobalStatistics_ProcessStatistics_result() throw();
  std::string success;

  _BrainCloudService_GlobalStatistics_ProcessStatistics_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_GlobalStatistics_ProcessStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_GlobalStatistics_ProcessStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_GlobalStatistics_ProcessStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_GlobalStatistics_ProcessStatistics_presult__isset {
  _BrainCloudService_GlobalStatistics_ProcessStatistics_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_GlobalStatistics_ProcessStatistics_presult__isset;

class BrainCloudService_GlobalStatistics_ProcessStatistics_presult {
 public:


  virtual ~BrainCloudService_GlobalStatistics_ProcessStatistics_presult() throw();
  std::string* success;

  _BrainCloudService_GlobalStatistics_ProcessStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_AcceptGroupInvitation_args__isset {
  _BrainCloudService_Group_AcceptGroupInvitation_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_AcceptGroupInvitation_args__isset;

class BrainCloudService_Group_AcceptGroupInvitation_args {
 public:

  BrainCloudService_Group_AcceptGroupInvitation_args(const BrainCloudService_Group_AcceptGroupInvitation_args&);
  BrainCloudService_Group_AcceptGroupInvitation_args& operator=(const BrainCloudService_Group_AcceptGroupInvitation_args&);
  BrainCloudService_Group_AcceptGroupInvitation_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_AcceptGroupInvitation_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_AcceptGroupInvitation_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_AcceptGroupInvitation_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AcceptGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AcceptGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_AcceptGroupInvitation_pargs {
 public:


  virtual ~BrainCloudService_Group_AcceptGroupInvitation_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AcceptGroupInvitation_result__isset {
  _BrainCloudService_Group_AcceptGroupInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AcceptGroupInvitation_result__isset;

class BrainCloudService_Group_AcceptGroupInvitation_result {
 public:

  BrainCloudService_Group_AcceptGroupInvitation_result(const BrainCloudService_Group_AcceptGroupInvitation_result&);
  BrainCloudService_Group_AcceptGroupInvitation_result& operator=(const BrainCloudService_Group_AcceptGroupInvitation_result&);
  BrainCloudService_Group_AcceptGroupInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Group_AcceptGroupInvitation_result() throw();
  std::string success;

  _BrainCloudService_Group_AcceptGroupInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_AcceptGroupInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AcceptGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AcceptGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AcceptGroupInvitation_presult__isset {
  _BrainCloudService_Group_AcceptGroupInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AcceptGroupInvitation_presult__isset;

class BrainCloudService_Group_AcceptGroupInvitation_presult {
 public:


  virtual ~BrainCloudService_Group_AcceptGroupInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Group_AcceptGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_AddGroupMember_args__isset {
  _BrainCloudService_Group_AddGroupMember_args__isset() : groupId(false), profileId(false), role(false), jsonAttributes(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool role :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Group_AddGroupMember_args__isset;

class BrainCloudService_Group_AddGroupMember_args {
 public:

  BrainCloudService_Group_AddGroupMember_args(const BrainCloudService_Group_AddGroupMember_args&);
  BrainCloudService_Group_AddGroupMember_args& operator=(const BrainCloudService_Group_AddGroupMember_args&);
  BrainCloudService_Group_AddGroupMember_args() : groupId(), profileId(), role(( ::Ruyi::SDK::BrainCloudApi::Role::type)0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_AddGroupMember_args() throw();
  std::string groupId;
  std::string profileId;
   ::Ruyi::SDK::BrainCloudApi::Role::type role;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Group_AddGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_role(const  ::Ruyi::SDK::BrainCloudApi::Role::type val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_AddGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AddGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AddGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_AddGroupMember_pargs {
 public:


  virtual ~BrainCloudService_Group_AddGroupMember_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const  ::Ruyi::SDK::BrainCloudApi::Role::type* role;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AddGroupMember_result__isset {
  _BrainCloudService_Group_AddGroupMember_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AddGroupMember_result__isset;

class BrainCloudService_Group_AddGroupMember_result {
 public:

  BrainCloudService_Group_AddGroupMember_result(const BrainCloudService_Group_AddGroupMember_result&);
  BrainCloudService_Group_AddGroupMember_result& operator=(const BrainCloudService_Group_AddGroupMember_result&);
  BrainCloudService_Group_AddGroupMember_result() : success() {
  }

  virtual ~BrainCloudService_Group_AddGroupMember_result() throw();
  std::string success;

  _BrainCloudService_Group_AddGroupMember_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_AddGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AddGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AddGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AddGroupMember_presult__isset {
  _BrainCloudService_Group_AddGroupMember_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AddGroupMember_presult__isset;

class BrainCloudService_Group_AddGroupMember_presult {
 public:


  virtual ~BrainCloudService_Group_AddGroupMember_presult() throw();
  std::string* success;

  _BrainCloudService_Group_AddGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ApproveGroupJoinRequest_args__isset {
  _BrainCloudService_Group_ApproveGroupJoinRequest_args__isset() : groupId(false), profileId(false), role(false), jsonAttributes(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool role :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ApproveGroupJoinRequest_args__isset;

class BrainCloudService_Group_ApproveGroupJoinRequest_args {
 public:

  BrainCloudService_Group_ApproveGroupJoinRequest_args(const BrainCloudService_Group_ApproveGroupJoinRequest_args&);
  BrainCloudService_Group_ApproveGroupJoinRequest_args& operator=(const BrainCloudService_Group_ApproveGroupJoinRequest_args&);
  BrainCloudService_Group_ApproveGroupJoinRequest_args() : groupId(), profileId(), role(( ::Ruyi::SDK::BrainCloudApi::Role::type)0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ApproveGroupJoinRequest_args() throw();
  std::string groupId;
  std::string profileId;
   ::Ruyi::SDK::BrainCloudApi::Role::type role;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Group_ApproveGroupJoinRequest_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_role(const  ::Ruyi::SDK::BrainCloudApi::Role::type val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ApproveGroupJoinRequest_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ApproveGroupJoinRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ApproveGroupJoinRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ApproveGroupJoinRequest_pargs {
 public:


  virtual ~BrainCloudService_Group_ApproveGroupJoinRequest_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const  ::Ruyi::SDK::BrainCloudApi::Role::type* role;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ApproveGroupJoinRequest_result__isset {
  _BrainCloudService_Group_ApproveGroupJoinRequest_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ApproveGroupJoinRequest_result__isset;

class BrainCloudService_Group_ApproveGroupJoinRequest_result {
 public:

  BrainCloudService_Group_ApproveGroupJoinRequest_result(const BrainCloudService_Group_ApproveGroupJoinRequest_result&);
  BrainCloudService_Group_ApproveGroupJoinRequest_result& operator=(const BrainCloudService_Group_ApproveGroupJoinRequest_result&);
  BrainCloudService_Group_ApproveGroupJoinRequest_result() : success() {
  }

  virtual ~BrainCloudService_Group_ApproveGroupJoinRequest_result() throw();
  std::string success;

  _BrainCloudService_Group_ApproveGroupJoinRequest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ApproveGroupJoinRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ApproveGroupJoinRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ApproveGroupJoinRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ApproveGroupJoinRequest_presult__isset {
  _BrainCloudService_Group_ApproveGroupJoinRequest_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ApproveGroupJoinRequest_presult__isset;

class BrainCloudService_Group_ApproveGroupJoinRequest_presult {
 public:


  virtual ~BrainCloudService_Group_ApproveGroupJoinRequest_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ApproveGroupJoinRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_AutoJoinGroup_args__isset {
  _BrainCloudService_Group_AutoJoinGroup_args__isset() : groupType(false), autoJoinStrategy(false), dataQueryJson(false), clientIndex(false) {}
  bool groupType :1;
  bool autoJoinStrategy :1;
  bool dataQueryJson :1;
  bool clientIndex :1;
} _BrainCloudService_Group_AutoJoinGroup_args__isset;

class BrainCloudService_Group_AutoJoinGroup_args {
 public:

  BrainCloudService_Group_AutoJoinGroup_args(const BrainCloudService_Group_AutoJoinGroup_args&);
  BrainCloudService_Group_AutoJoinGroup_args& operator=(const BrainCloudService_Group_AutoJoinGroup_args&);
  BrainCloudService_Group_AutoJoinGroup_args() : groupType(), autoJoinStrategy(( ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type)0), dataQueryJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_AutoJoinGroup_args() throw();
  std::string groupType;
   ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy;
  std::string dataQueryJson;
  int32_t clientIndex;

  _BrainCloudService_Group_AutoJoinGroup_args__isset __isset;

  void __set_groupType(const std::string& val);

  void __set_autoJoinStrategy(const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type val);

  void __set_dataQueryJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_AutoJoinGroup_args & rhs) const
  {
    if (!(groupType == rhs.groupType))
      return false;
    if (!(autoJoinStrategy == rhs.autoJoinStrategy))
      return false;
    if (!(dataQueryJson == rhs.dataQueryJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AutoJoinGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AutoJoinGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_AutoJoinGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_AutoJoinGroup_pargs() throw();
  const std::string* groupType;
  const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type* autoJoinStrategy;
  const std::string* dataQueryJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AutoJoinGroup_result__isset {
  _BrainCloudService_Group_AutoJoinGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AutoJoinGroup_result__isset;

class BrainCloudService_Group_AutoJoinGroup_result {
 public:

  BrainCloudService_Group_AutoJoinGroup_result(const BrainCloudService_Group_AutoJoinGroup_result&);
  BrainCloudService_Group_AutoJoinGroup_result& operator=(const BrainCloudService_Group_AutoJoinGroup_result&);
  BrainCloudService_Group_AutoJoinGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_AutoJoinGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_AutoJoinGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_AutoJoinGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_AutoJoinGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_AutoJoinGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_AutoJoinGroup_presult__isset {
  _BrainCloudService_Group_AutoJoinGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_AutoJoinGroup_presult__isset;

class BrainCloudService_Group_AutoJoinGroup_presult {
 public:


  virtual ~BrainCloudService_Group_AutoJoinGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_AutoJoinGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_CancelGroupInvitation_args__isset {
  _BrainCloudService_Group_CancelGroupInvitation_args__isset() : groupId(false), profileId(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_CancelGroupInvitation_args__isset;

class BrainCloudService_Group_CancelGroupInvitation_args {
 public:

  BrainCloudService_Group_CancelGroupInvitation_args(const BrainCloudService_Group_CancelGroupInvitation_args&);
  BrainCloudService_Group_CancelGroupInvitation_args& operator=(const BrainCloudService_Group_CancelGroupInvitation_args&);
  BrainCloudService_Group_CancelGroupInvitation_args() : groupId(), profileId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_CancelGroupInvitation_args() throw();
  std::string groupId;
  std::string profileId;
  int32_t clientIndex;

  _BrainCloudService_Group_CancelGroupInvitation_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_CancelGroupInvitation_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CancelGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CancelGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_CancelGroupInvitation_pargs {
 public:


  virtual ~BrainCloudService_Group_CancelGroupInvitation_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CancelGroupInvitation_result__isset {
  _BrainCloudService_Group_CancelGroupInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CancelGroupInvitation_result__isset;

class BrainCloudService_Group_CancelGroupInvitation_result {
 public:

  BrainCloudService_Group_CancelGroupInvitation_result(const BrainCloudService_Group_CancelGroupInvitation_result&);
  BrainCloudService_Group_CancelGroupInvitation_result& operator=(const BrainCloudService_Group_CancelGroupInvitation_result&);
  BrainCloudService_Group_CancelGroupInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Group_CancelGroupInvitation_result() throw();
  std::string success;

  _BrainCloudService_Group_CancelGroupInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_CancelGroupInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CancelGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CancelGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CancelGroupInvitation_presult__isset {
  _BrainCloudService_Group_CancelGroupInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CancelGroupInvitation_presult__isset;

class BrainCloudService_Group_CancelGroupInvitation_presult {
 public:


  virtual ~BrainCloudService_Group_CancelGroupInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Group_CancelGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_CreateGroup_args__isset {
  _BrainCloudService_Group_CreateGroup_args__isset() : name(false), groupType(false), isOpenGroup(false), acl(false), jsonData(false), jsonOwnerAttributes(false), jsonDefaultMemberAttributes(false), clientIndex(false) {}
  bool name :1;
  bool groupType :1;
  bool isOpenGroup :1;
  bool acl :1;
  bool jsonData :1;
  bool jsonOwnerAttributes :1;
  bool jsonDefaultMemberAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Group_CreateGroup_args__isset;

class BrainCloudService_Group_CreateGroup_args {
 public:

  BrainCloudService_Group_CreateGroup_args(const BrainCloudService_Group_CreateGroup_args&);
  BrainCloudService_Group_CreateGroup_args& operator=(const BrainCloudService_Group_CreateGroup_args&);
  BrainCloudService_Group_CreateGroup_args() : name(), groupType(), isOpenGroup(0), acl(), jsonData(), jsonOwnerAttributes(), jsonDefaultMemberAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_CreateGroup_args() throw();
  std::string name;
  std::string groupType;
  bool isOpenGroup;
   ::Ruyi::SDK::BrainCloudApi::JSON acl;
  std::string jsonData;
  std::string jsonOwnerAttributes;
  std::string jsonDefaultMemberAttributes;
  int32_t clientIndex;

  _BrainCloudService_Group_CreateGroup_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_groupType(const std::string& val);

  void __set_isOpenGroup(const bool val);

  void __set_acl(const  ::Ruyi::SDK::BrainCloudApi::JSON& val);

  void __set_jsonData(const std::string& val);

  void __set_jsonOwnerAttributes(const std::string& val);

  void __set_jsonDefaultMemberAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_CreateGroup_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(groupType == rhs.groupType))
      return false;
    if (!(isOpenGroup == rhs.isOpenGroup))
      return false;
    if (!(acl == rhs.acl))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(jsonOwnerAttributes == rhs.jsonOwnerAttributes))
      return false;
    if (!(jsonDefaultMemberAttributes == rhs.jsonDefaultMemberAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CreateGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CreateGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_CreateGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_CreateGroup_pargs() throw();
  const std::string* name;
  const std::string* groupType;
  const bool* isOpenGroup;
  const  ::Ruyi::SDK::BrainCloudApi::JSON* acl;
  const std::string* jsonData;
  const std::string* jsonOwnerAttributes;
  const std::string* jsonDefaultMemberAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CreateGroup_result__isset {
  _BrainCloudService_Group_CreateGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CreateGroup_result__isset;

class BrainCloudService_Group_CreateGroup_result {
 public:

  BrainCloudService_Group_CreateGroup_result(const BrainCloudService_Group_CreateGroup_result&);
  BrainCloudService_Group_CreateGroup_result& operator=(const BrainCloudService_Group_CreateGroup_result&);
  BrainCloudService_Group_CreateGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_CreateGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_CreateGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_CreateGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CreateGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CreateGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CreateGroup_presult__isset {
  _BrainCloudService_Group_CreateGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CreateGroup_presult__isset;

class BrainCloudService_Group_CreateGroup_presult {
 public:


  virtual ~BrainCloudService_Group_CreateGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_CreateGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_CreateGroupEntity_args__isset {
  _BrainCloudService_Group_CreateGroupEntity_args__isset() : groupId(false), entityType(false), isOwnedByGroupMember(false), acl(false), jsonData(false), clientIndex(false) {}
  bool groupId :1;
  bool entityType :1;
  bool isOwnedByGroupMember :1;
  bool acl :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Group_CreateGroupEntity_args__isset;

class BrainCloudService_Group_CreateGroupEntity_args {
 public:

  BrainCloudService_Group_CreateGroupEntity_args(const BrainCloudService_Group_CreateGroupEntity_args&);
  BrainCloudService_Group_CreateGroupEntity_args& operator=(const BrainCloudService_Group_CreateGroupEntity_args&);
  BrainCloudService_Group_CreateGroupEntity_args() : groupId(), entityType(), isOwnedByGroupMember(0), acl(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_CreateGroupEntity_args() throw();
  std::string groupId;
  std::string entityType;
  bool isOwnedByGroupMember;
   ::Ruyi::SDK::BrainCloudApi::JSON acl;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Group_CreateGroupEntity_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_entityType(const std::string& val);

  void __set_isOwnedByGroupMember(const bool val);

  void __set_acl(const  ::Ruyi::SDK::BrainCloudApi::JSON& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_CreateGroupEntity_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(entityType == rhs.entityType))
      return false;
    if (!(isOwnedByGroupMember == rhs.isOwnedByGroupMember))
      return false;
    if (!(acl == rhs.acl))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CreateGroupEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CreateGroupEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_CreateGroupEntity_pargs {
 public:


  virtual ~BrainCloudService_Group_CreateGroupEntity_pargs() throw();
  const std::string* groupId;
  const std::string* entityType;
  const bool* isOwnedByGroupMember;
  const  ::Ruyi::SDK::BrainCloudApi::JSON* acl;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CreateGroupEntity_result__isset {
  _BrainCloudService_Group_CreateGroupEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CreateGroupEntity_result__isset;

class BrainCloudService_Group_CreateGroupEntity_result {
 public:

  BrainCloudService_Group_CreateGroupEntity_result(const BrainCloudService_Group_CreateGroupEntity_result&);
  BrainCloudService_Group_CreateGroupEntity_result& operator=(const BrainCloudService_Group_CreateGroupEntity_result&);
  BrainCloudService_Group_CreateGroupEntity_result() : success() {
  }

  virtual ~BrainCloudService_Group_CreateGroupEntity_result() throw();
  std::string success;

  _BrainCloudService_Group_CreateGroupEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_CreateGroupEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_CreateGroupEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_CreateGroupEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_CreateGroupEntity_presult__isset {
  _BrainCloudService_Group_CreateGroupEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_CreateGroupEntity_presult__isset;

class BrainCloudService_Group_CreateGroupEntity_presult {
 public:


  virtual ~BrainCloudService_Group_CreateGroupEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Group_CreateGroupEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_DeleteGroup_args__isset {
  _BrainCloudService_Group_DeleteGroup_args__isset() : groupId(false), version(false), clientIndex(false) {}
  bool groupId :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Group_DeleteGroup_args__isset;

class BrainCloudService_Group_DeleteGroup_args {
 public:

  BrainCloudService_Group_DeleteGroup_args(const BrainCloudService_Group_DeleteGroup_args&);
  BrainCloudService_Group_DeleteGroup_args& operator=(const BrainCloudService_Group_DeleteGroup_args&);
  BrainCloudService_Group_DeleteGroup_args() : groupId(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_DeleteGroup_args() throw();
  std::string groupId;
  int64_t version;
  int32_t clientIndex;

  _BrainCloudService_Group_DeleteGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_DeleteGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_DeleteGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_DeleteGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_DeleteGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_DeleteGroup_pargs() throw();
  const std::string* groupId;
  const int64_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_DeleteGroup_result__isset {
  _BrainCloudService_Group_DeleteGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_DeleteGroup_result__isset;

class BrainCloudService_Group_DeleteGroup_result {
 public:

  BrainCloudService_Group_DeleteGroup_result(const BrainCloudService_Group_DeleteGroup_result&);
  BrainCloudService_Group_DeleteGroup_result& operator=(const BrainCloudService_Group_DeleteGroup_result&);
  BrainCloudService_Group_DeleteGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_DeleteGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_DeleteGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_DeleteGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_DeleteGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_DeleteGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_DeleteGroup_presult__isset {
  _BrainCloudService_Group_DeleteGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_DeleteGroup_presult__isset;

class BrainCloudService_Group_DeleteGroup_presult {
 public:


  virtual ~BrainCloudService_Group_DeleteGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_DeleteGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_DeleteGroupEntity_args__isset {
  _BrainCloudService_Group_DeleteGroupEntity_args__isset() : groupId(false), entityId(false), version(false), clientIndex(false) {}
  bool groupId :1;
  bool entityId :1;
  bool version :1;
  bool clientIndex :1;
} _BrainCloudService_Group_DeleteGroupEntity_args__isset;

class BrainCloudService_Group_DeleteGroupEntity_args {
 public:

  BrainCloudService_Group_DeleteGroupEntity_args(const BrainCloudService_Group_DeleteGroupEntity_args&);
  BrainCloudService_Group_DeleteGroupEntity_args& operator=(const BrainCloudService_Group_DeleteGroupEntity_args&);
  BrainCloudService_Group_DeleteGroupEntity_args() : groupId(), entityId(), version(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_DeleteGroupEntity_args() throw();
  std::string groupId;
  std::string entityId;
  int64_t version;
  int32_t clientIndex;

  _BrainCloudService_Group_DeleteGroupEntity_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_entityId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_DeleteGroupEntity_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_DeleteGroupEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_DeleteGroupEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_DeleteGroupEntity_pargs {
 public:


  virtual ~BrainCloudService_Group_DeleteGroupEntity_pargs() throw();
  const std::string* groupId;
  const std::string* entityId;
  const int64_t* version;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_DeleteGroupEntity_result__isset {
  _BrainCloudService_Group_DeleteGroupEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_DeleteGroupEntity_result__isset;

class BrainCloudService_Group_DeleteGroupEntity_result {
 public:

  BrainCloudService_Group_DeleteGroupEntity_result(const BrainCloudService_Group_DeleteGroupEntity_result&);
  BrainCloudService_Group_DeleteGroupEntity_result& operator=(const BrainCloudService_Group_DeleteGroupEntity_result&);
  BrainCloudService_Group_DeleteGroupEntity_result() : success() {
  }

  virtual ~BrainCloudService_Group_DeleteGroupEntity_result() throw();
  std::string success;

  _BrainCloudService_Group_DeleteGroupEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_DeleteGroupEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_DeleteGroupEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_DeleteGroupEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_DeleteGroupEntity_presult__isset {
  _BrainCloudService_Group_DeleteGroupEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_DeleteGroupEntity_presult__isset;

class BrainCloudService_Group_DeleteGroupEntity_presult {
 public:


  virtual ~BrainCloudService_Group_DeleteGroupEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Group_DeleteGroupEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_GetMyGroups_args__isset {
  _BrainCloudService_Group_GetMyGroups_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Group_GetMyGroups_args__isset;

class BrainCloudService_Group_GetMyGroups_args {
 public:

  BrainCloudService_Group_GetMyGroups_args(const BrainCloudService_Group_GetMyGroups_args&);
  BrainCloudService_Group_GetMyGroups_args& operator=(const BrainCloudService_Group_GetMyGroups_args&);
  BrainCloudService_Group_GetMyGroups_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_GetMyGroups_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Group_GetMyGroups_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_GetMyGroups_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_GetMyGroups_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_GetMyGroups_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_GetMyGroups_pargs {
 public:


  virtual ~BrainCloudService_Group_GetMyGroups_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_GetMyGroups_result__isset {
  _BrainCloudService_Group_GetMyGroups_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_GetMyGroups_result__isset;

class BrainCloudService_Group_GetMyGroups_result {
 public:

  BrainCloudService_Group_GetMyGroups_result(const BrainCloudService_Group_GetMyGroups_result&);
  BrainCloudService_Group_GetMyGroups_result& operator=(const BrainCloudService_Group_GetMyGroups_result&);
  BrainCloudService_Group_GetMyGroups_result() : success() {
  }

  virtual ~BrainCloudService_Group_GetMyGroups_result() throw();
  std::string success;

  _BrainCloudService_Group_GetMyGroups_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_GetMyGroups_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_GetMyGroups_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_GetMyGroups_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_GetMyGroups_presult__isset {
  _BrainCloudService_Group_GetMyGroups_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_GetMyGroups_presult__isset;

class BrainCloudService_Group_GetMyGroups_presult {
 public:


  virtual ~BrainCloudService_Group_GetMyGroups_presult() throw();
  std::string* success;

  _BrainCloudService_Group_GetMyGroups_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_IncrementGroupData_args__isset {
  _BrainCloudService_Group_IncrementGroupData_args__isset() : groupId(false), jsonData(false), clientIndex(false) {}
  bool groupId :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Group_IncrementGroupData_args__isset;

class BrainCloudService_Group_IncrementGroupData_args {
 public:

  BrainCloudService_Group_IncrementGroupData_args(const BrainCloudService_Group_IncrementGroupData_args&);
  BrainCloudService_Group_IncrementGroupData_args& operator=(const BrainCloudService_Group_IncrementGroupData_args&);
  BrainCloudService_Group_IncrementGroupData_args() : groupId(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_IncrementGroupData_args() throw();
  std::string groupId;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Group_IncrementGroupData_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_IncrementGroupData_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_IncrementGroupData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_IncrementGroupData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_IncrementGroupData_pargs {
 public:


  virtual ~BrainCloudService_Group_IncrementGroupData_pargs() throw();
  const std::string* groupId;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_IncrementGroupData_result__isset {
  _BrainCloudService_Group_IncrementGroupData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_IncrementGroupData_result__isset;

class BrainCloudService_Group_IncrementGroupData_result {
 public:

  BrainCloudService_Group_IncrementGroupData_result(const BrainCloudService_Group_IncrementGroupData_result&);
  BrainCloudService_Group_IncrementGroupData_result& operator=(const BrainCloudService_Group_IncrementGroupData_result&);
  BrainCloudService_Group_IncrementGroupData_result() : success() {
  }

  virtual ~BrainCloudService_Group_IncrementGroupData_result() throw();
  std::string success;

  _BrainCloudService_Group_IncrementGroupData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_IncrementGroupData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_IncrementGroupData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_IncrementGroupData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_IncrementGroupData_presult__isset {
  _BrainCloudService_Group_IncrementGroupData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_IncrementGroupData_presult__isset;

class BrainCloudService_Group_IncrementGroupData_presult {
 public:


  virtual ~BrainCloudService_Group_IncrementGroupData_presult() throw();
  std::string* success;

  _BrainCloudService_Group_IncrementGroupData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_IncrementGroupEntityData_args__isset {
  _BrainCloudService_Group_IncrementGroupEntityData_args__isset() : groupId(false), entityId(false), jsonData(false), clientIndex(false) {}
  bool groupId :1;
  bool entityId :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Group_IncrementGroupEntityData_args__isset;

class BrainCloudService_Group_IncrementGroupEntityData_args {
 public:

  BrainCloudService_Group_IncrementGroupEntityData_args(const BrainCloudService_Group_IncrementGroupEntityData_args&);
  BrainCloudService_Group_IncrementGroupEntityData_args& operator=(const BrainCloudService_Group_IncrementGroupEntityData_args&);
  BrainCloudService_Group_IncrementGroupEntityData_args() : groupId(), entityId(), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_IncrementGroupEntityData_args() throw();
  std::string groupId;
  std::string entityId;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Group_IncrementGroupEntityData_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_entityId(const std::string& val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_IncrementGroupEntityData_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_IncrementGroupEntityData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_IncrementGroupEntityData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_IncrementGroupEntityData_pargs {
 public:


  virtual ~BrainCloudService_Group_IncrementGroupEntityData_pargs() throw();
  const std::string* groupId;
  const std::string* entityId;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_IncrementGroupEntityData_result__isset {
  _BrainCloudService_Group_IncrementGroupEntityData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_IncrementGroupEntityData_result__isset;

class BrainCloudService_Group_IncrementGroupEntityData_result {
 public:

  BrainCloudService_Group_IncrementGroupEntityData_result(const BrainCloudService_Group_IncrementGroupEntityData_result&);
  BrainCloudService_Group_IncrementGroupEntityData_result& operator=(const BrainCloudService_Group_IncrementGroupEntityData_result&);
  BrainCloudService_Group_IncrementGroupEntityData_result() : success() {
  }

  virtual ~BrainCloudService_Group_IncrementGroupEntityData_result() throw();
  std::string success;

  _BrainCloudService_Group_IncrementGroupEntityData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_IncrementGroupEntityData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_IncrementGroupEntityData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_IncrementGroupEntityData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_IncrementGroupEntityData_presult__isset {
  _BrainCloudService_Group_IncrementGroupEntityData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_IncrementGroupEntityData_presult__isset;

class BrainCloudService_Group_IncrementGroupEntityData_presult {
 public:


  virtual ~BrainCloudService_Group_IncrementGroupEntityData_presult() throw();
  std::string* success;

  _BrainCloudService_Group_IncrementGroupEntityData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_InviteGroupMember_args__isset {
  _BrainCloudService_Group_InviteGroupMember_args__isset() : groupId(false), profileId(false), role(false), jsonAttributes(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool role :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Group_InviteGroupMember_args__isset;

class BrainCloudService_Group_InviteGroupMember_args {
 public:

  BrainCloudService_Group_InviteGroupMember_args(const BrainCloudService_Group_InviteGroupMember_args&);
  BrainCloudService_Group_InviteGroupMember_args& operator=(const BrainCloudService_Group_InviteGroupMember_args&);
  BrainCloudService_Group_InviteGroupMember_args() : groupId(), profileId(), role(( ::Ruyi::SDK::BrainCloudApi::Role::type)0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_InviteGroupMember_args() throw();
  std::string groupId;
  std::string profileId;
   ::Ruyi::SDK::BrainCloudApi::Role::type role;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Group_InviteGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_role(const  ::Ruyi::SDK::BrainCloudApi::Role::type val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_InviteGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_InviteGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_InviteGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_InviteGroupMember_pargs {
 public:


  virtual ~BrainCloudService_Group_InviteGroupMember_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const  ::Ruyi::SDK::BrainCloudApi::Role::type* role;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_InviteGroupMember_result__isset {
  _BrainCloudService_Group_InviteGroupMember_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_InviteGroupMember_result__isset;

class BrainCloudService_Group_InviteGroupMember_result {
 public:

  BrainCloudService_Group_InviteGroupMember_result(const BrainCloudService_Group_InviteGroupMember_result&);
  BrainCloudService_Group_InviteGroupMember_result& operator=(const BrainCloudService_Group_InviteGroupMember_result&);
  BrainCloudService_Group_InviteGroupMember_result() : success() {
  }

  virtual ~BrainCloudService_Group_InviteGroupMember_result() throw();
  std::string success;

  _BrainCloudService_Group_InviteGroupMember_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_InviteGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_InviteGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_InviteGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_InviteGroupMember_presult__isset {
  _BrainCloudService_Group_InviteGroupMember_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_InviteGroupMember_presult__isset;

class BrainCloudService_Group_InviteGroupMember_presult {
 public:


  virtual ~BrainCloudService_Group_InviteGroupMember_presult() throw();
  std::string* success;

  _BrainCloudService_Group_InviteGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_JoinGroup_args__isset {
  _BrainCloudService_Group_JoinGroup_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_JoinGroup_args__isset;

class BrainCloudService_Group_JoinGroup_args {
 public:

  BrainCloudService_Group_JoinGroup_args(const BrainCloudService_Group_JoinGroup_args&);
  BrainCloudService_Group_JoinGroup_args& operator=(const BrainCloudService_Group_JoinGroup_args&);
  BrainCloudService_Group_JoinGroup_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_JoinGroup_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_JoinGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_JoinGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_JoinGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_JoinGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_JoinGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_JoinGroup_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_JoinGroup_result__isset {
  _BrainCloudService_Group_JoinGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_JoinGroup_result__isset;

class BrainCloudService_Group_JoinGroup_result {
 public:

  BrainCloudService_Group_JoinGroup_result(const BrainCloudService_Group_JoinGroup_result&);
  BrainCloudService_Group_JoinGroup_result& operator=(const BrainCloudService_Group_JoinGroup_result&);
  BrainCloudService_Group_JoinGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_JoinGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_JoinGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_JoinGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_JoinGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_JoinGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_JoinGroup_presult__isset {
  _BrainCloudService_Group_JoinGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_JoinGroup_presult__isset;

class BrainCloudService_Group_JoinGroup_presult {
 public:


  virtual ~BrainCloudService_Group_JoinGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_JoinGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_LeaveGroup_args__isset {
  _BrainCloudService_Group_LeaveGroup_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_LeaveGroup_args__isset;

class BrainCloudService_Group_LeaveGroup_args {
 public:

  BrainCloudService_Group_LeaveGroup_args(const BrainCloudService_Group_LeaveGroup_args&);
  BrainCloudService_Group_LeaveGroup_args& operator=(const BrainCloudService_Group_LeaveGroup_args&);
  BrainCloudService_Group_LeaveGroup_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_LeaveGroup_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_LeaveGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_LeaveGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_LeaveGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_LeaveGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_LeaveGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_LeaveGroup_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_LeaveGroup_result__isset {
  _BrainCloudService_Group_LeaveGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_LeaveGroup_result__isset;

class BrainCloudService_Group_LeaveGroup_result {
 public:

  BrainCloudService_Group_LeaveGroup_result(const BrainCloudService_Group_LeaveGroup_result&);
  BrainCloudService_Group_LeaveGroup_result& operator=(const BrainCloudService_Group_LeaveGroup_result&);
  BrainCloudService_Group_LeaveGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_LeaveGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_LeaveGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_LeaveGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_LeaveGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_LeaveGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_LeaveGroup_presult__isset {
  _BrainCloudService_Group_LeaveGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_LeaveGroup_presult__isset;

class BrainCloudService_Group_LeaveGroup_presult {
 public:


  virtual ~BrainCloudService_Group_LeaveGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_LeaveGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ListGroupsPage_args__isset {
  _BrainCloudService_Group_ListGroupsPage_args__isset() : jsonContext(false), clientIndex(false) {}
  bool jsonContext :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ListGroupsPage_args__isset;

class BrainCloudService_Group_ListGroupsPage_args {
 public:

  BrainCloudService_Group_ListGroupsPage_args(const BrainCloudService_Group_ListGroupsPage_args&);
  BrainCloudService_Group_ListGroupsPage_args& operator=(const BrainCloudService_Group_ListGroupsPage_args&);
  BrainCloudService_Group_ListGroupsPage_args() : jsonContext(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ListGroupsPage_args() throw();
  std::string jsonContext;
  int32_t clientIndex;

  _BrainCloudService_Group_ListGroupsPage_args__isset __isset;

  void __set_jsonContext(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ListGroupsPage_args & rhs) const
  {
    if (!(jsonContext == rhs.jsonContext))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ListGroupsPage_pargs {
 public:


  virtual ~BrainCloudService_Group_ListGroupsPage_pargs() throw();
  const std::string* jsonContext;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsPage_result__isset {
  _BrainCloudService_Group_ListGroupsPage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsPage_result__isset;

class BrainCloudService_Group_ListGroupsPage_result {
 public:

  BrainCloudService_Group_ListGroupsPage_result(const BrainCloudService_Group_ListGroupsPage_result&);
  BrainCloudService_Group_ListGroupsPage_result& operator=(const BrainCloudService_Group_ListGroupsPage_result&);
  BrainCloudService_Group_ListGroupsPage_result() : success() {
  }

  virtual ~BrainCloudService_Group_ListGroupsPage_result() throw();
  std::string success;

  _BrainCloudService_Group_ListGroupsPage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ListGroupsPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsPage_presult__isset {
  _BrainCloudService_Group_ListGroupsPage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsPage_presult__isset;

class BrainCloudService_Group_ListGroupsPage_presult {
 public:


  virtual ~BrainCloudService_Group_ListGroupsPage_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ListGroupsPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ListGroupsPageByOffset_args__isset {
  _BrainCloudService_Group_ListGroupsPageByOffset_args__isset() : context(false), pageOffset(false), clientIndex(false) {}
  bool context :1;
  bool pageOffset :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ListGroupsPageByOffset_args__isset;

class BrainCloudService_Group_ListGroupsPageByOffset_args {
 public:

  BrainCloudService_Group_ListGroupsPageByOffset_args(const BrainCloudService_Group_ListGroupsPageByOffset_args&);
  BrainCloudService_Group_ListGroupsPageByOffset_args& operator=(const BrainCloudService_Group_ListGroupsPageByOffset_args&);
  BrainCloudService_Group_ListGroupsPageByOffset_args() : context(), pageOffset(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ListGroupsPageByOffset_args() throw();
  std::string context;
  int32_t pageOffset;
  int32_t clientIndex;

  _BrainCloudService_Group_ListGroupsPageByOffset_args__isset __isset;

  void __set_context(const std::string& val);

  void __set_pageOffset(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ListGroupsPageByOffset_args & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    if (!(pageOffset == rhs.pageOffset))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsPageByOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsPageByOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ListGroupsPageByOffset_pargs {
 public:


  virtual ~BrainCloudService_Group_ListGroupsPageByOffset_pargs() throw();
  const std::string* context;
  const int32_t* pageOffset;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsPageByOffset_result__isset {
  _BrainCloudService_Group_ListGroupsPageByOffset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsPageByOffset_result__isset;

class BrainCloudService_Group_ListGroupsPageByOffset_result {
 public:

  BrainCloudService_Group_ListGroupsPageByOffset_result(const BrainCloudService_Group_ListGroupsPageByOffset_result&);
  BrainCloudService_Group_ListGroupsPageByOffset_result& operator=(const BrainCloudService_Group_ListGroupsPageByOffset_result&);
  BrainCloudService_Group_ListGroupsPageByOffset_result() : success() {
  }

  virtual ~BrainCloudService_Group_ListGroupsPageByOffset_result() throw();
  std::string success;

  _BrainCloudService_Group_ListGroupsPageByOffset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ListGroupsPageByOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsPageByOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsPageByOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsPageByOffset_presult__isset {
  _BrainCloudService_Group_ListGroupsPageByOffset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsPageByOffset_presult__isset;

class BrainCloudService_Group_ListGroupsPageByOffset_presult {
 public:


  virtual ~BrainCloudService_Group_ListGroupsPageByOffset_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ListGroupsPageByOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ListGroupsWithMember_args__isset {
  _BrainCloudService_Group_ListGroupsWithMember_args__isset() : profileId(false), clientIndex(false) {}
  bool profileId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ListGroupsWithMember_args__isset;

class BrainCloudService_Group_ListGroupsWithMember_args {
 public:

  BrainCloudService_Group_ListGroupsWithMember_args(const BrainCloudService_Group_ListGroupsWithMember_args&);
  BrainCloudService_Group_ListGroupsWithMember_args& operator=(const BrainCloudService_Group_ListGroupsWithMember_args&);
  BrainCloudService_Group_ListGroupsWithMember_args() : profileId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ListGroupsWithMember_args() throw();
  std::string profileId;
  int32_t clientIndex;

  _BrainCloudService_Group_ListGroupsWithMember_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ListGroupsWithMember_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsWithMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsWithMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ListGroupsWithMember_pargs {
 public:


  virtual ~BrainCloudService_Group_ListGroupsWithMember_pargs() throw();
  const std::string* profileId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsWithMember_result__isset {
  _BrainCloudService_Group_ListGroupsWithMember_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsWithMember_result__isset;

class BrainCloudService_Group_ListGroupsWithMember_result {
 public:

  BrainCloudService_Group_ListGroupsWithMember_result(const BrainCloudService_Group_ListGroupsWithMember_result&);
  BrainCloudService_Group_ListGroupsWithMember_result& operator=(const BrainCloudService_Group_ListGroupsWithMember_result&);
  BrainCloudService_Group_ListGroupsWithMember_result() : success() {
  }

  virtual ~BrainCloudService_Group_ListGroupsWithMember_result() throw();
  std::string success;

  _BrainCloudService_Group_ListGroupsWithMember_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ListGroupsWithMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ListGroupsWithMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ListGroupsWithMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ListGroupsWithMember_presult__isset {
  _BrainCloudService_Group_ListGroupsWithMember_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ListGroupsWithMember_presult__isset;

class BrainCloudService_Group_ListGroupsWithMember_presult {
 public:


  virtual ~BrainCloudService_Group_ListGroupsWithMember_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ListGroupsWithMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroup_args__isset {
  _BrainCloudService_Group_ReadGroup_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroup_args__isset;

class BrainCloudService_Group_ReadGroup_args {
 public:

  BrainCloudService_Group_ReadGroup_args(const BrainCloudService_Group_ReadGroup_args&);
  BrainCloudService_Group_ReadGroup_args& operator=(const BrainCloudService_Group_ReadGroup_args&);
  BrainCloudService_Group_ReadGroup_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroup_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroup_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroup_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroup_result__isset {
  _BrainCloudService_Group_ReadGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroup_result__isset;

class BrainCloudService_Group_ReadGroup_result {
 public:

  BrainCloudService_Group_ReadGroup_result(const BrainCloudService_Group_ReadGroup_result&);
  BrainCloudService_Group_ReadGroup_result& operator=(const BrainCloudService_Group_ReadGroup_result&);
  BrainCloudService_Group_ReadGroup_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroup_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroup_presult__isset {
  _BrainCloudService_Group_ReadGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroup_presult__isset;

class BrainCloudService_Group_ReadGroup_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroup_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroupData_args__isset {
  _BrainCloudService_Group_ReadGroupData_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroupData_args__isset;

class BrainCloudService_Group_ReadGroupData_args {
 public:

  BrainCloudService_Group_ReadGroupData_args(const BrainCloudService_Group_ReadGroupData_args&);
  BrainCloudService_Group_ReadGroupData_args& operator=(const BrainCloudService_Group_ReadGroupData_args&);
  BrainCloudService_Group_ReadGroupData_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroupData_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroupData_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroupData_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroupData_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroupData_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupData_result__isset {
  _BrainCloudService_Group_ReadGroupData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupData_result__isset;

class BrainCloudService_Group_ReadGroupData_result {
 public:

  BrainCloudService_Group_ReadGroupData_result(const BrainCloudService_Group_ReadGroupData_result&);
  BrainCloudService_Group_ReadGroupData_result& operator=(const BrainCloudService_Group_ReadGroupData_result&);
  BrainCloudService_Group_ReadGroupData_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroupData_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroupData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroupData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupData_presult__isset {
  _BrainCloudService_Group_ReadGroupData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupData_presult__isset;

class BrainCloudService_Group_ReadGroupData_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroupData_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroupData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPage_args__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPage_args__isset() : jsonContext(false), clientIndex(false) {}
  bool jsonContext :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroupEntitiesPage_args__isset;

class BrainCloudService_Group_ReadGroupEntitiesPage_args {
 public:

  BrainCloudService_Group_ReadGroupEntitiesPage_args(const BrainCloudService_Group_ReadGroupEntitiesPage_args&);
  BrainCloudService_Group_ReadGroupEntitiesPage_args& operator=(const BrainCloudService_Group_ReadGroupEntitiesPage_args&);
  BrainCloudService_Group_ReadGroupEntitiesPage_args() : jsonContext(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntitiesPage_args() throw();
  std::string jsonContext;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroupEntitiesPage_args__isset __isset;

  void __set_jsonContext(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntitiesPage_args & rhs) const
  {
    if (!(jsonContext == rhs.jsonContext))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntitiesPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntitiesPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroupEntitiesPage_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntitiesPage_pargs() throw();
  const std::string* jsonContext;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPage_result__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntitiesPage_result__isset;

class BrainCloudService_Group_ReadGroupEntitiesPage_result {
 public:

  BrainCloudService_Group_ReadGroupEntitiesPage_result(const BrainCloudService_Group_ReadGroupEntitiesPage_result&);
  BrainCloudService_Group_ReadGroupEntitiesPage_result& operator=(const BrainCloudService_Group_ReadGroupEntitiesPage_result&);
  BrainCloudService_Group_ReadGroupEntitiesPage_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntitiesPage_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroupEntitiesPage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntitiesPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntitiesPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntitiesPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPage_presult__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntitiesPage_presult__isset;

class BrainCloudService_Group_ReadGroupEntitiesPage_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntitiesPage_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroupEntitiesPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args__isset() : encodedContext(false), pageOffset(false), clientIndex(false) {}
  bool encodedContext :1;
  bool pageOffset :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args__isset;

class BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args {
 public:

  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args(const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args&);
  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args& operator=(const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args&);
  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args() : encodedContext(), pageOffset(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args() throw();
  std::string encodedContext;
  int32_t pageOffset;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args__isset __isset;

  void __set_encodedContext(const std::string& val);

  void __set_pageOffset(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args & rhs) const
  {
    if (!(encodedContext == rhs.encodedContext))
      return false;
    if (!(pageOffset == rhs.pageOffset))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroupEntitiesPageByOffset_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntitiesPageByOffset_pargs() throw();
  const std::string* encodedContext;
  const int32_t* pageOffset;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result__isset;

class BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result {
 public:

  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result(const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result&);
  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result& operator=(const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result&);
  BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntitiesPageByOffset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult__isset {
  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult__isset;

class BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroupEntitiesPageByOffset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroupEntity_args__isset {
  _BrainCloudService_Group_ReadGroupEntity_args__isset() : groupId(false), entityId(false), clientIndex(false) {}
  bool groupId :1;
  bool entityId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroupEntity_args__isset;

class BrainCloudService_Group_ReadGroupEntity_args {
 public:

  BrainCloudService_Group_ReadGroupEntity_args(const BrainCloudService_Group_ReadGroupEntity_args&);
  BrainCloudService_Group_ReadGroupEntity_args& operator=(const BrainCloudService_Group_ReadGroupEntity_args&);
  BrainCloudService_Group_ReadGroupEntity_args() : groupId(), entityId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntity_args() throw();
  std::string groupId;
  std::string entityId;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroupEntity_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_entityId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntity_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroupEntity_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntity_pargs() throw();
  const std::string* groupId;
  const std::string* entityId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntity_result__isset {
  _BrainCloudService_Group_ReadGroupEntity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntity_result__isset;

class BrainCloudService_Group_ReadGroupEntity_result {
 public:

  BrainCloudService_Group_ReadGroupEntity_result(const BrainCloudService_Group_ReadGroupEntity_result&);
  BrainCloudService_Group_ReadGroupEntity_result& operator=(const BrainCloudService_Group_ReadGroupEntity_result&);
  BrainCloudService_Group_ReadGroupEntity_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroupEntity_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroupEntity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroupEntity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupEntity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupEntity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupEntity_presult__isset {
  _BrainCloudService_Group_ReadGroupEntity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupEntity_presult__isset;

class BrainCloudService_Group_ReadGroupEntity_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroupEntity_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroupEntity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_ReadGroupMembers_args__isset {
  _BrainCloudService_Group_ReadGroupMembers_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_ReadGroupMembers_args__isset;

class BrainCloudService_Group_ReadGroupMembers_args {
 public:

  BrainCloudService_Group_ReadGroupMembers_args(const BrainCloudService_Group_ReadGroupMembers_args&);
  BrainCloudService_Group_ReadGroupMembers_args& operator=(const BrainCloudService_Group_ReadGroupMembers_args&);
  BrainCloudService_Group_ReadGroupMembers_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_ReadGroupMembers_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_ReadGroupMembers_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_ReadGroupMembers_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupMembers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupMembers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_ReadGroupMembers_pargs {
 public:


  virtual ~BrainCloudService_Group_ReadGroupMembers_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupMembers_result__isset {
  _BrainCloudService_Group_ReadGroupMembers_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupMembers_result__isset;

class BrainCloudService_Group_ReadGroupMembers_result {
 public:

  BrainCloudService_Group_ReadGroupMembers_result(const BrainCloudService_Group_ReadGroupMembers_result&);
  BrainCloudService_Group_ReadGroupMembers_result& operator=(const BrainCloudService_Group_ReadGroupMembers_result&);
  BrainCloudService_Group_ReadGroupMembers_result() : success() {
  }

  virtual ~BrainCloudService_Group_ReadGroupMembers_result() throw();
  std::string success;

  _BrainCloudService_Group_ReadGroupMembers_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_ReadGroupMembers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_ReadGroupMembers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_ReadGroupMembers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_ReadGroupMembers_presult__isset {
  _BrainCloudService_Group_ReadGroupMembers_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_ReadGroupMembers_presult__isset;

class BrainCloudService_Group_ReadGroupMembers_presult {
 public:


  virtual ~BrainCloudService_Group_ReadGroupMembers_presult() throw();
  std::string* success;

  _BrainCloudService_Group_ReadGroupMembers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_RejectGroupInvitation_args__isset {
  _BrainCloudService_Group_RejectGroupInvitation_args__isset() : groupId(false), clientIndex(false) {}
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_RejectGroupInvitation_args__isset;

class BrainCloudService_Group_RejectGroupInvitation_args {
 public:

  BrainCloudService_Group_RejectGroupInvitation_args(const BrainCloudService_Group_RejectGroupInvitation_args&);
  BrainCloudService_Group_RejectGroupInvitation_args& operator=(const BrainCloudService_Group_RejectGroupInvitation_args&);
  BrainCloudService_Group_RejectGroupInvitation_args() : groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_RejectGroupInvitation_args() throw();
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_Group_RejectGroupInvitation_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_RejectGroupInvitation_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RejectGroupInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RejectGroupInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_RejectGroupInvitation_pargs {
 public:


  virtual ~BrainCloudService_Group_RejectGroupInvitation_pargs() throw();
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RejectGroupInvitation_result__isset {
  _BrainCloudService_Group_RejectGroupInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RejectGroupInvitation_result__isset;

class BrainCloudService_Group_RejectGroupInvitation_result {
 public:

  BrainCloudService_Group_RejectGroupInvitation_result(const BrainCloudService_Group_RejectGroupInvitation_result&);
  BrainCloudService_Group_RejectGroupInvitation_result& operator=(const BrainCloudService_Group_RejectGroupInvitation_result&);
  BrainCloudService_Group_RejectGroupInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Group_RejectGroupInvitation_result() throw();
  std::string success;

  _BrainCloudService_Group_RejectGroupInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_RejectGroupInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RejectGroupInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RejectGroupInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RejectGroupInvitation_presult__isset {
  _BrainCloudService_Group_RejectGroupInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RejectGroupInvitation_presult__isset;

class BrainCloudService_Group_RejectGroupInvitation_presult {
 public:


  virtual ~BrainCloudService_Group_RejectGroupInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Group_RejectGroupInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_RejectGroupJoinRequest_args__isset {
  _BrainCloudService_Group_RejectGroupJoinRequest_args__isset() : groupId(false), profileId(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_RejectGroupJoinRequest_args__isset;

class BrainCloudService_Group_RejectGroupJoinRequest_args {
 public:

  BrainCloudService_Group_RejectGroupJoinRequest_args(const BrainCloudService_Group_RejectGroupJoinRequest_args&);
  BrainCloudService_Group_RejectGroupJoinRequest_args& operator=(const BrainCloudService_Group_RejectGroupJoinRequest_args&);
  BrainCloudService_Group_RejectGroupJoinRequest_args() : groupId(), profileId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_RejectGroupJoinRequest_args() throw();
  std::string groupId;
  std::string profileId;
  int32_t clientIndex;

  _BrainCloudService_Group_RejectGroupJoinRequest_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_RejectGroupJoinRequest_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RejectGroupJoinRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RejectGroupJoinRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_RejectGroupJoinRequest_pargs {
 public:


  virtual ~BrainCloudService_Group_RejectGroupJoinRequest_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RejectGroupJoinRequest_result__isset {
  _BrainCloudService_Group_RejectGroupJoinRequest_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RejectGroupJoinRequest_result__isset;

class BrainCloudService_Group_RejectGroupJoinRequest_result {
 public:

  BrainCloudService_Group_RejectGroupJoinRequest_result(const BrainCloudService_Group_RejectGroupJoinRequest_result&);
  BrainCloudService_Group_RejectGroupJoinRequest_result& operator=(const BrainCloudService_Group_RejectGroupJoinRequest_result&);
  BrainCloudService_Group_RejectGroupJoinRequest_result() : success() {
  }

  virtual ~BrainCloudService_Group_RejectGroupJoinRequest_result() throw();
  std::string success;

  _BrainCloudService_Group_RejectGroupJoinRequest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_RejectGroupJoinRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RejectGroupJoinRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RejectGroupJoinRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RejectGroupJoinRequest_presult__isset {
  _BrainCloudService_Group_RejectGroupJoinRequest_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RejectGroupJoinRequest_presult__isset;

class BrainCloudService_Group_RejectGroupJoinRequest_presult {
 public:


  virtual ~BrainCloudService_Group_RejectGroupJoinRequest_presult() throw();
  std::string* success;

  _BrainCloudService_Group_RejectGroupJoinRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_RemoveGroupMember_args__isset {
  _BrainCloudService_Group_RemoveGroupMember_args__isset() : groupId(false), profileId(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool clientIndex :1;
} _BrainCloudService_Group_RemoveGroupMember_args__isset;

class BrainCloudService_Group_RemoveGroupMember_args {
 public:

  BrainCloudService_Group_RemoveGroupMember_args(const BrainCloudService_Group_RemoveGroupMember_args&);
  BrainCloudService_Group_RemoveGroupMember_args& operator=(const BrainCloudService_Group_RemoveGroupMember_args&);
  BrainCloudService_Group_RemoveGroupMember_args() : groupId(), profileId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_RemoveGroupMember_args() throw();
  std::string groupId;
  std::string profileId;
  int32_t clientIndex;

  _BrainCloudService_Group_RemoveGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_RemoveGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RemoveGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RemoveGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_RemoveGroupMember_pargs {
 public:


  virtual ~BrainCloudService_Group_RemoveGroupMember_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RemoveGroupMember_result__isset {
  _BrainCloudService_Group_RemoveGroupMember_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RemoveGroupMember_result__isset;

class BrainCloudService_Group_RemoveGroupMember_result {
 public:

  BrainCloudService_Group_RemoveGroupMember_result(const BrainCloudService_Group_RemoveGroupMember_result&);
  BrainCloudService_Group_RemoveGroupMember_result& operator=(const BrainCloudService_Group_RemoveGroupMember_result&);
  BrainCloudService_Group_RemoveGroupMember_result() : success() {
  }

  virtual ~BrainCloudService_Group_RemoveGroupMember_result() throw();
  std::string success;

  _BrainCloudService_Group_RemoveGroupMember_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_RemoveGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_RemoveGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_RemoveGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_RemoveGroupMember_presult__isset {
  _BrainCloudService_Group_RemoveGroupMember_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_RemoveGroupMember_presult__isset;

class BrainCloudService_Group_RemoveGroupMember_presult {
 public:


  virtual ~BrainCloudService_Group_RemoveGroupMember_presult() throw();
  std::string* success;

  _BrainCloudService_Group_RemoveGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_UpdateGroupData_args__isset {
  _BrainCloudService_Group_UpdateGroupData_args__isset() : groupId(false), version(false), jsonData(false), clientIndex(false) {}
  bool groupId :1;
  bool version :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Group_UpdateGroupData_args__isset;

class BrainCloudService_Group_UpdateGroupData_args {
 public:

  BrainCloudService_Group_UpdateGroupData_args(const BrainCloudService_Group_UpdateGroupData_args&);
  BrainCloudService_Group_UpdateGroupData_args& operator=(const BrainCloudService_Group_UpdateGroupData_args&);
  BrainCloudService_Group_UpdateGroupData_args() : groupId(), version(0), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_UpdateGroupData_args() throw();
  std::string groupId;
  int64_t version;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Group_UpdateGroupData_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_UpdateGroupData_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_UpdateGroupData_pargs {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupData_pargs() throw();
  const std::string* groupId;
  const int64_t* version;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupData_result__isset {
  _BrainCloudService_Group_UpdateGroupData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupData_result__isset;

class BrainCloudService_Group_UpdateGroupData_result {
 public:

  BrainCloudService_Group_UpdateGroupData_result(const BrainCloudService_Group_UpdateGroupData_result&);
  BrainCloudService_Group_UpdateGroupData_result& operator=(const BrainCloudService_Group_UpdateGroupData_result&);
  BrainCloudService_Group_UpdateGroupData_result() : success() {
  }

  virtual ~BrainCloudService_Group_UpdateGroupData_result() throw();
  std::string success;

  _BrainCloudService_Group_UpdateGroupData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_UpdateGroupData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupData_presult__isset {
  _BrainCloudService_Group_UpdateGroupData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupData_presult__isset;

class BrainCloudService_Group_UpdateGroupData_presult {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupData_presult() throw();
  std::string* success;

  _BrainCloudService_Group_UpdateGroupData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_UpdateGroupEntityData_args__isset {
  _BrainCloudService_Group_UpdateGroupEntityData_args__isset() : groupId(false), entityId(false), version(false), jsonData(false), clientIndex(false) {}
  bool groupId :1;
  bool entityId :1;
  bool version :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_Group_UpdateGroupEntityData_args__isset;

class BrainCloudService_Group_UpdateGroupEntityData_args {
 public:

  BrainCloudService_Group_UpdateGroupEntityData_args(const BrainCloudService_Group_UpdateGroupEntityData_args&);
  BrainCloudService_Group_UpdateGroupEntityData_args& operator=(const BrainCloudService_Group_UpdateGroupEntityData_args&);
  BrainCloudService_Group_UpdateGroupEntityData_args() : groupId(), entityId(), version(0), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_UpdateGroupEntityData_args() throw();
  std::string groupId;
  std::string entityId;
  int64_t version;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_Group_UpdateGroupEntityData_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_entityId(const std::string& val);

  void __set_version(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_UpdateGroupEntityData_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(entityId == rhs.entityId))
      return false;
    if (!(version == rhs.version))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupEntityData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupEntityData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_UpdateGroupEntityData_pargs {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupEntityData_pargs() throw();
  const std::string* groupId;
  const std::string* entityId;
  const int64_t* version;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupEntityData_result__isset {
  _BrainCloudService_Group_UpdateGroupEntityData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupEntityData_result__isset;

class BrainCloudService_Group_UpdateGroupEntityData_result {
 public:

  BrainCloudService_Group_UpdateGroupEntityData_result(const BrainCloudService_Group_UpdateGroupEntityData_result&);
  BrainCloudService_Group_UpdateGroupEntityData_result& operator=(const BrainCloudService_Group_UpdateGroupEntityData_result&);
  BrainCloudService_Group_UpdateGroupEntityData_result() : success() {
  }

  virtual ~BrainCloudService_Group_UpdateGroupEntityData_result() throw();
  std::string success;

  _BrainCloudService_Group_UpdateGroupEntityData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_UpdateGroupEntityData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupEntityData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupEntityData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupEntityData_presult__isset {
  _BrainCloudService_Group_UpdateGroupEntityData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupEntityData_presult__isset;

class BrainCloudService_Group_UpdateGroupEntityData_presult {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupEntityData_presult() throw();
  std::string* success;

  _BrainCloudService_Group_UpdateGroupEntityData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_UpdateGroupMember_args__isset {
  _BrainCloudService_Group_UpdateGroupMember_args__isset() : groupId(false), profileId(false), role(false), jsonAttributes(false), clientIndex(false) {}
  bool groupId :1;
  bool profileId :1;
  bool role :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Group_UpdateGroupMember_args__isset;

class BrainCloudService_Group_UpdateGroupMember_args {
 public:

  BrainCloudService_Group_UpdateGroupMember_args(const BrainCloudService_Group_UpdateGroupMember_args&);
  BrainCloudService_Group_UpdateGroupMember_args& operator=(const BrainCloudService_Group_UpdateGroupMember_args&);
  BrainCloudService_Group_UpdateGroupMember_args() : groupId(), profileId(), role(( ::Ruyi::SDK::BrainCloudApi::Role::type)0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_UpdateGroupMember_args() throw();
  std::string groupId;
  std::string profileId;
   ::Ruyi::SDK::BrainCloudApi::Role::type role;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Group_UpdateGroupMember_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_profileId(const std::string& val);

  void __set_role(const  ::Ruyi::SDK::BrainCloudApi::Role::type val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_UpdateGroupMember_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(profileId == rhs.profileId))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_UpdateGroupMember_pargs {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupMember_pargs() throw();
  const std::string* groupId;
  const std::string* profileId;
  const  ::Ruyi::SDK::BrainCloudApi::Role::type* role;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupMember_result__isset {
  _BrainCloudService_Group_UpdateGroupMember_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupMember_result__isset;

class BrainCloudService_Group_UpdateGroupMember_result {
 public:

  BrainCloudService_Group_UpdateGroupMember_result(const BrainCloudService_Group_UpdateGroupMember_result&);
  BrainCloudService_Group_UpdateGroupMember_result& operator=(const BrainCloudService_Group_UpdateGroupMember_result&);
  BrainCloudService_Group_UpdateGroupMember_result() : success() {
  }

  virtual ~BrainCloudService_Group_UpdateGroupMember_result() throw();
  std::string success;

  _BrainCloudService_Group_UpdateGroupMember_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_UpdateGroupMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupMember_presult__isset {
  _BrainCloudService_Group_UpdateGroupMember_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupMember_presult__isset;

class BrainCloudService_Group_UpdateGroupMember_presult {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupMember_presult() throw();
  std::string* success;

  _BrainCloudService_Group_UpdateGroupMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Group_UpdateGroupName_args__isset {
  _BrainCloudService_Group_UpdateGroupName_args__isset() : groupId(false), name(false), clientIndex(false) {}
  bool groupId :1;
  bool name :1;
  bool clientIndex :1;
} _BrainCloudService_Group_UpdateGroupName_args__isset;

class BrainCloudService_Group_UpdateGroupName_args {
 public:

  BrainCloudService_Group_UpdateGroupName_args(const BrainCloudService_Group_UpdateGroupName_args&);
  BrainCloudService_Group_UpdateGroupName_args& operator=(const BrainCloudService_Group_UpdateGroupName_args&);
  BrainCloudService_Group_UpdateGroupName_args() : groupId(), name(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Group_UpdateGroupName_args() throw();
  std::string groupId;
  std::string name;
  int32_t clientIndex;

  _BrainCloudService_Group_UpdateGroupName_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Group_UpdateGroupName_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Group_UpdateGroupName_pargs {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupName_pargs() throw();
  const std::string* groupId;
  const std::string* name;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupName_result__isset {
  _BrainCloudService_Group_UpdateGroupName_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupName_result__isset;

class BrainCloudService_Group_UpdateGroupName_result {
 public:

  BrainCloudService_Group_UpdateGroupName_result(const BrainCloudService_Group_UpdateGroupName_result&);
  BrainCloudService_Group_UpdateGroupName_result& operator=(const BrainCloudService_Group_UpdateGroupName_result&);
  BrainCloudService_Group_UpdateGroupName_result() : success() {
  }

  virtual ~BrainCloudService_Group_UpdateGroupName_result() throw();
  std::string success;

  _BrainCloudService_Group_UpdateGroupName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Group_UpdateGroupName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Group_UpdateGroupName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Group_UpdateGroupName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Group_UpdateGroupName_presult__isset {
  _BrainCloudService_Group_UpdateGroupName_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Group_UpdateGroupName_presult__isset;

class BrainCloudService_Group_UpdateGroupName_presult {
 public:


  virtual ~BrainCloudService_Group_UpdateGroupName_presult() throw();
  std::string* success;

  _BrainCloudService_Group_UpdateGroupName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_AttachEmailIdentity_args__isset {
  _BrainCloudService_Identity_AttachEmailIdentity_args__isset() : email(false), password(false), clientIndex(false) {}
  bool email :1;
  bool password :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_AttachEmailIdentity_args__isset;

class BrainCloudService_Identity_AttachEmailIdentity_args {
 public:

  BrainCloudService_Identity_AttachEmailIdentity_args(const BrainCloudService_Identity_AttachEmailIdentity_args&);
  BrainCloudService_Identity_AttachEmailIdentity_args& operator=(const BrainCloudService_Identity_AttachEmailIdentity_args&);
  BrainCloudService_Identity_AttachEmailIdentity_args() : email(), password(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_AttachEmailIdentity_args() throw();
  std::string email;
  std::string password;
  int32_t clientIndex;

  _BrainCloudService_Identity_AttachEmailIdentity_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_AttachEmailIdentity_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachEmailIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachEmailIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_AttachEmailIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_AttachEmailIdentity_pargs() throw();
  const std::string* email;
  const std::string* password;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachEmailIdentity_result__isset {
  _BrainCloudService_Identity_AttachEmailIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachEmailIdentity_result__isset;

class BrainCloudService_Identity_AttachEmailIdentity_result {
 public:

  BrainCloudService_Identity_AttachEmailIdentity_result(const BrainCloudService_Identity_AttachEmailIdentity_result&);
  BrainCloudService_Identity_AttachEmailIdentity_result& operator=(const BrainCloudService_Identity_AttachEmailIdentity_result&);
  BrainCloudService_Identity_AttachEmailIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_AttachEmailIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_AttachEmailIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_AttachEmailIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachEmailIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachEmailIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachEmailIdentity_presult__isset {
  _BrainCloudService_Identity_AttachEmailIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachEmailIdentity_presult__isset;

class BrainCloudService_Identity_AttachEmailIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_AttachEmailIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_AttachEmailIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_MergeEmailIdentity_args__isset {
  _BrainCloudService_Identity_MergeEmailIdentity_args__isset() : email(false), password(false), clientIndex(false) {}
  bool email :1;
  bool password :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_MergeEmailIdentity_args__isset;

class BrainCloudService_Identity_MergeEmailIdentity_args {
 public:

  BrainCloudService_Identity_MergeEmailIdentity_args(const BrainCloudService_Identity_MergeEmailIdentity_args&);
  BrainCloudService_Identity_MergeEmailIdentity_args& operator=(const BrainCloudService_Identity_MergeEmailIdentity_args&);
  BrainCloudService_Identity_MergeEmailIdentity_args() : email(), password(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_MergeEmailIdentity_args() throw();
  std::string email;
  std::string password;
  int32_t clientIndex;

  _BrainCloudService_Identity_MergeEmailIdentity_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_MergeEmailIdentity_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_MergeEmailIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_MergeEmailIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_MergeEmailIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_MergeEmailIdentity_pargs() throw();
  const std::string* email;
  const std::string* password;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_MergeEmailIdentity_result__isset {
  _BrainCloudService_Identity_MergeEmailIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_MergeEmailIdentity_result__isset;

class BrainCloudService_Identity_MergeEmailIdentity_result {
 public:

  BrainCloudService_Identity_MergeEmailIdentity_result(const BrainCloudService_Identity_MergeEmailIdentity_result&);
  BrainCloudService_Identity_MergeEmailIdentity_result& operator=(const BrainCloudService_Identity_MergeEmailIdentity_result&);
  BrainCloudService_Identity_MergeEmailIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_MergeEmailIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_MergeEmailIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_MergeEmailIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_MergeEmailIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_MergeEmailIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_MergeEmailIdentity_presult__isset {
  _BrainCloudService_Identity_MergeEmailIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_MergeEmailIdentity_presult__isset;

class BrainCloudService_Identity_MergeEmailIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_MergeEmailIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_MergeEmailIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_DetachEmailIdentity_args__isset {
  _BrainCloudService_Identity_DetachEmailIdentity_args__isset() : email(false), continueAnon(false), clientIndex(false) {}
  bool email :1;
  bool continueAnon :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_DetachEmailIdentity_args__isset;

class BrainCloudService_Identity_DetachEmailIdentity_args {
 public:

  BrainCloudService_Identity_DetachEmailIdentity_args(const BrainCloudService_Identity_DetachEmailIdentity_args&);
  BrainCloudService_Identity_DetachEmailIdentity_args& operator=(const BrainCloudService_Identity_DetachEmailIdentity_args&);
  BrainCloudService_Identity_DetachEmailIdentity_args() : email(), continueAnon(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_DetachEmailIdentity_args() throw();
  std::string email;
  bool continueAnon;
  int32_t clientIndex;

  _BrainCloudService_Identity_DetachEmailIdentity_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_continueAnon(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_DetachEmailIdentity_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(continueAnon == rhs.continueAnon))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachEmailIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachEmailIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_DetachEmailIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_DetachEmailIdentity_pargs() throw();
  const std::string* email;
  const bool* continueAnon;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachEmailIdentity_result__isset {
  _BrainCloudService_Identity_DetachEmailIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachEmailIdentity_result__isset;

class BrainCloudService_Identity_DetachEmailIdentity_result {
 public:

  BrainCloudService_Identity_DetachEmailIdentity_result(const BrainCloudService_Identity_DetachEmailIdentity_result&);
  BrainCloudService_Identity_DetachEmailIdentity_result& operator=(const BrainCloudService_Identity_DetachEmailIdentity_result&);
  BrainCloudService_Identity_DetachEmailIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_DetachEmailIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_DetachEmailIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_DetachEmailIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachEmailIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachEmailIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachEmailIdentity_presult__isset {
  _BrainCloudService_Identity_DetachEmailIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachEmailIdentity_presult__isset;

class BrainCloudService_Identity_DetachEmailIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_DetachEmailIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_DetachEmailIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_AttachUniversalIdentity_args__isset {
  _BrainCloudService_Identity_AttachUniversalIdentity_args__isset() : userId(false), password(false), clientIndex(false) {}
  bool userId :1;
  bool password :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_AttachUniversalIdentity_args__isset;

class BrainCloudService_Identity_AttachUniversalIdentity_args {
 public:

  BrainCloudService_Identity_AttachUniversalIdentity_args(const BrainCloudService_Identity_AttachUniversalIdentity_args&);
  BrainCloudService_Identity_AttachUniversalIdentity_args& operator=(const BrainCloudService_Identity_AttachUniversalIdentity_args&);
  BrainCloudService_Identity_AttachUniversalIdentity_args() : userId(), password(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_AttachUniversalIdentity_args() throw();
  std::string userId;
  std::string password;
  int32_t clientIndex;

  _BrainCloudService_Identity_AttachUniversalIdentity_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_password(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_AttachUniversalIdentity_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachUniversalIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachUniversalIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_AttachUniversalIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_AttachUniversalIdentity_pargs() throw();
  const std::string* userId;
  const std::string* password;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachUniversalIdentity_result__isset {
  _BrainCloudService_Identity_AttachUniversalIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachUniversalIdentity_result__isset;

class BrainCloudService_Identity_AttachUniversalIdentity_result {
 public:

  BrainCloudService_Identity_AttachUniversalIdentity_result(const BrainCloudService_Identity_AttachUniversalIdentity_result&);
  BrainCloudService_Identity_AttachUniversalIdentity_result& operator=(const BrainCloudService_Identity_AttachUniversalIdentity_result&);
  BrainCloudService_Identity_AttachUniversalIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_AttachUniversalIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_AttachUniversalIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_AttachUniversalIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachUniversalIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachUniversalIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachUniversalIdentity_presult__isset {
  _BrainCloudService_Identity_AttachUniversalIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachUniversalIdentity_presult__isset;

class BrainCloudService_Identity_AttachUniversalIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_AttachUniversalIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_AttachUniversalIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_MergeUniversalIdentity_args__isset {
  _BrainCloudService_Identity_MergeUniversalIdentity_args__isset() : userId(false), password(false), clientIndex(false) {}
  bool userId :1;
  bool password :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_MergeUniversalIdentity_args__isset;

class BrainCloudService_Identity_MergeUniversalIdentity_args {
 public:

  BrainCloudService_Identity_MergeUniversalIdentity_args(const BrainCloudService_Identity_MergeUniversalIdentity_args&);
  BrainCloudService_Identity_MergeUniversalIdentity_args& operator=(const BrainCloudService_Identity_MergeUniversalIdentity_args&);
  BrainCloudService_Identity_MergeUniversalIdentity_args() : userId(), password(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_MergeUniversalIdentity_args() throw();
  std::string userId;
  std::string password;
  int32_t clientIndex;

  _BrainCloudService_Identity_MergeUniversalIdentity_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_password(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_MergeUniversalIdentity_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_MergeUniversalIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_MergeUniversalIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_MergeUniversalIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_MergeUniversalIdentity_pargs() throw();
  const std::string* userId;
  const std::string* password;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_MergeUniversalIdentity_result__isset {
  _BrainCloudService_Identity_MergeUniversalIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_MergeUniversalIdentity_result__isset;

class BrainCloudService_Identity_MergeUniversalIdentity_result {
 public:

  BrainCloudService_Identity_MergeUniversalIdentity_result(const BrainCloudService_Identity_MergeUniversalIdentity_result&);
  BrainCloudService_Identity_MergeUniversalIdentity_result& operator=(const BrainCloudService_Identity_MergeUniversalIdentity_result&);
  BrainCloudService_Identity_MergeUniversalIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_MergeUniversalIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_MergeUniversalIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_MergeUniversalIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_MergeUniversalIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_MergeUniversalIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_MergeUniversalIdentity_presult__isset {
  _BrainCloudService_Identity_MergeUniversalIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_MergeUniversalIdentity_presult__isset;

class BrainCloudService_Identity_MergeUniversalIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_MergeUniversalIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_MergeUniversalIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_DetachUniversalIdentity_args__isset {
  _BrainCloudService_Identity_DetachUniversalIdentity_args__isset() : userId(false), continueAnon(false), clientIndex(false) {}
  bool userId :1;
  bool continueAnon :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_DetachUniversalIdentity_args__isset;

class BrainCloudService_Identity_DetachUniversalIdentity_args {
 public:

  BrainCloudService_Identity_DetachUniversalIdentity_args(const BrainCloudService_Identity_DetachUniversalIdentity_args&);
  BrainCloudService_Identity_DetachUniversalIdentity_args& operator=(const BrainCloudService_Identity_DetachUniversalIdentity_args&);
  BrainCloudService_Identity_DetachUniversalIdentity_args() : userId(), continueAnon(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_DetachUniversalIdentity_args() throw();
  std::string userId;
  bool continueAnon;
  int32_t clientIndex;

  _BrainCloudService_Identity_DetachUniversalIdentity_args__isset __isset;

  void __set_userId(const std::string& val);

  void __set_continueAnon(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_DetachUniversalIdentity_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(continueAnon == rhs.continueAnon))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachUniversalIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachUniversalIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_DetachUniversalIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_DetachUniversalIdentity_pargs() throw();
  const std::string* userId;
  const bool* continueAnon;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachUniversalIdentity_result__isset {
  _BrainCloudService_Identity_DetachUniversalIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachUniversalIdentity_result__isset;

class BrainCloudService_Identity_DetachUniversalIdentity_result {
 public:

  BrainCloudService_Identity_DetachUniversalIdentity_result(const BrainCloudService_Identity_DetachUniversalIdentity_result&);
  BrainCloudService_Identity_DetachUniversalIdentity_result& operator=(const BrainCloudService_Identity_DetachUniversalIdentity_result&);
  BrainCloudService_Identity_DetachUniversalIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_DetachUniversalIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_DetachUniversalIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_DetachUniversalIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachUniversalIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachUniversalIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachUniversalIdentity_presult__isset {
  _BrainCloudService_Identity_DetachUniversalIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachUniversalIdentity_presult__isset;

class BrainCloudService_Identity_DetachUniversalIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_DetachUniversalIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_DetachUniversalIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_SwitchToChildProfile_args__isset {
  _BrainCloudService_Identity_SwitchToChildProfile_args__isset() : childProfileId(false), childAppId(false), forceCreate(false), clientIndex(false) {}
  bool childProfileId :1;
  bool childAppId :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_SwitchToChildProfile_args__isset;

class BrainCloudService_Identity_SwitchToChildProfile_args {
 public:

  BrainCloudService_Identity_SwitchToChildProfile_args(const BrainCloudService_Identity_SwitchToChildProfile_args&);
  BrainCloudService_Identity_SwitchToChildProfile_args& operator=(const BrainCloudService_Identity_SwitchToChildProfile_args&);
  BrainCloudService_Identity_SwitchToChildProfile_args() : childProfileId(), childAppId(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_SwitchToChildProfile_args() throw();
  std::string childProfileId;
  std::string childAppId;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Identity_SwitchToChildProfile_args__isset __isset;

  void __set_childProfileId(const std::string& val);

  void __set_childAppId(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_SwitchToChildProfile_args & rhs) const
  {
    if (!(childProfileId == rhs.childProfileId))
      return false;
    if (!(childAppId == rhs.childAppId))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToChildProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToChildProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_SwitchToChildProfile_pargs {
 public:


  virtual ~BrainCloudService_Identity_SwitchToChildProfile_pargs() throw();
  const std::string* childProfileId;
  const std::string* childAppId;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToChildProfile_result__isset {
  _BrainCloudService_Identity_SwitchToChildProfile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToChildProfile_result__isset;

class BrainCloudService_Identity_SwitchToChildProfile_result {
 public:

  BrainCloudService_Identity_SwitchToChildProfile_result(const BrainCloudService_Identity_SwitchToChildProfile_result&);
  BrainCloudService_Identity_SwitchToChildProfile_result& operator=(const BrainCloudService_Identity_SwitchToChildProfile_result&);
  BrainCloudService_Identity_SwitchToChildProfile_result() : success() {
  }

  virtual ~BrainCloudService_Identity_SwitchToChildProfile_result() throw();
  std::string success;

  _BrainCloudService_Identity_SwitchToChildProfile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_SwitchToChildProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToChildProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToChildProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToChildProfile_presult__isset {
  _BrainCloudService_Identity_SwitchToChildProfile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToChildProfile_presult__isset;

class BrainCloudService_Identity_SwitchToChildProfile_presult {
 public:


  virtual ~BrainCloudService_Identity_SwitchToChildProfile_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_SwitchToChildProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_SwitchToSingletonChildProfile_args__isset {
  _BrainCloudService_Identity_SwitchToSingletonChildProfile_args__isset() : childAppId(false), forceCreate(false), clientIndex(false) {}
  bool childAppId :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_SwitchToSingletonChildProfile_args__isset;

class BrainCloudService_Identity_SwitchToSingletonChildProfile_args {
 public:

  BrainCloudService_Identity_SwitchToSingletonChildProfile_args(const BrainCloudService_Identity_SwitchToSingletonChildProfile_args&);
  BrainCloudService_Identity_SwitchToSingletonChildProfile_args& operator=(const BrainCloudService_Identity_SwitchToSingletonChildProfile_args&);
  BrainCloudService_Identity_SwitchToSingletonChildProfile_args() : childAppId(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_SwitchToSingletonChildProfile_args() throw();
  std::string childAppId;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Identity_SwitchToSingletonChildProfile_args__isset __isset;

  void __set_childAppId(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_SwitchToSingletonChildProfile_args & rhs) const
  {
    if (!(childAppId == rhs.childAppId))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToSingletonChildProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToSingletonChildProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_SwitchToSingletonChildProfile_pargs {
 public:


  virtual ~BrainCloudService_Identity_SwitchToSingletonChildProfile_pargs() throw();
  const std::string* childAppId;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToSingletonChildProfile_result__isset {
  _BrainCloudService_Identity_SwitchToSingletonChildProfile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToSingletonChildProfile_result__isset;

class BrainCloudService_Identity_SwitchToSingletonChildProfile_result {
 public:

  BrainCloudService_Identity_SwitchToSingletonChildProfile_result(const BrainCloudService_Identity_SwitchToSingletonChildProfile_result&);
  BrainCloudService_Identity_SwitchToSingletonChildProfile_result& operator=(const BrainCloudService_Identity_SwitchToSingletonChildProfile_result&);
  BrainCloudService_Identity_SwitchToSingletonChildProfile_result() : success() {
  }

  virtual ~BrainCloudService_Identity_SwitchToSingletonChildProfile_result() throw();
  std::string success;

  _BrainCloudService_Identity_SwitchToSingletonChildProfile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_SwitchToSingletonChildProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToSingletonChildProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToSingletonChildProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToSingletonChildProfile_presult__isset {
  _BrainCloudService_Identity_SwitchToSingletonChildProfile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToSingletonChildProfile_presult__isset;

class BrainCloudService_Identity_SwitchToSingletonChildProfile_presult {
 public:


  virtual ~BrainCloudService_Identity_SwitchToSingletonChildProfile_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_SwitchToSingletonChildProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_AttachParentWithIdentity_args__isset {
  _BrainCloudService_Identity_AttachParentWithIdentity_args__isset() : externalId(false), authenticationToken(false), authenticationType(false), externalAuthName(false), forceCreate(false), clientIndex(false) {}
  bool externalId :1;
  bool authenticationToken :1;
  bool authenticationType :1;
  bool externalAuthName :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_AttachParentWithIdentity_args__isset;

class BrainCloudService_Identity_AttachParentWithIdentity_args {
 public:

  BrainCloudService_Identity_AttachParentWithIdentity_args(const BrainCloudService_Identity_AttachParentWithIdentity_args&);
  BrainCloudService_Identity_AttachParentWithIdentity_args& operator=(const BrainCloudService_Identity_AttachParentWithIdentity_args&);
  BrainCloudService_Identity_AttachParentWithIdentity_args() : externalId(), authenticationToken(), authenticationType(), externalAuthName(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_AttachParentWithIdentity_args() throw();
  std::string externalId;
  std::string authenticationToken;
  std::string authenticationType;
  std::string externalAuthName;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Identity_AttachParentWithIdentity_args__isset __isset;

  void __set_externalId(const std::string& val);

  void __set_authenticationToken(const std::string& val);

  void __set_authenticationType(const std::string& val);

  void __set_externalAuthName(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_AttachParentWithIdentity_args & rhs) const
  {
    if (!(externalId == rhs.externalId))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(authenticationType == rhs.authenticationType))
      return false;
    if (!(externalAuthName == rhs.externalAuthName))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachParentWithIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachParentWithIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_AttachParentWithIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_AttachParentWithIdentity_pargs() throw();
  const std::string* externalId;
  const std::string* authenticationToken;
  const std::string* authenticationType;
  const std::string* externalAuthName;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachParentWithIdentity_result__isset {
  _BrainCloudService_Identity_AttachParentWithIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachParentWithIdentity_result__isset;

class BrainCloudService_Identity_AttachParentWithIdentity_result {
 public:

  BrainCloudService_Identity_AttachParentWithIdentity_result(const BrainCloudService_Identity_AttachParentWithIdentity_result&);
  BrainCloudService_Identity_AttachParentWithIdentity_result& operator=(const BrainCloudService_Identity_AttachParentWithIdentity_result&);
  BrainCloudService_Identity_AttachParentWithIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_AttachParentWithIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_AttachParentWithIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_AttachParentWithIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachParentWithIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachParentWithIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachParentWithIdentity_presult__isset {
  _BrainCloudService_Identity_AttachParentWithIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachParentWithIdentity_presult__isset;

class BrainCloudService_Identity_AttachParentWithIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_AttachParentWithIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_AttachParentWithIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_SwitchToParentProfile_args__isset {
  _BrainCloudService_Identity_SwitchToParentProfile_args__isset() : parentLevelName(false), clientIndex(false) {}
  bool parentLevelName :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_SwitchToParentProfile_args__isset;

class BrainCloudService_Identity_SwitchToParentProfile_args {
 public:

  BrainCloudService_Identity_SwitchToParentProfile_args(const BrainCloudService_Identity_SwitchToParentProfile_args&);
  BrainCloudService_Identity_SwitchToParentProfile_args& operator=(const BrainCloudService_Identity_SwitchToParentProfile_args&);
  BrainCloudService_Identity_SwitchToParentProfile_args() : parentLevelName(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_SwitchToParentProfile_args() throw();
  std::string parentLevelName;
  int32_t clientIndex;

  _BrainCloudService_Identity_SwitchToParentProfile_args__isset __isset;

  void __set_parentLevelName(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_SwitchToParentProfile_args & rhs) const
  {
    if (!(parentLevelName == rhs.parentLevelName))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToParentProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToParentProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_SwitchToParentProfile_pargs {
 public:


  virtual ~BrainCloudService_Identity_SwitchToParentProfile_pargs() throw();
  const std::string* parentLevelName;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToParentProfile_result__isset {
  _BrainCloudService_Identity_SwitchToParentProfile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToParentProfile_result__isset;

class BrainCloudService_Identity_SwitchToParentProfile_result {
 public:

  BrainCloudService_Identity_SwitchToParentProfile_result(const BrainCloudService_Identity_SwitchToParentProfile_result&);
  BrainCloudService_Identity_SwitchToParentProfile_result& operator=(const BrainCloudService_Identity_SwitchToParentProfile_result&);
  BrainCloudService_Identity_SwitchToParentProfile_result() : success() {
  }

  virtual ~BrainCloudService_Identity_SwitchToParentProfile_result() throw();
  std::string success;

  _BrainCloudService_Identity_SwitchToParentProfile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_SwitchToParentProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_SwitchToParentProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_SwitchToParentProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_SwitchToParentProfile_presult__isset {
  _BrainCloudService_Identity_SwitchToParentProfile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_SwitchToParentProfile_presult__isset;

class BrainCloudService_Identity_SwitchToParentProfile_presult {
 public:


  virtual ~BrainCloudService_Identity_SwitchToParentProfile_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_SwitchToParentProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_DetachParent_args__isset {
  _BrainCloudService_Identity_DetachParent_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Identity_DetachParent_args__isset;

class BrainCloudService_Identity_DetachParent_args {
 public:

  BrainCloudService_Identity_DetachParent_args(const BrainCloudService_Identity_DetachParent_args&);
  BrainCloudService_Identity_DetachParent_args& operator=(const BrainCloudService_Identity_DetachParent_args&);
  BrainCloudService_Identity_DetachParent_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_DetachParent_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Identity_DetachParent_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_DetachParent_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachParent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachParent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_DetachParent_pargs {
 public:


  virtual ~BrainCloudService_Identity_DetachParent_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachParent_result__isset {
  _BrainCloudService_Identity_DetachParent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachParent_result__isset;

class BrainCloudService_Identity_DetachParent_result {
 public:

  BrainCloudService_Identity_DetachParent_result(const BrainCloudService_Identity_DetachParent_result&);
  BrainCloudService_Identity_DetachParent_result& operator=(const BrainCloudService_Identity_DetachParent_result&);
  BrainCloudService_Identity_DetachParent_result() : success() {
  }

  virtual ~BrainCloudService_Identity_DetachParent_result() throw();
  std::string success;

  _BrainCloudService_Identity_DetachParent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_DetachParent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachParent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachParent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachParent_presult__isset {
  _BrainCloudService_Identity_DetachParent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachParent_presult__isset;

class BrainCloudService_Identity_DetachParent_presult {
 public:


  virtual ~BrainCloudService_Identity_DetachParent_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_DetachParent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_GetChildProfiles_args__isset {
  _BrainCloudService_Identity_GetChildProfiles_args__isset() : includeSummaryData(false), clientIndex(false) {}
  bool includeSummaryData :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_GetChildProfiles_args__isset;

class BrainCloudService_Identity_GetChildProfiles_args {
 public:

  BrainCloudService_Identity_GetChildProfiles_args(const BrainCloudService_Identity_GetChildProfiles_args&);
  BrainCloudService_Identity_GetChildProfiles_args& operator=(const BrainCloudService_Identity_GetChildProfiles_args&);
  BrainCloudService_Identity_GetChildProfiles_args() : includeSummaryData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_GetChildProfiles_args() throw();
  bool includeSummaryData;
  int32_t clientIndex;

  _BrainCloudService_Identity_GetChildProfiles_args__isset __isset;

  void __set_includeSummaryData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_GetChildProfiles_args & rhs) const
  {
    if (!(includeSummaryData == rhs.includeSummaryData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetChildProfiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetChildProfiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_GetChildProfiles_pargs {
 public:


  virtual ~BrainCloudService_Identity_GetChildProfiles_pargs() throw();
  const bool* includeSummaryData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetChildProfiles_result__isset {
  _BrainCloudService_Identity_GetChildProfiles_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetChildProfiles_result__isset;

class BrainCloudService_Identity_GetChildProfiles_result {
 public:

  BrainCloudService_Identity_GetChildProfiles_result(const BrainCloudService_Identity_GetChildProfiles_result&);
  BrainCloudService_Identity_GetChildProfiles_result& operator=(const BrainCloudService_Identity_GetChildProfiles_result&);
  BrainCloudService_Identity_GetChildProfiles_result() : success() {
  }

  virtual ~BrainCloudService_Identity_GetChildProfiles_result() throw();
  std::string success;

  _BrainCloudService_Identity_GetChildProfiles_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_GetChildProfiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetChildProfiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetChildProfiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetChildProfiles_presult__isset {
  _BrainCloudService_Identity_GetChildProfiles_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetChildProfiles_presult__isset;

class BrainCloudService_Identity_GetChildProfiles_presult {
 public:


  virtual ~BrainCloudService_Identity_GetChildProfiles_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_GetChildProfiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_GetIdentities_args__isset {
  _BrainCloudService_Identity_GetIdentities_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Identity_GetIdentities_args__isset;

class BrainCloudService_Identity_GetIdentities_args {
 public:

  BrainCloudService_Identity_GetIdentities_args(const BrainCloudService_Identity_GetIdentities_args&);
  BrainCloudService_Identity_GetIdentities_args& operator=(const BrainCloudService_Identity_GetIdentities_args&);
  BrainCloudService_Identity_GetIdentities_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_GetIdentities_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Identity_GetIdentities_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_GetIdentities_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetIdentities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetIdentities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_GetIdentities_pargs {
 public:


  virtual ~BrainCloudService_Identity_GetIdentities_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetIdentities_result__isset {
  _BrainCloudService_Identity_GetIdentities_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetIdentities_result__isset;

class BrainCloudService_Identity_GetIdentities_result {
 public:

  BrainCloudService_Identity_GetIdentities_result(const BrainCloudService_Identity_GetIdentities_result&);
  BrainCloudService_Identity_GetIdentities_result& operator=(const BrainCloudService_Identity_GetIdentities_result&);
  BrainCloudService_Identity_GetIdentities_result() : success() {
  }

  virtual ~BrainCloudService_Identity_GetIdentities_result() throw();
  std::string success;

  _BrainCloudService_Identity_GetIdentities_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_GetIdentities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetIdentities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetIdentities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetIdentities_presult__isset {
  _BrainCloudService_Identity_GetIdentities_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetIdentities_presult__isset;

class BrainCloudService_Identity_GetIdentities_presult {
 public:


  virtual ~BrainCloudService_Identity_GetIdentities_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_GetIdentities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_GetExpiredIdentities_args__isset {
  _BrainCloudService_Identity_GetExpiredIdentities_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Identity_GetExpiredIdentities_args__isset;

class BrainCloudService_Identity_GetExpiredIdentities_args {
 public:

  BrainCloudService_Identity_GetExpiredIdentities_args(const BrainCloudService_Identity_GetExpiredIdentities_args&);
  BrainCloudService_Identity_GetExpiredIdentities_args& operator=(const BrainCloudService_Identity_GetExpiredIdentities_args&);
  BrainCloudService_Identity_GetExpiredIdentities_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_GetExpiredIdentities_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Identity_GetExpiredIdentities_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_GetExpiredIdentities_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetExpiredIdentities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetExpiredIdentities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_GetExpiredIdentities_pargs {
 public:


  virtual ~BrainCloudService_Identity_GetExpiredIdentities_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetExpiredIdentities_result__isset {
  _BrainCloudService_Identity_GetExpiredIdentities_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetExpiredIdentities_result__isset;

class BrainCloudService_Identity_GetExpiredIdentities_result {
 public:

  BrainCloudService_Identity_GetExpiredIdentities_result(const BrainCloudService_Identity_GetExpiredIdentities_result&);
  BrainCloudService_Identity_GetExpiredIdentities_result& operator=(const BrainCloudService_Identity_GetExpiredIdentities_result&);
  BrainCloudService_Identity_GetExpiredIdentities_result() : success() {
  }

  virtual ~BrainCloudService_Identity_GetExpiredIdentities_result() throw();
  std::string success;

  _BrainCloudService_Identity_GetExpiredIdentities_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_GetExpiredIdentities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetExpiredIdentities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetExpiredIdentities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetExpiredIdentities_presult__isset {
  _BrainCloudService_Identity_GetExpiredIdentities_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetExpiredIdentities_presult__isset;

class BrainCloudService_Identity_GetExpiredIdentities_presult {
 public:


  virtual ~BrainCloudService_Identity_GetExpiredIdentities_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_GetExpiredIdentities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_RefreshIdentity_args__isset {
  _BrainCloudService_Identity_RefreshIdentity_args__isset() : externalId(false), authenticationToken(false), authenticationType(false), clientIndex(false) {}
  bool externalId :1;
  bool authenticationToken :1;
  bool authenticationType :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_RefreshIdentity_args__isset;

class BrainCloudService_Identity_RefreshIdentity_args {
 public:

  BrainCloudService_Identity_RefreshIdentity_args(const BrainCloudService_Identity_RefreshIdentity_args&);
  BrainCloudService_Identity_RefreshIdentity_args& operator=(const BrainCloudService_Identity_RefreshIdentity_args&);
  BrainCloudService_Identity_RefreshIdentity_args() : externalId(), authenticationToken(), authenticationType(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_RefreshIdentity_args() throw();
  std::string externalId;
  std::string authenticationToken;
  std::string authenticationType;
  int32_t clientIndex;

  _BrainCloudService_Identity_RefreshIdentity_args__isset __isset;

  void __set_externalId(const std::string& val);

  void __set_authenticationToken(const std::string& val);

  void __set_authenticationType(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_RefreshIdentity_args & rhs) const
  {
    if (!(externalId == rhs.externalId))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(authenticationType == rhs.authenticationType))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_RefreshIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_RefreshIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_RefreshIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_RefreshIdentity_pargs() throw();
  const std::string* externalId;
  const std::string* authenticationToken;
  const std::string* authenticationType;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_RefreshIdentity_result__isset {
  _BrainCloudService_Identity_RefreshIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_RefreshIdentity_result__isset;

class BrainCloudService_Identity_RefreshIdentity_result {
 public:

  BrainCloudService_Identity_RefreshIdentity_result(const BrainCloudService_Identity_RefreshIdentity_result&);
  BrainCloudService_Identity_RefreshIdentity_result& operator=(const BrainCloudService_Identity_RefreshIdentity_result&);
  BrainCloudService_Identity_RefreshIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_RefreshIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_RefreshIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_RefreshIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_RefreshIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_RefreshIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_RefreshIdentity_presult__isset {
  _BrainCloudService_Identity_RefreshIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_RefreshIdentity_presult__isset;

class BrainCloudService_Identity_RefreshIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_RefreshIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_RefreshIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_ChangeEmailIdentity_args__isset {
  _BrainCloudService_Identity_ChangeEmailIdentity_args__isset() : oldEmailAddress(false), password(false), newEmailAddress(false), updateContactEmail(false), clientIndex(false) {}
  bool oldEmailAddress :1;
  bool password :1;
  bool newEmailAddress :1;
  bool updateContactEmail :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_ChangeEmailIdentity_args__isset;

class BrainCloudService_Identity_ChangeEmailIdentity_args {
 public:

  BrainCloudService_Identity_ChangeEmailIdentity_args(const BrainCloudService_Identity_ChangeEmailIdentity_args&);
  BrainCloudService_Identity_ChangeEmailIdentity_args& operator=(const BrainCloudService_Identity_ChangeEmailIdentity_args&);
  BrainCloudService_Identity_ChangeEmailIdentity_args() : oldEmailAddress(), password(), newEmailAddress(), updateContactEmail(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_ChangeEmailIdentity_args() throw();
  std::string oldEmailAddress;
  std::string password;
  std::string newEmailAddress;
  bool updateContactEmail;
  int32_t clientIndex;

  _BrainCloudService_Identity_ChangeEmailIdentity_args__isset __isset;

  void __set_oldEmailAddress(const std::string& val);

  void __set_password(const std::string& val);

  void __set_newEmailAddress(const std::string& val);

  void __set_updateContactEmail(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_ChangeEmailIdentity_args & rhs) const
  {
    if (!(oldEmailAddress == rhs.oldEmailAddress))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(newEmailAddress == rhs.newEmailAddress))
      return false;
    if (!(updateContactEmail == rhs.updateContactEmail))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_ChangeEmailIdentity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_ChangeEmailIdentity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_ChangeEmailIdentity_pargs {
 public:


  virtual ~BrainCloudService_Identity_ChangeEmailIdentity_pargs() throw();
  const std::string* oldEmailAddress;
  const std::string* password;
  const std::string* newEmailAddress;
  const bool* updateContactEmail;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_ChangeEmailIdentity_result__isset {
  _BrainCloudService_Identity_ChangeEmailIdentity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_ChangeEmailIdentity_result__isset;

class BrainCloudService_Identity_ChangeEmailIdentity_result {
 public:

  BrainCloudService_Identity_ChangeEmailIdentity_result(const BrainCloudService_Identity_ChangeEmailIdentity_result&);
  BrainCloudService_Identity_ChangeEmailIdentity_result& operator=(const BrainCloudService_Identity_ChangeEmailIdentity_result&);
  BrainCloudService_Identity_ChangeEmailIdentity_result() : success() {
  }

  virtual ~BrainCloudService_Identity_ChangeEmailIdentity_result() throw();
  std::string success;

  _BrainCloudService_Identity_ChangeEmailIdentity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_ChangeEmailIdentity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_ChangeEmailIdentity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_ChangeEmailIdentity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_ChangeEmailIdentity_presult__isset {
  _BrainCloudService_Identity_ChangeEmailIdentity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_ChangeEmailIdentity_presult__isset;

class BrainCloudService_Identity_ChangeEmailIdentity_presult {
 public:


  virtual ~BrainCloudService_Identity_ChangeEmailIdentity_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_ChangeEmailIdentity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_AttachPeerProfile_args__isset {
  _BrainCloudService_Identity_AttachPeerProfile_args__isset() : peer(false), externalId(false), authenticationToken(false), authenticationType(false), externalAuthName(false), forceCreate(false), clientIndex(false) {}
  bool peer :1;
  bool externalId :1;
  bool authenticationToken :1;
  bool authenticationType :1;
  bool externalAuthName :1;
  bool forceCreate :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_AttachPeerProfile_args__isset;

class BrainCloudService_Identity_AttachPeerProfile_args {
 public:

  BrainCloudService_Identity_AttachPeerProfile_args(const BrainCloudService_Identity_AttachPeerProfile_args&);
  BrainCloudService_Identity_AttachPeerProfile_args& operator=(const BrainCloudService_Identity_AttachPeerProfile_args&);
  BrainCloudService_Identity_AttachPeerProfile_args() : peer(), externalId(), authenticationToken(), authenticationType(), externalAuthName(), forceCreate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_AttachPeerProfile_args() throw();
  std::string peer;
  std::string externalId;
  std::string authenticationToken;
  std::string authenticationType;
  std::string externalAuthName;
  bool forceCreate;
  int32_t clientIndex;

  _BrainCloudService_Identity_AttachPeerProfile_args__isset __isset;

  void __set_peer(const std::string& val);

  void __set_externalId(const std::string& val);

  void __set_authenticationToken(const std::string& val);

  void __set_authenticationType(const std::string& val);

  void __set_externalAuthName(const std::string& val);

  void __set_forceCreate(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_AttachPeerProfile_args & rhs) const
  {
    if (!(peer == rhs.peer))
      return false;
    if (!(externalId == rhs.externalId))
      return false;
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(authenticationType == rhs.authenticationType))
      return false;
    if (!(externalAuthName == rhs.externalAuthName))
      return false;
    if (!(forceCreate == rhs.forceCreate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachPeerProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachPeerProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_AttachPeerProfile_pargs {
 public:


  virtual ~BrainCloudService_Identity_AttachPeerProfile_pargs() throw();
  const std::string* peer;
  const std::string* externalId;
  const std::string* authenticationToken;
  const std::string* authenticationType;
  const std::string* externalAuthName;
  const bool* forceCreate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachPeerProfile_result__isset {
  _BrainCloudService_Identity_AttachPeerProfile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachPeerProfile_result__isset;

class BrainCloudService_Identity_AttachPeerProfile_result {
 public:

  BrainCloudService_Identity_AttachPeerProfile_result(const BrainCloudService_Identity_AttachPeerProfile_result&);
  BrainCloudService_Identity_AttachPeerProfile_result& operator=(const BrainCloudService_Identity_AttachPeerProfile_result&);
  BrainCloudService_Identity_AttachPeerProfile_result() : success() {
  }

  virtual ~BrainCloudService_Identity_AttachPeerProfile_result() throw();
  std::string success;

  _BrainCloudService_Identity_AttachPeerProfile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_AttachPeerProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_AttachPeerProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_AttachPeerProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_AttachPeerProfile_presult__isset {
  _BrainCloudService_Identity_AttachPeerProfile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_AttachPeerProfile_presult__isset;

class BrainCloudService_Identity_AttachPeerProfile_presult {
 public:


  virtual ~BrainCloudService_Identity_AttachPeerProfile_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_AttachPeerProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_DetachPeer_args__isset {
  _BrainCloudService_Identity_DetachPeer_args__isset() : peer(false), clientIndex(false) {}
  bool peer :1;
  bool clientIndex :1;
} _BrainCloudService_Identity_DetachPeer_args__isset;

class BrainCloudService_Identity_DetachPeer_args {
 public:

  BrainCloudService_Identity_DetachPeer_args(const BrainCloudService_Identity_DetachPeer_args&);
  BrainCloudService_Identity_DetachPeer_args& operator=(const BrainCloudService_Identity_DetachPeer_args&);
  BrainCloudService_Identity_DetachPeer_args() : peer(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_DetachPeer_args() throw();
  std::string peer;
  int32_t clientIndex;

  _BrainCloudService_Identity_DetachPeer_args__isset __isset;

  void __set_peer(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_DetachPeer_args & rhs) const
  {
    if (!(peer == rhs.peer))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachPeer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachPeer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_DetachPeer_pargs {
 public:


  virtual ~BrainCloudService_Identity_DetachPeer_pargs() throw();
  const std::string* peer;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachPeer_result__isset {
  _BrainCloudService_Identity_DetachPeer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachPeer_result__isset;

class BrainCloudService_Identity_DetachPeer_result {
 public:

  BrainCloudService_Identity_DetachPeer_result(const BrainCloudService_Identity_DetachPeer_result&);
  BrainCloudService_Identity_DetachPeer_result& operator=(const BrainCloudService_Identity_DetachPeer_result&);
  BrainCloudService_Identity_DetachPeer_result() : success() {
  }

  virtual ~BrainCloudService_Identity_DetachPeer_result() throw();
  std::string success;

  _BrainCloudService_Identity_DetachPeer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_DetachPeer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_DetachPeer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_DetachPeer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_DetachPeer_presult__isset {
  _BrainCloudService_Identity_DetachPeer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_DetachPeer_presult__isset;

class BrainCloudService_Identity_DetachPeer_presult {
 public:


  virtual ~BrainCloudService_Identity_DetachPeer_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_DetachPeer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Identity_GetPeerProfiles_args__isset {
  _BrainCloudService_Identity_GetPeerProfiles_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Identity_GetPeerProfiles_args__isset;

class BrainCloudService_Identity_GetPeerProfiles_args {
 public:

  BrainCloudService_Identity_GetPeerProfiles_args(const BrainCloudService_Identity_GetPeerProfiles_args&);
  BrainCloudService_Identity_GetPeerProfiles_args& operator=(const BrainCloudService_Identity_GetPeerProfiles_args&);
  BrainCloudService_Identity_GetPeerProfiles_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Identity_GetPeerProfiles_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Identity_GetPeerProfiles_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Identity_GetPeerProfiles_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetPeerProfiles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetPeerProfiles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Identity_GetPeerProfiles_pargs {
 public:


  virtual ~BrainCloudService_Identity_GetPeerProfiles_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetPeerProfiles_result__isset {
  _BrainCloudService_Identity_GetPeerProfiles_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetPeerProfiles_result__isset;

class BrainCloudService_Identity_GetPeerProfiles_result {
 public:

  BrainCloudService_Identity_GetPeerProfiles_result(const BrainCloudService_Identity_GetPeerProfiles_result&);
  BrainCloudService_Identity_GetPeerProfiles_result& operator=(const BrainCloudService_Identity_GetPeerProfiles_result&);
  BrainCloudService_Identity_GetPeerProfiles_result() : success() {
  }

  virtual ~BrainCloudService_Identity_GetPeerProfiles_result() throw();
  std::string success;

  _BrainCloudService_Identity_GetPeerProfiles_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Identity_GetPeerProfiles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Identity_GetPeerProfiles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Identity_GetPeerProfiles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Identity_GetPeerProfiles_presult__isset {
  _BrainCloudService_Identity_GetPeerProfiles_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Identity_GetPeerProfiles_presult__isset;

class BrainCloudService_Identity_GetPeerProfiles_presult {
 public:


  virtual ~BrainCloudService_Identity_GetPeerProfiles_presult() throw();
  std::string* success;

  _BrainCloudService_Identity_GetPeerProfiles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Mail_SendBasicEmail_args__isset {
  _BrainCloudService_Mail_SendBasicEmail_args__isset() : profileId(false), subject(false), body(false), clientIndex(false) {}
  bool profileId :1;
  bool subject :1;
  bool body :1;
  bool clientIndex :1;
} _BrainCloudService_Mail_SendBasicEmail_args__isset;

class BrainCloudService_Mail_SendBasicEmail_args {
 public:

  BrainCloudService_Mail_SendBasicEmail_args(const BrainCloudService_Mail_SendBasicEmail_args&);
  BrainCloudService_Mail_SendBasicEmail_args& operator=(const BrainCloudService_Mail_SendBasicEmail_args&);
  BrainCloudService_Mail_SendBasicEmail_args() : profileId(), subject(), body(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Mail_SendBasicEmail_args() throw();
  std::string profileId;
  std::string subject;
  std::string body;
  int32_t clientIndex;

  _BrainCloudService_Mail_SendBasicEmail_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_subject(const std::string& val);

  void __set_body(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Mail_SendBasicEmail_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(subject == rhs.subject))
      return false;
    if (!(body == rhs.body))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendBasicEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendBasicEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Mail_SendBasicEmail_pargs {
 public:


  virtual ~BrainCloudService_Mail_SendBasicEmail_pargs() throw();
  const std::string* profileId;
  const std::string* subject;
  const std::string* body;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendBasicEmail_result__isset {
  _BrainCloudService_Mail_SendBasicEmail_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendBasicEmail_result__isset;

class BrainCloudService_Mail_SendBasicEmail_result {
 public:

  BrainCloudService_Mail_SendBasicEmail_result(const BrainCloudService_Mail_SendBasicEmail_result&);
  BrainCloudService_Mail_SendBasicEmail_result& operator=(const BrainCloudService_Mail_SendBasicEmail_result&);
  BrainCloudService_Mail_SendBasicEmail_result() : success() {
  }

  virtual ~BrainCloudService_Mail_SendBasicEmail_result() throw();
  std::string success;

  _BrainCloudService_Mail_SendBasicEmail_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Mail_SendBasicEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendBasicEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendBasicEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendBasicEmail_presult__isset {
  _BrainCloudService_Mail_SendBasicEmail_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendBasicEmail_presult__isset;

class BrainCloudService_Mail_SendBasicEmail_presult {
 public:


  virtual ~BrainCloudService_Mail_SendBasicEmail_presult() throw();
  std::string* success;

  _BrainCloudService_Mail_SendBasicEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmail_args__isset {
  _BrainCloudService_Mail_SendAdvancedEmail_args__isset() : profileId(false), jsonServiceParams(false), clientIndex(false) {}
  bool profileId :1;
  bool jsonServiceParams :1;
  bool clientIndex :1;
} _BrainCloudService_Mail_SendAdvancedEmail_args__isset;

class BrainCloudService_Mail_SendAdvancedEmail_args {
 public:

  BrainCloudService_Mail_SendAdvancedEmail_args(const BrainCloudService_Mail_SendAdvancedEmail_args&);
  BrainCloudService_Mail_SendAdvancedEmail_args& operator=(const BrainCloudService_Mail_SendAdvancedEmail_args&);
  BrainCloudService_Mail_SendAdvancedEmail_args() : profileId(), jsonServiceParams(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Mail_SendAdvancedEmail_args() throw();
  std::string profileId;
  std::string jsonServiceParams;
  int32_t clientIndex;

  _BrainCloudService_Mail_SendAdvancedEmail_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_jsonServiceParams(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Mail_SendAdvancedEmail_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(jsonServiceParams == rhs.jsonServiceParams))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendAdvancedEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendAdvancedEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Mail_SendAdvancedEmail_pargs {
 public:


  virtual ~BrainCloudService_Mail_SendAdvancedEmail_pargs() throw();
  const std::string* profileId;
  const std::string* jsonServiceParams;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmail_result__isset {
  _BrainCloudService_Mail_SendAdvancedEmail_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendAdvancedEmail_result__isset;

class BrainCloudService_Mail_SendAdvancedEmail_result {
 public:

  BrainCloudService_Mail_SendAdvancedEmail_result(const BrainCloudService_Mail_SendAdvancedEmail_result&);
  BrainCloudService_Mail_SendAdvancedEmail_result& operator=(const BrainCloudService_Mail_SendAdvancedEmail_result&);
  BrainCloudService_Mail_SendAdvancedEmail_result() : success() {
  }

  virtual ~BrainCloudService_Mail_SendAdvancedEmail_result() throw();
  std::string success;

  _BrainCloudService_Mail_SendAdvancedEmail_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Mail_SendAdvancedEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendAdvancedEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendAdvancedEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmail_presult__isset {
  _BrainCloudService_Mail_SendAdvancedEmail_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendAdvancedEmail_presult__isset;

class BrainCloudService_Mail_SendAdvancedEmail_presult {
 public:


  virtual ~BrainCloudService_Mail_SendAdvancedEmail_presult() throw();
  std::string* success;

  _BrainCloudService_Mail_SendAdvancedEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmailByAddress_args__isset {
  _BrainCloudService_Mail_SendAdvancedEmailByAddress_args__isset() : emailAddress(false), jsonServiceParams(false), clientIndex(false) {}
  bool emailAddress :1;
  bool jsonServiceParams :1;
  bool clientIndex :1;
} _BrainCloudService_Mail_SendAdvancedEmailByAddress_args__isset;

class BrainCloudService_Mail_SendAdvancedEmailByAddress_args {
 public:

  BrainCloudService_Mail_SendAdvancedEmailByAddress_args(const BrainCloudService_Mail_SendAdvancedEmailByAddress_args&);
  BrainCloudService_Mail_SendAdvancedEmailByAddress_args& operator=(const BrainCloudService_Mail_SendAdvancedEmailByAddress_args&);
  BrainCloudService_Mail_SendAdvancedEmailByAddress_args() : emailAddress(), jsonServiceParams(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Mail_SendAdvancedEmailByAddress_args() throw();
  std::string emailAddress;
  std::string jsonServiceParams;
  int32_t clientIndex;

  _BrainCloudService_Mail_SendAdvancedEmailByAddress_args__isset __isset;

  void __set_emailAddress(const std::string& val);

  void __set_jsonServiceParams(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Mail_SendAdvancedEmailByAddress_args & rhs) const
  {
    if (!(emailAddress == rhs.emailAddress))
      return false;
    if (!(jsonServiceParams == rhs.jsonServiceParams))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendAdvancedEmailByAddress_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendAdvancedEmailByAddress_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Mail_SendAdvancedEmailByAddress_pargs {
 public:


  virtual ~BrainCloudService_Mail_SendAdvancedEmailByAddress_pargs() throw();
  const std::string* emailAddress;
  const std::string* jsonServiceParams;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmailByAddress_result__isset {
  _BrainCloudService_Mail_SendAdvancedEmailByAddress_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendAdvancedEmailByAddress_result__isset;

class BrainCloudService_Mail_SendAdvancedEmailByAddress_result {
 public:

  BrainCloudService_Mail_SendAdvancedEmailByAddress_result(const BrainCloudService_Mail_SendAdvancedEmailByAddress_result&);
  BrainCloudService_Mail_SendAdvancedEmailByAddress_result& operator=(const BrainCloudService_Mail_SendAdvancedEmailByAddress_result&);
  BrainCloudService_Mail_SendAdvancedEmailByAddress_result() : success() {
  }

  virtual ~BrainCloudService_Mail_SendAdvancedEmailByAddress_result() throw();
  std::string success;

  _BrainCloudService_Mail_SendAdvancedEmailByAddress_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Mail_SendAdvancedEmailByAddress_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Mail_SendAdvancedEmailByAddress_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Mail_SendAdvancedEmailByAddress_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Mail_SendAdvancedEmailByAddress_presult__isset {
  _BrainCloudService_Mail_SendAdvancedEmailByAddress_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Mail_SendAdvancedEmailByAddress_presult__isset;

class BrainCloudService_Mail_SendAdvancedEmailByAddress_presult {
 public:


  virtual ~BrainCloudService_Mail_SendAdvancedEmailByAddress_presult() throw();
  std::string* success;

  _BrainCloudService_Mail_SendAdvancedEmailByAddress_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_Read_args__isset {
  _BrainCloudService_MatchMaking_Read_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_Read_args__isset;

class BrainCloudService_MatchMaking_Read_args {
 public:

  BrainCloudService_MatchMaking_Read_args(const BrainCloudService_MatchMaking_Read_args&);
  BrainCloudService_MatchMaking_Read_args& operator=(const BrainCloudService_MatchMaking_Read_args&);
  BrainCloudService_MatchMaking_Read_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_Read_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_Read_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_Read_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_Read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_Read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_Read_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_Read_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_Read_result__isset {
  _BrainCloudService_MatchMaking_Read_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_Read_result__isset;

class BrainCloudService_MatchMaking_Read_result {
 public:

  BrainCloudService_MatchMaking_Read_result(const BrainCloudService_MatchMaking_Read_result&);
  BrainCloudService_MatchMaking_Read_result& operator=(const BrainCloudService_MatchMaking_Read_result&);
  BrainCloudService_MatchMaking_Read_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_Read_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_Read_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_Read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_Read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_Read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_Read_presult__isset {
  _BrainCloudService_MatchMaking_Read_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_Read_presult__isset;

class BrainCloudService_MatchMaking_Read_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_Read_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_Read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_SetPlayerRating_args__isset {
  _BrainCloudService_MatchMaking_SetPlayerRating_args__isset() : playerRating(false), clientIndex(false) {}
  bool playerRating :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_SetPlayerRating_args__isset;

class BrainCloudService_MatchMaking_SetPlayerRating_args {
 public:

  BrainCloudService_MatchMaking_SetPlayerRating_args(const BrainCloudService_MatchMaking_SetPlayerRating_args&);
  BrainCloudService_MatchMaking_SetPlayerRating_args& operator=(const BrainCloudService_MatchMaking_SetPlayerRating_args&);
  BrainCloudService_MatchMaking_SetPlayerRating_args() : playerRating(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_SetPlayerRating_args() throw();
  int64_t playerRating;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_SetPlayerRating_args__isset __isset;

  void __set_playerRating(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_SetPlayerRating_args & rhs) const
  {
    if (!(playerRating == rhs.playerRating))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_SetPlayerRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_SetPlayerRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_SetPlayerRating_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_SetPlayerRating_pargs() throw();
  const int64_t* playerRating;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_SetPlayerRating_result__isset {
  _BrainCloudService_MatchMaking_SetPlayerRating_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_SetPlayerRating_result__isset;

class BrainCloudService_MatchMaking_SetPlayerRating_result {
 public:

  BrainCloudService_MatchMaking_SetPlayerRating_result(const BrainCloudService_MatchMaking_SetPlayerRating_result&);
  BrainCloudService_MatchMaking_SetPlayerRating_result& operator=(const BrainCloudService_MatchMaking_SetPlayerRating_result&);
  BrainCloudService_MatchMaking_SetPlayerRating_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_SetPlayerRating_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_SetPlayerRating_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_SetPlayerRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_SetPlayerRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_SetPlayerRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_SetPlayerRating_presult__isset {
  _BrainCloudService_MatchMaking_SetPlayerRating_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_SetPlayerRating_presult__isset;

class BrainCloudService_MatchMaking_SetPlayerRating_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_SetPlayerRating_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_SetPlayerRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_ResetPlayerRating_args__isset {
  _BrainCloudService_MatchMaking_ResetPlayerRating_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_ResetPlayerRating_args__isset;

class BrainCloudService_MatchMaking_ResetPlayerRating_args {
 public:

  BrainCloudService_MatchMaking_ResetPlayerRating_args(const BrainCloudService_MatchMaking_ResetPlayerRating_args&);
  BrainCloudService_MatchMaking_ResetPlayerRating_args& operator=(const BrainCloudService_MatchMaking_ResetPlayerRating_args&);
  BrainCloudService_MatchMaking_ResetPlayerRating_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_ResetPlayerRating_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_ResetPlayerRating_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_ResetPlayerRating_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_ResetPlayerRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_ResetPlayerRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_ResetPlayerRating_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_ResetPlayerRating_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_ResetPlayerRating_result__isset {
  _BrainCloudService_MatchMaking_ResetPlayerRating_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_ResetPlayerRating_result__isset;

class BrainCloudService_MatchMaking_ResetPlayerRating_result {
 public:

  BrainCloudService_MatchMaking_ResetPlayerRating_result(const BrainCloudService_MatchMaking_ResetPlayerRating_result&);
  BrainCloudService_MatchMaking_ResetPlayerRating_result& operator=(const BrainCloudService_MatchMaking_ResetPlayerRating_result&);
  BrainCloudService_MatchMaking_ResetPlayerRating_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_ResetPlayerRating_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_ResetPlayerRating_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_ResetPlayerRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_ResetPlayerRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_ResetPlayerRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_ResetPlayerRating_presult__isset {
  _BrainCloudService_MatchMaking_ResetPlayerRating_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_ResetPlayerRating_presult__isset;

class BrainCloudService_MatchMaking_ResetPlayerRating_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_ResetPlayerRating_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_ResetPlayerRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_IncrementPlayerRating_args__isset {
  _BrainCloudService_MatchMaking_IncrementPlayerRating_args__isset() : increment(false), clientIndex(false) {}
  bool increment :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_IncrementPlayerRating_args__isset;

class BrainCloudService_MatchMaking_IncrementPlayerRating_args {
 public:

  BrainCloudService_MatchMaking_IncrementPlayerRating_args(const BrainCloudService_MatchMaking_IncrementPlayerRating_args&);
  BrainCloudService_MatchMaking_IncrementPlayerRating_args& operator=(const BrainCloudService_MatchMaking_IncrementPlayerRating_args&);
  BrainCloudService_MatchMaking_IncrementPlayerRating_args() : increment(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_IncrementPlayerRating_args() throw();
  int64_t increment;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_IncrementPlayerRating_args__isset __isset;

  void __set_increment(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_IncrementPlayerRating_args & rhs) const
  {
    if (!(increment == rhs.increment))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_IncrementPlayerRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_IncrementPlayerRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_IncrementPlayerRating_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_IncrementPlayerRating_pargs() throw();
  const int64_t* increment;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_IncrementPlayerRating_result__isset {
  _BrainCloudService_MatchMaking_IncrementPlayerRating_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_IncrementPlayerRating_result__isset;

class BrainCloudService_MatchMaking_IncrementPlayerRating_result {
 public:

  BrainCloudService_MatchMaking_IncrementPlayerRating_result(const BrainCloudService_MatchMaking_IncrementPlayerRating_result&);
  BrainCloudService_MatchMaking_IncrementPlayerRating_result& operator=(const BrainCloudService_MatchMaking_IncrementPlayerRating_result&);
  BrainCloudService_MatchMaking_IncrementPlayerRating_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_IncrementPlayerRating_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_IncrementPlayerRating_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_IncrementPlayerRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_IncrementPlayerRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_IncrementPlayerRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_IncrementPlayerRating_presult__isset {
  _BrainCloudService_MatchMaking_IncrementPlayerRating_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_IncrementPlayerRating_presult__isset;

class BrainCloudService_MatchMaking_IncrementPlayerRating_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_IncrementPlayerRating_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_IncrementPlayerRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_DecrementPlayerRating_args__isset {
  _BrainCloudService_MatchMaking_DecrementPlayerRating_args__isset() : decrement(false), clientIndex(false) {}
  bool decrement :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_DecrementPlayerRating_args__isset;

class BrainCloudService_MatchMaking_DecrementPlayerRating_args {
 public:

  BrainCloudService_MatchMaking_DecrementPlayerRating_args(const BrainCloudService_MatchMaking_DecrementPlayerRating_args&);
  BrainCloudService_MatchMaking_DecrementPlayerRating_args& operator=(const BrainCloudService_MatchMaking_DecrementPlayerRating_args&);
  BrainCloudService_MatchMaking_DecrementPlayerRating_args() : decrement(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_DecrementPlayerRating_args() throw();
  int64_t decrement;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_DecrementPlayerRating_args__isset __isset;

  void __set_decrement(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_DecrementPlayerRating_args & rhs) const
  {
    if (!(decrement == rhs.decrement))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_DecrementPlayerRating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_DecrementPlayerRating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_DecrementPlayerRating_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_DecrementPlayerRating_pargs() throw();
  const int64_t* decrement;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_DecrementPlayerRating_result__isset {
  _BrainCloudService_MatchMaking_DecrementPlayerRating_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_DecrementPlayerRating_result__isset;

class BrainCloudService_MatchMaking_DecrementPlayerRating_result {
 public:

  BrainCloudService_MatchMaking_DecrementPlayerRating_result(const BrainCloudService_MatchMaking_DecrementPlayerRating_result&);
  BrainCloudService_MatchMaking_DecrementPlayerRating_result& operator=(const BrainCloudService_MatchMaking_DecrementPlayerRating_result&);
  BrainCloudService_MatchMaking_DecrementPlayerRating_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_DecrementPlayerRating_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_DecrementPlayerRating_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_DecrementPlayerRating_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_DecrementPlayerRating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_DecrementPlayerRating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_DecrementPlayerRating_presult__isset {
  _BrainCloudService_MatchMaking_DecrementPlayerRating_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_DecrementPlayerRating_presult__isset;

class BrainCloudService_MatchMaking_DecrementPlayerRating_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_DecrementPlayerRating_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_DecrementPlayerRating_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOn_args__isset {
  _BrainCloudService_MatchMaking_TurnShieldOn_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_TurnShieldOn_args__isset;

class BrainCloudService_MatchMaking_TurnShieldOn_args {
 public:

  BrainCloudService_MatchMaking_TurnShieldOn_args(const BrainCloudService_MatchMaking_TurnShieldOn_args&);
  BrainCloudService_MatchMaking_TurnShieldOn_args& operator=(const BrainCloudService_MatchMaking_TurnShieldOn_args&);
  BrainCloudService_MatchMaking_TurnShieldOn_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOn_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_TurnShieldOn_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOn_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_TurnShieldOn_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOn_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOn_result__isset {
  _BrainCloudService_MatchMaking_TurnShieldOn_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOn_result__isset;

class BrainCloudService_MatchMaking_TurnShieldOn_result {
 public:

  BrainCloudService_MatchMaking_TurnShieldOn_result(const BrainCloudService_MatchMaking_TurnShieldOn_result&);
  BrainCloudService_MatchMaking_TurnShieldOn_result& operator=(const BrainCloudService_MatchMaking_TurnShieldOn_result&);
  BrainCloudService_MatchMaking_TurnShieldOn_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOn_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_TurnShieldOn_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOn_presult__isset {
  _BrainCloudService_MatchMaking_TurnShieldOn_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOn_presult__isset;

class BrainCloudService_MatchMaking_TurnShieldOn_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOn_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_TurnShieldOn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOnFor_args__isset {
  _BrainCloudService_MatchMaking_TurnShieldOnFor_args__isset() : minutes(false), clientIndex(false) {}
  bool minutes :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_TurnShieldOnFor_args__isset;

class BrainCloudService_MatchMaking_TurnShieldOnFor_args {
 public:

  BrainCloudService_MatchMaking_TurnShieldOnFor_args(const BrainCloudService_MatchMaking_TurnShieldOnFor_args&);
  BrainCloudService_MatchMaking_TurnShieldOnFor_args& operator=(const BrainCloudService_MatchMaking_TurnShieldOnFor_args&);
  BrainCloudService_MatchMaking_TurnShieldOnFor_args() : minutes(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOnFor_args() throw();
  int32_t minutes;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_TurnShieldOnFor_args__isset __isset;

  void __set_minutes(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOnFor_args & rhs) const
  {
    if (!(minutes == rhs.minutes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOnFor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOnFor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_TurnShieldOnFor_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOnFor_pargs() throw();
  const int32_t* minutes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOnFor_result__isset {
  _BrainCloudService_MatchMaking_TurnShieldOnFor_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOnFor_result__isset;

class BrainCloudService_MatchMaking_TurnShieldOnFor_result {
 public:

  BrainCloudService_MatchMaking_TurnShieldOnFor_result(const BrainCloudService_MatchMaking_TurnShieldOnFor_result&);
  BrainCloudService_MatchMaking_TurnShieldOnFor_result& operator=(const BrainCloudService_MatchMaking_TurnShieldOnFor_result&);
  BrainCloudService_MatchMaking_TurnShieldOnFor_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOnFor_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_TurnShieldOnFor_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOnFor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOnFor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOnFor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOnFor_presult__isset {
  _BrainCloudService_MatchMaking_TurnShieldOnFor_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOnFor_presult__isset;

class BrainCloudService_MatchMaking_TurnShieldOnFor_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOnFor_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_TurnShieldOnFor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOff_args__isset {
  _BrainCloudService_MatchMaking_TurnShieldOff_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_TurnShieldOff_args__isset;

class BrainCloudService_MatchMaking_TurnShieldOff_args {
 public:

  BrainCloudService_MatchMaking_TurnShieldOff_args(const BrainCloudService_MatchMaking_TurnShieldOff_args&);
  BrainCloudService_MatchMaking_TurnShieldOff_args& operator=(const BrainCloudService_MatchMaking_TurnShieldOff_args&);
  BrainCloudService_MatchMaking_TurnShieldOff_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOff_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_TurnShieldOff_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOff_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_TurnShieldOff_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOff_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOff_result__isset {
  _BrainCloudService_MatchMaking_TurnShieldOff_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOff_result__isset;

class BrainCloudService_MatchMaking_TurnShieldOff_result {
 public:

  BrainCloudService_MatchMaking_TurnShieldOff_result(const BrainCloudService_MatchMaking_TurnShieldOff_result&);
  BrainCloudService_MatchMaking_TurnShieldOff_result& operator=(const BrainCloudService_MatchMaking_TurnShieldOff_result&);
  BrainCloudService_MatchMaking_TurnShieldOff_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_TurnShieldOff_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_TurnShieldOff_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_TurnShieldOff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_TurnShieldOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_TurnShieldOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_TurnShieldOff_presult__isset {
  _BrainCloudService_MatchMaking_TurnShieldOff_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_TurnShieldOff_presult__isset;

class BrainCloudService_MatchMaking_TurnShieldOff_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_TurnShieldOff_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_TurnShieldOff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_IncrementShieldOnFor_args__isset {
  _BrainCloudService_MatchMaking_IncrementShieldOnFor_args__isset() : minutes(false), clientIndex(false) {}
  bool minutes :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_IncrementShieldOnFor_args__isset;

class BrainCloudService_MatchMaking_IncrementShieldOnFor_args {
 public:

  BrainCloudService_MatchMaking_IncrementShieldOnFor_args(const BrainCloudService_MatchMaking_IncrementShieldOnFor_args&);
  BrainCloudService_MatchMaking_IncrementShieldOnFor_args& operator=(const BrainCloudService_MatchMaking_IncrementShieldOnFor_args&);
  BrainCloudService_MatchMaking_IncrementShieldOnFor_args() : minutes(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_IncrementShieldOnFor_args() throw();
  int32_t minutes;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_IncrementShieldOnFor_args__isset __isset;

  void __set_minutes(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_IncrementShieldOnFor_args & rhs) const
  {
    if (!(minutes == rhs.minutes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_IncrementShieldOnFor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_IncrementShieldOnFor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_IncrementShieldOnFor_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_IncrementShieldOnFor_pargs() throw();
  const int32_t* minutes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_IncrementShieldOnFor_result__isset {
  _BrainCloudService_MatchMaking_IncrementShieldOnFor_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_IncrementShieldOnFor_result__isset;

class BrainCloudService_MatchMaking_IncrementShieldOnFor_result {
 public:

  BrainCloudService_MatchMaking_IncrementShieldOnFor_result(const BrainCloudService_MatchMaking_IncrementShieldOnFor_result&);
  BrainCloudService_MatchMaking_IncrementShieldOnFor_result& operator=(const BrainCloudService_MatchMaking_IncrementShieldOnFor_result&);
  BrainCloudService_MatchMaking_IncrementShieldOnFor_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_IncrementShieldOnFor_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_IncrementShieldOnFor_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_IncrementShieldOnFor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_IncrementShieldOnFor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_IncrementShieldOnFor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_IncrementShieldOnFor_presult__isset {
  _BrainCloudService_MatchMaking_IncrementShieldOnFor_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_IncrementShieldOnFor_presult__isset;

class BrainCloudService_MatchMaking_IncrementShieldOnFor_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_IncrementShieldOnFor_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_IncrementShieldOnFor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_GetShieldExpiry_args__isset {
  _BrainCloudService_MatchMaking_GetShieldExpiry_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_GetShieldExpiry_args__isset;

class BrainCloudService_MatchMaking_GetShieldExpiry_args {
 public:

  BrainCloudService_MatchMaking_GetShieldExpiry_args(const BrainCloudService_MatchMaking_GetShieldExpiry_args&);
  BrainCloudService_MatchMaking_GetShieldExpiry_args& operator=(const BrainCloudService_MatchMaking_GetShieldExpiry_args&);
  BrainCloudService_MatchMaking_GetShieldExpiry_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_GetShieldExpiry_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_GetShieldExpiry_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_GetShieldExpiry_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_GetShieldExpiry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_GetShieldExpiry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_GetShieldExpiry_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_GetShieldExpiry_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_GetShieldExpiry_result__isset {
  _BrainCloudService_MatchMaking_GetShieldExpiry_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_GetShieldExpiry_result__isset;

class BrainCloudService_MatchMaking_GetShieldExpiry_result {
 public:

  BrainCloudService_MatchMaking_GetShieldExpiry_result(const BrainCloudService_MatchMaking_GetShieldExpiry_result&);
  BrainCloudService_MatchMaking_GetShieldExpiry_result& operator=(const BrainCloudService_MatchMaking_GetShieldExpiry_result&);
  BrainCloudService_MatchMaking_GetShieldExpiry_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_GetShieldExpiry_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_GetShieldExpiry_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_GetShieldExpiry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_GetShieldExpiry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_GetShieldExpiry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_GetShieldExpiry_presult__isset {
  _BrainCloudService_MatchMaking_GetShieldExpiry_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_GetShieldExpiry_presult__isset;

class BrainCloudService_MatchMaking_GetShieldExpiry_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_GetShieldExpiry_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_GetShieldExpiry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_FindPlayers_args__isset {
  _BrainCloudService_MatchMaking_FindPlayers_args__isset() : rangeDelta(false), numMatches(false), clientIndex(false) {}
  bool rangeDelta :1;
  bool numMatches :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_FindPlayers_args__isset;

class BrainCloudService_MatchMaking_FindPlayers_args {
 public:

  BrainCloudService_MatchMaking_FindPlayers_args(const BrainCloudService_MatchMaking_FindPlayers_args&);
  BrainCloudService_MatchMaking_FindPlayers_args& operator=(const BrainCloudService_MatchMaking_FindPlayers_args&);
  BrainCloudService_MatchMaking_FindPlayers_args() : rangeDelta(0), numMatches(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayers_args() throw();
  int64_t rangeDelta;
  int64_t numMatches;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_FindPlayers_args__isset __isset;

  void __set_rangeDelta(const int64_t val);

  void __set_numMatches(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayers_args & rhs) const
  {
    if (!(rangeDelta == rhs.rangeDelta))
      return false;
    if (!(numMatches == rhs.numMatches))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_FindPlayers_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayers_pargs() throw();
  const int64_t* rangeDelta;
  const int64_t* numMatches;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayers_result__isset {
  _BrainCloudService_MatchMaking_FindPlayers_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayers_result__isset;

class BrainCloudService_MatchMaking_FindPlayers_result {
 public:

  BrainCloudService_MatchMaking_FindPlayers_result(const BrainCloudService_MatchMaking_FindPlayers_result&);
  BrainCloudService_MatchMaking_FindPlayers_result& operator=(const BrainCloudService_MatchMaking_FindPlayers_result&);
  BrainCloudService_MatchMaking_FindPlayers_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayers_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_FindPlayers_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayers_presult__isset {
  _BrainCloudService_MatchMaking_FindPlayers_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayers_presult__isset;

class BrainCloudService_MatchMaking_FindPlayers_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayers_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_FindPlayers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributes_args__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_args__isset() : rangeDelta(false), numMatches(false), jsonAttributes(false), clientIndex(false) {}
  bool rangeDelta :1;
  bool numMatches :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributes_args__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributes_args {
 public:

  BrainCloudService_MatchMaking_FindPlayersWithAttributes_args(const BrainCloudService_MatchMaking_FindPlayersWithAttributes_args&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributes_args& operator=(const BrainCloudService_MatchMaking_FindPlayersWithAttributes_args&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributes_args() : rangeDelta(0), numMatches(0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributes_args() throw();
  int64_t rangeDelta;
  int64_t numMatches;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_args__isset __isset;

  void __set_rangeDelta(const int64_t val);

  void __set_numMatches(const int64_t val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_args & rhs) const
  {
    if (!(rangeDelta == rhs.rangeDelta))
      return false;
    if (!(numMatches == rhs.numMatches))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_FindPlayersWithAttributes_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributes_pargs() throw();
  const int64_t* rangeDelta;
  const int64_t* numMatches;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributes_result__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributes_result__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributes_result {
 public:

  BrainCloudService_MatchMaking_FindPlayersWithAttributes_result(const BrainCloudService_MatchMaking_FindPlayersWithAttributes_result&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributes_result& operator=(const BrainCloudService_MatchMaking_FindPlayersWithAttributes_result&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributes_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributes_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersWithAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersUsingFilter_args__isset {
  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_args__isset() : rangeDelta(false), numMatches(false), jsonExtraParms(false), clientIndex(false) {}
  bool rangeDelta :1;
  bool numMatches :1;
  bool jsonExtraParms :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_FindPlayersUsingFilter_args__isset;

class BrainCloudService_MatchMaking_FindPlayersUsingFilter_args {
 public:

  BrainCloudService_MatchMaking_FindPlayersUsingFilter_args(const BrainCloudService_MatchMaking_FindPlayersUsingFilter_args&);
  BrainCloudService_MatchMaking_FindPlayersUsingFilter_args& operator=(const BrainCloudService_MatchMaking_FindPlayersUsingFilter_args&);
  BrainCloudService_MatchMaking_FindPlayersUsingFilter_args() : rangeDelta(0), numMatches(0), jsonExtraParms(), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersUsingFilter_args() throw();
  int64_t rangeDelta;
  int64_t numMatches;
  std::string jsonExtraParms;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_args__isset __isset;

  void __set_rangeDelta(const int64_t val);

  void __set_numMatches(const int64_t val);

  void __set_jsonExtraParms(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_args & rhs) const
  {
    if (!(rangeDelta == rhs.rangeDelta))
      return false;
    if (!(numMatches == rhs.numMatches))
      return false;
    if (!(jsonExtraParms == rhs.jsonExtraParms))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_FindPlayersUsingFilter_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersUsingFilter_pargs() throw();
  const int64_t* rangeDelta;
  const int64_t* numMatches;
  const std::string* jsonExtraParms;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersUsingFilter_result__isset {
  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersUsingFilter_result__isset;

class BrainCloudService_MatchMaking_FindPlayersUsingFilter_result {
 public:

  BrainCloudService_MatchMaking_FindPlayersUsingFilter_result(const BrainCloudService_MatchMaking_FindPlayersUsingFilter_result&);
  BrainCloudService_MatchMaking_FindPlayersUsingFilter_result& operator=(const BrainCloudService_MatchMaking_FindPlayersUsingFilter_result&);
  BrainCloudService_MatchMaking_FindPlayersUsingFilter_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersUsingFilter_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersUsingFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult__isset {
  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult__isset;

class BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_FindPlayersUsingFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args__isset() : rangeDelta(false), numMatches(false), jsonAttributes(false), jsonExtraParms(false), clientIndex(false) {}
  bool rangeDelta :1;
  bool numMatches :1;
  bool jsonAttributes :1;
  bool jsonExtraParms :1;
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args {
 public:

  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args(const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args& operator=(const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args() : rangeDelta(0), numMatches(0), jsonAttributes(), jsonExtraParms(), clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args() throw();
  int64_t rangeDelta;
  int64_t numMatches;
  std::string jsonAttributes;
  std::string jsonExtraParms;
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args__isset __isset;

  void __set_rangeDelta(const int64_t val);

  void __set_numMatches(const int64_t val);

  void __set_jsonAttributes(const std::string& val);

  void __set_jsonExtraParms(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args & rhs) const
  {
    if (!(rangeDelta == rhs.rangeDelta))
      return false;
    if (!(numMatches == rhs.numMatches))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(jsonExtraParms == rhs.jsonExtraParms))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_pargs() throw();
  const int64_t* rangeDelta;
  const int64_t* numMatches;
  const std::string* jsonAttributes;
  const std::string* jsonExtraParms;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result {
 public:

  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result(const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result& operator=(const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result&);
  BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult__isset {
  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult__isset;

class BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_FindPlayersWithAttributesUsingFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_EnableMatchMaking_args__isset {
  _BrainCloudService_MatchMaking_EnableMatchMaking_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_EnableMatchMaking_args__isset;

class BrainCloudService_MatchMaking_EnableMatchMaking_args {
 public:

  BrainCloudService_MatchMaking_EnableMatchMaking_args(const BrainCloudService_MatchMaking_EnableMatchMaking_args&);
  BrainCloudService_MatchMaking_EnableMatchMaking_args& operator=(const BrainCloudService_MatchMaking_EnableMatchMaking_args&);
  BrainCloudService_MatchMaking_EnableMatchMaking_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_EnableMatchMaking_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_EnableMatchMaking_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_EnableMatchMaking_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_EnableMatchMaking_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_EnableMatchMaking_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_EnableMatchMaking_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_EnableMatchMaking_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_EnableMatchMaking_result__isset {
  _BrainCloudService_MatchMaking_EnableMatchMaking_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_EnableMatchMaking_result__isset;

class BrainCloudService_MatchMaking_EnableMatchMaking_result {
 public:

  BrainCloudService_MatchMaking_EnableMatchMaking_result(const BrainCloudService_MatchMaking_EnableMatchMaking_result&);
  BrainCloudService_MatchMaking_EnableMatchMaking_result& operator=(const BrainCloudService_MatchMaking_EnableMatchMaking_result&);
  BrainCloudService_MatchMaking_EnableMatchMaking_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_EnableMatchMaking_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_EnableMatchMaking_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_EnableMatchMaking_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_EnableMatchMaking_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_EnableMatchMaking_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_EnableMatchMaking_presult__isset {
  _BrainCloudService_MatchMaking_EnableMatchMaking_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_EnableMatchMaking_presult__isset;

class BrainCloudService_MatchMaking_EnableMatchMaking_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_EnableMatchMaking_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_EnableMatchMaking_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_MatchMaking_DisableMatchMaking_args__isset {
  _BrainCloudService_MatchMaking_DisableMatchMaking_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_MatchMaking_DisableMatchMaking_args__isset;

class BrainCloudService_MatchMaking_DisableMatchMaking_args {
 public:

  BrainCloudService_MatchMaking_DisableMatchMaking_args(const BrainCloudService_MatchMaking_DisableMatchMaking_args&);
  BrainCloudService_MatchMaking_DisableMatchMaking_args& operator=(const BrainCloudService_MatchMaking_DisableMatchMaking_args&);
  BrainCloudService_MatchMaking_DisableMatchMaking_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_MatchMaking_DisableMatchMaking_args() throw();
  int32_t clientIndex;

  _BrainCloudService_MatchMaking_DisableMatchMaking_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_MatchMaking_DisableMatchMaking_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_DisableMatchMaking_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_DisableMatchMaking_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_MatchMaking_DisableMatchMaking_pargs {
 public:


  virtual ~BrainCloudService_MatchMaking_DisableMatchMaking_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_DisableMatchMaking_result__isset {
  _BrainCloudService_MatchMaking_DisableMatchMaking_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_DisableMatchMaking_result__isset;

class BrainCloudService_MatchMaking_DisableMatchMaking_result {
 public:

  BrainCloudService_MatchMaking_DisableMatchMaking_result(const BrainCloudService_MatchMaking_DisableMatchMaking_result&);
  BrainCloudService_MatchMaking_DisableMatchMaking_result& operator=(const BrainCloudService_MatchMaking_DisableMatchMaking_result&);
  BrainCloudService_MatchMaking_DisableMatchMaking_result() : success() {
  }

  virtual ~BrainCloudService_MatchMaking_DisableMatchMaking_result() throw();
  std::string success;

  _BrainCloudService_MatchMaking_DisableMatchMaking_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_MatchMaking_DisableMatchMaking_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_MatchMaking_DisableMatchMaking_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_MatchMaking_DisableMatchMaking_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_MatchMaking_DisableMatchMaking_presult__isset {
  _BrainCloudService_MatchMaking_DisableMatchMaking_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_MatchMaking_DisableMatchMaking_presult__isset;

class BrainCloudService_MatchMaking_DisableMatchMaking_presult {
 public:


  virtual ~BrainCloudService_MatchMaking_DisableMatchMaking_presult() throw();
  std::string* success;

  _BrainCloudService_MatchMaking_DisableMatchMaking_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_OneWayMatch_StartMatch_args__isset {
  _BrainCloudService_OneWayMatch_StartMatch_args__isset() : otherPlayerId(false), rangeDelta(false), clientIndex(false) {}
  bool otherPlayerId :1;
  bool rangeDelta :1;
  bool clientIndex :1;
} _BrainCloudService_OneWayMatch_StartMatch_args__isset;

class BrainCloudService_OneWayMatch_StartMatch_args {
 public:

  BrainCloudService_OneWayMatch_StartMatch_args(const BrainCloudService_OneWayMatch_StartMatch_args&);
  BrainCloudService_OneWayMatch_StartMatch_args& operator=(const BrainCloudService_OneWayMatch_StartMatch_args&);
  BrainCloudService_OneWayMatch_StartMatch_args() : otherPlayerId(), rangeDelta(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_OneWayMatch_StartMatch_args() throw();
  std::string otherPlayerId;
  int64_t rangeDelta;
  int32_t clientIndex;

  _BrainCloudService_OneWayMatch_StartMatch_args__isset __isset;

  void __set_otherPlayerId(const std::string& val);

  void __set_rangeDelta(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_OneWayMatch_StartMatch_args & rhs) const
  {
    if (!(otherPlayerId == rhs.otherPlayerId))
      return false;
    if (!(rangeDelta == rhs.rangeDelta))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_StartMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_StartMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_OneWayMatch_StartMatch_pargs {
 public:


  virtual ~BrainCloudService_OneWayMatch_StartMatch_pargs() throw();
  const std::string* otherPlayerId;
  const int64_t* rangeDelta;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_StartMatch_result__isset {
  _BrainCloudService_OneWayMatch_StartMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_StartMatch_result__isset;

class BrainCloudService_OneWayMatch_StartMatch_result {
 public:

  BrainCloudService_OneWayMatch_StartMatch_result(const BrainCloudService_OneWayMatch_StartMatch_result&);
  BrainCloudService_OneWayMatch_StartMatch_result& operator=(const BrainCloudService_OneWayMatch_StartMatch_result&);
  BrainCloudService_OneWayMatch_StartMatch_result() : success() {
  }

  virtual ~BrainCloudService_OneWayMatch_StartMatch_result() throw();
  std::string success;

  _BrainCloudService_OneWayMatch_StartMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_OneWayMatch_StartMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_StartMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_StartMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_StartMatch_presult__isset {
  _BrainCloudService_OneWayMatch_StartMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_StartMatch_presult__isset;

class BrainCloudService_OneWayMatch_StartMatch_presult {
 public:


  virtual ~BrainCloudService_OneWayMatch_StartMatch_presult() throw();
  std::string* success;

  _BrainCloudService_OneWayMatch_StartMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_OneWayMatch_CancelMatch_args__isset {
  _BrainCloudService_OneWayMatch_CancelMatch_args__isset() : playbackStreamId(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool clientIndex :1;
} _BrainCloudService_OneWayMatch_CancelMatch_args__isset;

class BrainCloudService_OneWayMatch_CancelMatch_args {
 public:

  BrainCloudService_OneWayMatch_CancelMatch_args(const BrainCloudService_OneWayMatch_CancelMatch_args&);
  BrainCloudService_OneWayMatch_CancelMatch_args& operator=(const BrainCloudService_OneWayMatch_CancelMatch_args&);
  BrainCloudService_OneWayMatch_CancelMatch_args() : playbackStreamId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_OneWayMatch_CancelMatch_args() throw();
  std::string playbackStreamId;
  int32_t clientIndex;

  _BrainCloudService_OneWayMatch_CancelMatch_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_OneWayMatch_CancelMatch_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_CancelMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_CancelMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_OneWayMatch_CancelMatch_pargs {
 public:


  virtual ~BrainCloudService_OneWayMatch_CancelMatch_pargs() throw();
  const std::string* playbackStreamId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_CancelMatch_result__isset {
  _BrainCloudService_OneWayMatch_CancelMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_CancelMatch_result__isset;

class BrainCloudService_OneWayMatch_CancelMatch_result {
 public:

  BrainCloudService_OneWayMatch_CancelMatch_result(const BrainCloudService_OneWayMatch_CancelMatch_result&);
  BrainCloudService_OneWayMatch_CancelMatch_result& operator=(const BrainCloudService_OneWayMatch_CancelMatch_result&);
  BrainCloudService_OneWayMatch_CancelMatch_result() : success() {
  }

  virtual ~BrainCloudService_OneWayMatch_CancelMatch_result() throw();
  std::string success;

  _BrainCloudService_OneWayMatch_CancelMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_OneWayMatch_CancelMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_CancelMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_CancelMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_CancelMatch_presult__isset {
  _BrainCloudService_OneWayMatch_CancelMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_CancelMatch_presult__isset;

class BrainCloudService_OneWayMatch_CancelMatch_presult {
 public:


  virtual ~BrainCloudService_OneWayMatch_CancelMatch_presult() throw();
  std::string* success;

  _BrainCloudService_OneWayMatch_CancelMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_OneWayMatch_CompleteMatch_args__isset {
  _BrainCloudService_OneWayMatch_CompleteMatch_args__isset() : playbackStreamId(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool clientIndex :1;
} _BrainCloudService_OneWayMatch_CompleteMatch_args__isset;

class BrainCloudService_OneWayMatch_CompleteMatch_args {
 public:

  BrainCloudService_OneWayMatch_CompleteMatch_args(const BrainCloudService_OneWayMatch_CompleteMatch_args&);
  BrainCloudService_OneWayMatch_CompleteMatch_args& operator=(const BrainCloudService_OneWayMatch_CompleteMatch_args&);
  BrainCloudService_OneWayMatch_CompleteMatch_args() : playbackStreamId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_OneWayMatch_CompleteMatch_args() throw();
  std::string playbackStreamId;
  int32_t clientIndex;

  _BrainCloudService_OneWayMatch_CompleteMatch_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_OneWayMatch_CompleteMatch_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_CompleteMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_CompleteMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_OneWayMatch_CompleteMatch_pargs {
 public:


  virtual ~BrainCloudService_OneWayMatch_CompleteMatch_pargs() throw();
  const std::string* playbackStreamId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_CompleteMatch_result__isset {
  _BrainCloudService_OneWayMatch_CompleteMatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_CompleteMatch_result__isset;

class BrainCloudService_OneWayMatch_CompleteMatch_result {
 public:

  BrainCloudService_OneWayMatch_CompleteMatch_result(const BrainCloudService_OneWayMatch_CompleteMatch_result&);
  BrainCloudService_OneWayMatch_CompleteMatch_result& operator=(const BrainCloudService_OneWayMatch_CompleteMatch_result&);
  BrainCloudService_OneWayMatch_CompleteMatch_result() : success() {
  }

  virtual ~BrainCloudService_OneWayMatch_CompleteMatch_result() throw();
  std::string success;

  _BrainCloudService_OneWayMatch_CompleteMatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_OneWayMatch_CompleteMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_OneWayMatch_CompleteMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_OneWayMatch_CompleteMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_OneWayMatch_CompleteMatch_presult__isset {
  _BrainCloudService_OneWayMatch_CompleteMatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_OneWayMatch_CompleteMatch_presult__isset;

class BrainCloudService_OneWayMatch_CompleteMatch_presult {
 public:


  virtual ~BrainCloudService_OneWayMatch_CompleteMatch_presult() throw();
  std::string* success;

  _BrainCloudService_OneWayMatch_CompleteMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_StartStream_args__isset {
  _BrainCloudService_PlaybackStream_StartStream_args__isset() : targetPlayerId(false), includeSharedData(false), clientIndex(false) {}
  bool targetPlayerId :1;
  bool includeSharedData :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_StartStream_args__isset;

class BrainCloudService_PlaybackStream_StartStream_args {
 public:

  BrainCloudService_PlaybackStream_StartStream_args(const BrainCloudService_PlaybackStream_StartStream_args&);
  BrainCloudService_PlaybackStream_StartStream_args& operator=(const BrainCloudService_PlaybackStream_StartStream_args&);
  BrainCloudService_PlaybackStream_StartStream_args() : targetPlayerId(), includeSharedData(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_StartStream_args() throw();
  std::string targetPlayerId;
  bool includeSharedData;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_StartStream_args__isset __isset;

  void __set_targetPlayerId(const std::string& val);

  void __set_includeSharedData(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_StartStream_args & rhs) const
  {
    if (!(targetPlayerId == rhs.targetPlayerId))
      return false;
    if (!(includeSharedData == rhs.includeSharedData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_StartStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_StartStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_StartStream_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_StartStream_pargs() throw();
  const std::string* targetPlayerId;
  const bool* includeSharedData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_StartStream_result__isset {
  _BrainCloudService_PlaybackStream_StartStream_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_StartStream_result__isset;

class BrainCloudService_PlaybackStream_StartStream_result {
 public:

  BrainCloudService_PlaybackStream_StartStream_result(const BrainCloudService_PlaybackStream_StartStream_result&);
  BrainCloudService_PlaybackStream_StartStream_result& operator=(const BrainCloudService_PlaybackStream_StartStream_result&);
  BrainCloudService_PlaybackStream_StartStream_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_StartStream_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_StartStream_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_StartStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_StartStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_StartStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_StartStream_presult__isset {
  _BrainCloudService_PlaybackStream_StartStream_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_StartStream_presult__isset;

class BrainCloudService_PlaybackStream_StartStream_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_StartStream_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_StartStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_ReadStream_args__isset {
  _BrainCloudService_PlaybackStream_ReadStream_args__isset() : playbackStreamId(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_ReadStream_args__isset;

class BrainCloudService_PlaybackStream_ReadStream_args {
 public:

  BrainCloudService_PlaybackStream_ReadStream_args(const BrainCloudService_PlaybackStream_ReadStream_args&);
  BrainCloudService_PlaybackStream_ReadStream_args& operator=(const BrainCloudService_PlaybackStream_ReadStream_args&);
  BrainCloudService_PlaybackStream_ReadStream_args() : playbackStreamId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_ReadStream_args() throw();
  std::string playbackStreamId;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_ReadStream_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_ReadStream_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_ReadStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_ReadStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_ReadStream_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_ReadStream_pargs() throw();
  const std::string* playbackStreamId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_ReadStream_result__isset {
  _BrainCloudService_PlaybackStream_ReadStream_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_ReadStream_result__isset;

class BrainCloudService_PlaybackStream_ReadStream_result {
 public:

  BrainCloudService_PlaybackStream_ReadStream_result(const BrainCloudService_PlaybackStream_ReadStream_result&);
  BrainCloudService_PlaybackStream_ReadStream_result& operator=(const BrainCloudService_PlaybackStream_ReadStream_result&);
  BrainCloudService_PlaybackStream_ReadStream_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_ReadStream_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_ReadStream_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_ReadStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_ReadStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_ReadStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_ReadStream_presult__isset {
  _BrainCloudService_PlaybackStream_ReadStream_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_ReadStream_presult__isset;

class BrainCloudService_PlaybackStream_ReadStream_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_ReadStream_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_ReadStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_EndStream_args__isset {
  _BrainCloudService_PlaybackStream_EndStream_args__isset() : playbackStreamId(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_EndStream_args__isset;

class BrainCloudService_PlaybackStream_EndStream_args {
 public:

  BrainCloudService_PlaybackStream_EndStream_args(const BrainCloudService_PlaybackStream_EndStream_args&);
  BrainCloudService_PlaybackStream_EndStream_args& operator=(const BrainCloudService_PlaybackStream_EndStream_args&);
  BrainCloudService_PlaybackStream_EndStream_args() : playbackStreamId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_EndStream_args() throw();
  std::string playbackStreamId;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_EndStream_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_EndStream_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_EndStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_EndStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_EndStream_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_EndStream_pargs() throw();
  const std::string* playbackStreamId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_EndStream_result__isset {
  _BrainCloudService_PlaybackStream_EndStream_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_EndStream_result__isset;

class BrainCloudService_PlaybackStream_EndStream_result {
 public:

  BrainCloudService_PlaybackStream_EndStream_result(const BrainCloudService_PlaybackStream_EndStream_result&);
  BrainCloudService_PlaybackStream_EndStream_result& operator=(const BrainCloudService_PlaybackStream_EndStream_result&);
  BrainCloudService_PlaybackStream_EndStream_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_EndStream_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_EndStream_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_EndStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_EndStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_EndStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_EndStream_presult__isset {
  _BrainCloudService_PlaybackStream_EndStream_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_EndStream_presult__isset;

class BrainCloudService_PlaybackStream_EndStream_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_EndStream_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_EndStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_DeleteStream_args__isset {
  _BrainCloudService_PlaybackStream_DeleteStream_args__isset() : playbackStreamId(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_DeleteStream_args__isset;

class BrainCloudService_PlaybackStream_DeleteStream_args {
 public:

  BrainCloudService_PlaybackStream_DeleteStream_args(const BrainCloudService_PlaybackStream_DeleteStream_args&);
  BrainCloudService_PlaybackStream_DeleteStream_args& operator=(const BrainCloudService_PlaybackStream_DeleteStream_args&);
  BrainCloudService_PlaybackStream_DeleteStream_args() : playbackStreamId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_DeleteStream_args() throw();
  std::string playbackStreamId;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_DeleteStream_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_DeleteStream_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_DeleteStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_DeleteStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_DeleteStream_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_DeleteStream_pargs() throw();
  const std::string* playbackStreamId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_DeleteStream_result__isset {
  _BrainCloudService_PlaybackStream_DeleteStream_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_DeleteStream_result__isset;

class BrainCloudService_PlaybackStream_DeleteStream_result {
 public:

  BrainCloudService_PlaybackStream_DeleteStream_result(const BrainCloudService_PlaybackStream_DeleteStream_result&);
  BrainCloudService_PlaybackStream_DeleteStream_result& operator=(const BrainCloudService_PlaybackStream_DeleteStream_result&);
  BrainCloudService_PlaybackStream_DeleteStream_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_DeleteStream_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_DeleteStream_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_DeleteStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_DeleteStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_DeleteStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_DeleteStream_presult__isset {
  _BrainCloudService_PlaybackStream_DeleteStream_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_DeleteStream_presult__isset;

class BrainCloudService_PlaybackStream_DeleteStream_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_DeleteStream_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_DeleteStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_AddEvent_args__isset {
  _BrainCloudService_PlaybackStream_AddEvent_args__isset() : playbackStreamId(false), eventData(false), summary(false), clientIndex(false) {}
  bool playbackStreamId :1;
  bool eventData :1;
  bool summary :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_AddEvent_args__isset;

class BrainCloudService_PlaybackStream_AddEvent_args {
 public:

  BrainCloudService_PlaybackStream_AddEvent_args(const BrainCloudService_PlaybackStream_AddEvent_args&);
  BrainCloudService_PlaybackStream_AddEvent_args& operator=(const BrainCloudService_PlaybackStream_AddEvent_args&);
  BrainCloudService_PlaybackStream_AddEvent_args() : playbackStreamId(), eventData(), summary(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_AddEvent_args() throw();
  std::string playbackStreamId;
  std::string eventData;
  std::string summary;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_AddEvent_args__isset __isset;

  void __set_playbackStreamId(const std::string& val);

  void __set_eventData(const std::string& val);

  void __set_summary(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_AddEvent_args & rhs) const
  {
    if (!(playbackStreamId == rhs.playbackStreamId))
      return false;
    if (!(eventData == rhs.eventData))
      return false;
    if (!(summary == rhs.summary))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_AddEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_AddEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_AddEvent_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_AddEvent_pargs() throw();
  const std::string* playbackStreamId;
  const std::string* eventData;
  const std::string* summary;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_AddEvent_result__isset {
  _BrainCloudService_PlaybackStream_AddEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_AddEvent_result__isset;

class BrainCloudService_PlaybackStream_AddEvent_result {
 public:

  BrainCloudService_PlaybackStream_AddEvent_result(const BrainCloudService_PlaybackStream_AddEvent_result&);
  BrainCloudService_PlaybackStream_AddEvent_result& operator=(const BrainCloudService_PlaybackStream_AddEvent_result&);
  BrainCloudService_PlaybackStream_AddEvent_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_AddEvent_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_AddEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_AddEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_AddEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_AddEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_AddEvent_presult__isset {
  _BrainCloudService_PlaybackStream_AddEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_AddEvent_presult__isset;

class BrainCloudService_PlaybackStream_AddEvent_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_AddEvent_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_AddEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args__isset() : initiatingPlayerId(false), maxNumStreams(false), clientIndex(false) {}
  bool initiatingPlayerId :1;
  bool maxNumStreams :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args {
 public:

  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args(const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args& operator=(const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args() : initiatingPlayerId(), maxNumStreams(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args() throw();
  std::string initiatingPlayerId;
  int32_t maxNumStreams;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args__isset __isset;

  void __set_initiatingPlayerId(const std::string& val);

  void __set_maxNumStreams(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args & rhs) const
  {
    if (!(initiatingPlayerId == rhs.initiatingPlayerId))
      return false;
    if (!(maxNumStreams == rhs.maxNumStreams))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_pargs() throw();
  const std::string* initiatingPlayerId;
  const int32_t* maxNumStreams;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result {
 public:

  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result(const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result& operator=(const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForInitiatingPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args__isset() : targetPlayerId(false), maxNumStreams(false), clientIndex(false) {}
  bool targetPlayerId :1;
  bool maxNumStreams :1;
  bool clientIndex :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args {
 public:

  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args(const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args& operator=(const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args() : targetPlayerId(), maxNumStreams(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args() throw();
  std::string targetPlayerId;
  int32_t maxNumStreams;
  int32_t clientIndex;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args__isset __isset;

  void __set_targetPlayerId(const std::string& val);

  void __set_maxNumStreams(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args & rhs) const
  {
    if (!(targetPlayerId == rhs.targetPlayerId))
      return false;
    if (!(maxNumStreams == rhs.maxNumStreams))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_pargs {
 public:


  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_pargs() throw();
  const std::string* targetPlayerId;
  const int32_t* maxNumStreams;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result {
 public:

  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result(const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result& operator=(const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result&);
  BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result() : success() {
  }

  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result() throw();
  std::string success;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult__isset {
  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult__isset;

class BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult {
 public:


  virtual ~BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult() throw();
  std::string* success;

  _BrainCloudService_PlaybackStream_GetRecentStreamsForTargetPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_ReadUserState_args__isset {
  _BrainCloudService_PlayerState_ReadUserState_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerState_ReadUserState_args__isset;

class BrainCloudService_PlayerState_ReadUserState_args {
 public:

  BrainCloudService_PlayerState_ReadUserState_args(const BrainCloudService_PlayerState_ReadUserState_args&);
  BrainCloudService_PlayerState_ReadUserState_args& operator=(const BrainCloudService_PlayerState_ReadUserState_args&);
  BrainCloudService_PlayerState_ReadUserState_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_ReadUserState_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerState_ReadUserState_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_ReadUserState_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_ReadUserState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_ReadUserState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_ReadUserState_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_ReadUserState_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_ReadUserState_result__isset {
  _BrainCloudService_PlayerState_ReadUserState_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_ReadUserState_result__isset;

class BrainCloudService_PlayerState_ReadUserState_result {
 public:

  BrainCloudService_PlayerState_ReadUserState_result(const BrainCloudService_PlayerState_ReadUserState_result&);
  BrainCloudService_PlayerState_ReadUserState_result& operator=(const BrainCloudService_PlayerState_ReadUserState_result&);
  BrainCloudService_PlayerState_ReadUserState_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_ReadUserState_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_ReadUserState_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_ReadUserState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_ReadUserState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_ReadUserState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_ReadUserState_presult__isset {
  _BrainCloudService_PlayerState_ReadUserState_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_ReadUserState_presult__isset;

class BrainCloudService_PlayerState_ReadUserState_presult {
 public:


  virtual ~BrainCloudService_PlayerState_ReadUserState_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_ReadUserState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_DeleteUser_args__isset {
  _BrainCloudService_PlayerState_DeleteUser_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerState_DeleteUser_args__isset;

class BrainCloudService_PlayerState_DeleteUser_args {
 public:

  BrainCloudService_PlayerState_DeleteUser_args(const BrainCloudService_PlayerState_DeleteUser_args&);
  BrainCloudService_PlayerState_DeleteUser_args& operator=(const BrainCloudService_PlayerState_DeleteUser_args&);
  BrainCloudService_PlayerState_DeleteUser_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_DeleteUser_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerState_DeleteUser_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_DeleteUser_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_DeleteUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_DeleteUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_DeleteUser_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_DeleteUser_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_DeleteUser_result__isset {
  _BrainCloudService_PlayerState_DeleteUser_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_DeleteUser_result__isset;

class BrainCloudService_PlayerState_DeleteUser_result {
 public:

  BrainCloudService_PlayerState_DeleteUser_result(const BrainCloudService_PlayerState_DeleteUser_result&);
  BrainCloudService_PlayerState_DeleteUser_result& operator=(const BrainCloudService_PlayerState_DeleteUser_result&);
  BrainCloudService_PlayerState_DeleteUser_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_DeleteUser_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_DeleteUser_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_DeleteUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_DeleteUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_DeleteUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_DeleteUser_presult__isset {
  _BrainCloudService_PlayerState_DeleteUser_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_DeleteUser_presult__isset;

class BrainCloudService_PlayerState_DeleteUser_presult {
 public:


  virtual ~BrainCloudService_PlayerState_DeleteUser_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_DeleteUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_ResetUser_args__isset {
  _BrainCloudService_PlayerState_ResetUser_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerState_ResetUser_args__isset;

class BrainCloudService_PlayerState_ResetUser_args {
 public:

  BrainCloudService_PlayerState_ResetUser_args(const BrainCloudService_PlayerState_ResetUser_args&);
  BrainCloudService_PlayerState_ResetUser_args& operator=(const BrainCloudService_PlayerState_ResetUser_args&);
  BrainCloudService_PlayerState_ResetUser_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_ResetUser_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerState_ResetUser_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_ResetUser_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_ResetUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_ResetUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_ResetUser_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_ResetUser_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_ResetUser_result__isset {
  _BrainCloudService_PlayerState_ResetUser_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_ResetUser_result__isset;

class BrainCloudService_PlayerState_ResetUser_result {
 public:

  BrainCloudService_PlayerState_ResetUser_result(const BrainCloudService_PlayerState_ResetUser_result&);
  BrainCloudService_PlayerState_ResetUser_result& operator=(const BrainCloudService_PlayerState_ResetUser_result&);
  BrainCloudService_PlayerState_ResetUser_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_ResetUser_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_ResetUser_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_ResetUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_ResetUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_ResetUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_ResetUser_presult__isset {
  _BrainCloudService_PlayerState_ResetUser_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_ResetUser_presult__isset;

class BrainCloudService_PlayerState_ResetUser_presult {
 public:


  virtual ~BrainCloudService_PlayerState_ResetUser_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_ResetUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_Logout_args__isset {
  _BrainCloudService_PlayerState_Logout_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerState_Logout_args__isset;

class BrainCloudService_PlayerState_Logout_args {
 public:

  BrainCloudService_PlayerState_Logout_args(const BrainCloudService_PlayerState_Logout_args&);
  BrainCloudService_PlayerState_Logout_args& operator=(const BrainCloudService_PlayerState_Logout_args&);
  BrainCloudService_PlayerState_Logout_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_Logout_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerState_Logout_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_Logout_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_Logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_Logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_Logout_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_Logout_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_Logout_result__isset {
  _BrainCloudService_PlayerState_Logout_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_Logout_result__isset;

class BrainCloudService_PlayerState_Logout_result {
 public:

  BrainCloudService_PlayerState_Logout_result(const BrainCloudService_PlayerState_Logout_result&);
  BrainCloudService_PlayerState_Logout_result& operator=(const BrainCloudService_PlayerState_Logout_result&);
  BrainCloudService_PlayerState_Logout_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_Logout_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_Logout_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_Logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_Logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_Logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_Logout_presult__isset {
  _BrainCloudService_PlayerState_Logout_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_Logout_presult__isset;

class BrainCloudService_PlayerState_Logout_presult {
 public:


  virtual ~BrainCloudService_PlayerState_Logout_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_Logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_UpdateUserName_args__isset {
  _BrainCloudService_PlayerState_UpdateUserName_args__isset() : userName(false), clientIndex(false) {}
  bool userName :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_UpdateUserName_args__isset;

class BrainCloudService_PlayerState_UpdateUserName_args {
 public:

  BrainCloudService_PlayerState_UpdateUserName_args(const BrainCloudService_PlayerState_UpdateUserName_args&);
  BrainCloudService_PlayerState_UpdateUserName_args& operator=(const BrainCloudService_PlayerState_UpdateUserName_args&);
  BrainCloudService_PlayerState_UpdateUserName_args() : userName(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_UpdateUserName_args() throw();
  std::string userName;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_UpdateUserName_args__isset __isset;

  void __set_userName(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_UpdateUserName_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateUserName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateUserName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_UpdateUserName_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateUserName_pargs() throw();
  const std::string* userName;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateUserName_result__isset {
  _BrainCloudService_PlayerState_UpdateUserName_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateUserName_result__isset;

class BrainCloudService_PlayerState_UpdateUserName_result {
 public:

  BrainCloudService_PlayerState_UpdateUserName_result(const BrainCloudService_PlayerState_UpdateUserName_result&);
  BrainCloudService_PlayerState_UpdateUserName_result& operator=(const BrainCloudService_PlayerState_UpdateUserName_result&);
  BrainCloudService_PlayerState_UpdateUserName_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_UpdateUserName_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_UpdateUserName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_UpdateUserName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateUserName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateUserName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateUserName_presult__isset {
  _BrainCloudService_PlayerState_UpdateUserName_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateUserName_presult__isset;

class BrainCloudService_PlayerState_UpdateUserName_presult {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateUserName_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_UpdateUserName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_UpdateSummaryFriendData_args__isset {
  _BrainCloudService_PlayerState_UpdateSummaryFriendData_args__isset() : jsonSummaryData(false), clientIndex(false) {}
  bool jsonSummaryData :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_UpdateSummaryFriendData_args__isset;

class BrainCloudService_PlayerState_UpdateSummaryFriendData_args {
 public:

  BrainCloudService_PlayerState_UpdateSummaryFriendData_args(const BrainCloudService_PlayerState_UpdateSummaryFriendData_args&);
  BrainCloudService_PlayerState_UpdateSummaryFriendData_args& operator=(const BrainCloudService_PlayerState_UpdateSummaryFriendData_args&);
  BrainCloudService_PlayerState_UpdateSummaryFriendData_args() : jsonSummaryData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_UpdateSummaryFriendData_args() throw();
  std::string jsonSummaryData;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_UpdateSummaryFriendData_args__isset __isset;

  void __set_jsonSummaryData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_UpdateSummaryFriendData_args & rhs) const
  {
    if (!(jsonSummaryData == rhs.jsonSummaryData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateSummaryFriendData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateSummaryFriendData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_UpdateSummaryFriendData_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateSummaryFriendData_pargs() throw();
  const std::string* jsonSummaryData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateSummaryFriendData_result__isset {
  _BrainCloudService_PlayerState_UpdateSummaryFriendData_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateSummaryFriendData_result__isset;

class BrainCloudService_PlayerState_UpdateSummaryFriendData_result {
 public:

  BrainCloudService_PlayerState_UpdateSummaryFriendData_result(const BrainCloudService_PlayerState_UpdateSummaryFriendData_result&);
  BrainCloudService_PlayerState_UpdateSummaryFriendData_result& operator=(const BrainCloudService_PlayerState_UpdateSummaryFriendData_result&);
  BrainCloudService_PlayerState_UpdateSummaryFriendData_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_UpdateSummaryFriendData_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_UpdateSummaryFriendData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_UpdateSummaryFriendData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateSummaryFriendData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateSummaryFriendData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateSummaryFriendData_presult__isset {
  _BrainCloudService_PlayerState_UpdateSummaryFriendData_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateSummaryFriendData_presult__isset;

class BrainCloudService_PlayerState_UpdateSummaryFriendData_presult {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateSummaryFriendData_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_UpdateSummaryFriendData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_GetAttributes_args__isset {
  _BrainCloudService_PlayerState_GetAttributes_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerState_GetAttributes_args__isset;

class BrainCloudService_PlayerState_GetAttributes_args {
 public:

  BrainCloudService_PlayerState_GetAttributes_args(const BrainCloudService_PlayerState_GetAttributes_args&);
  BrainCloudService_PlayerState_GetAttributes_args& operator=(const BrainCloudService_PlayerState_GetAttributes_args&);
  BrainCloudService_PlayerState_GetAttributes_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_GetAttributes_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerState_GetAttributes_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_GetAttributes_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_GetAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_GetAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_GetAttributes_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_GetAttributes_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_GetAttributes_result__isset {
  _BrainCloudService_PlayerState_GetAttributes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_GetAttributes_result__isset;

class BrainCloudService_PlayerState_GetAttributes_result {
 public:

  BrainCloudService_PlayerState_GetAttributes_result(const BrainCloudService_PlayerState_GetAttributes_result&);
  BrainCloudService_PlayerState_GetAttributes_result& operator=(const BrainCloudService_PlayerState_GetAttributes_result&);
  BrainCloudService_PlayerState_GetAttributes_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_GetAttributes_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_GetAttributes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_GetAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_GetAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_GetAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_GetAttributes_presult__isset {
  _BrainCloudService_PlayerState_GetAttributes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_GetAttributes_presult__isset;

class BrainCloudService_PlayerState_GetAttributes_presult {
 public:


  virtual ~BrainCloudService_PlayerState_GetAttributes_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_GetAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_UpdateAttributes_args__isset {
  _BrainCloudService_PlayerState_UpdateAttributes_args__isset() : jsonAttributes(false), wipeExisting(false), clientIndex(false) {}
  bool jsonAttributes :1;
  bool wipeExisting :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_UpdateAttributes_args__isset;

class BrainCloudService_PlayerState_UpdateAttributes_args {
 public:

  BrainCloudService_PlayerState_UpdateAttributes_args(const BrainCloudService_PlayerState_UpdateAttributes_args&);
  BrainCloudService_PlayerState_UpdateAttributes_args& operator=(const BrainCloudService_PlayerState_UpdateAttributes_args&);
  BrainCloudService_PlayerState_UpdateAttributes_args() : jsonAttributes(), wipeExisting(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_UpdateAttributes_args() throw();
  std::string jsonAttributes;
  bool wipeExisting;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_UpdateAttributes_args__isset __isset;

  void __set_jsonAttributes(const std::string& val);

  void __set_wipeExisting(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_UpdateAttributes_args & rhs) const
  {
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(wipeExisting == rhs.wipeExisting))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_UpdateAttributes_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateAttributes_pargs() throw();
  const std::string* jsonAttributes;
  const bool* wipeExisting;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateAttributes_result__isset {
  _BrainCloudService_PlayerState_UpdateAttributes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateAttributes_result__isset;

class BrainCloudService_PlayerState_UpdateAttributes_result {
 public:

  BrainCloudService_PlayerState_UpdateAttributes_result(const BrainCloudService_PlayerState_UpdateAttributes_result&);
  BrainCloudService_PlayerState_UpdateAttributes_result& operator=(const BrainCloudService_PlayerState_UpdateAttributes_result&);
  BrainCloudService_PlayerState_UpdateAttributes_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_UpdateAttributes_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_UpdateAttributes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_UpdateAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateAttributes_presult__isset {
  _BrainCloudService_PlayerState_UpdateAttributes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateAttributes_presult__isset;

class BrainCloudService_PlayerState_UpdateAttributes_presult {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateAttributes_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_UpdateAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_RemoveAttributes_args__isset {
  _BrainCloudService_PlayerState_RemoveAttributes_args__isset() : attributeNames(false), clientIndex(false) {}
  bool attributeNames :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_RemoveAttributes_args__isset;

class BrainCloudService_PlayerState_RemoveAttributes_args {
 public:

  BrainCloudService_PlayerState_RemoveAttributes_args(const BrainCloudService_PlayerState_RemoveAttributes_args&);
  BrainCloudService_PlayerState_RemoveAttributes_args& operator=(const BrainCloudService_PlayerState_RemoveAttributes_args&);
  BrainCloudService_PlayerState_RemoveAttributes_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_RemoveAttributes_args() throw();
  std::vector<std::string>  attributeNames;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_RemoveAttributes_args__isset __isset;

  void __set_attributeNames(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_RemoveAttributes_args & rhs) const
  {
    if (!(attributeNames == rhs.attributeNames))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_RemoveAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_RemoveAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_RemoveAttributes_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_RemoveAttributes_pargs() throw();
  const std::vector<std::string> * attributeNames;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_RemoveAttributes_result__isset {
  _BrainCloudService_PlayerState_RemoveAttributes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_RemoveAttributes_result__isset;

class BrainCloudService_PlayerState_RemoveAttributes_result {
 public:

  BrainCloudService_PlayerState_RemoveAttributes_result(const BrainCloudService_PlayerState_RemoveAttributes_result&);
  BrainCloudService_PlayerState_RemoveAttributes_result& operator=(const BrainCloudService_PlayerState_RemoveAttributes_result&);
  BrainCloudService_PlayerState_RemoveAttributes_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_RemoveAttributes_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_RemoveAttributes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_RemoveAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_RemoveAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_RemoveAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_RemoveAttributes_presult__isset {
  _BrainCloudService_PlayerState_RemoveAttributes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_RemoveAttributes_presult__isset;

class BrainCloudService_PlayerState_RemoveAttributes_presult {
 public:


  virtual ~BrainCloudService_PlayerState_RemoveAttributes_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_RemoveAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_UpdateUserPictureUrl_args__isset {
  _BrainCloudService_PlayerState_UpdateUserPictureUrl_args__isset() : pictureUrl(false), clientIndex(false) {}
  bool pictureUrl :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_UpdateUserPictureUrl_args__isset;

class BrainCloudService_PlayerState_UpdateUserPictureUrl_args {
 public:

  BrainCloudService_PlayerState_UpdateUserPictureUrl_args(const BrainCloudService_PlayerState_UpdateUserPictureUrl_args&);
  BrainCloudService_PlayerState_UpdateUserPictureUrl_args& operator=(const BrainCloudService_PlayerState_UpdateUserPictureUrl_args&);
  BrainCloudService_PlayerState_UpdateUserPictureUrl_args() : pictureUrl(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_UpdateUserPictureUrl_args() throw();
  std::string pictureUrl;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_UpdateUserPictureUrl_args__isset __isset;

  void __set_pictureUrl(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_UpdateUserPictureUrl_args & rhs) const
  {
    if (!(pictureUrl == rhs.pictureUrl))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateUserPictureUrl_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateUserPictureUrl_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_UpdateUserPictureUrl_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateUserPictureUrl_pargs() throw();
  const std::string* pictureUrl;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateUserPictureUrl_result__isset {
  _BrainCloudService_PlayerState_UpdateUserPictureUrl_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateUserPictureUrl_result__isset;

class BrainCloudService_PlayerState_UpdateUserPictureUrl_result {
 public:

  BrainCloudService_PlayerState_UpdateUserPictureUrl_result(const BrainCloudService_PlayerState_UpdateUserPictureUrl_result&);
  BrainCloudService_PlayerState_UpdateUserPictureUrl_result& operator=(const BrainCloudService_PlayerState_UpdateUserPictureUrl_result&);
  BrainCloudService_PlayerState_UpdateUserPictureUrl_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_UpdateUserPictureUrl_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_UpdateUserPictureUrl_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_UpdateUserPictureUrl_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateUserPictureUrl_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateUserPictureUrl_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateUserPictureUrl_presult__isset {
  _BrainCloudService_PlayerState_UpdateUserPictureUrl_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateUserPictureUrl_presult__isset;

class BrainCloudService_PlayerState_UpdateUserPictureUrl_presult {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateUserPictureUrl_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_UpdateUserPictureUrl_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerState_UpdateContactEmail_args__isset {
  _BrainCloudService_PlayerState_UpdateContactEmail_args__isset() : contactEmail(false), clientIndex(false) {}
  bool contactEmail :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerState_UpdateContactEmail_args__isset;

class BrainCloudService_PlayerState_UpdateContactEmail_args {
 public:

  BrainCloudService_PlayerState_UpdateContactEmail_args(const BrainCloudService_PlayerState_UpdateContactEmail_args&);
  BrainCloudService_PlayerState_UpdateContactEmail_args& operator=(const BrainCloudService_PlayerState_UpdateContactEmail_args&);
  BrainCloudService_PlayerState_UpdateContactEmail_args() : contactEmail(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerState_UpdateContactEmail_args() throw();
  std::string contactEmail;
  int32_t clientIndex;

  _BrainCloudService_PlayerState_UpdateContactEmail_args__isset __isset;

  void __set_contactEmail(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerState_UpdateContactEmail_args & rhs) const
  {
    if (!(contactEmail == rhs.contactEmail))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateContactEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateContactEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerState_UpdateContactEmail_pargs {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateContactEmail_pargs() throw();
  const std::string* contactEmail;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateContactEmail_result__isset {
  _BrainCloudService_PlayerState_UpdateContactEmail_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateContactEmail_result__isset;

class BrainCloudService_PlayerState_UpdateContactEmail_result {
 public:

  BrainCloudService_PlayerState_UpdateContactEmail_result(const BrainCloudService_PlayerState_UpdateContactEmail_result&);
  BrainCloudService_PlayerState_UpdateContactEmail_result& operator=(const BrainCloudService_PlayerState_UpdateContactEmail_result&);
  BrainCloudService_PlayerState_UpdateContactEmail_result() : success() {
  }

  virtual ~BrainCloudService_PlayerState_UpdateContactEmail_result() throw();
  std::string success;

  _BrainCloudService_PlayerState_UpdateContactEmail_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerState_UpdateContactEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerState_UpdateContactEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerState_UpdateContactEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerState_UpdateContactEmail_presult__isset {
  _BrainCloudService_PlayerState_UpdateContactEmail_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerState_UpdateContactEmail_presult__isset;

class BrainCloudService_PlayerState_UpdateContactEmail_presult {
 public:


  virtual ~BrainCloudService_PlayerState_UpdateContactEmail_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerState_UpdateContactEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_ReadAllUserStats_args__isset {
  _BrainCloudService_PlayerStatistics_ReadAllUserStats_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_ReadAllUserStats_args__isset;

class BrainCloudService_PlayerStatistics_ReadAllUserStats_args {
 public:

  BrainCloudService_PlayerStatistics_ReadAllUserStats_args(const BrainCloudService_PlayerStatistics_ReadAllUserStats_args&);
  BrainCloudService_PlayerStatistics_ReadAllUserStats_args& operator=(const BrainCloudService_PlayerStatistics_ReadAllUserStats_args&);
  BrainCloudService_PlayerStatistics_ReadAllUserStats_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadAllUserStats_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_ReadAllUserStats_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadAllUserStats_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadAllUserStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadAllUserStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_ReadAllUserStats_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadAllUserStats_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadAllUserStats_result__isset {
  _BrainCloudService_PlayerStatistics_ReadAllUserStats_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadAllUserStats_result__isset;

class BrainCloudService_PlayerStatistics_ReadAllUserStats_result {
 public:

  BrainCloudService_PlayerStatistics_ReadAllUserStats_result(const BrainCloudService_PlayerStatistics_ReadAllUserStats_result&);
  BrainCloudService_PlayerStatistics_ReadAllUserStats_result& operator=(const BrainCloudService_PlayerStatistics_ReadAllUserStats_result&);
  BrainCloudService_PlayerStatistics_ReadAllUserStats_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadAllUserStats_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_ReadAllUserStats_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadAllUserStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadAllUserStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadAllUserStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadAllUserStats_presult__isset {
  _BrainCloudService_PlayerStatistics_ReadAllUserStats_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadAllUserStats_presult__isset;

class BrainCloudService_PlayerStatistics_ReadAllUserStats_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadAllUserStats_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_ReadAllUserStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args__isset() : playerStats(false), clientIndex(false) {}
  bool playerStats :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args {
 public:

  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args(const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args&);
  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args& operator=(const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args&);
  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args() throw();
  std::vector<std::string>  playerStats;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args__isset __isset;

  void __set_playerStats(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args & rhs) const
  {
    if (!(playerStats == rhs.playerStats))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_ReadUserStatsSubset_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsSubset_pargs() throw();
  const std::vector<std::string> * playerStats;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result {
 public:

  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result(const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result&);
  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result& operator=(const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result&);
  BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadUserStatsSubset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_ReadUserStatsSubset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args__isset() : category(false), clientIndex(false) {}
  bool category :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args {
 public:

  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args(const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args&);
  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args& operator=(const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args&);
  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args() : category(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args() throw();
  std::string category;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args__isset __isset;

  void __set_category(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_pargs() throw();
  const std::string* category;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result {
 public:

  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result(const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result&);
  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result& operator=(const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result&);
  BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult__isset {
  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult__isset;

class BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_ReadUserStatsForCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_ResetAllUserStats_args__isset {
  _BrainCloudService_PlayerStatistics_ResetAllUserStats_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_ResetAllUserStats_args__isset;

class BrainCloudService_PlayerStatistics_ResetAllUserStats_args {
 public:

  BrainCloudService_PlayerStatistics_ResetAllUserStats_args(const BrainCloudService_PlayerStatistics_ResetAllUserStats_args&);
  BrainCloudService_PlayerStatistics_ResetAllUserStats_args& operator=(const BrainCloudService_PlayerStatistics_ResetAllUserStats_args&);
  BrainCloudService_PlayerStatistics_ResetAllUserStats_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_ResetAllUserStats_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_ResetAllUserStats_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_ResetAllUserStats_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ResetAllUserStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ResetAllUserStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_ResetAllUserStats_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ResetAllUserStats_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ResetAllUserStats_result__isset {
  _BrainCloudService_PlayerStatistics_ResetAllUserStats_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ResetAllUserStats_result__isset;

class BrainCloudService_PlayerStatistics_ResetAllUserStats_result {
 public:

  BrainCloudService_PlayerStatistics_ResetAllUserStats_result(const BrainCloudService_PlayerStatistics_ResetAllUserStats_result&);
  BrainCloudService_PlayerStatistics_ResetAllUserStats_result& operator=(const BrainCloudService_PlayerStatistics_ResetAllUserStats_result&);
  BrainCloudService_PlayerStatistics_ResetAllUserStats_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_ResetAllUserStats_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_ResetAllUserStats_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_ResetAllUserStats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ResetAllUserStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ResetAllUserStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ResetAllUserStats_presult__isset {
  _BrainCloudService_PlayerStatistics_ResetAllUserStats_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ResetAllUserStats_presult__isset;

class BrainCloudService_PlayerStatistics_ResetAllUserStats_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ResetAllUserStats_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_ResetAllUserStats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args__isset() : jsonData(false), clientIndex(false) {}
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args {
 public:

  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args(const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args& operator=(const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args() : jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args() throw();
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args__isset __isset;

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args & rhs) const
  {
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_pargs() throw();
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result {
 public:

  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result(const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result& operator=(const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_SSFO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args__isset() : dictData(false), clientIndex(false) {}
  bool dictData :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args {
 public:

  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args(const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args& operator=(const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args() throw();
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  dictData;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args__isset __isset;

  void __set_dictData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args & rhs) const
  {
    if (!(dictData == rhs.dictData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_pargs() throw();
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * dictData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result {
 public:

  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result(const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result& operator=(const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result&);
  BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult__isset {
  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult__isset;

class BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_IncrementUserStats_DSFO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_ProcessStatistics_args__isset {
  _BrainCloudService_PlayerStatistics_ProcessStatistics_args__isset() : statisticsData(false), clientIndex(false) {}
  bool statisticsData :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_ProcessStatistics_args__isset;

class BrainCloudService_PlayerStatistics_ProcessStatistics_args {
 public:

  BrainCloudService_PlayerStatistics_ProcessStatistics_args(const BrainCloudService_PlayerStatistics_ProcessStatistics_args&);
  BrainCloudService_PlayerStatistics_ProcessStatistics_args& operator=(const BrainCloudService_PlayerStatistics_ProcessStatistics_args&);
  BrainCloudService_PlayerStatistics_ProcessStatistics_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_ProcessStatistics_args() throw();
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  statisticsData;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_ProcessStatistics_args__isset __isset;

  void __set_statisticsData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_ProcessStatistics_args & rhs) const
  {
    if (!(statisticsData == rhs.statisticsData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ProcessStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ProcessStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_ProcessStatistics_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ProcessStatistics_pargs() throw();
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * statisticsData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ProcessStatistics_result__isset {
  _BrainCloudService_PlayerStatistics_ProcessStatistics_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ProcessStatistics_result__isset;

class BrainCloudService_PlayerStatistics_ProcessStatistics_result {
 public:

  BrainCloudService_PlayerStatistics_ProcessStatistics_result(const BrainCloudService_PlayerStatistics_ProcessStatistics_result&);
  BrainCloudService_PlayerStatistics_ProcessStatistics_result& operator=(const BrainCloudService_PlayerStatistics_ProcessStatistics_result&);
  BrainCloudService_PlayerStatistics_ProcessStatistics_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_ProcessStatistics_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_ProcessStatistics_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_ProcessStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_ProcessStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_ProcessStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_ProcessStatistics_presult__isset {
  _BrainCloudService_PlayerStatistics_ProcessStatistics_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_ProcessStatistics_presult__isset;

class BrainCloudService_PlayerStatistics_ProcessStatistics_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_ProcessStatistics_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_ProcessStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args__isset {
  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args__isset;

class BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args {
 public:

  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args(const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args&);
  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args& operator=(const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args&);
  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_GetNextExperienceLevel_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_GetNextExperienceLevel_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result__isset {
  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result__isset;

class BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result {
 public:

  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result(const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result&);
  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result& operator=(const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result&);
  BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_GetNextExperienceLevel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult__isset {
  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult__isset;

class BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_GetNextExperienceLevel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args__isset {
  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args__isset() : xpValue(false), clientIndex(false) {}
  bool xpValue :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args__isset;

class BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args {
 public:

  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args(const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args&);
  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args& operator=(const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args&);
  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args() : xpValue(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args() throw();
  int32_t xpValue;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args__isset __isset;

  void __set_xpValue(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args & rhs) const
  {
    if (!(xpValue == rhs.xpValue))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_IncrementExperiencePoints_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementExperiencePoints_pargs() throw();
  const int32_t* xpValue;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result__isset {
  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result__isset;

class BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result {
 public:

  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result(const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result&);
  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result& operator=(const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result&);
  BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_IncrementExperiencePoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult__isset {
  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult__isset;

class BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_IncrementExperiencePoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatistics_SetExperiencePoints_args__isset {
  _BrainCloudService_PlayerStatistics_SetExperiencePoints_args__isset() : xpValue(false), clientIndex(false) {}
  bool xpValue :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatistics_SetExperiencePoints_args__isset;

class BrainCloudService_PlayerStatistics_SetExperiencePoints_args {
 public:

  BrainCloudService_PlayerStatistics_SetExperiencePoints_args(const BrainCloudService_PlayerStatistics_SetExperiencePoints_args&);
  BrainCloudService_PlayerStatistics_SetExperiencePoints_args& operator=(const BrainCloudService_PlayerStatistics_SetExperiencePoints_args&);
  BrainCloudService_PlayerStatistics_SetExperiencePoints_args() : xpValue(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatistics_SetExperiencePoints_args() throw();
  int32_t xpValue;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatistics_SetExperiencePoints_args__isset __isset;

  void __set_xpValue(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatistics_SetExperiencePoints_args & rhs) const
  {
    if (!(xpValue == rhs.xpValue))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_SetExperiencePoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_SetExperiencePoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatistics_SetExperiencePoints_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatistics_SetExperiencePoints_pargs() throw();
  const int32_t* xpValue;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_SetExperiencePoints_result__isset {
  _BrainCloudService_PlayerStatistics_SetExperiencePoints_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_SetExperiencePoints_result__isset;

class BrainCloudService_PlayerStatistics_SetExperiencePoints_result {
 public:

  BrainCloudService_PlayerStatistics_SetExperiencePoints_result(const BrainCloudService_PlayerStatistics_SetExperiencePoints_result&);
  BrainCloudService_PlayerStatistics_SetExperiencePoints_result& operator=(const BrainCloudService_PlayerStatistics_SetExperiencePoints_result&);
  BrainCloudService_PlayerStatistics_SetExperiencePoints_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatistics_SetExperiencePoints_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatistics_SetExperiencePoints_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatistics_SetExperiencePoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatistics_SetExperiencePoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatistics_SetExperiencePoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatistics_SetExperiencePoints_presult__isset {
  _BrainCloudService_PlayerStatistics_SetExperiencePoints_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatistics_SetExperiencePoints_presult__isset;

class BrainCloudService_PlayerStatistics_SetExperiencePoints_presult {
 public:


  virtual ~BrainCloudService_PlayerStatistics_SetExperiencePoints_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatistics_SetExperiencePoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args__isset() : eventName(false), eventMultiplier(false), clientIndex(false) {}
  bool eventName :1;
  bool eventMultiplier :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args {
 public:

  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args& operator=(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args() : eventName(), eventMultiplier(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args() throw();
  std::string eventName;
  int32_t eventMultiplier;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args__isset __isset;

  void __set_eventName(const std::string& val);

  void __set_eventMultiplier(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args & rhs) const
  {
    if (!(eventName == rhs.eventName))
      return false;
    if (!(eventMultiplier == rhs.eventMultiplier))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_pargs() throw();
  const std::string* eventName;
  const int32_t* eventMultiplier;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result {
 public:

  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result& operator=(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult {
 public:


  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args__isset() : jsonData(false), clientIndex(false) {}
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args {
 public:

  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args& operator=(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args() : jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args() throw();
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args__isset __isset;

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args & rhs) const
  {
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_pargs {
 public:


  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_pargs() throw();
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result {
 public:

  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result& operator=(const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result&);
  BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result() : success() {
  }

  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result() throw();
  std::string success;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult__isset {
  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult__isset;

class BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult {
 public:


  virtual ~BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult() throw();
  std::string* success;

  _BrainCloudService_PlayerStatisticsEvent_TriggerStatsEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_GetCurrency_args__isset {
  _BrainCloudService_Product_GetCurrency_args__isset() : currencyType(false), clientIndex(false) {}
  bool currencyType :1;
  bool clientIndex :1;
} _BrainCloudService_Product_GetCurrency_args__isset;

class BrainCloudService_Product_GetCurrency_args {
 public:

  BrainCloudService_Product_GetCurrency_args(const BrainCloudService_Product_GetCurrency_args&);
  BrainCloudService_Product_GetCurrency_args& operator=(const BrainCloudService_Product_GetCurrency_args&);
  BrainCloudService_Product_GetCurrency_args() : currencyType(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_GetCurrency_args() throw();
  std::string currencyType;
  int32_t clientIndex;

  _BrainCloudService_Product_GetCurrency_args__isset __isset;

  void __set_currencyType(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_GetCurrency_args & rhs) const
  {
    if (!(currencyType == rhs.currencyType))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetCurrency_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetCurrency_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_GetCurrency_pargs {
 public:


  virtual ~BrainCloudService_Product_GetCurrency_pargs() throw();
  const std::string* currencyType;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetCurrency_result__isset {
  _BrainCloudService_Product_GetCurrency_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetCurrency_result__isset;

class BrainCloudService_Product_GetCurrency_result {
 public:

  BrainCloudService_Product_GetCurrency_result(const BrainCloudService_Product_GetCurrency_result&);
  BrainCloudService_Product_GetCurrency_result& operator=(const BrainCloudService_Product_GetCurrency_result&);
  BrainCloudService_Product_GetCurrency_result() : success() {
  }

  virtual ~BrainCloudService_Product_GetCurrency_result() throw();
  std::string success;

  _BrainCloudService_Product_GetCurrency_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_GetCurrency_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetCurrency_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetCurrency_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetCurrency_presult__isset {
  _BrainCloudService_Product_GetCurrency_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetCurrency_presult__isset;

class BrainCloudService_Product_GetCurrency_presult {
 public:


  virtual ~BrainCloudService_Product_GetCurrency_presult() throw();
  std::string* success;

  _BrainCloudService_Product_GetCurrency_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_GetSalesInventory_args__isset {
  _BrainCloudService_Product_GetSalesInventory_args__isset() : platform(false), userCurrency(false), clientIndex(false) {}
  bool platform :1;
  bool userCurrency :1;
  bool clientIndex :1;
} _BrainCloudService_Product_GetSalesInventory_args__isset;

class BrainCloudService_Product_GetSalesInventory_args {
 public:

  BrainCloudService_Product_GetSalesInventory_args(const BrainCloudService_Product_GetSalesInventory_args&);
  BrainCloudService_Product_GetSalesInventory_args& operator=(const BrainCloudService_Product_GetSalesInventory_args&);
  BrainCloudService_Product_GetSalesInventory_args() : platform(), userCurrency(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_GetSalesInventory_args() throw();
  std::string platform;
  std::string userCurrency;
  int32_t clientIndex;

  _BrainCloudService_Product_GetSalesInventory_args__isset __isset;

  void __set_platform(const std::string& val);

  void __set_userCurrency(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_GetSalesInventory_args & rhs) const
  {
    if (!(platform == rhs.platform))
      return false;
    if (!(userCurrency == rhs.userCurrency))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetSalesInventory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetSalesInventory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_GetSalesInventory_pargs {
 public:


  virtual ~BrainCloudService_Product_GetSalesInventory_pargs() throw();
  const std::string* platform;
  const std::string* userCurrency;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetSalesInventory_result__isset {
  _BrainCloudService_Product_GetSalesInventory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetSalesInventory_result__isset;

class BrainCloudService_Product_GetSalesInventory_result {
 public:

  BrainCloudService_Product_GetSalesInventory_result(const BrainCloudService_Product_GetSalesInventory_result&);
  BrainCloudService_Product_GetSalesInventory_result& operator=(const BrainCloudService_Product_GetSalesInventory_result&);
  BrainCloudService_Product_GetSalesInventory_result() : success() {
  }

  virtual ~BrainCloudService_Product_GetSalesInventory_result() throw();
  std::string success;

  _BrainCloudService_Product_GetSalesInventory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_GetSalesInventory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetSalesInventory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetSalesInventory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetSalesInventory_presult__isset {
  _BrainCloudService_Product_GetSalesInventory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetSalesInventory_presult__isset;

class BrainCloudService_Product_GetSalesInventory_presult {
 public:


  virtual ~BrainCloudService_Product_GetSalesInventory_presult() throw();
  std::string* success;

  _BrainCloudService_Product_GetSalesInventory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_GetSalesInventoryByCategory_args__isset {
  _BrainCloudService_Product_GetSalesInventoryByCategory_args__isset() : platform(false), userCurrency(false), category(false), clientIndex(false) {}
  bool platform :1;
  bool userCurrency :1;
  bool category :1;
  bool clientIndex :1;
} _BrainCloudService_Product_GetSalesInventoryByCategory_args__isset;

class BrainCloudService_Product_GetSalesInventoryByCategory_args {
 public:

  BrainCloudService_Product_GetSalesInventoryByCategory_args(const BrainCloudService_Product_GetSalesInventoryByCategory_args&);
  BrainCloudService_Product_GetSalesInventoryByCategory_args& operator=(const BrainCloudService_Product_GetSalesInventoryByCategory_args&);
  BrainCloudService_Product_GetSalesInventoryByCategory_args() : platform(), userCurrency(), category(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_GetSalesInventoryByCategory_args() throw();
  std::string platform;
  std::string userCurrency;
  std::string category;
  int32_t clientIndex;

  _BrainCloudService_Product_GetSalesInventoryByCategory_args__isset __isset;

  void __set_platform(const std::string& val);

  void __set_userCurrency(const std::string& val);

  void __set_category(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_GetSalesInventoryByCategory_args & rhs) const
  {
    if (!(platform == rhs.platform))
      return false;
    if (!(userCurrency == rhs.userCurrency))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetSalesInventoryByCategory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetSalesInventoryByCategory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_GetSalesInventoryByCategory_pargs {
 public:


  virtual ~BrainCloudService_Product_GetSalesInventoryByCategory_pargs() throw();
  const std::string* platform;
  const std::string* userCurrency;
  const std::string* category;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetSalesInventoryByCategory_result__isset {
  _BrainCloudService_Product_GetSalesInventoryByCategory_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetSalesInventoryByCategory_result__isset;

class BrainCloudService_Product_GetSalesInventoryByCategory_result {
 public:

  BrainCloudService_Product_GetSalesInventoryByCategory_result(const BrainCloudService_Product_GetSalesInventoryByCategory_result&);
  BrainCloudService_Product_GetSalesInventoryByCategory_result& operator=(const BrainCloudService_Product_GetSalesInventoryByCategory_result&);
  BrainCloudService_Product_GetSalesInventoryByCategory_result() : success() {
  }

  virtual ~BrainCloudService_Product_GetSalesInventoryByCategory_result() throw();
  std::string success;

  _BrainCloudService_Product_GetSalesInventoryByCategory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_GetSalesInventoryByCategory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetSalesInventoryByCategory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetSalesInventoryByCategory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetSalesInventoryByCategory_presult__isset {
  _BrainCloudService_Product_GetSalesInventoryByCategory_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetSalesInventoryByCategory_presult__isset;

class BrainCloudService_Product_GetSalesInventoryByCategory_presult {
 public:


  virtual ~BrainCloudService_Product_GetSalesInventoryByCategory_presult() throw();
  std::string* success;

  _BrainCloudService_Product_GetSalesInventoryByCategory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_VerifyMicrosoftReceipt_args__isset {
  _BrainCloudService_Product_VerifyMicrosoftReceipt_args__isset() : receipt(false), clientIndex(false) {}
  bool receipt :1;
  bool clientIndex :1;
} _BrainCloudService_Product_VerifyMicrosoftReceipt_args__isset;

class BrainCloudService_Product_VerifyMicrosoftReceipt_args {
 public:

  BrainCloudService_Product_VerifyMicrosoftReceipt_args(const BrainCloudService_Product_VerifyMicrosoftReceipt_args&);
  BrainCloudService_Product_VerifyMicrosoftReceipt_args& operator=(const BrainCloudService_Product_VerifyMicrosoftReceipt_args&);
  BrainCloudService_Product_VerifyMicrosoftReceipt_args() : receipt(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_VerifyMicrosoftReceipt_args() throw();
  std::string receipt;
  int32_t clientIndex;

  _BrainCloudService_Product_VerifyMicrosoftReceipt_args__isset __isset;

  void __set_receipt(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_VerifyMicrosoftReceipt_args & rhs) const
  {
    if (!(receipt == rhs.receipt))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_VerifyMicrosoftReceipt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_VerifyMicrosoftReceipt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_VerifyMicrosoftReceipt_pargs {
 public:


  virtual ~BrainCloudService_Product_VerifyMicrosoftReceipt_pargs() throw();
  const std::string* receipt;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_VerifyMicrosoftReceipt_result__isset {
  _BrainCloudService_Product_VerifyMicrosoftReceipt_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_VerifyMicrosoftReceipt_result__isset;

class BrainCloudService_Product_VerifyMicrosoftReceipt_result {
 public:

  BrainCloudService_Product_VerifyMicrosoftReceipt_result(const BrainCloudService_Product_VerifyMicrosoftReceipt_result&);
  BrainCloudService_Product_VerifyMicrosoftReceipt_result& operator=(const BrainCloudService_Product_VerifyMicrosoftReceipt_result&);
  BrainCloudService_Product_VerifyMicrosoftReceipt_result() : success() {
  }

  virtual ~BrainCloudService_Product_VerifyMicrosoftReceipt_result() throw();
  std::string success;

  _BrainCloudService_Product_VerifyMicrosoftReceipt_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_VerifyMicrosoftReceipt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_VerifyMicrosoftReceipt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_VerifyMicrosoftReceipt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_VerifyMicrosoftReceipt_presult__isset {
  _BrainCloudService_Product_VerifyMicrosoftReceipt_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_VerifyMicrosoftReceipt_presult__isset;

class BrainCloudService_Product_VerifyMicrosoftReceipt_presult {
 public:


  virtual ~BrainCloudService_Product_VerifyMicrosoftReceipt_presult() throw();
  std::string* success;

  _BrainCloudService_Product_VerifyMicrosoftReceipt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_GetEligiblePromotions_args__isset {
  _BrainCloudService_Product_GetEligiblePromotions_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Product_GetEligiblePromotions_args__isset;

class BrainCloudService_Product_GetEligiblePromotions_args {
 public:

  BrainCloudService_Product_GetEligiblePromotions_args(const BrainCloudService_Product_GetEligiblePromotions_args&);
  BrainCloudService_Product_GetEligiblePromotions_args& operator=(const BrainCloudService_Product_GetEligiblePromotions_args&);
  BrainCloudService_Product_GetEligiblePromotions_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_GetEligiblePromotions_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Product_GetEligiblePromotions_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_GetEligiblePromotions_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetEligiblePromotions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetEligiblePromotions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_GetEligiblePromotions_pargs {
 public:


  virtual ~BrainCloudService_Product_GetEligiblePromotions_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetEligiblePromotions_result__isset {
  _BrainCloudService_Product_GetEligiblePromotions_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetEligiblePromotions_result__isset;

class BrainCloudService_Product_GetEligiblePromotions_result {
 public:

  BrainCloudService_Product_GetEligiblePromotions_result(const BrainCloudService_Product_GetEligiblePromotions_result&);
  BrainCloudService_Product_GetEligiblePromotions_result& operator=(const BrainCloudService_Product_GetEligiblePromotions_result&);
  BrainCloudService_Product_GetEligiblePromotions_result() : success() {
  }

  virtual ~BrainCloudService_Product_GetEligiblePromotions_result() throw();
  std::string success;

  _BrainCloudService_Product_GetEligiblePromotions_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_GetEligiblePromotions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_GetEligiblePromotions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_GetEligiblePromotions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_GetEligiblePromotions_presult__isset {
  _BrainCloudService_Product_GetEligiblePromotions_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_GetEligiblePromotions_presult__isset;

class BrainCloudService_Product_GetEligiblePromotions_presult {
 public:


  virtual ~BrainCloudService_Product_GetEligiblePromotions_presult() throw();
  std::string* success;

  _BrainCloudService_Product_GetEligiblePromotions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Product_VerifyItunesReceipt_args__isset {
  _BrainCloudService_Product_VerifyItunesReceipt_args__isset() : base64EncReceiptData(false), clientIndex(false) {}
  bool base64EncReceiptData :1;
  bool clientIndex :1;
} _BrainCloudService_Product_VerifyItunesReceipt_args__isset;

class BrainCloudService_Product_VerifyItunesReceipt_args {
 public:

  BrainCloudService_Product_VerifyItunesReceipt_args(const BrainCloudService_Product_VerifyItunesReceipt_args&);
  BrainCloudService_Product_VerifyItunesReceipt_args& operator=(const BrainCloudService_Product_VerifyItunesReceipt_args&);
  BrainCloudService_Product_VerifyItunesReceipt_args() : base64EncReceiptData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Product_VerifyItunesReceipt_args() throw();
  std::string base64EncReceiptData;
  int32_t clientIndex;

  _BrainCloudService_Product_VerifyItunesReceipt_args__isset __isset;

  void __set_base64EncReceiptData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Product_VerifyItunesReceipt_args & rhs) const
  {
    if (!(base64EncReceiptData == rhs.base64EncReceiptData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_VerifyItunesReceipt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_VerifyItunesReceipt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Product_VerifyItunesReceipt_pargs {
 public:


  virtual ~BrainCloudService_Product_VerifyItunesReceipt_pargs() throw();
  const std::string* base64EncReceiptData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_VerifyItunesReceipt_result__isset {
  _BrainCloudService_Product_VerifyItunesReceipt_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_VerifyItunesReceipt_result__isset;

class BrainCloudService_Product_VerifyItunesReceipt_result {
 public:

  BrainCloudService_Product_VerifyItunesReceipt_result(const BrainCloudService_Product_VerifyItunesReceipt_result&);
  BrainCloudService_Product_VerifyItunesReceipt_result& operator=(const BrainCloudService_Product_VerifyItunesReceipt_result&);
  BrainCloudService_Product_VerifyItunesReceipt_result() : success() {
  }

  virtual ~BrainCloudService_Product_VerifyItunesReceipt_result() throw();
  std::string success;

  _BrainCloudService_Product_VerifyItunesReceipt_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Product_VerifyItunesReceipt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Product_VerifyItunesReceipt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Product_VerifyItunesReceipt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Product_VerifyItunesReceipt_presult__isset {
  _BrainCloudService_Product_VerifyItunesReceipt_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Product_VerifyItunesReceipt_presult__isset;

class BrainCloudService_Product_VerifyItunesReceipt_presult {
 public:


  virtual ~BrainCloudService_Product_VerifyItunesReceipt_presult() throw();
  std::string* success;

  _BrainCloudService_Product_VerifyItunesReceipt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Profanity_ProfanityCheck_args__isset {
  _BrainCloudService_Profanity_ProfanityCheck_args__isset() : text(false), languages(false), flagEmail(false), flagPhone(false), flagUrls(false), clientIndex(false) {}
  bool text :1;
  bool languages :1;
  bool flagEmail :1;
  bool flagPhone :1;
  bool flagUrls :1;
  bool clientIndex :1;
} _BrainCloudService_Profanity_ProfanityCheck_args__isset;

class BrainCloudService_Profanity_ProfanityCheck_args {
 public:

  BrainCloudService_Profanity_ProfanityCheck_args(const BrainCloudService_Profanity_ProfanityCheck_args&);
  BrainCloudService_Profanity_ProfanityCheck_args& operator=(const BrainCloudService_Profanity_ProfanityCheck_args&);
  BrainCloudService_Profanity_ProfanityCheck_args() : text(), languages(), flagEmail(0), flagPhone(0), flagUrls(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Profanity_ProfanityCheck_args() throw();
  std::string text;
  std::string languages;
  bool flagEmail;
  bool flagPhone;
  bool flagUrls;
  int32_t clientIndex;

  _BrainCloudService_Profanity_ProfanityCheck_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_languages(const std::string& val);

  void __set_flagEmail(const bool val);

  void __set_flagPhone(const bool val);

  void __set_flagUrls(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Profanity_ProfanityCheck_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(languages == rhs.languages))
      return false;
    if (!(flagEmail == rhs.flagEmail))
      return false;
    if (!(flagPhone == rhs.flagPhone))
      return false;
    if (!(flagUrls == rhs.flagUrls))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Profanity_ProfanityCheck_pargs {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityCheck_pargs() throw();
  const std::string* text;
  const std::string* languages;
  const bool* flagEmail;
  const bool* flagPhone;
  const bool* flagUrls;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityCheck_result__isset {
  _BrainCloudService_Profanity_ProfanityCheck_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityCheck_result__isset;

class BrainCloudService_Profanity_ProfanityCheck_result {
 public:

  BrainCloudService_Profanity_ProfanityCheck_result(const BrainCloudService_Profanity_ProfanityCheck_result&);
  BrainCloudService_Profanity_ProfanityCheck_result& operator=(const BrainCloudService_Profanity_ProfanityCheck_result&);
  BrainCloudService_Profanity_ProfanityCheck_result() : success() {
  }

  virtual ~BrainCloudService_Profanity_ProfanityCheck_result() throw();
  std::string success;

  _BrainCloudService_Profanity_ProfanityCheck_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Profanity_ProfanityCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityCheck_presult__isset {
  _BrainCloudService_Profanity_ProfanityCheck_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityCheck_presult__isset;

class BrainCloudService_Profanity_ProfanityCheck_presult {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityCheck_presult() throw();
  std::string* success;

  _BrainCloudService_Profanity_ProfanityCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Profanity_ProfanityReplaceText_args__isset {
  _BrainCloudService_Profanity_ProfanityReplaceText_args__isset() : text(false), replaceSymbol(false), languages(false), flagEmail(false), flagPhone(false), flagUrls(false), clientIndex(false) {}
  bool text :1;
  bool replaceSymbol :1;
  bool languages :1;
  bool flagEmail :1;
  bool flagPhone :1;
  bool flagUrls :1;
  bool clientIndex :1;
} _BrainCloudService_Profanity_ProfanityReplaceText_args__isset;

class BrainCloudService_Profanity_ProfanityReplaceText_args {
 public:

  BrainCloudService_Profanity_ProfanityReplaceText_args(const BrainCloudService_Profanity_ProfanityReplaceText_args&);
  BrainCloudService_Profanity_ProfanityReplaceText_args& operator=(const BrainCloudService_Profanity_ProfanityReplaceText_args&);
  BrainCloudService_Profanity_ProfanityReplaceText_args() : text(), replaceSymbol(), languages(), flagEmail(0), flagPhone(0), flagUrls(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Profanity_ProfanityReplaceText_args() throw();
  std::string text;
  std::string replaceSymbol;
  std::string languages;
  bool flagEmail;
  bool flagPhone;
  bool flagUrls;
  int32_t clientIndex;

  _BrainCloudService_Profanity_ProfanityReplaceText_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_replaceSymbol(const std::string& val);

  void __set_languages(const std::string& val);

  void __set_flagEmail(const bool val);

  void __set_flagPhone(const bool val);

  void __set_flagUrls(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Profanity_ProfanityReplaceText_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(replaceSymbol == rhs.replaceSymbol))
      return false;
    if (!(languages == rhs.languages))
      return false;
    if (!(flagEmail == rhs.flagEmail))
      return false;
    if (!(flagPhone == rhs.flagPhone))
      return false;
    if (!(flagUrls == rhs.flagUrls))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityReplaceText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityReplaceText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Profanity_ProfanityReplaceText_pargs {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityReplaceText_pargs() throw();
  const std::string* text;
  const std::string* replaceSymbol;
  const std::string* languages;
  const bool* flagEmail;
  const bool* flagPhone;
  const bool* flagUrls;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityReplaceText_result__isset {
  _BrainCloudService_Profanity_ProfanityReplaceText_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityReplaceText_result__isset;

class BrainCloudService_Profanity_ProfanityReplaceText_result {
 public:

  BrainCloudService_Profanity_ProfanityReplaceText_result(const BrainCloudService_Profanity_ProfanityReplaceText_result&);
  BrainCloudService_Profanity_ProfanityReplaceText_result& operator=(const BrainCloudService_Profanity_ProfanityReplaceText_result&);
  BrainCloudService_Profanity_ProfanityReplaceText_result() : success() {
  }

  virtual ~BrainCloudService_Profanity_ProfanityReplaceText_result() throw();
  std::string success;

  _BrainCloudService_Profanity_ProfanityReplaceText_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Profanity_ProfanityReplaceText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityReplaceText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityReplaceText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityReplaceText_presult__isset {
  _BrainCloudService_Profanity_ProfanityReplaceText_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityReplaceText_presult__isset;

class BrainCloudService_Profanity_ProfanityReplaceText_presult {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityReplaceText_presult() throw();
  std::string* success;

  _BrainCloudService_Profanity_ProfanityReplaceText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Profanity_ProfanityIdentifyBadWords_args__isset {
  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_args__isset() : text(false), languages(false), flagEmail(false), flagPhone(false), flagUrls(false), clientIndex(false) {}
  bool text :1;
  bool languages :1;
  bool flagEmail :1;
  bool flagPhone :1;
  bool flagUrls :1;
  bool clientIndex :1;
} _BrainCloudService_Profanity_ProfanityIdentifyBadWords_args__isset;

class BrainCloudService_Profanity_ProfanityIdentifyBadWords_args {
 public:

  BrainCloudService_Profanity_ProfanityIdentifyBadWords_args(const BrainCloudService_Profanity_ProfanityIdentifyBadWords_args&);
  BrainCloudService_Profanity_ProfanityIdentifyBadWords_args& operator=(const BrainCloudService_Profanity_ProfanityIdentifyBadWords_args&);
  BrainCloudService_Profanity_ProfanityIdentifyBadWords_args() : text(), languages(), flagEmail(0), flagPhone(0), flagUrls(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Profanity_ProfanityIdentifyBadWords_args() throw();
  std::string text;
  std::string languages;
  bool flagEmail;
  bool flagPhone;
  bool flagUrls;
  int32_t clientIndex;

  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_args__isset __isset;

  void __set_text(const std::string& val);

  void __set_languages(const std::string& val);

  void __set_flagEmail(const bool val);

  void __set_flagPhone(const bool val);

  void __set_flagUrls(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    if (!(languages == rhs.languages))
      return false;
    if (!(flagEmail == rhs.flagEmail))
      return false;
    if (!(flagPhone == rhs.flagPhone))
      return false;
    if (!(flagUrls == rhs.flagUrls))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Profanity_ProfanityIdentifyBadWords_pargs {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityIdentifyBadWords_pargs() throw();
  const std::string* text;
  const std::string* languages;
  const bool* flagEmail;
  const bool* flagPhone;
  const bool* flagUrls;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityIdentifyBadWords_result__isset {
  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityIdentifyBadWords_result__isset;

class BrainCloudService_Profanity_ProfanityIdentifyBadWords_result {
 public:

  BrainCloudService_Profanity_ProfanityIdentifyBadWords_result(const BrainCloudService_Profanity_ProfanityIdentifyBadWords_result&);
  BrainCloudService_Profanity_ProfanityIdentifyBadWords_result& operator=(const BrainCloudService_Profanity_ProfanityIdentifyBadWords_result&);
  BrainCloudService_Profanity_ProfanityIdentifyBadWords_result() : success() {
  }

  virtual ~BrainCloudService_Profanity_ProfanityIdentifyBadWords_result() throw();
  std::string success;

  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Profanity_ProfanityIdentifyBadWords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult__isset {
  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult__isset;

class BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult {
 public:


  virtual ~BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult() throw();
  std::string* success;

  _BrainCloudService_Profanity_ProfanityIdentifyBadWords_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args__isset {
  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args__isset;

class BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args {
 public:

  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args(const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args&);
  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args& operator=(const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args&);
  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args() throw();
  int32_t clientIndex;

  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result__isset {
  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result__isset;

class BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result {
 public:

  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result(const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result&);
  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result& operator=(const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result&);
  BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult__isset {
  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult__isset;

class BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult {
 public:


  virtual ~BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_DeregisterAllPushNotificationDeviceTokens_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args__isset {
  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args__isset() : platform(false), token(false), clientIndex(false) {}
  bool platform :1;
  bool token :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args__isset;

class BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args {
 public:

  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args(const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args&);
  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args& operator=(const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args&);
  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args() : platform(), token(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args() throw();
  std::string platform;
  std::string token;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args__isset __isset;

  void __set_platform(const std::string& val);

  void __set_token(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args & rhs) const
  {
    if (!(platform == rhs.platform))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_pargs() throw();
  const std::string* platform;
  const std::string* token;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result__isset {
  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result__isset;

class BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result {
 public:

  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result(const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result&);
  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result& operator=(const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result&);
  BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult__isset {
  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult__isset;

class BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult {
 public:


  virtual ~BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_DeregisterPushNotificationDeviceToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args__isset {
  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args__isset() : platform(false), token(false), clientIndex(false) {}
  bool platform :1;
  bool token :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args__isset;

class BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args {
 public:

  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args(const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args&);
  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args& operator=(const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args&);
  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args() : platform(), token(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args() throw();
  std::string platform;
  std::string token;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args__isset __isset;

  void __set_platform(const std::string& val);

  void __set_token(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args & rhs) const
  {
    if (!(platform == rhs.platform))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_pargs() throw();
  const std::string* platform;
  const std::string* token;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result__isset {
  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result__isset;

class BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result {
 public:

  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result(const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result&);
  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result& operator=(const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result&);
  BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult__isset {
  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult__isset;

class BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult {
 public:


  virtual ~BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_RegisterPushNotificationDeviceToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendSimplePushNotification_args__isset {
  _BrainCloudService_PushNotification_SendSimplePushNotification_args__isset() : toProfileId(false), message(false), clientIndex(false) {}
  bool toProfileId :1;
  bool message :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendSimplePushNotification_args__isset;

class BrainCloudService_PushNotification_SendSimplePushNotification_args {
 public:

  BrainCloudService_PushNotification_SendSimplePushNotification_args(const BrainCloudService_PushNotification_SendSimplePushNotification_args&);
  BrainCloudService_PushNotification_SendSimplePushNotification_args& operator=(const BrainCloudService_PushNotification_SendSimplePushNotification_args&);
  BrainCloudService_PushNotification_SendSimplePushNotification_args() : toProfileId(), message(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendSimplePushNotification_args() throw();
  std::string toProfileId;
  std::string message;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendSimplePushNotification_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_message(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendSimplePushNotification_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendSimplePushNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendSimplePushNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendSimplePushNotification_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendSimplePushNotification_pargs() throw();
  const std::string* toProfileId;
  const std::string* message;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendSimplePushNotification_result__isset {
  _BrainCloudService_PushNotification_SendSimplePushNotification_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendSimplePushNotification_result__isset;

class BrainCloudService_PushNotification_SendSimplePushNotification_result {
 public:

  BrainCloudService_PushNotification_SendSimplePushNotification_result(const BrainCloudService_PushNotification_SendSimplePushNotification_result&);
  BrainCloudService_PushNotification_SendSimplePushNotification_result& operator=(const BrainCloudService_PushNotification_SendSimplePushNotification_result&);
  BrainCloudService_PushNotification_SendSimplePushNotification_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendSimplePushNotification_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendSimplePushNotification_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendSimplePushNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendSimplePushNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendSimplePushNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendSimplePushNotification_presult__isset {
  _BrainCloudService_PushNotification_SendSimplePushNotification_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendSimplePushNotification_presult__isset;

class BrainCloudService_PushNotification_SendSimplePushNotification_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendSimplePushNotification_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendSimplePushNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotification_args__isset {
  _BrainCloudService_PushNotification_SendRichPushNotification_args__isset() : toProfileId(false), notificationTemplateId(false), clientIndex(false) {}
  bool toProfileId :1;
  bool notificationTemplateId :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendRichPushNotification_args__isset;

class BrainCloudService_PushNotification_SendRichPushNotification_args {
 public:

  BrainCloudService_PushNotification_SendRichPushNotification_args(const BrainCloudService_PushNotification_SendRichPushNotification_args&);
  BrainCloudService_PushNotification_SendRichPushNotification_args& operator=(const BrainCloudService_PushNotification_SendRichPushNotification_args&);
  BrainCloudService_PushNotification_SendRichPushNotification_args() : toProfileId(), notificationTemplateId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendRichPushNotification_args() throw();
  std::string toProfileId;
  int32_t notificationTemplateId;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendRichPushNotification_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_notificationTemplateId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendRichPushNotification_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(notificationTemplateId == rhs.notificationTemplateId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRichPushNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRichPushNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendRichPushNotification_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendRichPushNotification_pargs() throw();
  const std::string* toProfileId;
  const int32_t* notificationTemplateId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotification_result__isset {
  _BrainCloudService_PushNotification_SendRichPushNotification_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRichPushNotification_result__isset;

class BrainCloudService_PushNotification_SendRichPushNotification_result {
 public:

  BrainCloudService_PushNotification_SendRichPushNotification_result(const BrainCloudService_PushNotification_SendRichPushNotification_result&);
  BrainCloudService_PushNotification_SendRichPushNotification_result& operator=(const BrainCloudService_PushNotification_SendRichPushNotification_result&);
  BrainCloudService_PushNotification_SendRichPushNotification_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendRichPushNotification_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendRichPushNotification_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendRichPushNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRichPushNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRichPushNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotification_presult__isset {
  _BrainCloudService_PushNotification_SendRichPushNotification_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRichPushNotification_presult__isset;

class BrainCloudService_PushNotification_SendRichPushNotification_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendRichPushNotification_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendRichPushNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args__isset {
  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args__isset() : toProfileId(false), notificationTemplateId(false), substitutionJson(false), clientIndex(false) {}
  bool toProfileId :1;
  bool notificationTemplateId :1;
  bool substitutionJson :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args__isset;

class BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args {
 public:

  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args(const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args&);
  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args& operator=(const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args&);
  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args() : toProfileId(), notificationTemplateId(0), substitutionJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args() throw();
  std::string toProfileId;
  int32_t notificationTemplateId;
  std::string substitutionJson;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_notificationTemplateId(const int32_t val);

  void __set_substitutionJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(notificationTemplateId == rhs.notificationTemplateId))
      return false;
    if (!(substitutionJson == rhs.substitutionJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendRichPushNotificationWithParams_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendRichPushNotificationWithParams_pargs() throw();
  const std::string* toProfileId;
  const int32_t* notificationTemplateId;
  const std::string* substitutionJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result__isset {
  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result__isset;

class BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result {
 public:

  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result(const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result&);
  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result& operator=(const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result&);
  BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRichPushNotificationWithParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult__isset {
  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult__isset;

class BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendRichPushNotificationWithParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args__isset {
  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args__isset() : groupId(false), notificationTemplateId(false), substitutionsJson(false), clientIndex(false) {}
  bool groupId :1;
  bool notificationTemplateId :1;
  bool substitutionsJson :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args__isset;

class BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args {
 public:

  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args(const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args& operator=(const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args() : groupId(), notificationTemplateId(0), substitutionsJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args() throw();
  std::string groupId;
  int32_t notificationTemplateId;
  std::string substitutionsJson;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_notificationTemplateId(const int32_t val);

  void __set_substitutionsJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(notificationTemplateId == rhs.notificationTemplateId))
      return false;
    if (!(substitutionsJson == rhs.substitutionsJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_pargs() throw();
  const std::string* groupId;
  const int32_t* notificationTemplateId;
  const std::string* substitutionsJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result__isset {
  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result__isset;

class BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result {
 public:

  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result(const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result& operator=(const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult__isset {
  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult__isset;

class BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendTemplatedPushNotificationToGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args__isset() : groupId(false), alertContentJson(false), customDataJson(false), clientIndex(false) {}
  bool groupId :1;
  bool alertContentJson :1;
  bool customDataJson :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args(const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args() : groupId(), alertContentJson(), customDataJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args() throw();
  std::string groupId;
  std::string alertContentJson;
  std::string customDataJson;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_alertContentJson(const std::string& val);

  void __set_customDataJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(alertContentJson == rhs.alertContentJson))
      return false;
    if (!(customDataJson == rhs.customDataJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_pargs() throw();
  const std::string* groupId;
  const std::string* alertContentJson;
  const std::string* customDataJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result(const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationToGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args__isset() : profileId(false), fcmContent(false), iosContent(false), facebookContent(false), startTime(false), clientIndex(false) {}
  bool profileId :1;
  bool fcmContent :1;
  bool iosContent :1;
  bool facebookContent :1;
  bool startTime :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args {
 public:

  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args(const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args& operator=(const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args() : profileId(), fcmContent(), iosContent(), facebookContent(), startTime(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args() throw();
  std::string profileId;
  std::string fcmContent;
  std::string iosContent;
  std::string facebookContent;
  int32_t startTime;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_fcmContent(const std::string& val);

  void __set_iosContent(const std::string& val);

  void __set_facebookContent(const std::string& val);

  void __set_startTime(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(fcmContent == rhs.fcmContent))
      return false;
    if (!(iosContent == rhs.iosContent))
      return false;
    if (!(facebookContent == rhs.facebookContent))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_pargs() throw();
  const std::string* profileId;
  const std::string* fcmContent;
  const std::string* iosContent;
  const std::string* facebookContent;
  const int32_t* startTime;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result {
 public:

  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result(const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result& operator=(const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationUTC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args__isset() : profileId(false), fcmContent(false), iosContent(false), facebookContent(false), minutesFromNow(false), clientIndex(false) {}
  bool profileId :1;
  bool fcmContent :1;
  bool iosContent :1;
  bool facebookContent :1;
  bool minutesFromNow :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args {
 public:

  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args(const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args& operator=(const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args() : profileId(), fcmContent(), iosContent(), facebookContent(), minutesFromNow(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args() throw();
  std::string profileId;
  std::string fcmContent;
  std::string iosContent;
  std::string facebookContent;
  int32_t minutesFromNow;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_fcmContent(const std::string& val);

  void __set_iosContent(const std::string& val);

  void __set_facebookContent(const std::string& val);

  void __set_minutesFromNow(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(fcmContent == rhs.fcmContent))
      return false;
    if (!(iosContent == rhs.iosContent))
      return false;
    if (!(facebookContent == rhs.facebookContent))
      return false;
    if (!(minutesFromNow == rhs.minutesFromNow))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_pargs() throw();
  const std::string* profileId;
  const std::string* fcmContent;
  const std::string* iosContent;
  const std::string* facebookContent;
  const int32_t* minutesFromNow;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result {
 public:

  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result(const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result& operator=(const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult__isset {
  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult__isset;

class BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleRawPushNotificationMinutes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotification_args__isset {
  _BrainCloudService_PushNotification_SendRawPushNotification_args__isset() : toProfileId(false), fcmContent(false), iosContent(false), facebookContent(false), clientIndex(false) {}
  bool toProfileId :1;
  bool fcmContent :1;
  bool iosContent :1;
  bool facebookContent :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendRawPushNotification_args__isset;

class BrainCloudService_PushNotification_SendRawPushNotification_args {
 public:

  BrainCloudService_PushNotification_SendRawPushNotification_args(const BrainCloudService_PushNotification_SendRawPushNotification_args&);
  BrainCloudService_PushNotification_SendRawPushNotification_args& operator=(const BrainCloudService_PushNotification_SendRawPushNotification_args&);
  BrainCloudService_PushNotification_SendRawPushNotification_args() : toProfileId(), fcmContent(), iosContent(), facebookContent(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotification_args() throw();
  std::string toProfileId;
  std::string fcmContent;
  std::string iosContent;
  std::string facebookContent;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendRawPushNotification_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_fcmContent(const std::string& val);

  void __set_iosContent(const std::string& val);

  void __set_facebookContent(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotification_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(fcmContent == rhs.fcmContent))
      return false;
    if (!(iosContent == rhs.iosContent))
      return false;
    if (!(facebookContent == rhs.facebookContent))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendRawPushNotification_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotification_pargs() throw();
  const std::string* toProfileId;
  const std::string* fcmContent;
  const std::string* iosContent;
  const std::string* facebookContent;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotification_result__isset {
  _BrainCloudService_PushNotification_SendRawPushNotification_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotification_result__isset;

class BrainCloudService_PushNotification_SendRawPushNotification_result {
 public:

  BrainCloudService_PushNotification_SendRawPushNotification_result(const BrainCloudService_PushNotification_SendRawPushNotification_result&);
  BrainCloudService_PushNotification_SendRawPushNotification_result& operator=(const BrainCloudService_PushNotification_SendRawPushNotification_result&);
  BrainCloudService_PushNotification_SendRawPushNotification_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotification_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendRawPushNotification_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotification_presult__isset {
  _BrainCloudService_PushNotification_SendRawPushNotification_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotification_presult__isset;

class BrainCloudService_PushNotification_SendRawPushNotification_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotification_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendRawPushNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationBatch_args__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_args__isset() : profileIds(false), fcmContent(false), iosContent(false), facebookContent(false), clientIndex(false) {}
  bool profileIds :1;
  bool fcmContent :1;
  bool iosContent :1;
  bool facebookContent :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationBatch_args__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationBatch_args {
 public:

  BrainCloudService_PushNotification_SendRawPushNotificationBatch_args(const BrainCloudService_PushNotification_SendRawPushNotificationBatch_args&);
  BrainCloudService_PushNotification_SendRawPushNotificationBatch_args& operator=(const BrainCloudService_PushNotification_SendRawPushNotificationBatch_args&);
  BrainCloudService_PushNotification_SendRawPushNotificationBatch_args() : fcmContent(), iosContent(), facebookContent(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationBatch_args() throw();
  std::vector<std::string>  profileIds;
  std::string fcmContent;
  std::string iosContent;
  std::string facebookContent;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_args__isset __isset;

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_fcmContent(const std::string& val);

  void __set_iosContent(const std::string& val);

  void __set_facebookContent(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_args & rhs) const
  {
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(fcmContent == rhs.fcmContent))
      return false;
    if (!(iosContent == rhs.iosContent))
      return false;
    if (!(facebookContent == rhs.facebookContent))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendRawPushNotificationBatch_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationBatch_pargs() throw();
  const std::vector<std::string> * profileIds;
  const std::string* fcmContent;
  const std::string* iosContent;
  const std::string* facebookContent;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationBatch_result__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationBatch_result__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationBatch_result {
 public:

  BrainCloudService_PushNotification_SendRawPushNotificationBatch_result(const BrainCloudService_PushNotification_SendRawPushNotificationBatch_result&);
  BrainCloudService_PushNotification_SendRawPushNotificationBatch_result& operator=(const BrainCloudService_PushNotification_SendRawPushNotificationBatch_result&);
  BrainCloudService_PushNotification_SendRawPushNotificationBatch_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationBatch_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotificationBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendRawPushNotificationBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args__isset() : groupId(false), fcmContent(false), iosContent(false), facebookContent(false), clientIndex(false) {}
  bool groupId :1;
  bool fcmContent :1;
  bool iosContent :1;
  bool facebookContent :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args {
 public:

  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args(const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args& operator=(const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args&);
  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args() : groupId(), fcmContent(), iosContent(), facebookContent(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args() throw();
  std::string groupId;
  std::string fcmContent;
  std::string iosContent;
  std::string facebookContent;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args__isset __isset;

  void __set_groupId(const std::string& val);

  void __set_fcmContent(const std::string& val);

  void __set_iosContent(const std::string& val);

  void __set_facebookContent(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args & rhs) const
  {
    if (!(groupId == rhs.groupId))
      return false;
    if (!(fcmContent == rhs.fcmContent))
      return false;
    if (!(iosContent == rhs.iosContent))
      return false;
    if (!(facebookContent == rhs.facebookContent))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendRawPushNotificationToGroup_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationToGroup_pargs() throw();
  const std::string* groupId;
  const std::string* fcmContent;
  const std::string* iosContent;
  const std::string* facebookContent;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result {
 public:

  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result(const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result& operator=(const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result&);
  BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendRawPushNotificationToGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult__isset {
  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult__isset;

class BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendRawPushNotificationToGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args__isset() : profileId(false), alertContentJson(false), customDataJson(false), startTime(false), clientIndex(false) {}
  bool profileId :1;
  bool alertContentJson :1;
  bool customDataJson :1;
  bool startTime :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args {
 public:

  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args& operator=(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args() : profileId(), alertContentJson(), customDataJson(), startTime(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args() throw();
  std::string profileId;
  std::string alertContentJson;
  std::string customDataJson;
  int32_t startTime;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_alertContentJson(const std::string& val);

  void __set_customDataJson(const std::string& val);

  void __set_startTime(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(alertContentJson == rhs.alertContentJson))
      return false;
    if (!(customDataJson == rhs.customDataJson))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_pargs() throw();
  const std::string* profileId;
  const std::string* alertContentJson;
  const std::string* customDataJson;
  const int32_t* startTime;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result {
 public:

  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result& operator=(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationUTC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args__isset() : profileId(false), alertContentJson(false), customDataJson(false), minutesFromNow(false), clientIndex(false) {}
  bool profileId :1;
  bool alertContentJson :1;
  bool customDataJson :1;
  bool minutesFromNow :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args {
 public:

  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args& operator=(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args() : profileId(), alertContentJson(), customDataJson(), minutesFromNow(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args() throw();
  std::string profileId;
  std::string alertContentJson;
  std::string customDataJson;
  int32_t minutesFromNow;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_alertContentJson(const std::string& val);

  void __set_customDataJson(const std::string& val);

  void __set_minutesFromNow(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(alertContentJson == rhs.alertContentJson))
      return false;
    if (!(customDataJson == rhs.customDataJson))
      return false;
    if (!(minutesFromNow == rhs.minutesFromNow))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_pargs() throw();
  const std::string* profileId;
  const std::string* alertContentJson;
  const std::string* customDataJson;
  const int32_t* minutesFromNow;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result {
 public:

  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result& operator=(const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult__isset {
  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult__isset;

class BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleNormalizedPushNotificationMinutes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args__isset() : profileId(false), notificationTemplateId(false), substitutionsJson(false), startTime(false), clientIndex(false) {}
  bool profileId :1;
  bool notificationTemplateId :1;
  bool substitutionsJson :1;
  bool startTime :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args {
 public:

  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args(const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args& operator=(const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args() : profileId(), notificationTemplateId(0), substitutionsJson(), startTime(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args() throw();
  std::string profileId;
  int32_t notificationTemplateId;
  std::string substitutionsJson;
  int32_t startTime;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_notificationTemplateId(const int32_t val);

  void __set_substitutionsJson(const std::string& val);

  void __set_startTime(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(notificationTemplateId == rhs.notificationTemplateId))
      return false;
    if (!(substitutionsJson == rhs.substitutionsJson))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_pargs() throw();
  const std::string* profileId;
  const int32_t* notificationTemplateId;
  const std::string* substitutionsJson;
  const int32_t* startTime;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result {
 public:

  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result(const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result& operator=(const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationUTC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args__isset() : profileId(false), notificationTemplateId(false), substitutionsJson(false), minutesFromNow(false), clientIndex(false) {}
  bool profileId :1;
  bool notificationTemplateId :1;
  bool substitutionsJson :1;
  bool minutesFromNow :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args {
 public:

  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args(const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args& operator=(const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args() : profileId(), notificationTemplateId(0), substitutionsJson(), minutesFromNow(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args() throw();
  std::string profileId;
  int32_t notificationTemplateId;
  std::string substitutionsJson;
  int32_t minutesFromNow;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args__isset __isset;

  void __set_profileId(const std::string& val);

  void __set_notificationTemplateId(const int32_t val);

  void __set_substitutionsJson(const std::string& val);

  void __set_minutesFromNow(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args & rhs) const
  {
    if (!(profileId == rhs.profileId))
      return false;
    if (!(notificationTemplateId == rhs.notificationTemplateId))
      return false;
    if (!(substitutionsJson == rhs.substitutionsJson))
      return false;
    if (!(minutesFromNow == rhs.minutesFromNow))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_pargs() throw();
  const std::string* profileId;
  const int32_t* notificationTemplateId;
  const std::string* substitutionsJson;
  const int32_t* minutesFromNow;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result {
 public:

  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result(const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result& operator=(const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result&);
  BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult__isset {
  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult__isset;

class BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult {
 public:


  virtual ~BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_ScheduleRichPushNotificationMinutes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotification_args__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotification_args__isset() : toProfileId(false), alertContentJson(false), customDataJson(false), clientIndex(false) {}
  bool toProfileId :1;
  bool alertContentJson :1;
  bool customDataJson :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotification_args__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotification_args {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotification_args(const BrainCloudService_PushNotification_SendNormalizedPushNotification_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotification_args& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotification_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotification_args() : toProfileId(), alertContentJson(), customDataJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotification_args() throw();
  std::string toProfileId;
  std::string alertContentJson;
  std::string customDataJson;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendNormalizedPushNotification_args__isset __isset;

  void __set_toProfileId(const std::string& val);

  void __set_alertContentJson(const std::string& val);

  void __set_customDataJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotification_args & rhs) const
  {
    if (!(toProfileId == rhs.toProfileId))
      return false;
    if (!(alertContentJson == rhs.alertContentJson))
      return false;
    if (!(customDataJson == rhs.customDataJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendNormalizedPushNotification_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotification_pargs() throw();
  const std::string* toProfileId;
  const std::string* alertContentJson;
  const std::string* customDataJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotification_result__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotification_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotification_result__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotification_result {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotification_result(const BrainCloudService_PushNotification_SendNormalizedPushNotification_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotification_result& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotification_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotification_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotification_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotification_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotification_presult__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotification_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotification_presult__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotification_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotification_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args__isset() : profileIds(false), alertContentJson(false), customDataJson(false), clientIndex(false) {}
  bool profileIds :1;
  bool alertContentJson :1;
  bool customDataJson :1;
  bool clientIndex :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args(const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args() : alertContentJson(), customDataJson(), clientIndex(0) {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args() throw();
  std::vector<std::string>  profileIds;
  std::string alertContentJson;
  std::string customDataJson;
  int32_t clientIndex;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args__isset __isset;

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_alertContentJson(const std::string& val);

  void __set_customDataJson(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args & rhs) const
  {
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(alertContentJson == rhs.alertContentJson))
      return false;
    if (!(customDataJson == rhs.customDataJson))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_pargs {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_pargs() throw();
  const std::vector<std::string> * profileIds;
  const std::string* alertContentJson;
  const std::string* customDataJson;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result {
 public:

  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result(const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result& operator=(const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result&);
  BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result() : success() {
  }

  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result() throw();
  std::string success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult__isset {
  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult__isset;

class BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult {
 public:


  virtual ~BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult() throw();
  std::string* success;

  _BrainCloudService_PushNotification_SendNormalizedPushNotificationBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_RunScript_args__isset {
  _BrainCloudService_Script_RunScript_args__isset() : scriptName(false), jsonScriptData(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool clientIndex :1;
} _BrainCloudService_Script_RunScript_args__isset;

class BrainCloudService_Script_RunScript_args {
 public:

  BrainCloudService_Script_RunScript_args(const BrainCloudService_Script_RunScript_args&);
  BrainCloudService_Script_RunScript_args& operator=(const BrainCloudService_Script_RunScript_args&);
  BrainCloudService_Script_RunScript_args() : scriptName(), jsonScriptData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_RunScript_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
  int32_t clientIndex;

  _BrainCloudService_Script_RunScript_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_RunScript_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_RunScript_pargs {
 public:


  virtual ~BrainCloudService_Script_RunScript_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunScript_result__isset {
  _BrainCloudService_Script_RunScript_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunScript_result__isset;

class BrainCloudService_Script_RunScript_result {
 public:

  BrainCloudService_Script_RunScript_result(const BrainCloudService_Script_RunScript_result&);
  BrainCloudService_Script_RunScript_result& operator=(const BrainCloudService_Script_RunScript_result&);
  BrainCloudService_Script_RunScript_result() : success() {
  }

  virtual ~BrainCloudService_Script_RunScript_result() throw();
  std::string success;

  _BrainCloudService_Script_RunScript_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_RunScript_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunScript_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunScript_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunScript_presult__isset {
  _BrainCloudService_Script_RunScript_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunScript_presult__isset;

class BrainCloudService_Script_RunScript_presult {
 public:


  virtual ~BrainCloudService_Script_RunScript_presult() throw();
  std::string* success;

  _BrainCloudService_Script_RunScript_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptUTC_args__isset {
  _BrainCloudService_Script_ScheduleRunScriptUTC_args__isset() : scriptName(false), jsonScriptData(false), startDateInUTC(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool startDateInUTC :1;
  bool clientIndex :1;
} _BrainCloudService_Script_ScheduleRunScriptUTC_args__isset;

class BrainCloudService_Script_ScheduleRunScriptUTC_args {
 public:

  BrainCloudService_Script_ScheduleRunScriptUTC_args(const BrainCloudService_Script_ScheduleRunScriptUTC_args&);
  BrainCloudService_Script_ScheduleRunScriptUTC_args& operator=(const BrainCloudService_Script_ScheduleRunScriptUTC_args&);
  BrainCloudService_Script_ScheduleRunScriptUTC_args() : scriptName(), jsonScriptData(), startDateInUTC(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_ScheduleRunScriptUTC_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
   ::Ruyi::SDK::BrainCloudApi::date startDateInUTC;
  int32_t clientIndex;

  _BrainCloudService_Script_ScheduleRunScriptUTC_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_startDateInUTC(const  ::Ruyi::SDK::BrainCloudApi::date val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_ScheduleRunScriptUTC_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(startDateInUTC == rhs.startDateInUTC))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_ScheduleRunScriptUTC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_ScheduleRunScriptUTC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_ScheduleRunScriptUTC_pargs {
 public:


  virtual ~BrainCloudService_Script_ScheduleRunScriptUTC_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const  ::Ruyi::SDK::BrainCloudApi::date* startDateInUTC;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptUTC_result__isset {
  _BrainCloudService_Script_ScheduleRunScriptUTC_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_ScheduleRunScriptUTC_result__isset;

class BrainCloudService_Script_ScheduleRunScriptUTC_result {
 public:

  BrainCloudService_Script_ScheduleRunScriptUTC_result(const BrainCloudService_Script_ScheduleRunScriptUTC_result&);
  BrainCloudService_Script_ScheduleRunScriptUTC_result& operator=(const BrainCloudService_Script_ScheduleRunScriptUTC_result&);
  BrainCloudService_Script_ScheduleRunScriptUTC_result() : success() {
  }

  virtual ~BrainCloudService_Script_ScheduleRunScriptUTC_result() throw();
  std::string success;

  _BrainCloudService_Script_ScheduleRunScriptUTC_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_ScheduleRunScriptUTC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_ScheduleRunScriptUTC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_ScheduleRunScriptUTC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptUTC_presult__isset {
  _BrainCloudService_Script_ScheduleRunScriptUTC_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_ScheduleRunScriptUTC_presult__isset;

class BrainCloudService_Script_ScheduleRunScriptUTC_presult {
 public:


  virtual ~BrainCloudService_Script_ScheduleRunScriptUTC_presult() throw();
  std::string* success;

  _BrainCloudService_Script_ScheduleRunScriptUTC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptMinutes_args__isset {
  _BrainCloudService_Script_ScheduleRunScriptMinutes_args__isset() : scriptName(false), jsonScriptData(false), minutesFromNow(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool minutesFromNow :1;
  bool clientIndex :1;
} _BrainCloudService_Script_ScheduleRunScriptMinutes_args__isset;

class BrainCloudService_Script_ScheduleRunScriptMinutes_args {
 public:

  BrainCloudService_Script_ScheduleRunScriptMinutes_args(const BrainCloudService_Script_ScheduleRunScriptMinutes_args&);
  BrainCloudService_Script_ScheduleRunScriptMinutes_args& operator=(const BrainCloudService_Script_ScheduleRunScriptMinutes_args&);
  BrainCloudService_Script_ScheduleRunScriptMinutes_args() : scriptName(), jsonScriptData(), minutesFromNow(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_ScheduleRunScriptMinutes_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
  int64_t minutesFromNow;
  int32_t clientIndex;

  _BrainCloudService_Script_ScheduleRunScriptMinutes_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_minutesFromNow(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_ScheduleRunScriptMinutes_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(minutesFromNow == rhs.minutesFromNow))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_ScheduleRunScriptMinutes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_ScheduleRunScriptMinutes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_ScheduleRunScriptMinutes_pargs {
 public:


  virtual ~BrainCloudService_Script_ScheduleRunScriptMinutes_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const int64_t* minutesFromNow;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptMinutes_result__isset {
  _BrainCloudService_Script_ScheduleRunScriptMinutes_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_ScheduleRunScriptMinutes_result__isset;

class BrainCloudService_Script_ScheduleRunScriptMinutes_result {
 public:

  BrainCloudService_Script_ScheduleRunScriptMinutes_result(const BrainCloudService_Script_ScheduleRunScriptMinutes_result&);
  BrainCloudService_Script_ScheduleRunScriptMinutes_result& operator=(const BrainCloudService_Script_ScheduleRunScriptMinutes_result&);
  BrainCloudService_Script_ScheduleRunScriptMinutes_result() : success() {
  }

  virtual ~BrainCloudService_Script_ScheduleRunScriptMinutes_result() throw();
  std::string success;

  _BrainCloudService_Script_ScheduleRunScriptMinutes_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_ScheduleRunScriptMinutes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_ScheduleRunScriptMinutes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_ScheduleRunScriptMinutes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_ScheduleRunScriptMinutes_presult__isset {
  _BrainCloudService_Script_ScheduleRunScriptMinutes_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_ScheduleRunScriptMinutes_presult__isset;

class BrainCloudService_Script_ScheduleRunScriptMinutes_presult {
 public:


  virtual ~BrainCloudService_Script_ScheduleRunScriptMinutes_presult() throw();
  std::string* success;

  _BrainCloudService_Script_ScheduleRunScriptMinutes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_RunParentScript_args__isset {
  _BrainCloudService_Script_RunParentScript_args__isset() : scriptName(false), jsonScriptData(false), parentLevel(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool parentLevel :1;
  bool clientIndex :1;
} _BrainCloudService_Script_RunParentScript_args__isset;

class BrainCloudService_Script_RunParentScript_args {
 public:

  BrainCloudService_Script_RunParentScript_args(const BrainCloudService_Script_RunParentScript_args&);
  BrainCloudService_Script_RunParentScript_args& operator=(const BrainCloudService_Script_RunParentScript_args&);
  BrainCloudService_Script_RunParentScript_args() : scriptName(), jsonScriptData(), parentLevel(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_RunParentScript_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
  std::string parentLevel;
  int32_t clientIndex;

  _BrainCloudService_Script_RunParentScript_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_parentLevel(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_RunParentScript_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(parentLevel == rhs.parentLevel))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunParentScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunParentScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_RunParentScript_pargs {
 public:


  virtual ~BrainCloudService_Script_RunParentScript_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const std::string* parentLevel;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunParentScript_result__isset {
  _BrainCloudService_Script_RunParentScript_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunParentScript_result__isset;

class BrainCloudService_Script_RunParentScript_result {
 public:

  BrainCloudService_Script_RunParentScript_result(const BrainCloudService_Script_RunParentScript_result&);
  BrainCloudService_Script_RunParentScript_result& operator=(const BrainCloudService_Script_RunParentScript_result&);
  BrainCloudService_Script_RunParentScript_result() : success() {
  }

  virtual ~BrainCloudService_Script_RunParentScript_result() throw();
  std::string success;

  _BrainCloudService_Script_RunParentScript_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_RunParentScript_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunParentScript_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunParentScript_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunParentScript_presult__isset {
  _BrainCloudService_Script_RunParentScript_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunParentScript_presult__isset;

class BrainCloudService_Script_RunParentScript_presult {
 public:


  virtual ~BrainCloudService_Script_RunParentScript_presult() throw();
  std::string* success;

  _BrainCloudService_Script_RunParentScript_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_CancelScheduledScript_args__isset {
  _BrainCloudService_Script_CancelScheduledScript_args__isset() : jobId(false), clientIndex(false) {}
  bool jobId :1;
  bool clientIndex :1;
} _BrainCloudService_Script_CancelScheduledScript_args__isset;

class BrainCloudService_Script_CancelScheduledScript_args {
 public:

  BrainCloudService_Script_CancelScheduledScript_args(const BrainCloudService_Script_CancelScheduledScript_args&);
  BrainCloudService_Script_CancelScheduledScript_args& operator=(const BrainCloudService_Script_CancelScheduledScript_args&);
  BrainCloudService_Script_CancelScheduledScript_args() : jobId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_CancelScheduledScript_args() throw();
  std::string jobId;
  int32_t clientIndex;

  _BrainCloudService_Script_CancelScheduledScript_args__isset __isset;

  void __set_jobId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_CancelScheduledScript_args & rhs) const
  {
    if (!(jobId == rhs.jobId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_CancelScheduledScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_CancelScheduledScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_CancelScheduledScript_pargs {
 public:


  virtual ~BrainCloudService_Script_CancelScheduledScript_pargs() throw();
  const std::string* jobId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_CancelScheduledScript_result__isset {
  _BrainCloudService_Script_CancelScheduledScript_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_CancelScheduledScript_result__isset;

class BrainCloudService_Script_CancelScheduledScript_result {
 public:

  BrainCloudService_Script_CancelScheduledScript_result(const BrainCloudService_Script_CancelScheduledScript_result&);
  BrainCloudService_Script_CancelScheduledScript_result& operator=(const BrainCloudService_Script_CancelScheduledScript_result&);
  BrainCloudService_Script_CancelScheduledScript_result() : success() {
  }

  virtual ~BrainCloudService_Script_CancelScheduledScript_result() throw();
  std::string success;

  _BrainCloudService_Script_CancelScheduledScript_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_CancelScheduledScript_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_CancelScheduledScript_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_CancelScheduledScript_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_CancelScheduledScript_presult__isset {
  _BrainCloudService_Script_CancelScheduledScript_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_CancelScheduledScript_presult__isset;

class BrainCloudService_Script_CancelScheduledScript_presult {
 public:


  virtual ~BrainCloudService_Script_CancelScheduledScript_presult() throw();
  std::string* success;

  _BrainCloudService_Script_CancelScheduledScript_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_RunPeerScript_args__isset {
  _BrainCloudService_Script_RunPeerScript_args__isset() : scriptName(false), jsonScriptData(false), peer(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool peer :1;
  bool clientIndex :1;
} _BrainCloudService_Script_RunPeerScript_args__isset;

class BrainCloudService_Script_RunPeerScript_args {
 public:

  BrainCloudService_Script_RunPeerScript_args(const BrainCloudService_Script_RunPeerScript_args&);
  BrainCloudService_Script_RunPeerScript_args& operator=(const BrainCloudService_Script_RunPeerScript_args&);
  BrainCloudService_Script_RunPeerScript_args() : scriptName(), jsonScriptData(), peer(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_RunPeerScript_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
  std::string peer;
  int32_t clientIndex;

  _BrainCloudService_Script_RunPeerScript_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_peer(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_RunPeerScript_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(peer == rhs.peer))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunPeerScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunPeerScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_RunPeerScript_pargs {
 public:


  virtual ~BrainCloudService_Script_RunPeerScript_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const std::string* peer;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunPeerScript_result__isset {
  _BrainCloudService_Script_RunPeerScript_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunPeerScript_result__isset;

class BrainCloudService_Script_RunPeerScript_result {
 public:

  BrainCloudService_Script_RunPeerScript_result(const BrainCloudService_Script_RunPeerScript_result&);
  BrainCloudService_Script_RunPeerScript_result& operator=(const BrainCloudService_Script_RunPeerScript_result&);
  BrainCloudService_Script_RunPeerScript_result() : success() {
  }

  virtual ~BrainCloudService_Script_RunPeerScript_result() throw();
  std::string success;

  _BrainCloudService_Script_RunPeerScript_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_RunPeerScript_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunPeerScript_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunPeerScript_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunPeerScript_presult__isset {
  _BrainCloudService_Script_RunPeerScript_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunPeerScript_presult__isset;

class BrainCloudService_Script_RunPeerScript_presult {
 public:


  virtual ~BrainCloudService_Script_RunPeerScript_presult() throw();
  std::string* success;

  _BrainCloudService_Script_RunPeerScript_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Script_RunPeerScriptAsynch_args__isset {
  _BrainCloudService_Script_RunPeerScriptAsynch_args__isset() : scriptName(false), jsonScriptData(false), peer(false), clientIndex(false) {}
  bool scriptName :1;
  bool jsonScriptData :1;
  bool peer :1;
  bool clientIndex :1;
} _BrainCloudService_Script_RunPeerScriptAsynch_args__isset;

class BrainCloudService_Script_RunPeerScriptAsynch_args {
 public:

  BrainCloudService_Script_RunPeerScriptAsynch_args(const BrainCloudService_Script_RunPeerScriptAsynch_args&);
  BrainCloudService_Script_RunPeerScriptAsynch_args& operator=(const BrainCloudService_Script_RunPeerScriptAsynch_args&);
  BrainCloudService_Script_RunPeerScriptAsynch_args() : scriptName(), jsonScriptData(), peer(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Script_RunPeerScriptAsynch_args() throw();
  std::string scriptName;
  std::string jsonScriptData;
  std::string peer;
  int32_t clientIndex;

  _BrainCloudService_Script_RunPeerScriptAsynch_args__isset __isset;

  void __set_scriptName(const std::string& val);

  void __set_jsonScriptData(const std::string& val);

  void __set_peer(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Script_RunPeerScriptAsynch_args & rhs) const
  {
    if (!(scriptName == rhs.scriptName))
      return false;
    if (!(jsonScriptData == rhs.jsonScriptData))
      return false;
    if (!(peer == rhs.peer))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunPeerScriptAsynch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunPeerScriptAsynch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Script_RunPeerScriptAsynch_pargs {
 public:


  virtual ~BrainCloudService_Script_RunPeerScriptAsynch_pargs() throw();
  const std::string* scriptName;
  const std::string* jsonScriptData;
  const std::string* peer;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunPeerScriptAsynch_result__isset {
  _BrainCloudService_Script_RunPeerScriptAsynch_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunPeerScriptAsynch_result__isset;

class BrainCloudService_Script_RunPeerScriptAsynch_result {
 public:

  BrainCloudService_Script_RunPeerScriptAsynch_result(const BrainCloudService_Script_RunPeerScriptAsynch_result&);
  BrainCloudService_Script_RunPeerScriptAsynch_result& operator=(const BrainCloudService_Script_RunPeerScriptAsynch_result&);
  BrainCloudService_Script_RunPeerScriptAsynch_result() : success() {
  }

  virtual ~BrainCloudService_Script_RunPeerScriptAsynch_result() throw();
  std::string success;

  _BrainCloudService_Script_RunPeerScriptAsynch_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Script_RunPeerScriptAsynch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Script_RunPeerScriptAsynch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Script_RunPeerScriptAsynch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Script_RunPeerScriptAsynch_presult__isset {
  _BrainCloudService_Script_RunPeerScriptAsynch_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Script_RunPeerScriptAsynch_presult__isset;

class BrainCloudService_Script_RunPeerScriptAsynch_presult {
 public:


  virtual ~BrainCloudService_Script_RunPeerScriptAsynch_presult() throw();
  std::string* success;

  _BrainCloudService_Script_RunPeerScriptAsynch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args__isset() : leaderboardId(false), replaceName(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool replaceName :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args(const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args() : leaderboardId(), replaceName(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args() throw();
  std::string leaderboardId;
  bool replaceName;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_replaceName(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(replaceName == rhs.replaceName))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_pargs() throw();
  const std::string* leaderboardId;
  const bool* replaceName;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result(const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetSocialLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args__isset() : leaderboardIds(false), leaderboardResultCount(false), replaceName(false), clientIndex(false) {}
  bool leaderboardIds :1;
  bool leaderboardResultCount :1;
  bool replaceName :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args(const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args() : leaderboardResultCount(0), replaceName(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args() throw();
  std::vector<std::string>  leaderboardIds;
  int32_t leaderboardResultCount;
  bool replaceName;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args__isset __isset;

  void __set_leaderboardIds(const std::vector<std::string> & val);

  void __set_leaderboardResultCount(const int32_t val);

  void __set_replaceName(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args & rhs) const
  {
    if (!(leaderboardIds == rhs.leaderboardIds))
      return false;
    if (!(leaderboardResultCount == rhs.leaderboardResultCount))
      return false;
    if (!(replaceName == rhs.replaceName))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_pargs() throw();
  const std::vector<std::string> * leaderboardIds;
  const int32_t* leaderboardResultCount;
  const bool* replaceName;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result(const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetMultiSocialLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args__isset() : leaderboardId(false), sort(false), startIndex(false), endIndex(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool sort :1;
  bool startIndex :1;
  bool endIndex :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args() : leaderboardId(), sort(( ::Ruyi::SDK::BrainCloudApi::SortOrder::type)0), startIndex(0), endIndex(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args() throw();
  std::string leaderboardId;
   ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort;
  int32_t startIndex;
  int32_t endIndex;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_sort(const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type val);

  void __set_startIndex(const int32_t val);

  void __set_endIndex(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(sort == rhs.sort))
      return false;
    if (!(startIndex == rhs.startIndex))
      return false;
    if (!(endIndex == rhs.endIndex))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_pargs() throw();
  const std::string* leaderboardId;
  const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type* sort;
  const int32_t* startIndex;
  const int32_t* endIndex;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args__isset() : leaderboardId(false), sort(false), startIndex(false), endIndex(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool sort :1;
  bool startIndex :1;
  bool endIndex :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args() : leaderboardId(), sort(( ::Ruyi::SDK::BrainCloudApi::SortOrder::type)0), startIndex(0), endIndex(0), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args() throw();
  std::string leaderboardId;
   ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort;
  int32_t startIndex;
  int32_t endIndex;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_sort(const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type val);

  void __set_startIndex(const int32_t val);

  void __set_endIndex(const int32_t val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(sort == rhs.sort))
      return false;
    if (!(startIndex == rhs.startIndex))
      return false;
    if (!(endIndex == rhs.endIndex))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_pargs() throw();
  const std::string* leaderboardId;
  const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type* sort;
  const int32_t* startIndex;
  const int32_t* endIndex;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardPageByVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args__isset() : leaderboardId(false), sort(false), beforeCount(false), afterCount(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool sort :1;
  bool beforeCount :1;
  bool afterCount :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args() : leaderboardId(), sort(( ::Ruyi::SDK::BrainCloudApi::SortOrder::type)0), beforeCount(0), afterCount(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args() throw();
  std::string leaderboardId;
   ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort;
  int32_t beforeCount;
  int32_t afterCount;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_sort(const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type val);

  void __set_beforeCount(const int32_t val);

  void __set_afterCount(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(sort == rhs.sort))
      return false;
    if (!(beforeCount == rhs.beforeCount))
      return false;
    if (!(afterCount == rhs.afterCount))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_pargs() throw();
  const std::string* leaderboardId;
  const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type* sort;
  const int32_t* beforeCount;
  const int32_t* afterCount;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardView_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args__isset() : leaderboardId(false), sort(false), beforeCount(false), afterCount(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool sort :1;
  bool beforeCount :1;
  bool afterCount :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args() : leaderboardId(), sort(( ::Ruyi::SDK::BrainCloudApi::SortOrder::type)0), beforeCount(0), afterCount(0), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args() throw();
  std::string leaderboardId;
   ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort;
  int32_t beforeCount;
  int32_t afterCount;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_sort(const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type val);

  void __set_beforeCount(const int32_t val);

  void __set_afterCount(const int32_t val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(sort == rhs.sort))
      return false;
    if (!(beforeCount == rhs.beforeCount))
      return false;
    if (!(afterCount == rhs.afterCount))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_pargs() throw();
  const std::string* leaderboardId;
  const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type* sort;
  const int32_t* beforeCount;
  const int32_t* afterCount;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardViewByVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args__isset() : leaderboardId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args() : leaderboardId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args() throw();
  std::string leaderboardId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardVersions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args__isset() : leaderboardId(false), groupId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool groupId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args(const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args() : leaderboardId(), groupId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args() throw();
  std::string leaderboardId;
  std::string groupId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_groupId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(groupId == rhs.groupId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_pargs() throw();
  const std::string* leaderboardId;
  const std::string* groupId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result(const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGroupSocialLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args__isset() : leaderboardId(false), score(false), jsonData(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool score :1;
  bool jsonData :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args(const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args() : leaderboardId(), score(0), jsonData(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args() throw();
  std::string leaderboardId;
  int64_t score;
  std::string jsonData;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_score(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_pargs() throw();
  const std::string* leaderboardId;
  const int64_t* score;
  const std::string* jsonData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result(const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_PostScoreToLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_RemovePlayerScore_args__isset {
  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_RemovePlayerScore_args__isset;

class BrainCloudService_SocialLeaderboard_RemovePlayerScore_args {
 public:

  BrainCloudService_SocialLeaderboard_RemovePlayerScore_args(const BrainCloudService_SocialLeaderboard_RemovePlayerScore_args&);
  BrainCloudService_SocialLeaderboard_RemovePlayerScore_args& operator=(const BrainCloudService_SocialLeaderboard_RemovePlayerScore_args&);
  BrainCloudService_SocialLeaderboard_RemovePlayerScore_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_RemovePlayerScore_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_RemovePlayerScore_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_RemovePlayerScore_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_RemovePlayerScore_result__isset {
  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_RemovePlayerScore_result__isset;

class BrainCloudService_SocialLeaderboard_RemovePlayerScore_result {
 public:

  BrainCloudService_SocialLeaderboard_RemovePlayerScore_result(const BrainCloudService_SocialLeaderboard_RemovePlayerScore_result&);
  BrainCloudService_SocialLeaderboard_RemovePlayerScore_result& operator=(const BrainCloudService_SocialLeaderboard_RemovePlayerScore_result&);
  BrainCloudService_SocialLeaderboard_RemovePlayerScore_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_RemovePlayerScore_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_RemovePlayerScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult__isset {
  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult__isset;

class BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_RemovePlayerScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args__isset() : leaderboardId(false), score(false), jsonData(false), leaderboardType(false), rotationType(false), rotationReset(false), retainedCount(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool score :1;
  bool jsonData :1;
  bool leaderboardType :1;
  bool rotationType :1;
  bool rotationReset :1;
  bool retainedCount :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args() : leaderboardId(), score(0), jsonData(), leaderboardType(( ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type)0), rotationType(( ::Ruyi::SDK::BrainCloudApi::RotationType::type)0), rotationReset(0), retainedCount(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args() throw();
  std::string leaderboardId;
  int64_t score;
  std::string jsonData;
   ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType;
   ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType;
   ::Ruyi::SDK::BrainCloudApi::date rotationReset;
  int32_t retainedCount;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_score(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_leaderboardType(const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type val);

  void __set_rotationType(const  ::Ruyi::SDK::BrainCloudApi::RotationType::type val);

  void __set_rotationReset(const  ::Ruyi::SDK::BrainCloudApi::date val);

  void __set_retainedCount(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(leaderboardType == rhs.leaderboardType))
      return false;
    if (!(rotationType == rhs.rotationType))
      return false;
    if (!(rotationReset == rhs.rotationReset))
      return false;
    if (!(retainedCount == rhs.retainedCount))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_pargs() throw();
  const std::string* leaderboardId;
  const int64_t* score;
  const std::string* jsonData;
  const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type* leaderboardType;
  const  ::Ruyi::SDK::BrainCloudApi::RotationType::type* rotationType;
  const  ::Ruyi::SDK::BrainCloudApi::date* rotationReset;
  const int32_t* retainedCount;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args__isset() : leaderboardId(false), score(false), jsonData(false), leaderboardType(false), rotationReset(false), retainedCount(false), numDaysToRotate(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool score :1;
  bool jsonData :1;
  bool leaderboardType :1;
  bool rotationReset :1;
  bool retainedCount :1;
  bool numDaysToRotate :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args() : leaderboardId(), score(0), jsonData(), leaderboardType(( ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type)0), rotationReset(0), retainedCount(0), numDaysToRotate(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args() throw();
  std::string leaderboardId;
  int64_t score;
  std::string jsonData;
   ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType;
   ::Ruyi::SDK::BrainCloudApi::date rotationReset;
  int32_t retainedCount;
  int32_t numDaysToRotate;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_score(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_leaderboardType(const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type val);

  void __set_rotationReset(const  ::Ruyi::SDK::BrainCloudApi::date val);

  void __set_retainedCount(const int32_t val);

  void __set_numDaysToRotate(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(leaderboardType == rhs.leaderboardType))
      return false;
    if (!(rotationReset == rhs.rotationReset))
      return false;
    if (!(retainedCount == rhs.retainedCount))
      return false;
    if (!(numDaysToRotate == rhs.numDaysToRotate))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_pargs() throw();
  const std::string* leaderboardId;
  const int64_t* score;
  const std::string* jsonData;
  const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type* leaderboardType;
  const  ::Ruyi::SDK::BrainCloudApi::date* rotationReset;
  const int32_t* retainedCount;
  const int32_t* numDaysToRotate;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result {
 public:

  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result& operator=(const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result&);
  BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult__isset {
  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult__isset;

class BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_PostScoreToDynamicLeaderboardDays_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args__isset() : leaderboardId(false), profileIds(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool profileIds :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args__isset;

class BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args(const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args& operator=(const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args&);
  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args() : leaderboardId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args() throw();
  std::string leaderboardId;
  std::vector<std::string>  profileIds;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_profileIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(profileIds == rhs.profileIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_pargs() throw();
  const std::string* leaderboardId;
  const std::vector<std::string> * profileIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result__isset;

class BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result(const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result& operator=(const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result&);
  BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult__isset;

class BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetPlayersSocialLeaderboard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_ListLeaderboards_args__isset {
  _BrainCloudService_SocialLeaderboard_ListLeaderboards_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_ListLeaderboards_args__isset;

class BrainCloudService_SocialLeaderboard_ListLeaderboards_args {
 public:

  BrainCloudService_SocialLeaderboard_ListLeaderboards_args(const BrainCloudService_SocialLeaderboard_ListLeaderboards_args&);
  BrainCloudService_SocialLeaderboard_ListLeaderboards_args& operator=(const BrainCloudService_SocialLeaderboard_ListLeaderboards_args&);
  BrainCloudService_SocialLeaderboard_ListLeaderboards_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_ListLeaderboards_args() throw();
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_ListLeaderboards_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_ListLeaderboards_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_ListLeaderboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_ListLeaderboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_ListLeaderboards_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_ListLeaderboards_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_ListLeaderboards_result__isset {
  _BrainCloudService_SocialLeaderboard_ListLeaderboards_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_ListLeaderboards_result__isset;

class BrainCloudService_SocialLeaderboard_ListLeaderboards_result {
 public:

  BrainCloudService_SocialLeaderboard_ListLeaderboards_result(const BrainCloudService_SocialLeaderboard_ListLeaderboards_result&);
  BrainCloudService_SocialLeaderboard_ListLeaderboards_result& operator=(const BrainCloudService_SocialLeaderboard_ListLeaderboards_result&);
  BrainCloudService_SocialLeaderboard_ListLeaderboards_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_ListLeaderboards_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_ListLeaderboards_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_ListLeaderboards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_ListLeaderboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_ListLeaderboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_ListLeaderboards_presult__isset {
  _BrainCloudService_SocialLeaderboard_ListLeaderboards_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_ListLeaderboards_presult__isset;

class BrainCloudService_SocialLeaderboard_ListLeaderboards_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_ListLeaderboards_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_ListLeaderboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args__isset() : leaderboardId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args() : leaderboardId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args() throw();
  std::string leaderboardId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result {
 public:

  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result& operator=(const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result&);
  BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult__isset;

class BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScore_args__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScore_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScore_args__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScore_args {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayerScore_args(const BrainCloudService_SocialLeaderboard_GetPlayerScore_args&);
  BrainCloudService_SocialLeaderboard_GetPlayerScore_args& operator=(const BrainCloudService_SocialLeaderboard_GetPlayerScore_args&);
  BrainCloudService_SocialLeaderboard_GetPlayerScore_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScore_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetPlayerScore_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayerScore_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayerScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayerScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetPlayerScore_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScore_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScore_result__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScore_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScore_result__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScore_result {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayerScore_result(const BrainCloudService_SocialLeaderboard_GetPlayerScore_result&);
  BrainCloudService_SocialLeaderboard_GetPlayerScore_result& operator=(const BrainCloudService_SocialLeaderboard_GetPlayerScore_result&);
  BrainCloudService_SocialLeaderboard_GetPlayerScore_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScore_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetPlayerScore_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayerScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayerScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayerScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScore_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScore_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScore_presult__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScore_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScore_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetPlayerScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args__isset() : leaderboardIds(false), clientIndex(false) {}
  bool leaderboardIds :1;
  bool clientIndex :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args(const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args&);
  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args& operator=(const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args&);
  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args() throw();
  std::vector<std::string>  leaderboardIds;
  int32_t clientIndex;

  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args__isset __isset;

  void __set_leaderboardIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args & rhs) const
  {
    if (!(leaderboardIds == rhs.leaderboardIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_pargs {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_pargs() throw();
  const std::vector<std::string> * leaderboardIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result {
 public:

  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result(const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result&);
  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result& operator=(const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result&);
  BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result() : success() {
  }

  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result() throw();
  std::string success;

  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult__isset {
  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult__isset;

class BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult {
 public:


  virtual ~BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult() throw();
  std::string* success;

  _BrainCloudService_SocialLeaderboard_GetPlayerScoresFromLeaderboards_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Time_ReadServerTime_args__isset {
  _BrainCloudService_Time_ReadServerTime_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Time_ReadServerTime_args__isset;

class BrainCloudService_Time_ReadServerTime_args {
 public:

  BrainCloudService_Time_ReadServerTime_args(const BrainCloudService_Time_ReadServerTime_args&);
  BrainCloudService_Time_ReadServerTime_args& operator=(const BrainCloudService_Time_ReadServerTime_args&);
  BrainCloudService_Time_ReadServerTime_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Time_ReadServerTime_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Time_ReadServerTime_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Time_ReadServerTime_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Time_ReadServerTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Time_ReadServerTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Time_ReadServerTime_pargs {
 public:


  virtual ~BrainCloudService_Time_ReadServerTime_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Time_ReadServerTime_result__isset {
  _BrainCloudService_Time_ReadServerTime_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Time_ReadServerTime_result__isset;

class BrainCloudService_Time_ReadServerTime_result {
 public:

  BrainCloudService_Time_ReadServerTime_result(const BrainCloudService_Time_ReadServerTime_result&);
  BrainCloudService_Time_ReadServerTime_result& operator=(const BrainCloudService_Time_ReadServerTime_result&);
  BrainCloudService_Time_ReadServerTime_result() : success() {
  }

  virtual ~BrainCloudService_Time_ReadServerTime_result() throw();
  std::string success;

  _BrainCloudService_Time_ReadServerTime_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Time_ReadServerTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Time_ReadServerTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Time_ReadServerTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Time_ReadServerTime_presult__isset {
  _BrainCloudService_Time_ReadServerTime_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Time_ReadServerTime_presult__isset;

class BrainCloudService_Time_ReadServerTime_presult {
 public:


  virtual ~BrainCloudService_Time_ReadServerTime_presult() throw();
  std::string* success;

  _BrainCloudService_Time_ReadServerTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_ClaimTournamentReward_args__isset {
  _BrainCloudService_Tournament_ClaimTournamentReward_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_ClaimTournamentReward_args__isset;

class BrainCloudService_Tournament_ClaimTournamentReward_args {
 public:

  BrainCloudService_Tournament_ClaimTournamentReward_args(const BrainCloudService_Tournament_ClaimTournamentReward_args&);
  BrainCloudService_Tournament_ClaimTournamentReward_args& operator=(const BrainCloudService_Tournament_ClaimTournamentReward_args&);
  BrainCloudService_Tournament_ClaimTournamentReward_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_ClaimTournamentReward_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_Tournament_ClaimTournamentReward_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_ClaimTournamentReward_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ClaimTournamentReward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ClaimTournamentReward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_ClaimTournamentReward_pargs {
 public:


  virtual ~BrainCloudService_Tournament_ClaimTournamentReward_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ClaimTournamentReward_result__isset {
  _BrainCloudService_Tournament_ClaimTournamentReward_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ClaimTournamentReward_result__isset;

class BrainCloudService_Tournament_ClaimTournamentReward_result {
 public:

  BrainCloudService_Tournament_ClaimTournamentReward_result(const BrainCloudService_Tournament_ClaimTournamentReward_result&);
  BrainCloudService_Tournament_ClaimTournamentReward_result& operator=(const BrainCloudService_Tournament_ClaimTournamentReward_result&);
  BrainCloudService_Tournament_ClaimTournamentReward_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_ClaimTournamentReward_result() throw();
  std::string success;

  _BrainCloudService_Tournament_ClaimTournamentReward_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_ClaimTournamentReward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ClaimTournamentReward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ClaimTournamentReward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ClaimTournamentReward_presult__isset {
  _BrainCloudService_Tournament_ClaimTournamentReward_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ClaimTournamentReward_presult__isset;

class BrainCloudService_Tournament_ClaimTournamentReward_presult {
 public:


  virtual ~BrainCloudService_Tournament_ClaimTournamentReward_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_ClaimTournamentReward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_GetTournamentStatus_args__isset {
  _BrainCloudService_Tournament_GetTournamentStatus_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_GetTournamentStatus_args__isset;

class BrainCloudService_Tournament_GetTournamentStatus_args {
 public:

  BrainCloudService_Tournament_GetTournamentStatus_args(const BrainCloudService_Tournament_GetTournamentStatus_args&);
  BrainCloudService_Tournament_GetTournamentStatus_args& operator=(const BrainCloudService_Tournament_GetTournamentStatus_args&);
  BrainCloudService_Tournament_GetTournamentStatus_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_GetTournamentStatus_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_Tournament_GetTournamentStatus_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_GetTournamentStatus_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_GetTournamentStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_GetTournamentStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_GetTournamentStatus_pargs {
 public:


  virtual ~BrainCloudService_Tournament_GetTournamentStatus_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_GetTournamentStatus_result__isset {
  _BrainCloudService_Tournament_GetTournamentStatus_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_GetTournamentStatus_result__isset;

class BrainCloudService_Tournament_GetTournamentStatus_result {
 public:

  BrainCloudService_Tournament_GetTournamentStatus_result(const BrainCloudService_Tournament_GetTournamentStatus_result&);
  BrainCloudService_Tournament_GetTournamentStatus_result& operator=(const BrainCloudService_Tournament_GetTournamentStatus_result&);
  BrainCloudService_Tournament_GetTournamentStatus_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_GetTournamentStatus_result() throw();
  std::string success;

  _BrainCloudService_Tournament_GetTournamentStatus_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_GetTournamentStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_GetTournamentStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_GetTournamentStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_GetTournamentStatus_presult__isset {
  _BrainCloudService_Tournament_GetTournamentStatus_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_GetTournamentStatus_presult__isset;

class BrainCloudService_Tournament_GetTournamentStatus_presult {
 public:


  virtual ~BrainCloudService_Tournament_GetTournamentStatus_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_GetTournamentStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_JoinTournament_args__isset {
  _BrainCloudService_Tournament_JoinTournament_args__isset() : leaderboardId(false), tournamentCode(false), initialScore(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool tournamentCode :1;
  bool initialScore :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_JoinTournament_args__isset;

class BrainCloudService_Tournament_JoinTournament_args {
 public:

  BrainCloudService_Tournament_JoinTournament_args(const BrainCloudService_Tournament_JoinTournament_args&);
  BrainCloudService_Tournament_JoinTournament_args& operator=(const BrainCloudService_Tournament_JoinTournament_args&);
  BrainCloudService_Tournament_JoinTournament_args() : leaderboardId(), tournamentCode(), initialScore(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_JoinTournament_args() throw();
  std::string leaderboardId;
  std::string tournamentCode;
  int64_t initialScore;
  int32_t clientIndex;

  _BrainCloudService_Tournament_JoinTournament_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_tournamentCode(const std::string& val);

  void __set_initialScore(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_JoinTournament_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(tournamentCode == rhs.tournamentCode))
      return false;
    if (!(initialScore == rhs.initialScore))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_JoinTournament_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_JoinTournament_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_JoinTournament_pargs {
 public:


  virtual ~BrainCloudService_Tournament_JoinTournament_pargs() throw();
  const std::string* leaderboardId;
  const std::string* tournamentCode;
  const int64_t* initialScore;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_JoinTournament_result__isset {
  _BrainCloudService_Tournament_JoinTournament_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_JoinTournament_result__isset;

class BrainCloudService_Tournament_JoinTournament_result {
 public:

  BrainCloudService_Tournament_JoinTournament_result(const BrainCloudService_Tournament_JoinTournament_result&);
  BrainCloudService_Tournament_JoinTournament_result& operator=(const BrainCloudService_Tournament_JoinTournament_result&);
  BrainCloudService_Tournament_JoinTournament_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_JoinTournament_result() throw();
  std::string success;

  _BrainCloudService_Tournament_JoinTournament_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_JoinTournament_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_JoinTournament_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_JoinTournament_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_JoinTournament_presult__isset {
  _BrainCloudService_Tournament_JoinTournament_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_JoinTournament_presult__isset;

class BrainCloudService_Tournament_JoinTournament_presult {
 public:


  virtual ~BrainCloudService_Tournament_JoinTournament_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_JoinTournament_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_LeaveTournament_args__isset {
  _BrainCloudService_Tournament_LeaveTournament_args__isset() : leaderboardId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_LeaveTournament_args__isset;

class BrainCloudService_Tournament_LeaveTournament_args {
 public:

  BrainCloudService_Tournament_LeaveTournament_args(const BrainCloudService_Tournament_LeaveTournament_args&);
  BrainCloudService_Tournament_LeaveTournament_args& operator=(const BrainCloudService_Tournament_LeaveTournament_args&);
  BrainCloudService_Tournament_LeaveTournament_args() : leaderboardId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_LeaveTournament_args() throw();
  std::string leaderboardId;
  int32_t clientIndex;

  _BrainCloudService_Tournament_LeaveTournament_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_LeaveTournament_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_LeaveTournament_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_LeaveTournament_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_LeaveTournament_pargs {
 public:


  virtual ~BrainCloudService_Tournament_LeaveTournament_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_LeaveTournament_result__isset {
  _BrainCloudService_Tournament_LeaveTournament_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_LeaveTournament_result__isset;

class BrainCloudService_Tournament_LeaveTournament_result {
 public:

  BrainCloudService_Tournament_LeaveTournament_result(const BrainCloudService_Tournament_LeaveTournament_result&);
  BrainCloudService_Tournament_LeaveTournament_result& operator=(const BrainCloudService_Tournament_LeaveTournament_result&);
  BrainCloudService_Tournament_LeaveTournament_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_LeaveTournament_result() throw();
  std::string success;

  _BrainCloudService_Tournament_LeaveTournament_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_LeaveTournament_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_LeaveTournament_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_LeaveTournament_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_LeaveTournament_presult__isset {
  _BrainCloudService_Tournament_LeaveTournament_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_LeaveTournament_presult__isset;

class BrainCloudService_Tournament_LeaveTournament_presult {
 public:


  virtual ~BrainCloudService_Tournament_LeaveTournament_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_LeaveTournament_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_PostTournamentScore_args__isset {
  _BrainCloudService_Tournament_PostTournamentScore_args__isset() : leaderboardId(false), score(false), jsonData(false), roundStartedTime(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool score :1;
  bool jsonData :1;
  bool roundStartedTime :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_PostTournamentScore_args__isset;

class BrainCloudService_Tournament_PostTournamentScore_args {
 public:

  BrainCloudService_Tournament_PostTournamentScore_args(const BrainCloudService_Tournament_PostTournamentScore_args&);
  BrainCloudService_Tournament_PostTournamentScore_args& operator=(const BrainCloudService_Tournament_PostTournamentScore_args&);
  BrainCloudService_Tournament_PostTournamentScore_args() : leaderboardId(), score(0), jsonData(), roundStartedTime(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_PostTournamentScore_args() throw();
  std::string leaderboardId;
  int64_t score;
  std::string jsonData;
   ::Ruyi::SDK::BrainCloudApi::date roundStartedTime;
  int32_t clientIndex;

  _BrainCloudService_Tournament_PostTournamentScore_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_score(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_roundStartedTime(const  ::Ruyi::SDK::BrainCloudApi::date val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_PostTournamentScore_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(roundStartedTime == rhs.roundStartedTime))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_PostTournamentScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_PostTournamentScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_PostTournamentScore_pargs {
 public:


  virtual ~BrainCloudService_Tournament_PostTournamentScore_pargs() throw();
  const std::string* leaderboardId;
  const int64_t* score;
  const std::string* jsonData;
  const  ::Ruyi::SDK::BrainCloudApi::date* roundStartedTime;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_PostTournamentScore_result__isset {
  _BrainCloudService_Tournament_PostTournamentScore_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_PostTournamentScore_result__isset;

class BrainCloudService_Tournament_PostTournamentScore_result {
 public:

  BrainCloudService_Tournament_PostTournamentScore_result(const BrainCloudService_Tournament_PostTournamentScore_result&);
  BrainCloudService_Tournament_PostTournamentScore_result& operator=(const BrainCloudService_Tournament_PostTournamentScore_result&);
  BrainCloudService_Tournament_PostTournamentScore_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_PostTournamentScore_result() throw();
  std::string success;

  _BrainCloudService_Tournament_PostTournamentScore_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_PostTournamentScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_PostTournamentScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_PostTournamentScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_PostTournamentScore_presult__isset {
  _BrainCloudService_Tournament_PostTournamentScore_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_PostTournamentScore_presult__isset;

class BrainCloudService_Tournament_PostTournamentScore_presult {
 public:


  virtual ~BrainCloudService_Tournament_PostTournamentScore_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_PostTournamentScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_PostTournamentScoreWithResults_args__isset {
  _BrainCloudService_Tournament_PostTournamentScoreWithResults_args__isset() : leaderboardId(false), score(false), jsonData(false), roundStartedTime(false), sort(false), beforeCount(false), afterCount(false), initialScore(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool score :1;
  bool jsonData :1;
  bool roundStartedTime :1;
  bool sort :1;
  bool beforeCount :1;
  bool afterCount :1;
  bool initialScore :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_PostTournamentScoreWithResults_args__isset;

class BrainCloudService_Tournament_PostTournamentScoreWithResults_args {
 public:

  BrainCloudService_Tournament_PostTournamentScoreWithResults_args(const BrainCloudService_Tournament_PostTournamentScoreWithResults_args&);
  BrainCloudService_Tournament_PostTournamentScoreWithResults_args& operator=(const BrainCloudService_Tournament_PostTournamentScoreWithResults_args&);
  BrainCloudService_Tournament_PostTournamentScoreWithResults_args() : leaderboardId(), score(0), jsonData(), roundStartedTime(0), sort(( ::Ruyi::SDK::BrainCloudApi::SortOrder::type)0), beforeCount(0), afterCount(0), initialScore(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_PostTournamentScoreWithResults_args() throw();
  std::string leaderboardId;
  int64_t score;
  std::string jsonData;
   ::Ruyi::SDK::BrainCloudApi::date roundStartedTime;
   ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort;
  int32_t beforeCount;
  int32_t afterCount;
  int64_t initialScore;
  int32_t clientIndex;

  _BrainCloudService_Tournament_PostTournamentScoreWithResults_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_score(const int64_t val);

  void __set_jsonData(const std::string& val);

  void __set_roundStartedTime(const  ::Ruyi::SDK::BrainCloudApi::date val);

  void __set_sort(const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type val);

  void __set_beforeCount(const int32_t val);

  void __set_afterCount(const int32_t val);

  void __set_initialScore(const int64_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_PostTournamentScoreWithResults_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(jsonData == rhs.jsonData))
      return false;
    if (!(roundStartedTime == rhs.roundStartedTime))
      return false;
    if (!(sort == rhs.sort))
      return false;
    if (!(beforeCount == rhs.beforeCount))
      return false;
    if (!(afterCount == rhs.afterCount))
      return false;
    if (!(initialScore == rhs.initialScore))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_PostTournamentScoreWithResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_PostTournamentScoreWithResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_PostTournamentScoreWithResults_pargs {
 public:


  virtual ~BrainCloudService_Tournament_PostTournamentScoreWithResults_pargs() throw();
  const std::string* leaderboardId;
  const int64_t* score;
  const std::string* jsonData;
  const  ::Ruyi::SDK::BrainCloudApi::date* roundStartedTime;
  const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type* sort;
  const int32_t* beforeCount;
  const int32_t* afterCount;
  const int64_t* initialScore;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_PostTournamentScoreWithResults_result__isset {
  _BrainCloudService_Tournament_PostTournamentScoreWithResults_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_PostTournamentScoreWithResults_result__isset;

class BrainCloudService_Tournament_PostTournamentScoreWithResults_result {
 public:

  BrainCloudService_Tournament_PostTournamentScoreWithResults_result(const BrainCloudService_Tournament_PostTournamentScoreWithResults_result&);
  BrainCloudService_Tournament_PostTournamentScoreWithResults_result& operator=(const BrainCloudService_Tournament_PostTournamentScoreWithResults_result&);
  BrainCloudService_Tournament_PostTournamentScoreWithResults_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_PostTournamentScoreWithResults_result() throw();
  std::string success;

  _BrainCloudService_Tournament_PostTournamentScoreWithResults_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_PostTournamentScoreWithResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_PostTournamentScoreWithResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_PostTournamentScoreWithResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_PostTournamentScoreWithResults_presult__isset {
  _BrainCloudService_Tournament_PostTournamentScoreWithResults_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_PostTournamentScoreWithResults_presult__isset;

class BrainCloudService_Tournament_PostTournamentScoreWithResults_presult {
 public:


  virtual ~BrainCloudService_Tournament_PostTournamentScoreWithResults_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_PostTournamentScoreWithResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_ViewCurrentReward_args__isset {
  _BrainCloudService_Tournament_ViewCurrentReward_args__isset() : leaderboardId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_ViewCurrentReward_args__isset;

class BrainCloudService_Tournament_ViewCurrentReward_args {
 public:

  BrainCloudService_Tournament_ViewCurrentReward_args(const BrainCloudService_Tournament_ViewCurrentReward_args&);
  BrainCloudService_Tournament_ViewCurrentReward_args& operator=(const BrainCloudService_Tournament_ViewCurrentReward_args&);
  BrainCloudService_Tournament_ViewCurrentReward_args() : leaderboardId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_ViewCurrentReward_args() throw();
  std::string leaderboardId;
  int32_t clientIndex;

  _BrainCloudService_Tournament_ViewCurrentReward_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_ViewCurrentReward_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ViewCurrentReward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ViewCurrentReward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_ViewCurrentReward_pargs {
 public:


  virtual ~BrainCloudService_Tournament_ViewCurrentReward_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ViewCurrentReward_result__isset {
  _BrainCloudService_Tournament_ViewCurrentReward_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ViewCurrentReward_result__isset;

class BrainCloudService_Tournament_ViewCurrentReward_result {
 public:

  BrainCloudService_Tournament_ViewCurrentReward_result(const BrainCloudService_Tournament_ViewCurrentReward_result&);
  BrainCloudService_Tournament_ViewCurrentReward_result& operator=(const BrainCloudService_Tournament_ViewCurrentReward_result&);
  BrainCloudService_Tournament_ViewCurrentReward_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_ViewCurrentReward_result() throw();
  std::string success;

  _BrainCloudService_Tournament_ViewCurrentReward_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_ViewCurrentReward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ViewCurrentReward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ViewCurrentReward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ViewCurrentReward_presult__isset {
  _BrainCloudService_Tournament_ViewCurrentReward_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ViewCurrentReward_presult__isset;

class BrainCloudService_Tournament_ViewCurrentReward_presult {
 public:


  virtual ~BrainCloudService_Tournament_ViewCurrentReward_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_ViewCurrentReward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Tournament_ViewReward_args__isset {
  _BrainCloudService_Tournament_ViewReward_args__isset() : leaderboardId(false), versionId(false), clientIndex(false) {}
  bool leaderboardId :1;
  bool versionId :1;
  bool clientIndex :1;
} _BrainCloudService_Tournament_ViewReward_args__isset;

class BrainCloudService_Tournament_ViewReward_args {
 public:

  BrainCloudService_Tournament_ViewReward_args(const BrainCloudService_Tournament_ViewReward_args&);
  BrainCloudService_Tournament_ViewReward_args& operator=(const BrainCloudService_Tournament_ViewReward_args&);
  BrainCloudService_Tournament_ViewReward_args() : leaderboardId(), versionId(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Tournament_ViewReward_args() throw();
  std::string leaderboardId;
  int32_t versionId;
  int32_t clientIndex;

  _BrainCloudService_Tournament_ViewReward_args__isset __isset;

  void __set_leaderboardId(const std::string& val);

  void __set_versionId(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Tournament_ViewReward_args & rhs) const
  {
    if (!(leaderboardId == rhs.leaderboardId))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ViewReward_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ViewReward_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Tournament_ViewReward_pargs {
 public:


  virtual ~BrainCloudService_Tournament_ViewReward_pargs() throw();
  const std::string* leaderboardId;
  const int32_t* versionId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ViewReward_result__isset {
  _BrainCloudService_Tournament_ViewReward_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ViewReward_result__isset;

class BrainCloudService_Tournament_ViewReward_result {
 public:

  BrainCloudService_Tournament_ViewReward_result(const BrainCloudService_Tournament_ViewReward_result&);
  BrainCloudService_Tournament_ViewReward_result& operator=(const BrainCloudService_Tournament_ViewReward_result&);
  BrainCloudService_Tournament_ViewReward_result() : success() {
  }

  virtual ~BrainCloudService_Tournament_ViewReward_result() throw();
  std::string success;

  _BrainCloudService_Tournament_ViewReward_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Tournament_ViewReward_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Tournament_ViewReward_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Tournament_ViewReward_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Tournament_ViewReward_presult__isset {
  _BrainCloudService_Tournament_ViewReward_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Tournament_ViewReward_presult__isset;

class BrainCloudService_Tournament_ViewReward_presult {
 public:


  virtual ~BrainCloudService_Tournament_ViewReward_presult() throw();
  std::string* success;

  _BrainCloudService_Tournament_ViewReward_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_CreateLobby_args__isset {
  _BrainCloudService_Lobby_CreateLobby_args__isset() : lobbyType(false), maxSlots(false), isOpen(false), jsonAttributes(false), clientIndex(false) {}
  bool lobbyType :1;
  bool maxSlots :1;
  bool isOpen :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_CreateLobby_args__isset;

class BrainCloudService_Lobby_CreateLobby_args {
 public:

  BrainCloudService_Lobby_CreateLobby_args(const BrainCloudService_Lobby_CreateLobby_args&);
  BrainCloudService_Lobby_CreateLobby_args& operator=(const BrainCloudService_Lobby_CreateLobby_args&);
  BrainCloudService_Lobby_CreateLobby_args() : lobbyType(( ::Ruyi::SDK::BrainCloudApi::LobbyType::type)0), maxSlots(0), isOpen(0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_CreateLobby_args() throw();
   ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType;
  int32_t maxSlots;
  bool isOpen;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Lobby_CreateLobby_args__isset __isset;

  void __set_lobbyType(const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type val);

  void __set_maxSlots(const int32_t val);

  void __set_isOpen(const bool val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_CreateLobby_args & rhs) const
  {
    if (!(lobbyType == rhs.lobbyType))
      return false;
    if (!(maxSlots == rhs.maxSlots))
      return false;
    if (!(isOpen == rhs.isOpen))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_CreateLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_CreateLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_CreateLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_CreateLobby_pargs() throw();
  const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type* lobbyType;
  const int32_t* maxSlots;
  const bool* isOpen;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_CreateLobby_result__isset {
  _BrainCloudService_Lobby_CreateLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_CreateLobby_result__isset;

class BrainCloudService_Lobby_CreateLobby_result {
 public:

  BrainCloudService_Lobby_CreateLobby_result(const BrainCloudService_Lobby_CreateLobby_result&);
  BrainCloudService_Lobby_CreateLobby_result& operator=(const BrainCloudService_Lobby_CreateLobby_result&);
  BrainCloudService_Lobby_CreateLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_CreateLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_CreateLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_CreateLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_CreateLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_CreateLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_CreateLobby_presult__isset {
  _BrainCloudService_Lobby_CreateLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_CreateLobby_presult__isset;

class BrainCloudService_Lobby_CreateLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_CreateLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_CreateLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_OpenLobby_args__isset {
  _BrainCloudService_Lobby_OpenLobby_args__isset() : lobbyId(false), clientIndex(false) {}
  bool lobbyId :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_OpenLobby_args__isset;

class BrainCloudService_Lobby_OpenLobby_args {
 public:

  BrainCloudService_Lobby_OpenLobby_args(const BrainCloudService_Lobby_OpenLobby_args&);
  BrainCloudService_Lobby_OpenLobby_args& operator=(const BrainCloudService_Lobby_OpenLobby_args&);
  BrainCloudService_Lobby_OpenLobby_args() : lobbyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_OpenLobby_args() throw();
  std::string lobbyId;
  int32_t clientIndex;

  _BrainCloudService_Lobby_OpenLobby_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_OpenLobby_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_OpenLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_OpenLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_OpenLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_OpenLobby_pargs() throw();
  const std::string* lobbyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_OpenLobby_result__isset {
  _BrainCloudService_Lobby_OpenLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_OpenLobby_result__isset;

class BrainCloudService_Lobby_OpenLobby_result {
 public:

  BrainCloudService_Lobby_OpenLobby_result(const BrainCloudService_Lobby_OpenLobby_result&);
  BrainCloudService_Lobby_OpenLobby_result& operator=(const BrainCloudService_Lobby_OpenLobby_result&);
  BrainCloudService_Lobby_OpenLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_OpenLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_OpenLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_OpenLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_OpenLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_OpenLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_OpenLobby_presult__isset {
  _BrainCloudService_Lobby_OpenLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_OpenLobby_presult__isset;

class BrainCloudService_Lobby_OpenLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_OpenLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_OpenLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_CloseLobby_args__isset {
  _BrainCloudService_Lobby_CloseLobby_args__isset() : lobbyId(false), clientIndex(false) {}
  bool lobbyId :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_CloseLobby_args__isset;

class BrainCloudService_Lobby_CloseLobby_args {
 public:

  BrainCloudService_Lobby_CloseLobby_args(const BrainCloudService_Lobby_CloseLobby_args&);
  BrainCloudService_Lobby_CloseLobby_args& operator=(const BrainCloudService_Lobby_CloseLobby_args&);
  BrainCloudService_Lobby_CloseLobby_args() : lobbyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_CloseLobby_args() throw();
  std::string lobbyId;
  int32_t clientIndex;

  _BrainCloudService_Lobby_CloseLobby_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_CloseLobby_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_CloseLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_CloseLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_CloseLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_CloseLobby_pargs() throw();
  const std::string* lobbyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_CloseLobby_result__isset {
  _BrainCloudService_Lobby_CloseLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_CloseLobby_result__isset;

class BrainCloudService_Lobby_CloseLobby_result {
 public:

  BrainCloudService_Lobby_CloseLobby_result(const BrainCloudService_Lobby_CloseLobby_result&);
  BrainCloudService_Lobby_CloseLobby_result& operator=(const BrainCloudService_Lobby_CloseLobby_result&);
  BrainCloudService_Lobby_CloseLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_CloseLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_CloseLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_CloseLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_CloseLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_CloseLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_CloseLobby_presult__isset {
  _BrainCloudService_Lobby_CloseLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_CloseLobby_presult__isset;

class BrainCloudService_Lobby_CloseLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_CloseLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_CloseLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_FindLobbies_args__isset {
  _BrainCloudService_Lobby_FindLobbies_args__isset() : freeSlots(false), maxResults(false), jsonAttributes(false), clientIndex(false) {}
  bool freeSlots :1;
  bool maxResults :1;
  bool jsonAttributes :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_FindLobbies_args__isset;

class BrainCloudService_Lobby_FindLobbies_args {
 public:

  BrainCloudService_Lobby_FindLobbies_args(const BrainCloudService_Lobby_FindLobbies_args&);
  BrainCloudService_Lobby_FindLobbies_args& operator=(const BrainCloudService_Lobby_FindLobbies_args&);
  BrainCloudService_Lobby_FindLobbies_args() : freeSlots(0), maxResults(0), jsonAttributes(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_FindLobbies_args() throw();
  int32_t freeSlots;
  int32_t maxResults;
  std::string jsonAttributes;
  int32_t clientIndex;

  _BrainCloudService_Lobby_FindLobbies_args__isset __isset;

  void __set_freeSlots(const int32_t val);

  void __set_maxResults(const int32_t val);

  void __set_jsonAttributes(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_FindLobbies_args & rhs) const
  {
    if (!(freeSlots == rhs.freeSlots))
      return false;
    if (!(maxResults == rhs.maxResults))
      return false;
    if (!(jsonAttributes == rhs.jsonAttributes))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_FindLobbies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_FindLobbies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_FindLobbies_pargs {
 public:


  virtual ~BrainCloudService_Lobby_FindLobbies_pargs() throw();
  const int32_t* freeSlots;
  const int32_t* maxResults;
  const std::string* jsonAttributes;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_FindLobbies_result__isset {
  _BrainCloudService_Lobby_FindLobbies_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_FindLobbies_result__isset;

class BrainCloudService_Lobby_FindLobbies_result {
 public:

  BrainCloudService_Lobby_FindLobbies_result(const BrainCloudService_Lobby_FindLobbies_result&);
  BrainCloudService_Lobby_FindLobbies_result& operator=(const BrainCloudService_Lobby_FindLobbies_result&);
  BrainCloudService_Lobby_FindLobbies_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_FindLobbies_result() throw();
  std::string success;

  _BrainCloudService_Lobby_FindLobbies_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_FindLobbies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_FindLobbies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_FindLobbies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_FindLobbies_presult__isset {
  _BrainCloudService_Lobby_FindLobbies_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_FindLobbies_presult__isset;

class BrainCloudService_Lobby_FindLobbies_presult {
 public:


  virtual ~BrainCloudService_Lobby_FindLobbies_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_FindLobbies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_FindFriendsLobbies_args__isset {
  _BrainCloudService_Lobby_FindFriendsLobbies_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Lobby_FindFriendsLobbies_args__isset;

class BrainCloudService_Lobby_FindFriendsLobbies_args {
 public:

  BrainCloudService_Lobby_FindFriendsLobbies_args(const BrainCloudService_Lobby_FindFriendsLobbies_args&);
  BrainCloudService_Lobby_FindFriendsLobbies_args& operator=(const BrainCloudService_Lobby_FindFriendsLobbies_args&);
  BrainCloudService_Lobby_FindFriendsLobbies_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_FindFriendsLobbies_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Lobby_FindFriendsLobbies_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_FindFriendsLobbies_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_FindFriendsLobbies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_FindFriendsLobbies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_FindFriendsLobbies_pargs {
 public:


  virtual ~BrainCloudService_Lobby_FindFriendsLobbies_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_FindFriendsLobbies_result__isset {
  _BrainCloudService_Lobby_FindFriendsLobbies_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_FindFriendsLobbies_result__isset;

class BrainCloudService_Lobby_FindFriendsLobbies_result {
 public:

  BrainCloudService_Lobby_FindFriendsLobbies_result(const BrainCloudService_Lobby_FindFriendsLobbies_result&);
  BrainCloudService_Lobby_FindFriendsLobbies_result& operator=(const BrainCloudService_Lobby_FindFriendsLobbies_result&);
  BrainCloudService_Lobby_FindFriendsLobbies_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_FindFriendsLobbies_result() throw();
  std::string success;

  _BrainCloudService_Lobby_FindFriendsLobbies_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_FindFriendsLobbies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_FindFriendsLobbies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_FindFriendsLobbies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_FindFriendsLobbies_presult__isset {
  _BrainCloudService_Lobby_FindFriendsLobbies_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_FindFriendsLobbies_presult__isset;

class BrainCloudService_Lobby_FindFriendsLobbies_presult {
 public:


  virtual ~BrainCloudService_Lobby_FindFriendsLobbies_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_FindFriendsLobbies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_JoinLobby_args__isset {
  _BrainCloudService_Lobby_JoinLobby_args__isset() : lobbyId(false), clientIndex(false) {}
  bool lobbyId :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_JoinLobby_args__isset;

class BrainCloudService_Lobby_JoinLobby_args {
 public:

  BrainCloudService_Lobby_JoinLobby_args(const BrainCloudService_Lobby_JoinLobby_args&);
  BrainCloudService_Lobby_JoinLobby_args& operator=(const BrainCloudService_Lobby_JoinLobby_args&);
  BrainCloudService_Lobby_JoinLobby_args() : lobbyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_JoinLobby_args() throw();
  std::string lobbyId;
  int32_t clientIndex;

  _BrainCloudService_Lobby_JoinLobby_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_JoinLobby_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_JoinLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_JoinLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_JoinLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_JoinLobby_pargs() throw();
  const std::string* lobbyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_JoinLobby_result__isset {
  _BrainCloudService_Lobby_JoinLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_JoinLobby_result__isset;

class BrainCloudService_Lobby_JoinLobby_result {
 public:

  BrainCloudService_Lobby_JoinLobby_result(const BrainCloudService_Lobby_JoinLobby_result&);
  BrainCloudService_Lobby_JoinLobby_result& operator=(const BrainCloudService_Lobby_JoinLobby_result&);
  BrainCloudService_Lobby_JoinLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_JoinLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_JoinLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_JoinLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_JoinLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_JoinLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_JoinLobby_presult__isset {
  _BrainCloudService_Lobby_JoinLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_JoinLobby_presult__isset;

class BrainCloudService_Lobby_JoinLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_JoinLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_JoinLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_LeaveLobby_args__isset {
  _BrainCloudService_Lobby_LeaveLobby_args__isset() : lobbyId(false), clientIndex(false) {}
  bool lobbyId :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_LeaveLobby_args__isset;

class BrainCloudService_Lobby_LeaveLobby_args {
 public:

  BrainCloudService_Lobby_LeaveLobby_args(const BrainCloudService_Lobby_LeaveLobby_args&);
  BrainCloudService_Lobby_LeaveLobby_args& operator=(const BrainCloudService_Lobby_LeaveLobby_args&);
  BrainCloudService_Lobby_LeaveLobby_args() : lobbyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_LeaveLobby_args() throw();
  std::string lobbyId;
  int32_t clientIndex;

  _BrainCloudService_Lobby_LeaveLobby_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_LeaveLobby_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_LeaveLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_LeaveLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_LeaveLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_LeaveLobby_pargs() throw();
  const std::string* lobbyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_LeaveLobby_result__isset {
  _BrainCloudService_Lobby_LeaveLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_LeaveLobby_result__isset;

class BrainCloudService_Lobby_LeaveLobby_result {
 public:

  BrainCloudService_Lobby_LeaveLobby_result(const BrainCloudService_Lobby_LeaveLobby_result&);
  BrainCloudService_Lobby_LeaveLobby_result& operator=(const BrainCloudService_Lobby_LeaveLobby_result&);
  BrainCloudService_Lobby_LeaveLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_LeaveLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_LeaveLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_LeaveLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_LeaveLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_LeaveLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_LeaveLobby_presult__isset {
  _BrainCloudService_Lobby_LeaveLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_LeaveLobby_presult__isset;

class BrainCloudService_Lobby_LeaveLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_LeaveLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_LeaveLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_DestroyLobby_args__isset {
  _BrainCloudService_Lobby_DestroyLobby_args__isset() : lobbyId(false), clientIndex(false) {}
  bool lobbyId :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_DestroyLobby_args__isset;

class BrainCloudService_Lobby_DestroyLobby_args {
 public:

  BrainCloudService_Lobby_DestroyLobby_args(const BrainCloudService_Lobby_DestroyLobby_args&);
  BrainCloudService_Lobby_DestroyLobby_args& operator=(const BrainCloudService_Lobby_DestroyLobby_args&);
  BrainCloudService_Lobby_DestroyLobby_args() : lobbyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_DestroyLobby_args() throw();
  std::string lobbyId;
  int32_t clientIndex;

  _BrainCloudService_Lobby_DestroyLobby_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_DestroyLobby_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_DestroyLobby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_DestroyLobby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_DestroyLobby_pargs {
 public:


  virtual ~BrainCloudService_Lobby_DestroyLobby_pargs() throw();
  const std::string* lobbyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_DestroyLobby_result__isset {
  _BrainCloudService_Lobby_DestroyLobby_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_DestroyLobby_result__isset;

class BrainCloudService_Lobby_DestroyLobby_result {
 public:

  BrainCloudService_Lobby_DestroyLobby_result(const BrainCloudService_Lobby_DestroyLobby_result&);
  BrainCloudService_Lobby_DestroyLobby_result& operator=(const BrainCloudService_Lobby_DestroyLobby_result&);
  BrainCloudService_Lobby_DestroyLobby_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_DestroyLobby_result() throw();
  std::string success;

  _BrainCloudService_Lobby_DestroyLobby_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_DestroyLobby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_DestroyLobby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_DestroyLobby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_DestroyLobby_presult__isset {
  _BrainCloudService_Lobby_DestroyLobby_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_DestroyLobby_presult__isset;

class BrainCloudService_Lobby_DestroyLobby_presult {
 public:


  virtual ~BrainCloudService_Lobby_DestroyLobby_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_DestroyLobby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_StartGame_args__isset {
  _BrainCloudService_Lobby_StartGame_args__isset() : lobbyId(false), connectionString(false), clientIndex(false) {}
  bool lobbyId :1;
  bool connectionString :1;
  bool clientIndex :1;
} _BrainCloudService_Lobby_StartGame_args__isset;

class BrainCloudService_Lobby_StartGame_args {
 public:

  BrainCloudService_Lobby_StartGame_args(const BrainCloudService_Lobby_StartGame_args&);
  BrainCloudService_Lobby_StartGame_args& operator=(const BrainCloudService_Lobby_StartGame_args&);
  BrainCloudService_Lobby_StartGame_args() : lobbyId(), connectionString(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_StartGame_args() throw();
  std::string lobbyId;
  std::string connectionString;
  int32_t clientIndex;

  _BrainCloudService_Lobby_StartGame_args__isset __isset;

  void __set_lobbyId(const std::string& val);

  void __set_connectionString(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_StartGame_args & rhs) const
  {
    if (!(lobbyId == rhs.lobbyId))
      return false;
    if (!(connectionString == rhs.connectionString))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_StartGame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_StartGame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_StartGame_pargs {
 public:


  virtual ~BrainCloudService_Lobby_StartGame_pargs() throw();
  const std::string* lobbyId;
  const std::string* connectionString;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_StartGame_result__isset {
  _BrainCloudService_Lobby_StartGame_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_StartGame_result__isset;

class BrainCloudService_Lobby_StartGame_result {
 public:

  BrainCloudService_Lobby_StartGame_result(const BrainCloudService_Lobby_StartGame_result&);
  BrainCloudService_Lobby_StartGame_result& operator=(const BrainCloudService_Lobby_StartGame_result&);
  BrainCloudService_Lobby_StartGame_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_StartGame_result() throw();
  std::string success;

  _BrainCloudService_Lobby_StartGame_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_StartGame_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_StartGame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_StartGame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_StartGame_presult__isset {
  _BrainCloudService_Lobby_StartGame_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_StartGame_presult__isset;

class BrainCloudService_Lobby_StartGame_presult {
 public:


  virtual ~BrainCloudService_Lobby_StartGame_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_StartGame_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Lobby_GetMyLobbies_args__isset {
  _BrainCloudService_Lobby_GetMyLobbies_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Lobby_GetMyLobbies_args__isset;

class BrainCloudService_Lobby_GetMyLobbies_args {
 public:

  BrainCloudService_Lobby_GetMyLobbies_args(const BrainCloudService_Lobby_GetMyLobbies_args&);
  BrainCloudService_Lobby_GetMyLobbies_args& operator=(const BrainCloudService_Lobby_GetMyLobbies_args&);
  BrainCloudService_Lobby_GetMyLobbies_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Lobby_GetMyLobbies_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Lobby_GetMyLobbies_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Lobby_GetMyLobbies_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_GetMyLobbies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_GetMyLobbies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Lobby_GetMyLobbies_pargs {
 public:


  virtual ~BrainCloudService_Lobby_GetMyLobbies_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_GetMyLobbies_result__isset {
  _BrainCloudService_Lobby_GetMyLobbies_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_GetMyLobbies_result__isset;

class BrainCloudService_Lobby_GetMyLobbies_result {
 public:

  BrainCloudService_Lobby_GetMyLobbies_result(const BrainCloudService_Lobby_GetMyLobbies_result&);
  BrainCloudService_Lobby_GetMyLobbies_result& operator=(const BrainCloudService_Lobby_GetMyLobbies_result&);
  BrainCloudService_Lobby_GetMyLobbies_result() : success() {
  }

  virtual ~BrainCloudService_Lobby_GetMyLobbies_result() throw();
  std::string success;

  _BrainCloudService_Lobby_GetMyLobbies_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Lobby_GetMyLobbies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Lobby_GetMyLobbies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Lobby_GetMyLobbies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Lobby_GetMyLobbies_presult__isset {
  _BrainCloudService_Lobby_GetMyLobbies_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Lobby_GetMyLobbies_presult__isset;

class BrainCloudService_Lobby_GetMyLobbies_presult {
 public:


  virtual ~BrainCloudService_Lobby_GetMyLobbies_presult() throw();
  std::string* success;

  _BrainCloudService_Lobby_GetMyLobbies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_AcceptPartyInvitation_args__isset {
  _BrainCloudService_Party_AcceptPartyInvitation_args__isset() : partyId(false), clientIndex(false) {}
  bool partyId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_AcceptPartyInvitation_args__isset;

class BrainCloudService_Party_AcceptPartyInvitation_args {
 public:

  BrainCloudService_Party_AcceptPartyInvitation_args(const BrainCloudService_Party_AcceptPartyInvitation_args&);
  BrainCloudService_Party_AcceptPartyInvitation_args& operator=(const BrainCloudService_Party_AcceptPartyInvitation_args&);
  BrainCloudService_Party_AcceptPartyInvitation_args() : partyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_AcceptPartyInvitation_args() throw();
  std::string partyId;
  int32_t clientIndex;

  _BrainCloudService_Party_AcceptPartyInvitation_args__isset __isset;

  void __set_partyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_AcceptPartyInvitation_args & rhs) const
  {
    if (!(partyId == rhs.partyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_AcceptPartyInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_AcceptPartyInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_AcceptPartyInvitation_pargs {
 public:


  virtual ~BrainCloudService_Party_AcceptPartyInvitation_pargs() throw();
  const std::string* partyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_AcceptPartyInvitation_result__isset {
  _BrainCloudService_Party_AcceptPartyInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_AcceptPartyInvitation_result__isset;

class BrainCloudService_Party_AcceptPartyInvitation_result {
 public:

  BrainCloudService_Party_AcceptPartyInvitation_result(const BrainCloudService_Party_AcceptPartyInvitation_result&);
  BrainCloudService_Party_AcceptPartyInvitation_result& operator=(const BrainCloudService_Party_AcceptPartyInvitation_result&);
  BrainCloudService_Party_AcceptPartyInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Party_AcceptPartyInvitation_result() throw();
  std::string success;

  _BrainCloudService_Party_AcceptPartyInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_AcceptPartyInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_AcceptPartyInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_AcceptPartyInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_AcceptPartyInvitation_presult__isset {
  _BrainCloudService_Party_AcceptPartyInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_AcceptPartyInvitation_presult__isset;

class BrainCloudService_Party_AcceptPartyInvitation_presult {
 public:


  virtual ~BrainCloudService_Party_AcceptPartyInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Party_AcceptPartyInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_GetPartyInfo_args__isset {
  _BrainCloudService_Party_GetPartyInfo_args__isset() : partyId(false), clientIndex(false) {}
  bool partyId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_GetPartyInfo_args__isset;

class BrainCloudService_Party_GetPartyInfo_args {
 public:

  BrainCloudService_Party_GetPartyInfo_args(const BrainCloudService_Party_GetPartyInfo_args&);
  BrainCloudService_Party_GetPartyInfo_args& operator=(const BrainCloudService_Party_GetPartyInfo_args&);
  BrainCloudService_Party_GetPartyInfo_args() : partyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_GetPartyInfo_args() throw();
  std::string partyId;
  int32_t clientIndex;

  _BrainCloudService_Party_GetPartyInfo_args__isset __isset;

  void __set_partyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_GetPartyInfo_args & rhs) const
  {
    if (!(partyId == rhs.partyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetPartyInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetPartyInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_GetPartyInfo_pargs {
 public:


  virtual ~BrainCloudService_Party_GetPartyInfo_pargs() throw();
  const std::string* partyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetPartyInfo_result__isset {
  _BrainCloudService_Party_GetPartyInfo_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetPartyInfo_result__isset;

class BrainCloudService_Party_GetPartyInfo_result {
 public:

  BrainCloudService_Party_GetPartyInfo_result(const BrainCloudService_Party_GetPartyInfo_result&);
  BrainCloudService_Party_GetPartyInfo_result& operator=(const BrainCloudService_Party_GetPartyInfo_result&);
  BrainCloudService_Party_GetPartyInfo_result() : success() {
  }

  virtual ~BrainCloudService_Party_GetPartyInfo_result() throw();
  std::string success;

  _BrainCloudService_Party_GetPartyInfo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_GetPartyInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetPartyInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetPartyInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetPartyInfo_presult__isset {
  _BrainCloudService_Party_GetPartyInfo_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetPartyInfo_presult__isset;

class BrainCloudService_Party_GetPartyInfo_presult {
 public:


  virtual ~BrainCloudService_Party_GetPartyInfo_presult() throw();
  std::string* success;

  _BrainCloudService_Party_GetPartyInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_JoinParty_args__isset {
  _BrainCloudService_Party_JoinParty_args__isset() : partyId(false), clientIndex(false) {}
  bool partyId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_JoinParty_args__isset;

class BrainCloudService_Party_JoinParty_args {
 public:

  BrainCloudService_Party_JoinParty_args(const BrainCloudService_Party_JoinParty_args&);
  BrainCloudService_Party_JoinParty_args& operator=(const BrainCloudService_Party_JoinParty_args&);
  BrainCloudService_Party_JoinParty_args() : partyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_JoinParty_args() throw();
  std::string partyId;
  int32_t clientIndex;

  _BrainCloudService_Party_JoinParty_args__isset __isset;

  void __set_partyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_JoinParty_args & rhs) const
  {
    if (!(partyId == rhs.partyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_JoinParty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_JoinParty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_JoinParty_pargs {
 public:


  virtual ~BrainCloudService_Party_JoinParty_pargs() throw();
  const std::string* partyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_JoinParty_result__isset {
  _BrainCloudService_Party_JoinParty_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_JoinParty_result__isset;

class BrainCloudService_Party_JoinParty_result {
 public:

  BrainCloudService_Party_JoinParty_result(const BrainCloudService_Party_JoinParty_result&);
  BrainCloudService_Party_JoinParty_result& operator=(const BrainCloudService_Party_JoinParty_result&);
  BrainCloudService_Party_JoinParty_result() : success() {
  }

  virtual ~BrainCloudService_Party_JoinParty_result() throw();
  std::string success;

  _BrainCloudService_Party_JoinParty_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_JoinParty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_JoinParty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_JoinParty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_JoinParty_presult__isset {
  _BrainCloudService_Party_JoinParty_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_JoinParty_presult__isset;

class BrainCloudService_Party_JoinParty_presult {
 public:


  virtual ~BrainCloudService_Party_JoinParty_presult() throw();
  std::string* success;

  _BrainCloudService_Party_JoinParty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_LeaveParty_args__isset {
  _BrainCloudService_Party_LeaveParty_args__isset() : partyId(false), clientIndex(false) {}
  bool partyId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_LeaveParty_args__isset;

class BrainCloudService_Party_LeaveParty_args {
 public:

  BrainCloudService_Party_LeaveParty_args(const BrainCloudService_Party_LeaveParty_args&);
  BrainCloudService_Party_LeaveParty_args& operator=(const BrainCloudService_Party_LeaveParty_args&);
  BrainCloudService_Party_LeaveParty_args() : partyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_LeaveParty_args() throw();
  std::string partyId;
  int32_t clientIndex;

  _BrainCloudService_Party_LeaveParty_args__isset __isset;

  void __set_partyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_LeaveParty_args & rhs) const
  {
    if (!(partyId == rhs.partyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_LeaveParty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_LeaveParty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_LeaveParty_pargs {
 public:


  virtual ~BrainCloudService_Party_LeaveParty_pargs() throw();
  const std::string* partyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_LeaveParty_result__isset {
  _BrainCloudService_Party_LeaveParty_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_LeaveParty_result__isset;

class BrainCloudService_Party_LeaveParty_result {
 public:

  BrainCloudService_Party_LeaveParty_result(const BrainCloudService_Party_LeaveParty_result&);
  BrainCloudService_Party_LeaveParty_result& operator=(const BrainCloudService_Party_LeaveParty_result&);
  BrainCloudService_Party_LeaveParty_result() : success() {
  }

  virtual ~BrainCloudService_Party_LeaveParty_result() throw();
  std::string success;

  _BrainCloudService_Party_LeaveParty_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_LeaveParty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_LeaveParty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_LeaveParty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_LeaveParty_presult__isset {
  _BrainCloudService_Party_LeaveParty_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_LeaveParty_presult__isset;

class BrainCloudService_Party_LeaveParty_presult {
 public:


  virtual ~BrainCloudService_Party_LeaveParty_presult() throw();
  std::string* success;

  _BrainCloudService_Party_LeaveParty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_RejectPartyInvitation_args__isset {
  _BrainCloudService_Party_RejectPartyInvitation_args__isset() : partyId(false), clientIndex(false) {}
  bool partyId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_RejectPartyInvitation_args__isset;

class BrainCloudService_Party_RejectPartyInvitation_args {
 public:

  BrainCloudService_Party_RejectPartyInvitation_args(const BrainCloudService_Party_RejectPartyInvitation_args&);
  BrainCloudService_Party_RejectPartyInvitation_args& operator=(const BrainCloudService_Party_RejectPartyInvitation_args&);
  BrainCloudService_Party_RejectPartyInvitation_args() : partyId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_RejectPartyInvitation_args() throw();
  std::string partyId;
  int32_t clientIndex;

  _BrainCloudService_Party_RejectPartyInvitation_args__isset __isset;

  void __set_partyId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_RejectPartyInvitation_args & rhs) const
  {
    if (!(partyId == rhs.partyId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_RejectPartyInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_RejectPartyInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_RejectPartyInvitation_pargs {
 public:


  virtual ~BrainCloudService_Party_RejectPartyInvitation_pargs() throw();
  const std::string* partyId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_RejectPartyInvitation_result__isset {
  _BrainCloudService_Party_RejectPartyInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_RejectPartyInvitation_result__isset;

class BrainCloudService_Party_RejectPartyInvitation_result {
 public:

  BrainCloudService_Party_RejectPartyInvitation_result(const BrainCloudService_Party_RejectPartyInvitation_result&);
  BrainCloudService_Party_RejectPartyInvitation_result& operator=(const BrainCloudService_Party_RejectPartyInvitation_result&);
  BrainCloudService_Party_RejectPartyInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Party_RejectPartyInvitation_result() throw();
  std::string success;

  _BrainCloudService_Party_RejectPartyInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_RejectPartyInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_RejectPartyInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_RejectPartyInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_RejectPartyInvitation_presult__isset {
  _BrainCloudService_Party_RejectPartyInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_RejectPartyInvitation_presult__isset;

class BrainCloudService_Party_RejectPartyInvitation_presult {
 public:


  virtual ~BrainCloudService_Party_RejectPartyInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Party_RejectPartyInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_SendPartyInvitation_args__isset {
  _BrainCloudService_Party_SendPartyInvitation_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_Party_SendPartyInvitation_args__isset;

class BrainCloudService_Party_SendPartyInvitation_args {
 public:

  BrainCloudService_Party_SendPartyInvitation_args(const BrainCloudService_Party_SendPartyInvitation_args&);
  BrainCloudService_Party_SendPartyInvitation_args& operator=(const BrainCloudService_Party_SendPartyInvitation_args&);
  BrainCloudService_Party_SendPartyInvitation_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_SendPartyInvitation_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_Party_SendPartyInvitation_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_SendPartyInvitation_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_SendPartyInvitation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_SendPartyInvitation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_SendPartyInvitation_pargs {
 public:


  virtual ~BrainCloudService_Party_SendPartyInvitation_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_SendPartyInvitation_result__isset {
  _BrainCloudService_Party_SendPartyInvitation_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_SendPartyInvitation_result__isset;

class BrainCloudService_Party_SendPartyInvitation_result {
 public:

  BrainCloudService_Party_SendPartyInvitation_result(const BrainCloudService_Party_SendPartyInvitation_result&);
  BrainCloudService_Party_SendPartyInvitation_result& operator=(const BrainCloudService_Party_SendPartyInvitation_result&);
  BrainCloudService_Party_SendPartyInvitation_result() : success() {
  }

  virtual ~BrainCloudService_Party_SendPartyInvitation_result() throw();
  std::string success;

  _BrainCloudService_Party_SendPartyInvitation_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_SendPartyInvitation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_SendPartyInvitation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_SendPartyInvitation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_SendPartyInvitation_presult__isset {
  _BrainCloudService_Party_SendPartyInvitation_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_SendPartyInvitation_presult__isset;

class BrainCloudService_Party_SendPartyInvitation_presult {
 public:


  virtual ~BrainCloudService_Party_SendPartyInvitation_presult() throw();
  std::string* success;

  _BrainCloudService_Party_SendPartyInvitation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_ListPartyInvitations_args__isset {
  _BrainCloudService_Party_ListPartyInvitations_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Party_ListPartyInvitations_args__isset;

class BrainCloudService_Party_ListPartyInvitations_args {
 public:

  BrainCloudService_Party_ListPartyInvitations_args(const BrainCloudService_Party_ListPartyInvitations_args&);
  BrainCloudService_Party_ListPartyInvitations_args& operator=(const BrainCloudService_Party_ListPartyInvitations_args&);
  BrainCloudService_Party_ListPartyInvitations_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_ListPartyInvitations_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Party_ListPartyInvitations_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_ListPartyInvitations_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_ListPartyInvitations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_ListPartyInvitations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_ListPartyInvitations_pargs {
 public:


  virtual ~BrainCloudService_Party_ListPartyInvitations_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_ListPartyInvitations_result__isset {
  _BrainCloudService_Party_ListPartyInvitations_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_ListPartyInvitations_result__isset;

class BrainCloudService_Party_ListPartyInvitations_result {
 public:

  BrainCloudService_Party_ListPartyInvitations_result(const BrainCloudService_Party_ListPartyInvitations_result&);
  BrainCloudService_Party_ListPartyInvitations_result& operator=(const BrainCloudService_Party_ListPartyInvitations_result&);
  BrainCloudService_Party_ListPartyInvitations_result() : success() {
  }

  virtual ~BrainCloudService_Party_ListPartyInvitations_result() throw();
  std::string success;

  _BrainCloudService_Party_ListPartyInvitations_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_ListPartyInvitations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_ListPartyInvitations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_ListPartyInvitations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_ListPartyInvitations_presult__isset {
  _BrainCloudService_Party_ListPartyInvitations_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_ListPartyInvitations_presult__isset;

class BrainCloudService_Party_ListPartyInvitations_presult {
 public:


  virtual ~BrainCloudService_Party_ListPartyInvitations_presult() throw();
  std::string* success;

  _BrainCloudService_Party_ListPartyInvitations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_GetFriendsParties_args__isset {
  _BrainCloudService_Party_GetFriendsParties_args__isset() : maxResults(false), clientIndex(false) {}
  bool maxResults :1;
  bool clientIndex :1;
} _BrainCloudService_Party_GetFriendsParties_args__isset;

class BrainCloudService_Party_GetFriendsParties_args {
 public:

  BrainCloudService_Party_GetFriendsParties_args(const BrainCloudService_Party_GetFriendsParties_args&);
  BrainCloudService_Party_GetFriendsParties_args& operator=(const BrainCloudService_Party_GetFriendsParties_args&);
  BrainCloudService_Party_GetFriendsParties_args() : maxResults(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_GetFriendsParties_args() throw();
  int32_t maxResults;
  int32_t clientIndex;

  _BrainCloudService_Party_GetFriendsParties_args__isset __isset;

  void __set_maxResults(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_GetFriendsParties_args & rhs) const
  {
    if (!(maxResults == rhs.maxResults))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetFriendsParties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetFriendsParties_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_GetFriendsParties_pargs {
 public:


  virtual ~BrainCloudService_Party_GetFriendsParties_pargs() throw();
  const int32_t* maxResults;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetFriendsParties_result__isset {
  _BrainCloudService_Party_GetFriendsParties_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetFriendsParties_result__isset;

class BrainCloudService_Party_GetFriendsParties_result {
 public:

  BrainCloudService_Party_GetFriendsParties_result(const BrainCloudService_Party_GetFriendsParties_result&);
  BrainCloudService_Party_GetFriendsParties_result& operator=(const BrainCloudService_Party_GetFriendsParties_result&);
  BrainCloudService_Party_GetFriendsParties_result() : success() {
  }

  virtual ~BrainCloudService_Party_GetFriendsParties_result() throw();
  std::string success;

  _BrainCloudService_Party_GetFriendsParties_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_GetFriendsParties_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetFriendsParties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetFriendsParties_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetFriendsParties_presult__isset {
  _BrainCloudService_Party_GetFriendsParties_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetFriendsParties_presult__isset;

class BrainCloudService_Party_GetFriendsParties_presult {
 public:


  virtual ~BrainCloudService_Party_GetFriendsParties_presult() throw();
  std::string* success;

  _BrainCloudService_Party_GetFriendsParties_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Party_GetMyParty_args__isset {
  _BrainCloudService_Party_GetMyParty_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Party_GetMyParty_args__isset;

class BrainCloudService_Party_GetMyParty_args {
 public:

  BrainCloudService_Party_GetMyParty_args(const BrainCloudService_Party_GetMyParty_args&);
  BrainCloudService_Party_GetMyParty_args& operator=(const BrainCloudService_Party_GetMyParty_args&);
  BrainCloudService_Party_GetMyParty_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Party_GetMyParty_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Party_GetMyParty_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Party_GetMyParty_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetMyParty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetMyParty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Party_GetMyParty_pargs {
 public:


  virtual ~BrainCloudService_Party_GetMyParty_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetMyParty_result__isset {
  _BrainCloudService_Party_GetMyParty_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetMyParty_result__isset;

class BrainCloudService_Party_GetMyParty_result {
 public:

  BrainCloudService_Party_GetMyParty_result(const BrainCloudService_Party_GetMyParty_result&);
  BrainCloudService_Party_GetMyParty_result& operator=(const BrainCloudService_Party_GetMyParty_result&);
  BrainCloudService_Party_GetMyParty_result() : success() {
  }

  virtual ~BrainCloudService_Party_GetMyParty_result() throw();
  std::string success;

  _BrainCloudService_Party_GetMyParty_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Party_GetMyParty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Party_GetMyParty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Party_GetMyParty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Party_GetMyParty_presult__isset {
  _BrainCloudService_Party_GetMyParty_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Party_GetMyParty_presult__isset;

class BrainCloudService_Party_GetMyParty_presult {
 public:


  virtual ~BrainCloudService_Party_GetMyParty_presult() throw();
  std::string* success;

  _BrainCloudService_Party_GetMyParty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Patch_GetGameManifest_args__isset {
  _BrainCloudService_Patch_GetGameManifest_args__isset() : gameId(false), clientIndex(false) {}
  bool gameId :1;
  bool clientIndex :1;
} _BrainCloudService_Patch_GetGameManifest_args__isset;

class BrainCloudService_Patch_GetGameManifest_args {
 public:

  BrainCloudService_Patch_GetGameManifest_args(const BrainCloudService_Patch_GetGameManifest_args&);
  BrainCloudService_Patch_GetGameManifest_args& operator=(const BrainCloudService_Patch_GetGameManifest_args&);
  BrainCloudService_Patch_GetGameManifest_args() : gameId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Patch_GetGameManifest_args() throw();
  std::string gameId;
  int32_t clientIndex;

  _BrainCloudService_Patch_GetGameManifest_args__isset __isset;

  void __set_gameId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Patch_GetGameManifest_args & rhs) const
  {
    if (!(gameId == rhs.gameId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Patch_GetGameManifest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Patch_GetGameManifest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Patch_GetGameManifest_pargs {
 public:


  virtual ~BrainCloudService_Patch_GetGameManifest_pargs() throw();
  const std::string* gameId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Patch_GetGameManifest_result__isset {
  _BrainCloudService_Patch_GetGameManifest_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Patch_GetGameManifest_result__isset;

class BrainCloudService_Patch_GetGameManifest_result {
 public:

  BrainCloudService_Patch_GetGameManifest_result(const BrainCloudService_Patch_GetGameManifest_result&);
  BrainCloudService_Patch_GetGameManifest_result& operator=(const BrainCloudService_Patch_GetGameManifest_result&);
  BrainCloudService_Patch_GetGameManifest_result() : success() {
  }

  virtual ~BrainCloudService_Patch_GetGameManifest_result() throw();
  std::string success;

  _BrainCloudService_Patch_GetGameManifest_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Patch_GetGameManifest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Patch_GetGameManifest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Patch_GetGameManifest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Patch_GetGameManifest_presult__isset {
  _BrainCloudService_Patch_GetGameManifest_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Patch_GetGameManifest_presult__isset;

class BrainCloudService_Patch_GetGameManifest_presult {
 public:


  virtual ~BrainCloudService_Patch_GetGameManifest_presult() throw();
  std::string* success;

  _BrainCloudService_Patch_GetGameManifest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareVideo_args__isset {
  _BrainCloudService_SocialFeed_ShareVideo_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareVideo_args__isset;

class BrainCloudService_SocialFeed_ShareVideo_args {
 public:

  BrainCloudService_SocialFeed_ShareVideo_args(const BrainCloudService_SocialFeed_ShareVideo_args&);
  BrainCloudService_SocialFeed_ShareVideo_args& operator=(const BrainCloudService_SocialFeed_ShareVideo_args&);
  BrainCloudService_SocialFeed_ShareVideo_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareVideo_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareVideo_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareVideo_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareVideo_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareVideo_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareVideo_result__isset {
  _BrainCloudService_SocialFeed_ShareVideo_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareVideo_result__isset;

class BrainCloudService_SocialFeed_ShareVideo_result {
 public:

  BrainCloudService_SocialFeed_ShareVideo_result(const BrainCloudService_SocialFeed_ShareVideo_result&);
  BrainCloudService_SocialFeed_ShareVideo_result& operator=(const BrainCloudService_SocialFeed_ShareVideo_result&);
  BrainCloudService_SocialFeed_ShareVideo_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareVideo_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareVideo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareVideo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareVideo_presult__isset {
  _BrainCloudService_SocialFeed_ShareVideo_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareVideo_presult__isset;

class BrainCloudService_SocialFeed_ShareVideo_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareVideo_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareScreenshot_args__isset {
  _BrainCloudService_SocialFeed_ShareScreenshot_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareScreenshot_args__isset;

class BrainCloudService_SocialFeed_ShareScreenshot_args {
 public:

  BrainCloudService_SocialFeed_ShareScreenshot_args(const BrainCloudService_SocialFeed_ShareScreenshot_args&);
  BrainCloudService_SocialFeed_ShareScreenshot_args& operator=(const BrainCloudService_SocialFeed_ShareScreenshot_args&);
  BrainCloudService_SocialFeed_ShareScreenshot_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareScreenshot_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareScreenshot_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareScreenshot_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareScreenshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareScreenshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareScreenshot_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareScreenshot_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareScreenshot_result__isset {
  _BrainCloudService_SocialFeed_ShareScreenshot_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareScreenshot_result__isset;

class BrainCloudService_SocialFeed_ShareScreenshot_result {
 public:

  BrainCloudService_SocialFeed_ShareScreenshot_result(const BrainCloudService_SocialFeed_ShareScreenshot_result&);
  BrainCloudService_SocialFeed_ShareScreenshot_result& operator=(const BrainCloudService_SocialFeed_ShareScreenshot_result&);
  BrainCloudService_SocialFeed_ShareScreenshot_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareScreenshot_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareScreenshot_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareScreenshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareScreenshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareScreenshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareScreenshot_presult__isset {
  _BrainCloudService_SocialFeed_ShareScreenshot_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareScreenshot_presult__isset;

class BrainCloudService_SocialFeed_ShareScreenshot_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareScreenshot_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareScreenshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareAchievement_args__isset {
  _BrainCloudService_SocialFeed_ShareAchievement_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareAchievement_args__isset;

class BrainCloudService_SocialFeed_ShareAchievement_args {
 public:

  BrainCloudService_SocialFeed_ShareAchievement_args(const BrainCloudService_SocialFeed_ShareAchievement_args&);
  BrainCloudService_SocialFeed_ShareAchievement_args& operator=(const BrainCloudService_SocialFeed_ShareAchievement_args&);
  BrainCloudService_SocialFeed_ShareAchievement_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareAchievement_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareAchievement_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareAchievement_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareAchievement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareAchievement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareAchievement_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareAchievement_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareAchievement_result__isset {
  _BrainCloudService_SocialFeed_ShareAchievement_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareAchievement_result__isset;

class BrainCloudService_SocialFeed_ShareAchievement_result {
 public:

  BrainCloudService_SocialFeed_ShareAchievement_result(const BrainCloudService_SocialFeed_ShareAchievement_result&);
  BrainCloudService_SocialFeed_ShareAchievement_result& operator=(const BrainCloudService_SocialFeed_ShareAchievement_result&);
  BrainCloudService_SocialFeed_ShareAchievement_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareAchievement_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareAchievement_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareAchievement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareAchievement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareAchievement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareAchievement_presult__isset {
  _BrainCloudService_SocialFeed_ShareAchievement_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareAchievement_presult__isset;

class BrainCloudService_SocialFeed_ShareAchievement_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareAchievement_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareAchievement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareApp_args__isset {
  _BrainCloudService_SocialFeed_ShareApp_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareApp_args__isset;

class BrainCloudService_SocialFeed_ShareApp_args {
 public:

  BrainCloudService_SocialFeed_ShareApp_args(const BrainCloudService_SocialFeed_ShareApp_args&);
  BrainCloudService_SocialFeed_ShareApp_args& operator=(const BrainCloudService_SocialFeed_ShareApp_args&);
  BrainCloudService_SocialFeed_ShareApp_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareApp_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareApp_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareApp_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareApp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareApp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareApp_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareApp_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareApp_result__isset {
  _BrainCloudService_SocialFeed_ShareApp_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareApp_result__isset;

class BrainCloudService_SocialFeed_ShareApp_result {
 public:

  BrainCloudService_SocialFeed_ShareApp_result(const BrainCloudService_SocialFeed_ShareApp_result&);
  BrainCloudService_SocialFeed_ShareApp_result& operator=(const BrainCloudService_SocialFeed_ShareApp_result&);
  BrainCloudService_SocialFeed_ShareApp_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareApp_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareApp_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareApp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareApp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareApp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareApp_presult__isset {
  _BrainCloudService_SocialFeed_ShareApp_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareApp_presult__isset;

class BrainCloudService_SocialFeed_ShareApp_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareApp_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareApp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareChannel_args__isset {
  _BrainCloudService_SocialFeed_ShareChannel_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareChannel_args__isset;

class BrainCloudService_SocialFeed_ShareChannel_args {
 public:

  BrainCloudService_SocialFeed_ShareChannel_args(const BrainCloudService_SocialFeed_ShareChannel_args&);
  BrainCloudService_SocialFeed_ShareChannel_args& operator=(const BrainCloudService_SocialFeed_ShareChannel_args&);
  BrainCloudService_SocialFeed_ShareChannel_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareChannel_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareChannel_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareChannel_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareChannel_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareChannel_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareChannel_result__isset {
  _BrainCloudService_SocialFeed_ShareChannel_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareChannel_result__isset;

class BrainCloudService_SocialFeed_ShareChannel_result {
 public:

  BrainCloudService_SocialFeed_ShareChannel_result(const BrainCloudService_SocialFeed_ShareChannel_result&);
  BrainCloudService_SocialFeed_ShareChannel_result& operator=(const BrainCloudService_SocialFeed_ShareChannel_result&);
  BrainCloudService_SocialFeed_ShareChannel_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareChannel_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareChannel_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareChannel_presult__isset {
  _BrainCloudService_SocialFeed_ShareChannel_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareChannel_presult__isset;

class BrainCloudService_SocialFeed_ShareChannel_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareChannel_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareLink_args__isset {
  _BrainCloudService_SocialFeed_ShareLink_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareLink_args__isset;

class BrainCloudService_SocialFeed_ShareLink_args {
 public:

  BrainCloudService_SocialFeed_ShareLink_args(const BrainCloudService_SocialFeed_ShareLink_args&);
  BrainCloudService_SocialFeed_ShareLink_args& operator=(const BrainCloudService_SocialFeed_ShareLink_args&);
  BrainCloudService_SocialFeed_ShareLink_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareLink_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareLink_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareLink_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareLink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareLink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareLink_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareLink_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareLink_result__isset {
  _BrainCloudService_SocialFeed_ShareLink_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareLink_result__isset;

class BrainCloudService_SocialFeed_ShareLink_result {
 public:

  BrainCloudService_SocialFeed_ShareLink_result(const BrainCloudService_SocialFeed_ShareLink_result&);
  BrainCloudService_SocialFeed_ShareLink_result& operator=(const BrainCloudService_SocialFeed_ShareLink_result&);
  BrainCloudService_SocialFeed_ShareLink_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareLink_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareLink_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareLink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareLink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareLink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareLink_presult__isset {
  _BrainCloudService_SocialFeed_ShareLink_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareLink_presult__isset;

class BrainCloudService_SocialFeed_ShareLink_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareLink_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareLink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ShareGameGuide_args__isset {
  _BrainCloudService_SocialFeed_ShareGameGuide_args__isset() : timestamp(false), resource(false), tagged(false), show(false), block(false), clientIndex(false) {}
  bool timestamp :1;
  bool resource :1;
  bool tagged :1;
  bool show :1;
  bool block :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ShareGameGuide_args__isset;

class BrainCloudService_SocialFeed_ShareGameGuide_args {
 public:

  BrainCloudService_SocialFeed_ShareGameGuide_args(const BrainCloudService_SocialFeed_ShareGameGuide_args&);
  BrainCloudService_SocialFeed_ShareGameGuide_args& operator=(const BrainCloudService_SocialFeed_ShareGameGuide_args&);
  BrainCloudService_SocialFeed_ShareGameGuide_args() : timestamp(0), resource(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ShareGameGuide_args() throw();
  int32_t timestamp;
  std::string resource;
  std::vector<std::string>  tagged;
  std::vector<std::string>  show;
  std::vector<std::string>  block;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ShareGameGuide_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_tagged(const std::vector<std::string> & val);

  void __set_show(const std::vector<std::string> & val);

  void __set_block(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ShareGameGuide_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(tagged == rhs.tagged))
      return false;
    if (!(show == rhs.show))
      return false;
    if (!(block == rhs.block))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareGameGuide_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareGameGuide_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ShareGameGuide_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareGameGuide_pargs() throw();
  const int32_t* timestamp;
  const std::string* resource;
  const std::vector<std::string> * tagged;
  const std::vector<std::string> * show;
  const std::vector<std::string> * block;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareGameGuide_result__isset {
  _BrainCloudService_SocialFeed_ShareGameGuide_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareGameGuide_result__isset;

class BrainCloudService_SocialFeed_ShareGameGuide_result {
 public:

  BrainCloudService_SocialFeed_ShareGameGuide_result(const BrainCloudService_SocialFeed_ShareGameGuide_result&);
  BrainCloudService_SocialFeed_ShareGameGuide_result& operator=(const BrainCloudService_SocialFeed_ShareGameGuide_result&);
  BrainCloudService_SocialFeed_ShareGameGuide_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ShareGameGuide_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ShareGameGuide_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ShareGameGuide_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ShareGameGuide_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ShareGameGuide_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ShareGameGuide_presult__isset {
  _BrainCloudService_SocialFeed_ShareGameGuide_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ShareGameGuide_presult__isset;

class BrainCloudService_SocialFeed_ShareGameGuide_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ShareGameGuide_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ShareGameGuide_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ReadSocialFeed_args__isset {
  _BrainCloudService_SocialFeed_ReadSocialFeed_args__isset() : skip(false), limit(false), clientIndex(false) {}
  bool skip :1;
  bool limit :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ReadSocialFeed_args__isset;

class BrainCloudService_SocialFeed_ReadSocialFeed_args {
 public:

  BrainCloudService_SocialFeed_ReadSocialFeed_args(const BrainCloudService_SocialFeed_ReadSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadSocialFeed_args& operator=(const BrainCloudService_SocialFeed_ReadSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadSocialFeed_args() : skip(0), limit(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ReadSocialFeed_args() throw();
  int32_t skip;
  int32_t limit;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ReadSocialFeed_args__isset __isset;

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ReadSocialFeed_args & rhs) const
  {
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadSocialFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadSocialFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ReadSocialFeed_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadSocialFeed_pargs() throw();
  const int32_t* skip;
  const int32_t* limit;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadSocialFeed_result__isset {
  _BrainCloudService_SocialFeed_ReadSocialFeed_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadSocialFeed_result__isset;

class BrainCloudService_SocialFeed_ReadSocialFeed_result {
 public:

  BrainCloudService_SocialFeed_ReadSocialFeed_result(const BrainCloudService_SocialFeed_ReadSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadSocialFeed_result& operator=(const BrainCloudService_SocialFeed_ReadSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadSocialFeed_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ReadSocialFeed_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ReadSocialFeed_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ReadSocialFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadSocialFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadSocialFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadSocialFeed_presult__isset {
  _BrainCloudService_SocialFeed_ReadSocialFeed_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadSocialFeed_presult__isset;

class BrainCloudService_SocialFeed_ReadSocialFeed_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadSocialFeed_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ReadSocialFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args__isset {
  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args__isset() : skip(false), limit(false), playerIds(false), clientIndex(false) {}
  bool skip :1;
  bool limit :1;
  bool playerIds :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args__isset;

class BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args {
 public:

  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args(const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args& operator=(const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args() : skip(0), limit(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args() throw();
  int32_t skip;
  int32_t limit;
  std::vector<std::string>  playerIds;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args__isset __isset;

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_playerIds(const std::vector<std::string> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args & rhs) const
  {
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(playerIds == rhs.playerIds))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ReadFilteredSocialFeed_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadFilteredSocialFeed_pargs() throw();
  const int32_t* skip;
  const int32_t* limit;
  const std::vector<std::string> * playerIds;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result__isset {
  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result__isset;

class BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result {
 public:

  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result(const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result& operator=(const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadFilteredSocialFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult__isset {
  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult__isset;

class BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ReadFilteredSocialFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args__isset {
  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args__isset() : skip(false), limit(false), clientIndex(false) {}
  bool skip :1;
  bool limit :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args__isset;

class BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args {
 public:

  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args(const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args& operator=(const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args&);
  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args() : skip(0), limit(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args() throw();
  int32_t skip;
  int32_t limit;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args__isset __isset;

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args & rhs) const
  {
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ReadFriendsSocialFeed_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadFriendsSocialFeed_pargs() throw();
  const int32_t* skip;
  const int32_t* limit;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result__isset {
  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result__isset;

class BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result {
 public:

  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result(const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result& operator=(const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result&);
  BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadFriendsSocialFeed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult__isset {
  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult__isset;

class BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ReadFriendsSocialFeed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_PostComment_args__isset {
  _BrainCloudService_SocialFeed_PostComment_args__isset() : timestamp(false), parentId(false), content(false), clientIndex(false) {}
  bool timestamp :1;
  bool parentId :1;
  bool content :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_PostComment_args__isset;

class BrainCloudService_SocialFeed_PostComment_args {
 public:

  BrainCloudService_SocialFeed_PostComment_args(const BrainCloudService_SocialFeed_PostComment_args&);
  BrainCloudService_SocialFeed_PostComment_args& operator=(const BrainCloudService_SocialFeed_PostComment_args&);
  BrainCloudService_SocialFeed_PostComment_args() : timestamp(0), parentId(), content(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_PostComment_args() throw();
  int32_t timestamp;
  std::string parentId;
  std::string content;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_PostComment_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_parentId(const std::string& val);

  void __set_content(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_PostComment_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_PostComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_PostComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_PostComment_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_PostComment_pargs() throw();
  const int32_t* timestamp;
  const std::string* parentId;
  const std::string* content;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_PostComment_result__isset {
  _BrainCloudService_SocialFeed_PostComment_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_PostComment_result__isset;

class BrainCloudService_SocialFeed_PostComment_result {
 public:

  BrainCloudService_SocialFeed_PostComment_result(const BrainCloudService_SocialFeed_PostComment_result&);
  BrainCloudService_SocialFeed_PostComment_result& operator=(const BrainCloudService_SocialFeed_PostComment_result&);
  BrainCloudService_SocialFeed_PostComment_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_PostComment_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_PostComment_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_PostComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_PostComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_PostComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_PostComment_presult__isset {
  _BrainCloudService_SocialFeed_PostComment_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_PostComment_presult__isset;

class BrainCloudService_SocialFeed_PostComment_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_PostComment_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_PostComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_PostCommentReply_args__isset {
  _BrainCloudService_SocialFeed_PostCommentReply_args__isset() : timestamp(false), parentId(false), content(false), clientIndex(false) {}
  bool timestamp :1;
  bool parentId :1;
  bool content :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_PostCommentReply_args__isset;

class BrainCloudService_SocialFeed_PostCommentReply_args {
 public:

  BrainCloudService_SocialFeed_PostCommentReply_args(const BrainCloudService_SocialFeed_PostCommentReply_args&);
  BrainCloudService_SocialFeed_PostCommentReply_args& operator=(const BrainCloudService_SocialFeed_PostCommentReply_args&);
  BrainCloudService_SocialFeed_PostCommentReply_args() : timestamp(0), parentId(), content(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_PostCommentReply_args() throw();
  int32_t timestamp;
  std::string parentId;
  std::string content;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_PostCommentReply_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_parentId(const std::string& val);

  void __set_content(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_PostCommentReply_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_PostCommentReply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_PostCommentReply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_PostCommentReply_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_PostCommentReply_pargs() throw();
  const int32_t* timestamp;
  const std::string* parentId;
  const std::string* content;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_PostCommentReply_result__isset {
  _BrainCloudService_SocialFeed_PostCommentReply_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_PostCommentReply_result__isset;

class BrainCloudService_SocialFeed_PostCommentReply_result {
 public:

  BrainCloudService_SocialFeed_PostCommentReply_result(const BrainCloudService_SocialFeed_PostCommentReply_result&);
  BrainCloudService_SocialFeed_PostCommentReply_result& operator=(const BrainCloudService_SocialFeed_PostCommentReply_result&);
  BrainCloudService_SocialFeed_PostCommentReply_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_PostCommentReply_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_PostCommentReply_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_PostCommentReply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_PostCommentReply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_PostCommentReply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_PostCommentReply_presult__isset {
  _BrainCloudService_SocialFeed_PostCommentReply_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_PostCommentReply_presult__isset;

class BrainCloudService_SocialFeed_PostCommentReply_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_PostCommentReply_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_PostCommentReply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ReadComments_args__isset {
  _BrainCloudService_SocialFeed_ReadComments_args__isset() : skip(false), limit(false), parentId(false), clientIndex(false) {}
  bool skip :1;
  bool limit :1;
  bool parentId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ReadComments_args__isset;

class BrainCloudService_SocialFeed_ReadComments_args {
 public:

  BrainCloudService_SocialFeed_ReadComments_args(const BrainCloudService_SocialFeed_ReadComments_args&);
  BrainCloudService_SocialFeed_ReadComments_args& operator=(const BrainCloudService_SocialFeed_ReadComments_args&);
  BrainCloudService_SocialFeed_ReadComments_args() : skip(0), limit(0), parentId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ReadComments_args() throw();
  int32_t skip;
  int32_t limit;
  std::string parentId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ReadComments_args__isset __isset;

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_parentId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ReadComments_args & rhs) const
  {
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadComments_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadComments_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ReadComments_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadComments_pargs() throw();
  const int32_t* skip;
  const int32_t* limit;
  const std::string* parentId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadComments_result__isset {
  _BrainCloudService_SocialFeed_ReadComments_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadComments_result__isset;

class BrainCloudService_SocialFeed_ReadComments_result {
 public:

  BrainCloudService_SocialFeed_ReadComments_result(const BrainCloudService_SocialFeed_ReadComments_result&);
  BrainCloudService_SocialFeed_ReadComments_result& operator=(const BrainCloudService_SocialFeed_ReadComments_result&);
  BrainCloudService_SocialFeed_ReadComments_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ReadComments_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ReadComments_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ReadComments_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadComments_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadComments_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadComments_presult__isset {
  _BrainCloudService_SocialFeed_ReadComments_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadComments_presult__isset;

class BrainCloudService_SocialFeed_ReadComments_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadComments_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ReadComments_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_ReadCommentReplies_args__isset {
  _BrainCloudService_SocialFeed_ReadCommentReplies_args__isset() : skip(false), limit(false), parentId(false), clientIndex(false) {}
  bool skip :1;
  bool limit :1;
  bool parentId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_ReadCommentReplies_args__isset;

class BrainCloudService_SocialFeed_ReadCommentReplies_args {
 public:

  BrainCloudService_SocialFeed_ReadCommentReplies_args(const BrainCloudService_SocialFeed_ReadCommentReplies_args&);
  BrainCloudService_SocialFeed_ReadCommentReplies_args& operator=(const BrainCloudService_SocialFeed_ReadCommentReplies_args&);
  BrainCloudService_SocialFeed_ReadCommentReplies_args() : skip(0), limit(0), parentId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_ReadCommentReplies_args() throw();
  int32_t skip;
  int32_t limit;
  std::string parentId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_ReadCommentReplies_args__isset __isset;

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_parentId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_ReadCommentReplies_args & rhs) const
  {
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(parentId == rhs.parentId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadCommentReplies_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadCommentReplies_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_ReadCommentReplies_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadCommentReplies_pargs() throw();
  const int32_t* skip;
  const int32_t* limit;
  const std::string* parentId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadCommentReplies_result__isset {
  _BrainCloudService_SocialFeed_ReadCommentReplies_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadCommentReplies_result__isset;

class BrainCloudService_SocialFeed_ReadCommentReplies_result {
 public:

  BrainCloudService_SocialFeed_ReadCommentReplies_result(const BrainCloudService_SocialFeed_ReadCommentReplies_result&);
  BrainCloudService_SocialFeed_ReadCommentReplies_result& operator=(const BrainCloudService_SocialFeed_ReadCommentReplies_result&);
  BrainCloudService_SocialFeed_ReadCommentReplies_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_ReadCommentReplies_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_ReadCommentReplies_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_ReadCommentReplies_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_ReadCommentReplies_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_ReadCommentReplies_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_ReadCommentReplies_presult__isset {
  _BrainCloudService_SocialFeed_ReadCommentReplies_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_ReadCommentReplies_presult__isset;

class BrainCloudService_SocialFeed_ReadCommentReplies_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_ReadCommentReplies_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_ReadCommentReplies_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_LikeComment_args__isset {
  _BrainCloudService_SocialFeed_LikeComment_args__isset() : socialFeedId(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_LikeComment_args__isset;

class BrainCloudService_SocialFeed_LikeComment_args {
 public:

  BrainCloudService_SocialFeed_LikeComment_args(const BrainCloudService_SocialFeed_LikeComment_args&);
  BrainCloudService_SocialFeed_LikeComment_args& operator=(const BrainCloudService_SocialFeed_LikeComment_args&);
  BrainCloudService_SocialFeed_LikeComment_args() : socialFeedId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_LikeComment_args() throw();
  std::string socialFeedId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_LikeComment_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_LikeComment_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_LikeComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_LikeComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_LikeComment_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_LikeComment_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_LikeComment_result__isset {
  _BrainCloudService_SocialFeed_LikeComment_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_LikeComment_result__isset;

class BrainCloudService_SocialFeed_LikeComment_result {
 public:

  BrainCloudService_SocialFeed_LikeComment_result(const BrainCloudService_SocialFeed_LikeComment_result&);
  BrainCloudService_SocialFeed_LikeComment_result& operator=(const BrainCloudService_SocialFeed_LikeComment_result&);
  BrainCloudService_SocialFeed_LikeComment_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_LikeComment_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_LikeComment_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_LikeComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_LikeComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_LikeComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_LikeComment_presult__isset {
  _BrainCloudService_SocialFeed_LikeComment_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_LikeComment_presult__isset;

class BrainCloudService_SocialFeed_LikeComment_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_LikeComment_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_LikeComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_LikeActivity_args__isset {
  _BrainCloudService_SocialFeed_LikeActivity_args__isset() : socialFeedId(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_LikeActivity_args__isset;

class BrainCloudService_SocialFeed_LikeActivity_args {
 public:

  BrainCloudService_SocialFeed_LikeActivity_args(const BrainCloudService_SocialFeed_LikeActivity_args&);
  BrainCloudService_SocialFeed_LikeActivity_args& operator=(const BrainCloudService_SocialFeed_LikeActivity_args&);
  BrainCloudService_SocialFeed_LikeActivity_args() : socialFeedId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_LikeActivity_args() throw();
  std::string socialFeedId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_LikeActivity_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_LikeActivity_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_LikeActivity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_LikeActivity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_LikeActivity_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_LikeActivity_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_LikeActivity_result__isset {
  _BrainCloudService_SocialFeed_LikeActivity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_LikeActivity_result__isset;

class BrainCloudService_SocialFeed_LikeActivity_result {
 public:

  BrainCloudService_SocialFeed_LikeActivity_result(const BrainCloudService_SocialFeed_LikeActivity_result&);
  BrainCloudService_SocialFeed_LikeActivity_result& operator=(const BrainCloudService_SocialFeed_LikeActivity_result&);
  BrainCloudService_SocialFeed_LikeActivity_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_LikeActivity_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_LikeActivity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_LikeActivity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_LikeActivity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_LikeActivity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_LikeActivity_presult__isset {
  _BrainCloudService_SocialFeed_LikeActivity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_LikeActivity_presult__isset;

class BrainCloudService_SocialFeed_LikeActivity_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_LikeActivity_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_LikeActivity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_UnlikeComment_args__isset {
  _BrainCloudService_SocialFeed_UnlikeComment_args__isset() : socialFeedId(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_UnlikeComment_args__isset;

class BrainCloudService_SocialFeed_UnlikeComment_args {
 public:

  BrainCloudService_SocialFeed_UnlikeComment_args(const BrainCloudService_SocialFeed_UnlikeComment_args&);
  BrainCloudService_SocialFeed_UnlikeComment_args& operator=(const BrainCloudService_SocialFeed_UnlikeComment_args&);
  BrainCloudService_SocialFeed_UnlikeComment_args() : socialFeedId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_UnlikeComment_args() throw();
  std::string socialFeedId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_UnlikeComment_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_UnlikeComment_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnlikeComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnlikeComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_UnlikeComment_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_UnlikeComment_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnlikeComment_result__isset {
  _BrainCloudService_SocialFeed_UnlikeComment_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnlikeComment_result__isset;

class BrainCloudService_SocialFeed_UnlikeComment_result {
 public:

  BrainCloudService_SocialFeed_UnlikeComment_result(const BrainCloudService_SocialFeed_UnlikeComment_result&);
  BrainCloudService_SocialFeed_UnlikeComment_result& operator=(const BrainCloudService_SocialFeed_UnlikeComment_result&);
  BrainCloudService_SocialFeed_UnlikeComment_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_UnlikeComment_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_UnlikeComment_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_UnlikeComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnlikeComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnlikeComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnlikeComment_presult__isset {
  _BrainCloudService_SocialFeed_UnlikeComment_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnlikeComment_presult__isset;

class BrainCloudService_SocialFeed_UnlikeComment_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_UnlikeComment_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_UnlikeComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_UnlikeActivity_args__isset {
  _BrainCloudService_SocialFeed_UnlikeActivity_args__isset() : socialFeedId(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_UnlikeActivity_args__isset;

class BrainCloudService_SocialFeed_UnlikeActivity_args {
 public:

  BrainCloudService_SocialFeed_UnlikeActivity_args(const BrainCloudService_SocialFeed_UnlikeActivity_args&);
  BrainCloudService_SocialFeed_UnlikeActivity_args& operator=(const BrainCloudService_SocialFeed_UnlikeActivity_args&);
  BrainCloudService_SocialFeed_UnlikeActivity_args() : socialFeedId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_UnlikeActivity_args() throw();
  std::string socialFeedId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_UnlikeActivity_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_UnlikeActivity_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnlikeActivity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnlikeActivity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_UnlikeActivity_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_UnlikeActivity_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnlikeActivity_result__isset {
  _BrainCloudService_SocialFeed_UnlikeActivity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnlikeActivity_result__isset;

class BrainCloudService_SocialFeed_UnlikeActivity_result {
 public:

  BrainCloudService_SocialFeed_UnlikeActivity_result(const BrainCloudService_SocialFeed_UnlikeActivity_result&);
  BrainCloudService_SocialFeed_UnlikeActivity_result& operator=(const BrainCloudService_SocialFeed_UnlikeActivity_result&);
  BrainCloudService_SocialFeed_UnlikeActivity_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_UnlikeActivity_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_UnlikeActivity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_UnlikeActivity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnlikeActivity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnlikeActivity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnlikeActivity_presult__isset {
  _BrainCloudService_SocialFeed_UnlikeActivity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnlikeActivity_presult__isset;

class BrainCloudService_SocialFeed_UnlikeActivity_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_UnlikeActivity_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_UnlikeActivity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_SetFeedVisibility_args__isset {
  _BrainCloudService_SocialFeed_SetFeedVisibility_args__isset() : visibility(false), clientIndex(false) {}
  bool visibility :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_SetFeedVisibility_args__isset;

class BrainCloudService_SocialFeed_SetFeedVisibility_args {
 public:

  BrainCloudService_SocialFeed_SetFeedVisibility_args(const BrainCloudService_SocialFeed_SetFeedVisibility_args&);
  BrainCloudService_SocialFeed_SetFeedVisibility_args& operator=(const BrainCloudService_SocialFeed_SetFeedVisibility_args&);
  BrainCloudService_SocialFeed_SetFeedVisibility_args() : visibility(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_SetFeedVisibility_args() throw();
  std::string visibility;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_SetFeedVisibility_args__isset __isset;

  void __set_visibility(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_SetFeedVisibility_args & rhs) const
  {
    if (!(visibility == rhs.visibility))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_SetFeedVisibility_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_SetFeedVisibility_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_SetFeedVisibility_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_SetFeedVisibility_pargs() throw();
  const std::string* visibility;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_SetFeedVisibility_result__isset {
  _BrainCloudService_SocialFeed_SetFeedVisibility_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_SetFeedVisibility_result__isset;

class BrainCloudService_SocialFeed_SetFeedVisibility_result {
 public:

  BrainCloudService_SocialFeed_SetFeedVisibility_result(const BrainCloudService_SocialFeed_SetFeedVisibility_result&);
  BrainCloudService_SocialFeed_SetFeedVisibility_result& operator=(const BrainCloudService_SocialFeed_SetFeedVisibility_result&);
  BrainCloudService_SocialFeed_SetFeedVisibility_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_SetFeedVisibility_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_SetFeedVisibility_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_SetFeedVisibility_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_SetFeedVisibility_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_SetFeedVisibility_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_SetFeedVisibility_presult__isset {
  _BrainCloudService_SocialFeed_SetFeedVisibility_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_SetFeedVisibility_presult__isset;

class BrainCloudService_SocialFeed_SetFeedVisibility_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_SetFeedVisibility_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_SetFeedVisibility_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_BlockPlayer_args__isset {
  _BrainCloudService_SocialFeed_BlockPlayer_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_BlockPlayer_args__isset;

class BrainCloudService_SocialFeed_BlockPlayer_args {
 public:

  BrainCloudService_SocialFeed_BlockPlayer_args(const BrainCloudService_SocialFeed_BlockPlayer_args&);
  BrainCloudService_SocialFeed_BlockPlayer_args& operator=(const BrainCloudService_SocialFeed_BlockPlayer_args&);
  BrainCloudService_SocialFeed_BlockPlayer_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_BlockPlayer_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_BlockPlayer_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_BlockPlayer_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_BlockPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_BlockPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_BlockPlayer_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_BlockPlayer_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_BlockPlayer_result__isset {
  _BrainCloudService_SocialFeed_BlockPlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_BlockPlayer_result__isset;

class BrainCloudService_SocialFeed_BlockPlayer_result {
 public:

  BrainCloudService_SocialFeed_BlockPlayer_result(const BrainCloudService_SocialFeed_BlockPlayer_result&);
  BrainCloudService_SocialFeed_BlockPlayer_result& operator=(const BrainCloudService_SocialFeed_BlockPlayer_result&);
  BrainCloudService_SocialFeed_BlockPlayer_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_BlockPlayer_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_BlockPlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_BlockPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_BlockPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_BlockPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_BlockPlayer_presult__isset {
  _BrainCloudService_SocialFeed_BlockPlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_BlockPlayer_presult__isset;

class BrainCloudService_SocialFeed_BlockPlayer_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_BlockPlayer_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_BlockPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_HidePlayer_args__isset {
  _BrainCloudService_SocialFeed_HidePlayer_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_HidePlayer_args__isset;

class BrainCloudService_SocialFeed_HidePlayer_args {
 public:

  BrainCloudService_SocialFeed_HidePlayer_args(const BrainCloudService_SocialFeed_HidePlayer_args&);
  BrainCloudService_SocialFeed_HidePlayer_args& operator=(const BrainCloudService_SocialFeed_HidePlayer_args&);
  BrainCloudService_SocialFeed_HidePlayer_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_HidePlayer_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_HidePlayer_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_HidePlayer_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_HidePlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_HidePlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_HidePlayer_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_HidePlayer_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_HidePlayer_result__isset {
  _BrainCloudService_SocialFeed_HidePlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_HidePlayer_result__isset;

class BrainCloudService_SocialFeed_HidePlayer_result {
 public:

  BrainCloudService_SocialFeed_HidePlayer_result(const BrainCloudService_SocialFeed_HidePlayer_result&);
  BrainCloudService_SocialFeed_HidePlayer_result& operator=(const BrainCloudService_SocialFeed_HidePlayer_result&);
  BrainCloudService_SocialFeed_HidePlayer_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_HidePlayer_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_HidePlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_HidePlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_HidePlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_HidePlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_HidePlayer_presult__isset {
  _BrainCloudService_SocialFeed_HidePlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_HidePlayer_presult__isset;

class BrainCloudService_SocialFeed_HidePlayer_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_HidePlayer_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_HidePlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_UnblockPlayer_args__isset {
  _BrainCloudService_SocialFeed_UnblockPlayer_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_UnblockPlayer_args__isset;

class BrainCloudService_SocialFeed_UnblockPlayer_args {
 public:

  BrainCloudService_SocialFeed_UnblockPlayer_args(const BrainCloudService_SocialFeed_UnblockPlayer_args&);
  BrainCloudService_SocialFeed_UnblockPlayer_args& operator=(const BrainCloudService_SocialFeed_UnblockPlayer_args&);
  BrainCloudService_SocialFeed_UnblockPlayer_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_UnblockPlayer_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_UnblockPlayer_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_UnblockPlayer_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnblockPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnblockPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_UnblockPlayer_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_UnblockPlayer_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnblockPlayer_result__isset {
  _BrainCloudService_SocialFeed_UnblockPlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnblockPlayer_result__isset;

class BrainCloudService_SocialFeed_UnblockPlayer_result {
 public:

  BrainCloudService_SocialFeed_UnblockPlayer_result(const BrainCloudService_SocialFeed_UnblockPlayer_result&);
  BrainCloudService_SocialFeed_UnblockPlayer_result& operator=(const BrainCloudService_SocialFeed_UnblockPlayer_result&);
  BrainCloudService_SocialFeed_UnblockPlayer_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_UnblockPlayer_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_UnblockPlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_UnblockPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnblockPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnblockPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnblockPlayer_presult__isset {
  _BrainCloudService_SocialFeed_UnblockPlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnblockPlayer_presult__isset;

class BrainCloudService_SocialFeed_UnblockPlayer_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_UnblockPlayer_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_UnblockPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_UnhidePlayer_args__isset {
  _BrainCloudService_SocialFeed_UnhidePlayer_args__isset() : playerId(false), clientIndex(false) {}
  bool playerId :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_UnhidePlayer_args__isset;

class BrainCloudService_SocialFeed_UnhidePlayer_args {
 public:

  BrainCloudService_SocialFeed_UnhidePlayer_args(const BrainCloudService_SocialFeed_UnhidePlayer_args&);
  BrainCloudService_SocialFeed_UnhidePlayer_args& operator=(const BrainCloudService_SocialFeed_UnhidePlayer_args&);
  BrainCloudService_SocialFeed_UnhidePlayer_args() : playerId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_UnhidePlayer_args() throw();
  std::string playerId;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_UnhidePlayer_args__isset __isset;

  void __set_playerId(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_UnhidePlayer_args & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnhidePlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnhidePlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_UnhidePlayer_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_UnhidePlayer_pargs() throw();
  const std::string* playerId;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnhidePlayer_result__isset {
  _BrainCloudService_SocialFeed_UnhidePlayer_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnhidePlayer_result__isset;

class BrainCloudService_SocialFeed_UnhidePlayer_result {
 public:

  BrainCloudService_SocialFeed_UnhidePlayer_result(const BrainCloudService_SocialFeed_UnhidePlayer_result&);
  BrainCloudService_SocialFeed_UnhidePlayer_result& operator=(const BrainCloudService_SocialFeed_UnhidePlayer_result&);
  BrainCloudService_SocialFeed_UnhidePlayer_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_UnhidePlayer_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_UnhidePlayer_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_UnhidePlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_UnhidePlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_UnhidePlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_UnhidePlayer_presult__isset {
  _BrainCloudService_SocialFeed_UnhidePlayer_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_UnhidePlayer_presult__isset;

class BrainCloudService_SocialFeed_UnhidePlayer_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_UnhidePlayer_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_UnhidePlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_GetActivity_args__isset {
  _BrainCloudService_SocialFeed_GetActivity_args__isset() : socialFeedId(false), depth(false), skip(false), limit(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool depth :1;
  bool skip :1;
  bool limit :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_GetActivity_args__isset;

class BrainCloudService_SocialFeed_GetActivity_args {
 public:

  BrainCloudService_SocialFeed_GetActivity_args(const BrainCloudService_SocialFeed_GetActivity_args&);
  BrainCloudService_SocialFeed_GetActivity_args& operator=(const BrainCloudService_SocialFeed_GetActivity_args&);
  BrainCloudService_SocialFeed_GetActivity_args() : socialFeedId(), depth(0), skip(0), limit(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_GetActivity_args() throw();
  std::string socialFeedId;
  int32_t depth;
  int32_t skip;
  int32_t limit;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_GetActivity_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_depth(const int32_t val);

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_GetActivity_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(depth == rhs.depth))
      return false;
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_GetActivity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_GetActivity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_GetActivity_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_GetActivity_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* depth;
  const int32_t* skip;
  const int32_t* limit;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_GetActivity_result__isset {
  _BrainCloudService_SocialFeed_GetActivity_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_GetActivity_result__isset;

class BrainCloudService_SocialFeed_GetActivity_result {
 public:

  BrainCloudService_SocialFeed_GetActivity_result(const BrainCloudService_SocialFeed_GetActivity_result&);
  BrainCloudService_SocialFeed_GetActivity_result& operator=(const BrainCloudService_SocialFeed_GetActivity_result&);
  BrainCloudService_SocialFeed_GetActivity_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_GetActivity_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_GetActivity_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_GetActivity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_GetActivity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_GetActivity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_GetActivity_presult__isset {
  _BrainCloudService_SocialFeed_GetActivity_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_GetActivity_presult__isset;

class BrainCloudService_SocialFeed_GetActivity_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_GetActivity_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_GetActivity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_SocialFeed_GetComment_args__isset {
  _BrainCloudService_SocialFeed_GetComment_args__isset() : socialFeedId(false), depth(false), skip(false), limit(false), clientIndex(false) {}
  bool socialFeedId :1;
  bool depth :1;
  bool skip :1;
  bool limit :1;
  bool clientIndex :1;
} _BrainCloudService_SocialFeed_GetComment_args__isset;

class BrainCloudService_SocialFeed_GetComment_args {
 public:

  BrainCloudService_SocialFeed_GetComment_args(const BrainCloudService_SocialFeed_GetComment_args&);
  BrainCloudService_SocialFeed_GetComment_args& operator=(const BrainCloudService_SocialFeed_GetComment_args&);
  BrainCloudService_SocialFeed_GetComment_args() : socialFeedId(), depth(0), skip(0), limit(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_SocialFeed_GetComment_args() throw();
  std::string socialFeedId;
  int32_t depth;
  int32_t skip;
  int32_t limit;
  int32_t clientIndex;

  _BrainCloudService_SocialFeed_GetComment_args__isset __isset;

  void __set_socialFeedId(const std::string& val);

  void __set_depth(const int32_t val);

  void __set_skip(const int32_t val);

  void __set_limit(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_SocialFeed_GetComment_args & rhs) const
  {
    if (!(socialFeedId == rhs.socialFeedId))
      return false;
    if (!(depth == rhs.depth))
      return false;
    if (!(skip == rhs.skip))
      return false;
    if (!(limit == rhs.limit))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_GetComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_GetComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_SocialFeed_GetComment_pargs {
 public:


  virtual ~BrainCloudService_SocialFeed_GetComment_pargs() throw();
  const std::string* socialFeedId;
  const int32_t* depth;
  const int32_t* skip;
  const int32_t* limit;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_GetComment_result__isset {
  _BrainCloudService_SocialFeed_GetComment_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_GetComment_result__isset;

class BrainCloudService_SocialFeed_GetComment_result {
 public:

  BrainCloudService_SocialFeed_GetComment_result(const BrainCloudService_SocialFeed_GetComment_result&);
  BrainCloudService_SocialFeed_GetComment_result& operator=(const BrainCloudService_SocialFeed_GetComment_result&);
  BrainCloudService_SocialFeed_GetComment_result() : success() {
  }

  virtual ~BrainCloudService_SocialFeed_GetComment_result() throw();
  std::string success;

  _BrainCloudService_SocialFeed_GetComment_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_SocialFeed_GetComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_SocialFeed_GetComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_SocialFeed_GetComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_SocialFeed_GetComment_presult__isset {
  _BrainCloudService_SocialFeed_GetComment_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_SocialFeed_GetComment_presult__isset;

class BrainCloudService_SocialFeed_GetComment_presult {
 public:


  virtual ~BrainCloudService_SocialFeed_GetComment_presult() throw();
  std::string* success;

  _BrainCloudService_SocialFeed_GetComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Telemetry_StartTelemetrySession_args__isset {
  _BrainCloudService_Telemetry_StartTelemetrySession_args__isset() : timestamp(false), clientIndex(false) {}
  bool timestamp :1;
  bool clientIndex :1;
} _BrainCloudService_Telemetry_StartTelemetrySession_args__isset;

class BrainCloudService_Telemetry_StartTelemetrySession_args {
 public:

  BrainCloudService_Telemetry_StartTelemetrySession_args(const BrainCloudService_Telemetry_StartTelemetrySession_args&);
  BrainCloudService_Telemetry_StartTelemetrySession_args& operator=(const BrainCloudService_Telemetry_StartTelemetrySession_args&);
  BrainCloudService_Telemetry_StartTelemetrySession_args() : timestamp(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Telemetry_StartTelemetrySession_args() throw();
  int32_t timestamp;
  int32_t clientIndex;

  _BrainCloudService_Telemetry_StartTelemetrySession_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Telemetry_StartTelemetrySession_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_StartTelemetrySession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_StartTelemetrySession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Telemetry_StartTelemetrySession_pargs {
 public:


  virtual ~BrainCloudService_Telemetry_StartTelemetrySession_pargs() throw();
  const int32_t* timestamp;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_StartTelemetrySession_result__isset {
  _BrainCloudService_Telemetry_StartTelemetrySession_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_StartTelemetrySession_result__isset;

class BrainCloudService_Telemetry_StartTelemetrySession_result {
 public:

  BrainCloudService_Telemetry_StartTelemetrySession_result(const BrainCloudService_Telemetry_StartTelemetrySession_result&);
  BrainCloudService_Telemetry_StartTelemetrySession_result& operator=(const BrainCloudService_Telemetry_StartTelemetrySession_result&);
  BrainCloudService_Telemetry_StartTelemetrySession_result() : success() {
  }

  virtual ~BrainCloudService_Telemetry_StartTelemetrySession_result() throw();
  std::string success;

  _BrainCloudService_Telemetry_StartTelemetrySession_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Telemetry_StartTelemetrySession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_StartTelemetrySession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_StartTelemetrySession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_StartTelemetrySession_presult__isset {
  _BrainCloudService_Telemetry_StartTelemetrySession_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_StartTelemetrySession_presult__isset;

class BrainCloudService_Telemetry_StartTelemetrySession_presult {
 public:


  virtual ~BrainCloudService_Telemetry_StartTelemetrySession_presult() throw();
  std::string* success;

  _BrainCloudService_Telemetry_StartTelemetrySession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Telemetry_EndTelemetrySession_args__isset {
  _BrainCloudService_Telemetry_EndTelemetrySession_args__isset() : telemetrySessionId(false), timestamp(false), clientIndex(false) {}
  bool telemetrySessionId :1;
  bool timestamp :1;
  bool clientIndex :1;
} _BrainCloudService_Telemetry_EndTelemetrySession_args__isset;

class BrainCloudService_Telemetry_EndTelemetrySession_args {
 public:

  BrainCloudService_Telemetry_EndTelemetrySession_args(const BrainCloudService_Telemetry_EndTelemetrySession_args&);
  BrainCloudService_Telemetry_EndTelemetrySession_args& operator=(const BrainCloudService_Telemetry_EndTelemetrySession_args&);
  BrainCloudService_Telemetry_EndTelemetrySession_args() : telemetrySessionId(), timestamp(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_Telemetry_EndTelemetrySession_args() throw();
  std::string telemetrySessionId;
  int32_t timestamp;
  int32_t clientIndex;

  _BrainCloudService_Telemetry_EndTelemetrySession_args__isset __isset;

  void __set_telemetrySessionId(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Telemetry_EndTelemetrySession_args & rhs) const
  {
    if (!(telemetrySessionId == rhs.telemetrySessionId))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_EndTelemetrySession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_EndTelemetrySession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Telemetry_EndTelemetrySession_pargs {
 public:


  virtual ~BrainCloudService_Telemetry_EndTelemetrySession_pargs() throw();
  const std::string* telemetrySessionId;
  const int32_t* timestamp;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_EndTelemetrySession_result__isset {
  _BrainCloudService_Telemetry_EndTelemetrySession_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_EndTelemetrySession_result__isset;

class BrainCloudService_Telemetry_EndTelemetrySession_result {
 public:

  BrainCloudService_Telemetry_EndTelemetrySession_result(const BrainCloudService_Telemetry_EndTelemetrySession_result&);
  BrainCloudService_Telemetry_EndTelemetrySession_result& operator=(const BrainCloudService_Telemetry_EndTelemetrySession_result&);
  BrainCloudService_Telemetry_EndTelemetrySession_result() : success() {
  }

  virtual ~BrainCloudService_Telemetry_EndTelemetrySession_result() throw();
  std::string success;

  _BrainCloudService_Telemetry_EndTelemetrySession_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Telemetry_EndTelemetrySession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_EndTelemetrySession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_EndTelemetrySession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_EndTelemetrySession_presult__isset {
  _BrainCloudService_Telemetry_EndTelemetrySession_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_EndTelemetrySession_presult__isset;

class BrainCloudService_Telemetry_EndTelemetrySession_presult {
 public:


  virtual ~BrainCloudService_Telemetry_EndTelemetrySession_presult() throw();
  std::string* success;

  _BrainCloudService_Telemetry_EndTelemetrySession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Telemetry_LogTelemetryEvent_args__isset {
  _BrainCloudService_Telemetry_LogTelemetryEvent_args__isset() : telemetrySessionId(false), timestamp(false), eventType(false), participantId(false), customData(false), clientIndex(false) {}
  bool telemetrySessionId :1;
  bool timestamp :1;
  bool eventType :1;
  bool participantId :1;
  bool customData :1;
  bool clientIndex :1;
} _BrainCloudService_Telemetry_LogTelemetryEvent_args__isset;

class BrainCloudService_Telemetry_LogTelemetryEvent_args {
 public:

  BrainCloudService_Telemetry_LogTelemetryEvent_args(const BrainCloudService_Telemetry_LogTelemetryEvent_args&);
  BrainCloudService_Telemetry_LogTelemetryEvent_args& operator=(const BrainCloudService_Telemetry_LogTelemetryEvent_args&);
  BrainCloudService_Telemetry_LogTelemetryEvent_args() : telemetrySessionId(), timestamp(0), eventType(), participantId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Telemetry_LogTelemetryEvent_args() throw();
  std::string telemetrySessionId;
  int32_t timestamp;
  std::string eventType;
  std::string participantId;
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  customData;
  int32_t clientIndex;

  _BrainCloudService_Telemetry_LogTelemetryEvent_args__isset __isset;

  void __set_telemetrySessionId(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_eventType(const std::string& val);

  void __set_participantId(const std::string& val);

  void __set_customData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Telemetry_LogTelemetryEvent_args & rhs) const
  {
    if (!(telemetrySessionId == rhs.telemetrySessionId))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(participantId == rhs.participantId))
      return false;
    if (!(customData == rhs.customData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_LogTelemetryEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_LogTelemetryEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Telemetry_LogTelemetryEvent_pargs {
 public:


  virtual ~BrainCloudService_Telemetry_LogTelemetryEvent_pargs() throw();
  const std::string* telemetrySessionId;
  const int32_t* timestamp;
  const std::string* eventType;
  const std::string* participantId;
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * customData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_LogTelemetryEvent_result__isset {
  _BrainCloudService_Telemetry_LogTelemetryEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_LogTelemetryEvent_result__isset;

class BrainCloudService_Telemetry_LogTelemetryEvent_result {
 public:

  BrainCloudService_Telemetry_LogTelemetryEvent_result(const BrainCloudService_Telemetry_LogTelemetryEvent_result&);
  BrainCloudService_Telemetry_LogTelemetryEvent_result& operator=(const BrainCloudService_Telemetry_LogTelemetryEvent_result&);
  BrainCloudService_Telemetry_LogTelemetryEvent_result() : success() {
  }

  virtual ~BrainCloudService_Telemetry_LogTelemetryEvent_result() throw();
  std::string success;

  _BrainCloudService_Telemetry_LogTelemetryEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Telemetry_LogTelemetryEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_LogTelemetryEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_LogTelemetryEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_LogTelemetryEvent_presult__isset {
  _BrainCloudService_Telemetry_LogTelemetryEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_LogTelemetryEvent_presult__isset;

class BrainCloudService_Telemetry_LogTelemetryEvent_presult {
 public:


  virtual ~BrainCloudService_Telemetry_LogTelemetryEvent_presult() throw();
  std::string* success;

  _BrainCloudService_Telemetry_LogTelemetryEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Telemetry_StartTelemetryEvent_args__isset {
  _BrainCloudService_Telemetry_StartTelemetryEvent_args__isset() : telemetrySessionId(false), timestamp(false), eventType(false), participantId(false), customData(false), clientIndex(false) {}
  bool telemetrySessionId :1;
  bool timestamp :1;
  bool eventType :1;
  bool participantId :1;
  bool customData :1;
  bool clientIndex :1;
} _BrainCloudService_Telemetry_StartTelemetryEvent_args__isset;

class BrainCloudService_Telemetry_StartTelemetryEvent_args {
 public:

  BrainCloudService_Telemetry_StartTelemetryEvent_args(const BrainCloudService_Telemetry_StartTelemetryEvent_args&);
  BrainCloudService_Telemetry_StartTelemetryEvent_args& operator=(const BrainCloudService_Telemetry_StartTelemetryEvent_args&);
  BrainCloudService_Telemetry_StartTelemetryEvent_args() : telemetrySessionId(), timestamp(0), eventType(), participantId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Telemetry_StartTelemetryEvent_args() throw();
  std::string telemetrySessionId;
  int32_t timestamp;
  std::string eventType;
  std::string participantId;
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  customData;
  int32_t clientIndex;

  _BrainCloudService_Telemetry_StartTelemetryEvent_args__isset __isset;

  void __set_telemetrySessionId(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_eventType(const std::string& val);

  void __set_participantId(const std::string& val);

  void __set_customData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Telemetry_StartTelemetryEvent_args & rhs) const
  {
    if (!(telemetrySessionId == rhs.telemetrySessionId))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(participantId == rhs.participantId))
      return false;
    if (!(customData == rhs.customData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_StartTelemetryEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_StartTelemetryEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Telemetry_StartTelemetryEvent_pargs {
 public:


  virtual ~BrainCloudService_Telemetry_StartTelemetryEvent_pargs() throw();
  const std::string* telemetrySessionId;
  const int32_t* timestamp;
  const std::string* eventType;
  const std::string* participantId;
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * customData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_StartTelemetryEvent_result__isset {
  _BrainCloudService_Telemetry_StartTelemetryEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_StartTelemetryEvent_result__isset;

class BrainCloudService_Telemetry_StartTelemetryEvent_result {
 public:

  BrainCloudService_Telemetry_StartTelemetryEvent_result(const BrainCloudService_Telemetry_StartTelemetryEvent_result&);
  BrainCloudService_Telemetry_StartTelemetryEvent_result& operator=(const BrainCloudService_Telemetry_StartTelemetryEvent_result&);
  BrainCloudService_Telemetry_StartTelemetryEvent_result() : success() {
  }

  virtual ~BrainCloudService_Telemetry_StartTelemetryEvent_result() throw();
  std::string success;

  _BrainCloudService_Telemetry_StartTelemetryEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Telemetry_StartTelemetryEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_StartTelemetryEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_StartTelemetryEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_StartTelemetryEvent_presult__isset {
  _BrainCloudService_Telemetry_StartTelemetryEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_StartTelemetryEvent_presult__isset;

class BrainCloudService_Telemetry_StartTelemetryEvent_presult {
 public:


  virtual ~BrainCloudService_Telemetry_StartTelemetryEvent_presult() throw();
  std::string* success;

  _BrainCloudService_Telemetry_StartTelemetryEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Telemetry_EndTelemetryEvent_args__isset {
  _BrainCloudService_Telemetry_EndTelemetryEvent_args__isset() : telemetrySessionId(false), timestamp(false), eventType(false), participantId(false), customData(false), clientIndex(false) {}
  bool telemetrySessionId :1;
  bool timestamp :1;
  bool eventType :1;
  bool participantId :1;
  bool customData :1;
  bool clientIndex :1;
} _BrainCloudService_Telemetry_EndTelemetryEvent_args__isset;

class BrainCloudService_Telemetry_EndTelemetryEvent_args {
 public:

  BrainCloudService_Telemetry_EndTelemetryEvent_args(const BrainCloudService_Telemetry_EndTelemetryEvent_args&);
  BrainCloudService_Telemetry_EndTelemetryEvent_args& operator=(const BrainCloudService_Telemetry_EndTelemetryEvent_args&);
  BrainCloudService_Telemetry_EndTelemetryEvent_args() : telemetrySessionId(), timestamp(0), eventType(), participantId(), clientIndex(0) {
  }

  virtual ~BrainCloudService_Telemetry_EndTelemetryEvent_args() throw();
  std::string telemetrySessionId;
  int32_t timestamp;
  std::string eventType;
  std::string participantId;
  std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON>  customData;
  int32_t clientIndex;

  _BrainCloudService_Telemetry_EndTelemetryEvent_args__isset __isset;

  void __set_telemetrySessionId(const std::string& val);

  void __set_timestamp(const int32_t val);

  void __set_eventType(const std::string& val);

  void __set_participantId(const std::string& val);

  void __set_customData(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Telemetry_EndTelemetryEvent_args & rhs) const
  {
    if (!(telemetrySessionId == rhs.telemetrySessionId))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(eventType == rhs.eventType))
      return false;
    if (!(participantId == rhs.participantId))
      return false;
    if (!(customData == rhs.customData))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_EndTelemetryEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_EndTelemetryEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Telemetry_EndTelemetryEvent_pargs {
 public:


  virtual ~BrainCloudService_Telemetry_EndTelemetryEvent_pargs() throw();
  const std::string* telemetrySessionId;
  const int32_t* timestamp;
  const std::string* eventType;
  const std::string* participantId;
  const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> * customData;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_EndTelemetryEvent_result__isset {
  _BrainCloudService_Telemetry_EndTelemetryEvent_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_EndTelemetryEvent_result__isset;

class BrainCloudService_Telemetry_EndTelemetryEvent_result {
 public:

  BrainCloudService_Telemetry_EndTelemetryEvent_result(const BrainCloudService_Telemetry_EndTelemetryEvent_result&);
  BrainCloudService_Telemetry_EndTelemetryEvent_result& operator=(const BrainCloudService_Telemetry_EndTelemetryEvent_result&);
  BrainCloudService_Telemetry_EndTelemetryEvent_result() : success() {
  }

  virtual ~BrainCloudService_Telemetry_EndTelemetryEvent_result() throw();
  std::string success;

  _BrainCloudService_Telemetry_EndTelemetryEvent_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Telemetry_EndTelemetryEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Telemetry_EndTelemetryEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Telemetry_EndTelemetryEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Telemetry_EndTelemetryEvent_presult__isset {
  _BrainCloudService_Telemetry_EndTelemetryEvent_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Telemetry_EndTelemetryEvent_presult__isset;

class BrainCloudService_Telemetry_EndTelemetryEvent_presult {
 public:


  virtual ~BrainCloudService_Telemetry_EndTelemetryEvent_presult() throw();
  std::string* success;

  _BrainCloudService_Telemetry_EndTelemetryEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_Authentication_GetWeChatQRPageURL_args__isset {
  _BrainCloudService_Authentication_GetWeChatQRPageURL_args__isset() : clientIndex(false) {}
  bool clientIndex :1;
} _BrainCloudService_Authentication_GetWeChatQRPageURL_args__isset;

class BrainCloudService_Authentication_GetWeChatQRPageURL_args {
 public:

  BrainCloudService_Authentication_GetWeChatQRPageURL_args(const BrainCloudService_Authentication_GetWeChatQRPageURL_args&);
  BrainCloudService_Authentication_GetWeChatQRPageURL_args& operator=(const BrainCloudService_Authentication_GetWeChatQRPageURL_args&);
  BrainCloudService_Authentication_GetWeChatQRPageURL_args() : clientIndex(0) {
  }

  virtual ~BrainCloudService_Authentication_GetWeChatQRPageURL_args() throw();
  int32_t clientIndex;

  _BrainCloudService_Authentication_GetWeChatQRPageURL_args__isset __isset;

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_Authentication_GetWeChatQRPageURL_args & rhs) const
  {
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_GetWeChatQRPageURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_GetWeChatQRPageURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_Authentication_GetWeChatQRPageURL_pargs {
 public:


  virtual ~BrainCloudService_Authentication_GetWeChatQRPageURL_pargs() throw();
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_GetWeChatQRPageURL_result__isset {
  _BrainCloudService_Authentication_GetWeChatQRPageURL_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_GetWeChatQRPageURL_result__isset;

class BrainCloudService_Authentication_GetWeChatQRPageURL_result {
 public:

  BrainCloudService_Authentication_GetWeChatQRPageURL_result(const BrainCloudService_Authentication_GetWeChatQRPageURL_result&);
  BrainCloudService_Authentication_GetWeChatQRPageURL_result& operator=(const BrainCloudService_Authentication_GetWeChatQRPageURL_result&);
  BrainCloudService_Authentication_GetWeChatQRPageURL_result() : success() {
  }

  virtual ~BrainCloudService_Authentication_GetWeChatQRPageURL_result() throw();
  std::string success;

  _BrainCloudService_Authentication_GetWeChatQRPageURL_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_Authentication_GetWeChatQRPageURL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_Authentication_GetWeChatQRPageURL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_Authentication_GetWeChatQRPageURL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_Authentication_GetWeChatQRPageURL_presult__isset {
  _BrainCloudService_Authentication_GetWeChatQRPageURL_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_Authentication_GetWeChatQRPageURL_presult__isset;

class BrainCloudService_Authentication_GetWeChatQRPageURL_presult {
 public:


  virtual ~BrainCloudService_Authentication_GetWeChatQRPageURL_presult() throw();
  std::string* success;

  _BrainCloudService_Authentication_GetWeChatQRPageURL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_DownloadFile_args__isset {
  _BrainCloudService_File_DownloadFile_args__isset() : cloudPath(false), cloudFilename(false), replaceIfExists(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFilename :1;
  bool replaceIfExists :1;
  bool clientIndex :1;
} _BrainCloudService_File_DownloadFile_args__isset;

class BrainCloudService_File_DownloadFile_args {
 public:

  BrainCloudService_File_DownloadFile_args(const BrainCloudService_File_DownloadFile_args&);
  BrainCloudService_File_DownloadFile_args& operator=(const BrainCloudService_File_DownloadFile_args&);
  BrainCloudService_File_DownloadFile_args() : cloudPath(), cloudFilename(), replaceIfExists(0), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_DownloadFile_args() throw();
  std::string cloudPath;
  std::string cloudFilename;
  bool replaceIfExists;
  int32_t clientIndex;

  _BrainCloudService_File_DownloadFile_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFilename(const std::string& val);

  void __set_replaceIfExists(const bool val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_DownloadFile_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFilename == rhs.cloudFilename))
      return false;
    if (!(replaceIfExists == rhs.replaceIfExists))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DownloadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DownloadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_DownloadFile_pargs {
 public:


  virtual ~BrainCloudService_File_DownloadFile_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFilename;
  const bool* replaceIfExists;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DownloadFile_result__isset {
  _BrainCloudService_File_DownloadFile_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DownloadFile_result__isset;

class BrainCloudService_File_DownloadFile_result {
 public:

  BrainCloudService_File_DownloadFile_result(const BrainCloudService_File_DownloadFile_result&);
  BrainCloudService_File_DownloadFile_result& operator=(const BrainCloudService_File_DownloadFile_result&);
  BrainCloudService_File_DownloadFile_result() : success() {
  }

  virtual ~BrainCloudService_File_DownloadFile_result() throw();
  std::string success;

  _BrainCloudService_File_DownloadFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_DownloadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_DownloadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_DownloadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_DownloadFile_presult__isset {
  _BrainCloudService_File_DownloadFile_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_DownloadFile_presult__isset;

class BrainCloudService_File_DownloadFile_presult {
 public:


  virtual ~BrainCloudService_File_DownloadFile_presult() throw();
  std::string* success;

  _BrainCloudService_File_DownloadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_GetDownloadInfo_args__isset {
  _BrainCloudService_File_GetDownloadInfo_args__isset() : cloudPath(false), cloudFilename(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFilename :1;
  bool clientIndex :1;
} _BrainCloudService_File_GetDownloadInfo_args__isset;

class BrainCloudService_File_GetDownloadInfo_args {
 public:

  BrainCloudService_File_GetDownloadInfo_args(const BrainCloudService_File_GetDownloadInfo_args&);
  BrainCloudService_File_GetDownloadInfo_args& operator=(const BrainCloudService_File_GetDownloadInfo_args&);
  BrainCloudService_File_GetDownloadInfo_args() : cloudPath(), cloudFilename(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_GetDownloadInfo_args() throw();
  std::string cloudPath;
  std::string cloudFilename;
  int32_t clientIndex;

  _BrainCloudService_File_GetDownloadInfo_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFilename(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_GetDownloadInfo_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFilename == rhs.cloudFilename))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetDownloadInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetDownloadInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_GetDownloadInfo_pargs {
 public:


  virtual ~BrainCloudService_File_GetDownloadInfo_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFilename;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetDownloadInfo_result__isset {
  _BrainCloudService_File_GetDownloadInfo_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetDownloadInfo_result__isset;

class BrainCloudService_File_GetDownloadInfo_result {
 public:

  BrainCloudService_File_GetDownloadInfo_result(const BrainCloudService_File_GetDownloadInfo_result&);
  BrainCloudService_File_GetDownloadInfo_result& operator=(const BrainCloudService_File_GetDownloadInfo_result&);
  BrainCloudService_File_GetDownloadInfo_result() : success() {
  }

  virtual ~BrainCloudService_File_GetDownloadInfo_result() throw();
  std::string success;

  _BrainCloudService_File_GetDownloadInfo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_GetDownloadInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_GetDownloadInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_GetDownloadInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_GetDownloadInfo_presult__isset {
  _BrainCloudService_File_GetDownloadInfo_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_GetDownloadInfo_presult__isset;

class BrainCloudService_File_GetDownloadInfo_presult {
 public:


  virtual ~BrainCloudService_File_GetDownloadInfo_presult() throw();
  std::string* success;

  _BrainCloudService_File_GetDownloadInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BrainCloudService_File_CancelDownload_args__isset {
  _BrainCloudService_File_CancelDownload_args__isset() : cloudPath(false), cloudFilename(false), clientIndex(false) {}
  bool cloudPath :1;
  bool cloudFilename :1;
  bool clientIndex :1;
} _BrainCloudService_File_CancelDownload_args__isset;

class BrainCloudService_File_CancelDownload_args {
 public:

  BrainCloudService_File_CancelDownload_args(const BrainCloudService_File_CancelDownload_args&);
  BrainCloudService_File_CancelDownload_args& operator=(const BrainCloudService_File_CancelDownload_args&);
  BrainCloudService_File_CancelDownload_args() : cloudPath(), cloudFilename(), clientIndex(0) {
  }

  virtual ~BrainCloudService_File_CancelDownload_args() throw();
  std::string cloudPath;
  std::string cloudFilename;
  int32_t clientIndex;

  _BrainCloudService_File_CancelDownload_args__isset __isset;

  void __set_cloudPath(const std::string& val);

  void __set_cloudFilename(const std::string& val);

  void __set_clientIndex(const int32_t val);

  bool operator == (const BrainCloudService_File_CancelDownload_args & rhs) const
  {
    if (!(cloudPath == rhs.cloudPath))
      return false;
    if (!(cloudFilename == rhs.cloudFilename))
      return false;
    if (!(clientIndex == rhs.clientIndex))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_CancelDownload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_CancelDownload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BrainCloudService_File_CancelDownload_pargs {
 public:


  virtual ~BrainCloudService_File_CancelDownload_pargs() throw();
  const std::string* cloudPath;
  const std::string* cloudFilename;
  const int32_t* clientIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_CancelDownload_result__isset {
  _BrainCloudService_File_CancelDownload_result__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_CancelDownload_result__isset;

class BrainCloudService_File_CancelDownload_result {
 public:

  BrainCloudService_File_CancelDownload_result(const BrainCloudService_File_CancelDownload_result&);
  BrainCloudService_File_CancelDownload_result& operator=(const BrainCloudService_File_CancelDownload_result&);
  BrainCloudService_File_CancelDownload_result() : success() {
  }

  virtual ~BrainCloudService_File_CancelDownload_result() throw();
  std::string success;

  _BrainCloudService_File_CancelDownload_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const BrainCloudService_File_CancelDownload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BrainCloudService_File_CancelDownload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BrainCloudService_File_CancelDownload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BrainCloudService_File_CancelDownload_presult__isset {
  _BrainCloudService_File_CancelDownload_presult__isset() : success(false) {}
  bool success :1;
} _BrainCloudService_File_CancelDownload_presult__isset;

class BrainCloudService_File_CancelDownload_presult {
 public:


  virtual ~BrainCloudService_File_CancelDownload_presult() throw();
  std::string* success;

  _BrainCloudService_File_CancelDownload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BrainCloudServiceClient : virtual public BrainCloudServiceIf {
 public:
  BrainCloudServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BrainCloudServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AsyncMatch_CreateMatch(std::string& _return, const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex);
  void send_AsyncMatch_CreateMatch(const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex);
  void recv_AsyncMatch_CreateMatch(std::string& _return);
  void AsyncMatch_CreateMatchWithInitialTurn(std::string& _return, const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex);
  void send_AsyncMatch_CreateMatchWithInitialTurn(const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex);
  void recv_AsyncMatch_CreateMatchWithInitialTurn(std::string& _return);
  void AsyncMatch_SubmitTurn(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex);
  void send_AsyncMatch_SubmitTurn(const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex);
  void recv_AsyncMatch_SubmitTurn(std::string& _return);
  void AsyncMatch_UpdateMatchSummaryData(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex);
  void send_AsyncMatch_UpdateMatchSummaryData(const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex);
  void recv_AsyncMatch_UpdateMatchSummaryData(std::string& _return);
  void AsyncMatch_CompleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void send_AsyncMatch_CompleteMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_CompleteMatch(std::string& _return);
  void AsyncMatch_ReadMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void send_AsyncMatch_ReadMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_ReadMatch(std::string& _return);
  void AsyncMatch_ReadMatchHistory(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void send_AsyncMatch_ReadMatchHistory(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_ReadMatchHistory(std::string& _return);
  void AsyncMatch_FindMatches(std::string& _return, const int32_t clientIndex);
  void send_AsyncMatch_FindMatches(const int32_t clientIndex);
  void recv_AsyncMatch_FindMatches(std::string& _return);
  void AsyncMatch_FindCompleteMatches(std::string& _return, const int32_t clientIndex);
  void send_AsyncMatch_FindCompleteMatches(const int32_t clientIndex);
  void recv_AsyncMatch_FindCompleteMatches(std::string& _return);
  void AsyncMatch_AbandonMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void send_AsyncMatch_AbandonMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_AbandonMatch(std::string& _return);
  void AsyncMatch_DeleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void send_AsyncMatch_DeleteMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_DeleteMatch(std::string& _return);
  void Authentication_GenerateAnonymousId(std::string& _return, const int32_t clientIndex);
  void send_Authentication_GenerateAnonymousId(const int32_t clientIndex);
  void recv_Authentication_GenerateAnonymousId(std::string& _return);
  void Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void send_Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void recv_Authentication_Initialize();
  void Authentication_ClearSavedProfileID(const int32_t clientIndex);
  void send_Authentication_ClearSavedProfileID(const int32_t clientIndex);
  void recv_Authentication_ClearSavedProfileID();
  void Authentication_AuthenticateAnonymous(std::string& _return, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticateAnonymous(const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateAnonymous(std::string& _return);
  void Authentication_AuthenticateEmailPassword(std::string& _return, const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticateEmailPassword(const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateEmailPassword(std::string& _return);
  void Authentication_AuthenticateUniversal(std::string& _return, const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticateUniversal(const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateUniversal(std::string& _return);
  void Authentication_AuthenticateExternal(std::string& _return, const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticateExternal(const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateExternal(std::string& _return);
  void Authentication_AuthenticatePhone(std::string& _return, const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticatePhone(const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticatePhone(std::string& _return);
  void Authentication_AuthenticateWechat(std::string& _return, const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_AuthenticateWechat(const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateWechat(std::string& _return);
  void Authentication_ResetEmailPassword(std::string& _return, const std::string& externalId, const int32_t clientIndex);
  void send_Authentication_ResetEmailPassword(const std::string& externalId, const int32_t clientIndex);
  void recv_Authentication_ResetEmailPassword(std::string& _return);
  void Authentication_RequestSmsCode(std::string& _return, const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex);
  void send_Authentication_RequestSmsCode(const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_RequestSmsCode(std::string& _return);
  void Client_GetSessionId(std::string& _return, const int32_t clientIndex);
  void send_Client_GetSessionId(const int32_t clientIndex);
  void recv_Client_GetSessionId(std::string& _return);
  bool Client_IsAuthenticated(const int32_t clientIndex);
  void send_Client_IsAuthenticated(const int32_t clientIndex);
  bool recv_Client_IsAuthenticated();
  bool Client_IsInitialized(const int32_t clientIndex);
  void send_Client_IsInitialized(const int32_t clientIndex);
  bool recv_Client_IsInitialized();
  void Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void send_Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void recv_Client_Initialize_SSS();
  void Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void send_Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void recv_Client_Initialize_SSSS();
  void Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void send_Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void recv_Client_InitializeIdentity();
  void Client_Update(const int32_t clientIndex);
  void send_Client_Update(const int32_t clientIndex);
  void recv_Client_Update();
  void Client_EnableLogging(const bool enable, const int32_t clientIndex);
  void send_Client_EnableLogging(const bool enable, const int32_t clientIndex);
  void recv_Client_EnableLogging();
  void Client_ResetCommunication(const int32_t clientIndex);
  void send_Client_ResetCommunication(const int32_t clientIndex);
  void recv_Client_ResetCommunication();
  void Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex);
  void send_Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex);
  void recv_Client_SetPacketTimeouts();
  void Client_SetPacketTimeoutsToDefault(const int32_t clientIndex);
  void send_Client_SetPacketTimeoutsToDefault(const int32_t clientIndex);
  void recv_Client_SetPacketTimeoutsToDefault();
  void Client_GetPacketTimeouts(std::vector<int32_t> & _return, const int32_t clientIndex);
  void send_Client_GetPacketTimeouts(const int32_t clientIndex);
  void recv_Client_GetPacketTimeouts(std::vector<int32_t> & _return);
  void Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void send_Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void recv_Client_SetAuthenticationPacketTimeout();
  int32_t Client_GetAuthenticationPacketTimeout(const int32_t clientIndex);
  void send_Client_GetAuthenticationPacketTimeout(const int32_t clientIndex);
  int32_t recv_Client_GetAuthenticationPacketTimeout();
  int32_t Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex);
  void send_Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex);
  int32_t recv_Client_GetUploadLowTransferRateTimeout();
  void Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void send_Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void recv_Client_SetUploadLowTransferRateTimeout();
  int32_t Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex);
  void send_Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex);
  int32_t recv_Client_GetUploadLowTransferRateThreshold();
  void Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex);
  void send_Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex);
  void recv_Client_SetUploadLowTransferRateThreshold();
  void Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex);
  void send_Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex);
  void recv_Client_EnableNetworkErrorMessageCaching();
  void Client_RetryCachedMessages(const int32_t clientIndex);
  void send_Client_RetryCachedMessages(const int32_t clientIndex);
  void recv_Client_RetryCachedMessages();
  void Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex);
  void send_Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex);
  void recv_Client_FlushCachedMessages();
  void Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex);
  void send_Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex);
  void recv_Client_InsertEndOfMessageBundleMarker();
  void Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex);
  void send_Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex);
  void recv_Client_OverrideCountryCode();
  void Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex);
  void send_Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex);
  void recv_Client_OverrideLanguageCode();
  void DataStream_CustomPageEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void send_DataStream_CustomPageEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomPageEvent(std::string& _return);
  void DataStream_CustomScreenEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void send_DataStream_CustomScreenEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomScreenEvent(std::string& _return);
  void DataStream_CustomTrackEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void send_DataStream_CustomTrackEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomTrackEvent(std::string& _return);
  void Entity_CreateEntity(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void send_Entity_CreateEntity(const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void recv_Entity_CreateEntity(std::string& _return);
  void Entity_GetEntitiesByType(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  void send_Entity_GetEntitiesByType(const std::string& entityType, const int32_t clientIndex);
  void recv_Entity_GetEntitiesByType(std::string& _return);
  void Entity_UpdateEntity(std::string& _return, const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void send_Entity_UpdateEntity(const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateEntity(std::string& _return);
  void Entity_UpdateSharedEntity(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex);
  void send_Entity_UpdateSharedEntity(const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateSharedEntity(std::string& _return);
  void Entity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void send_Entity_DeleteEntity(const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void recv_Entity_DeleteEntity(std::string& _return);
  void Entity_UpdateSingleton(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void send_Entity_UpdateSingleton(const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateSingleton(std::string& _return);
  void Entity_DeleteSingleton(std::string& _return, const std::string& entityType, const int32_t version, const int32_t clientIndex);
  void send_Entity_DeleteSingleton(const std::string& entityType, const int32_t version, const int32_t clientIndex);
  void recv_Entity_DeleteSingleton(std::string& _return);
  void Entity_GetEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex);
  void send_Entity_GetEntity(const std::string& entityId, const int32_t clientIndex);
  void recv_Entity_GetEntity(std::string& _return);
  void Entity_GetSingleton(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  void send_Entity_GetSingleton(const std::string& entityType, const int32_t clientIndex);
  void recv_Entity_GetSingleton(std::string& _return);
  void Entity_GetSharedEntityForProfileId(std::string& _return, const std::string& profileId, const std::string& entityId, const int32_t clientIndex);
  void send_Entity_GetSharedEntityForProfileId(const std::string& profileId, const std::string& entityId, const int32_t clientIndex);
  void recv_Entity_GetSharedEntityForProfileId(std::string& _return);
  void Entity_GetSharedEntitiesForProfileId(std::string& _return, const std::string& profileId, const int32_t clientIndex);
  void send_Entity_GetSharedEntitiesForProfileId(const std::string& profileId, const int32_t clientIndex);
  void recv_Entity_GetSharedEntitiesForProfileId(std::string& _return);
  void Entity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void send_Entity_GetList(const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_Entity_GetList(std::string& _return);
  void Entity_GetSharedEntitiesListForProfileId(std::string& _return, const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void send_Entity_GetSharedEntitiesListForProfileId(const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_Entity_GetSharedEntitiesListForProfileId(std::string& _return);
  void Entity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex);
  void send_Entity_GetListCount(const std::string& whereJson, const int32_t clientIndex);
  void recv_Entity_GetListCount(std::string& _return);
  void Entity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  void send_Entity_GetPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Entity_GetPage(std::string& _return);
  void Entity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void send_Entity_GetPageOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Entity_GetPageOffset(std::string& _return);
  void Entity_IncrementUserEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void send_Entity_IncrementUserEntityData(const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Entity_IncrementUserEntityData(std::string& _return);
  void Entity_IncrementSharedUserEntityData(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex);
  void send_Entity_IncrementSharedUserEntityData(const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Entity_IncrementSharedUserEntityData(std::string& _return);
  void Event_SendEvent(std::string& _return, const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex);
  void send_Event_SendEvent(const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex);
  void recv_Event_SendEvent(std::string& _return);
  void Event_UpdateIncomingEventData(std::string& _return, const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex);
  void send_Event_UpdateIncomingEventData(const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex);
  void recv_Event_UpdateIncomingEventData(std::string& _return);
  void Event_DeleteIncomingEvent(std::string& _return, const std::string& evId, const int32_t clientIndex);
  void send_Event_DeleteIncomingEvent(const std::string& evId, const int32_t clientIndex);
  void recv_Event_DeleteIncomingEvent(std::string& _return);
  void Event_GetEvents(std::string& _return, const int32_t clientIndex);
  void send_Event_GetEvents(const int32_t clientIndex);
  void recv_Event_GetEvents(std::string& _return);
  void File_UploadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex);
  void send_File_UploadFile(const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex);
  void recv_File_UploadFile(std::string& _return);
  void File_CancelUpload(const std::string& uploadId, const int32_t clientIndex);
  void send_File_CancelUpload(const std::string& uploadId, const int32_t clientIndex);
  void recv_File_CancelUpload();
  double File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex);
  void send_File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex);
  double recv_File_GetUploadProgress();
  int64_t File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex);
  void send_File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex);
  int64_t recv_File_GetUploadBytesTransferred();
  int64_t File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex);
  void send_File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex);
  int64_t recv_File_GetUploadTotalBytesToTransfer();
  void File_ListUserFiles_SFO(std::string& _return, const int32_t clientIndex);
  void send_File_ListUserFiles_SFO(const int32_t clientIndex);
  void recv_File_ListUserFiles_SFO(std::string& _return);
  void File_ListUserFiles_SNSFO(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void send_File_ListUserFiles_SNSFO(const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void recv_File_ListUserFiles_SNSFO(std::string& _return);
  void File_DeleteUserFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex);
  void send_File_DeleteUserFile(const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex);
  void recv_File_DeleteUserFile(std::string& _return);
  void File_DeleteUserFiles(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void send_File_DeleteUserFiles(const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void recv_File_DeleteUserFiles(std::string& _return);
  void File_GetCDNUrl(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void send_File_GetCDNUrl(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_GetCDNUrl(std::string& _return);
  void Friend_ReadFriendEntity(std::string& _return, const std::string& entityId, const std::string& friendId, const int32_t clientIndex);
  void send_Friend_ReadFriendEntity(const std::string& entityId, const std::string& friendId, const int32_t clientIndex);
  void recv_Friend_ReadFriendEntity(std::string& _return);
  void Friend_ReadFriendsEntities(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  void send_Friend_ReadFriendsEntities(const std::string& entityType, const int32_t clientIndex);
  void recv_Friend_ReadFriendsEntities(std::string& _return);
  void Friend_ReadFriendUserState(std::string& _return, const std::string& friendId, const int32_t clientIndex);
  void send_Friend_ReadFriendUserState(const std::string& friendId, const int32_t clientIndex);
  void recv_Friend_ReadFriendUserState(std::string& _return);
  void Friend_GetSummaryDataForProfileId(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_Friend_GetSummaryDataForProfileId(const std::string& playerId, const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForProfileId(std::string& _return);
  void Friend_GetSummaryDataForProfileIds(std::string& _return, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void send_Friend_GetSummaryDataForProfileIds(const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForProfileIds(std::string& _return);
  void Friend_GetSummaryDataForFriends(std::string& _return, const int32_t clientIndex);
  void send_Friend_GetSummaryDataForFriends(const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForFriends(std::string& _return);
  void Friend_FindUsersByExactName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void send_Friend_FindUsersByExactName(const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void recv_Friend_FindUsersByExactName(std::string& _return);
  void Friend_FindUsersBySubstrName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void send_Friend_FindUsersBySubstrName(const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void recv_Friend_FindUsersBySubstrName(std::string& _return);
  void Friend_ListFriends(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex);
  void send_Friend_ListFriends(const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex);
  void recv_Friend_ListFriends(std::string& _return);
  void Friend_AddFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void send_Friend_AddFriends(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_AddFriends(std::string& _return);
  void Friend_RemoveFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void send_Friend_RemoveFriends(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_RemoveFriends(std::string& _return);
  void Friend_GetUsersOnlineStatus(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void send_Friend_GetUsersOnlineStatus(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_GetUsersOnlineStatus(std::string& _return);
  void Friend_SendFriendInvitation(std::string& _return, const std::string& toPlayerId, const int32_t clientIndex);
  void send_Friend_SendFriendInvitation(const std::string& toPlayerId, const int32_t clientIndex);
  void recv_Friend_SendFriendInvitation(std::string& _return);
  void Friend_ListFriendInvitationsReceived(std::string& _return, const int32_t clientIndex);
  void send_Friend_ListFriendInvitationsReceived(const int32_t clientIndex);
  void recv_Friend_ListFriendInvitationsReceived(std::string& _return);
  void Friend_ListFriendInvitationsSent(std::string& _return, const int32_t clientIndex);
  void send_Friend_ListFriendInvitationsSent(const int32_t clientIndex);
  void recv_Friend_ListFriendInvitationsSent(std::string& _return);
  void Friend_AcceptFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex);
  void send_Friend_AcceptFriendInvitation(const std::string& fromPlayerId, const int32_t clientIndex);
  void recv_Friend_AcceptFriendInvitation(std::string& _return);
  void Friend_RejectFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex);
  void send_Friend_RejectFriendInvitation(const std::string& fromPlayerId, const int32_t clientIndex);
  void recv_Friend_RejectFriendInvitation(std::string& _return);
  void Friend_RemoveFriend(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_Friend_RemoveFriend(const std::string& playerId, const int32_t clientIndex);
  void recv_Friend_RemoveFriend(std::string& _return);
  void Gamification_ReadAllGamification(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadAllGamification(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAllGamification(std::string& _return);
  void Gamification_ReadMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadMilestones(std::string& _return);
  void Gamification_ReadAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadAchievements(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAchievements(std::string& _return);
  void Gamification_ReadXpLevelsMetaData(std::string& _return, const int32_t clientIndex);
  void send_Gamification_ReadXpLevelsMetaData(const int32_t clientIndex);
  void recv_Gamification_ReadXpLevelsMetaData(std::string& _return);
  void Gamification_ReadAchievedAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadAchievedAchievements(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAchievedAchievements(std::string& _return);
  void Gamification_ReadCompletedMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadCompletedMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadCompletedMilestones(std::string& _return);
  void Gamification_ReadInProgressMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadInProgressMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadInProgressMilestones(std::string& _return);
  void Gamification_ReadMilestonesByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadMilestonesByCategory(const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadMilestonesByCategory(std::string& _return);
  void Gamification_AwardAchievements(std::string& _return, const std::vector<std::string> & achievementIds, const int32_t clientIndex);
  void send_Gamification_AwardAchievements(const std::vector<std::string> & achievementIds, const int32_t clientIndex);
  void recv_Gamification_AwardAchievements(std::string& _return);
  void Gamification_ReadQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuests(std::string& _return);
  void Gamification_ReadCompletedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadCompletedQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadCompletedQuests(std::string& _return);
  void Gamification_ReadInProgressQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadInProgressQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadInProgressQuests(std::string& _return);
  void Gamification_ReadNotStartedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadNotStartedQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadNotStartedQuests(std::string& _return);
  void Gamification_ReadQuestsWithStatus(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadQuestsWithStatus(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithStatus(std::string& _return);
  void Gamification_ReadQuestsWithBasicPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadQuestsWithBasicPercentage(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithBasicPercentage(std::string& _return);
  void Gamification_ReadQuestsWithComplexPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadQuestsWithComplexPercentage(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithComplexPercentage(std::string& _return);
  void Gamification_ReadQuestsByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void send_Gamification_ReadQuestsByCategory(const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsByCategory(std::string& _return);
  void Gamification_ResetMilestones(std::string& _return, const std::vector<std::string> & milestoneIds, const int32_t clientIndex);
  void send_Gamification_ResetMilestones(const std::vector<std::string> & milestoneIds, const int32_t clientIndex);
  void recv_Gamification_ResetMilestones(std::string& _return);
  void GlobalApp_ReadProperties(std::string& _return, const int32_t clientIndex);
  void send_GlobalApp_ReadProperties(const int32_t clientIndex);
  void recv_GlobalApp_ReadProperties(std::string& _return);
  void GlobalEntity_CreateEntity(std::string& _return, const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void send_GlobalEntity_CreateEntity(const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_CreateEntity(std::string& _return);
  void GlobalEntity_CreateEntityWithIndexedId(std::string& _return, const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void send_GlobalEntity_CreateEntityWithIndexedId(const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_CreateEntityWithIndexedId(std::string& _return);
  void GlobalEntity_UpdateEntity(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex);
  void send_GlobalEntity_UpdateEntity(const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntity(std::string& _return);
  void GlobalEntity_UpdateEntityAcl(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void send_GlobalEntity_UpdateEntityAcl(const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityAcl(std::string& _return);
  void GlobalEntity_UpdateEntityTimeToLive(std::string& _return, const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex);
  void send_GlobalEntity_UpdateEntityTimeToLive(const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityTimeToLive(std::string& _return);
  void GlobalEntity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void send_GlobalEntity_DeleteEntity(const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void recv_GlobalEntity_DeleteEntity(std::string& _return);
  void GlobalEntity_ReadEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex);
  void send_GlobalEntity_ReadEntity(const std::string& entityId, const int32_t clientIndex);
  void recv_GlobalEntity_ReadEntity(std::string& _return);
  void GlobalEntity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void send_GlobalEntity_GetList(const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetList(std::string& _return);
  void GlobalEntity_GetListByIndexedId(std::string& _return, const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex);
  void send_GlobalEntity_GetListByIndexedId(const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetListByIndexedId(std::string& _return);
  void GlobalEntity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex);
  void send_GlobalEntity_GetListCount(const std::string& whereJson, const int32_t clientIndex);
  void recv_GlobalEntity_GetListCount(std::string& _return);
  void GlobalEntity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  void send_GlobalEntity_GetPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_GlobalEntity_GetPage(std::string& _return);
  void GlobalEntity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void send_GlobalEntity_GetPageOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_GlobalEntity_GetPageOffset(std::string& _return);
  void GlobalEntity_IncrementGlobalEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void send_GlobalEntity_IncrementGlobalEntityData(const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_GlobalEntity_IncrementGlobalEntityData(std::string& _return);
  void GlobalEntity_GetRandomEntitiesMatching(std::string& _return, const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex);
  void send_GlobalEntity_GetRandomEntitiesMatching(const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetRandomEntitiesMatching(std::string& _return);
  void GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return, const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void send_GlobalEntity_UpdateEntityOwnerAndAcl(const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return);
  void GlobalEntity_MakeSystemEntity(std::string& _return, const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void send_GlobalEntity_MakeSystemEntity(const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void recv_GlobalEntity_MakeSystemEntity(std::string& _return);
  void GlobalStatistics_ReadAllGlobalStats(std::string& _return, const int32_t clientIndex);
  void send_GlobalStatistics_ReadAllGlobalStats(const int32_t clientIndex);
  void recv_GlobalStatistics_ReadAllGlobalStats(std::string& _return);
  void GlobalStatistics_ReadGlobalStatsSubset(std::string& _return, const std::vector<std::string> & globalStats, const int32_t clientIndex);
  void send_GlobalStatistics_ReadGlobalStatsSubset(const std::vector<std::string> & globalStats, const int32_t clientIndex);
  void recv_GlobalStatistics_ReadGlobalStatsSubset(std::string& _return);
  void GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex);
  void send_GlobalStatistics_ReadGlobalStatsForCategory(const std::string& category, const int32_t clientIndex);
  void recv_GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return);
  void GlobalStatistics_IncrementGlobalStats(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  void send_GlobalStatistics_IncrementGlobalStats(const std::string& jsonData, const int32_t clientIndex);
  void recv_GlobalStatistics_IncrementGlobalStats(std::string& _return);
  void GlobalStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void send_GlobalStatistics_ProcessStatistics(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void recv_GlobalStatistics_ProcessStatistics(std::string& _return);
  void Group_AcceptGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_AcceptGroupInvitation(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_AcceptGroupInvitation(std::string& _return);
  void Group_AddGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Group_AddGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_AddGroupMember(std::string& _return);
  void Group_ApproveGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Group_ApproveGroupJoinRequest(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_ApproveGroupJoinRequest(std::string& _return);
  void Group_AutoJoinGroup(std::string& _return, const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex);
  void send_Group_AutoJoinGroup(const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex);
  void recv_Group_AutoJoinGroup(std::string& _return);
  void Group_CancelGroupInvitation(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void send_Group_CancelGroupInvitation(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_CancelGroupInvitation(std::string& _return);
  void Group_CreateGroup(std::string& _return, const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex);
  void send_Group_CreateGroup(const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex);
  void recv_Group_CreateGroup(std::string& _return);
  void Group_CreateGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex);
  void send_Group_CreateGroupEntity(const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_CreateGroupEntity(std::string& _return);
  void Group_DeleteGroup(std::string& _return, const std::string& groupId, const int64_t version, const int32_t clientIndex);
  void send_Group_DeleteGroup(const std::string& groupId, const int64_t version, const int32_t clientIndex);
  void recv_Group_DeleteGroup(std::string& _return);
  void Group_DeleteGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex);
  void send_Group_DeleteGroupEntity(const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex);
  void recv_Group_DeleteGroupEntity(std::string& _return);
  void Group_GetMyGroups(std::string& _return, const int32_t clientIndex);
  void send_Group_GetMyGroups(const int32_t clientIndex);
  void recv_Group_GetMyGroups(std::string& _return);
  void Group_IncrementGroupData(std::string& _return, const std::string& groupId, const std::string& jsonData, const int32_t clientIndex);
  void send_Group_IncrementGroupData(const std::string& groupId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_IncrementGroupData(std::string& _return);
  void Group_IncrementGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void send_Group_IncrementGroupEntityData(const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_IncrementGroupEntityData(std::string& _return);
  void Group_InviteGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Group_InviteGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_InviteGroupMember(std::string& _return);
  void Group_JoinGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_JoinGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_JoinGroup(std::string& _return);
  void Group_LeaveGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_LeaveGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_LeaveGroup(std::string& _return);
  void Group_ListGroupsPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  void send_Group_ListGroupsPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Group_ListGroupsPage(std::string& _return);
  void Group_ListGroupsPageByOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void send_Group_ListGroupsPageByOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Group_ListGroupsPageByOffset(std::string& _return);
  void Group_ListGroupsWithMember(std::string& _return, const std::string& profileId, const int32_t clientIndex);
  void send_Group_ListGroupsWithMember(const std::string& profileId, const int32_t clientIndex);
  void recv_Group_ListGroupsWithMember(std::string& _return);
  void Group_ReadGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_ReadGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroup(std::string& _return);
  void Group_ReadGroupData(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_ReadGroupData(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroupData(std::string& _return);
  void Group_ReadGroupEntitiesPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  void send_Group_ReadGroupEntitiesPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Group_ReadGroupEntitiesPage(std::string& _return);
  void Group_ReadGroupEntitiesPageByOffset(std::string& _return, const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex);
  void send_Group_ReadGroupEntitiesPageByOffset(const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Group_ReadGroupEntitiesPageByOffset(std::string& _return);
  void Group_ReadGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int32_t clientIndex);
  void send_Group_ReadGroupEntity(const std::string& groupId, const std::string& entityId, const int32_t clientIndex);
  void recv_Group_ReadGroupEntity(std::string& _return);
  void Group_ReadGroupMembers(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_ReadGroupMembers(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroupMembers(std::string& _return);
  void Group_RejectGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  void send_Group_RejectGroupInvitation(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_RejectGroupInvitation(std::string& _return);
  void Group_RejectGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void send_Group_RejectGroupJoinRequest(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_RejectGroupJoinRequest(std::string& _return);
  void Group_RemoveGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void send_Group_RemoveGroupMember(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_RemoveGroupMember(std::string& _return);
  void Group_UpdateGroupData(std::string& _return, const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void send_Group_UpdateGroupData(const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_UpdateGroupData(std::string& _return);
  void Group_UpdateGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void send_Group_UpdateGroupEntityData(const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_UpdateGroupEntityData(std::string& _return);
  void Group_UpdateGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Group_UpdateGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_UpdateGroupMember(std::string& _return);
  void Group_UpdateGroupName(std::string& _return, const std::string& groupId, const std::string& name, const int32_t clientIndex);
  void send_Group_UpdateGroupName(const std::string& groupId, const std::string& name, const int32_t clientIndex);
  void recv_Group_UpdateGroupName(std::string& _return);
  void Identity_AttachEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex);
  void send_Identity_AttachEmailIdentity(const std::string& email, const std::string& password, const int32_t clientIndex);
  void recv_Identity_AttachEmailIdentity(std::string& _return);
  void Identity_MergeEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex);
  void send_Identity_MergeEmailIdentity(const std::string& email, const std::string& password, const int32_t clientIndex);
  void recv_Identity_MergeEmailIdentity(std::string& _return);
  void Identity_DetachEmailIdentity(std::string& _return, const std::string& email, const bool continueAnon, const int32_t clientIndex);
  void send_Identity_DetachEmailIdentity(const std::string& email, const bool continueAnon, const int32_t clientIndex);
  void recv_Identity_DetachEmailIdentity(std::string& _return);
  void Identity_AttachUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex);
  void send_Identity_AttachUniversalIdentity(const std::string& userId, const std::string& password, const int32_t clientIndex);
  void recv_Identity_AttachUniversalIdentity(std::string& _return);
  void Identity_MergeUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex);
  void send_Identity_MergeUniversalIdentity(const std::string& userId, const std::string& password, const int32_t clientIndex);
  void recv_Identity_MergeUniversalIdentity(std::string& _return);
  void Identity_DetachUniversalIdentity(std::string& _return, const std::string& userId, const bool continueAnon, const int32_t clientIndex);
  void send_Identity_DetachUniversalIdentity(const std::string& userId, const bool continueAnon, const int32_t clientIndex);
  void recv_Identity_DetachUniversalIdentity(std::string& _return);
  void Identity_SwitchToChildProfile(std::string& _return, const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void send_Identity_SwitchToChildProfile(const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_SwitchToChildProfile(std::string& _return);
  void Identity_SwitchToSingletonChildProfile(std::string& _return, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void send_Identity_SwitchToSingletonChildProfile(const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_SwitchToSingletonChildProfile(std::string& _return);
  void Identity_AttachParentWithIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void send_Identity_AttachParentWithIdentity(const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_AttachParentWithIdentity(std::string& _return);
  void Identity_SwitchToParentProfile(std::string& _return, const std::string& parentLevelName, const int32_t clientIndex);
  void send_Identity_SwitchToParentProfile(const std::string& parentLevelName, const int32_t clientIndex);
  void recv_Identity_SwitchToParentProfile(std::string& _return);
  void Identity_DetachParent(std::string& _return, const int32_t clientIndex);
  void send_Identity_DetachParent(const int32_t clientIndex);
  void recv_Identity_DetachParent(std::string& _return);
  void Identity_GetChildProfiles(std::string& _return, const bool includeSummaryData, const int32_t clientIndex);
  void send_Identity_GetChildProfiles(const bool includeSummaryData, const int32_t clientIndex);
  void recv_Identity_GetChildProfiles(std::string& _return);
  void Identity_GetIdentities(std::string& _return, const int32_t clientIndex);
  void send_Identity_GetIdentities(const int32_t clientIndex);
  void recv_Identity_GetIdentities(std::string& _return);
  void Identity_GetExpiredIdentities(std::string& _return, const int32_t clientIndex);
  void send_Identity_GetExpiredIdentities(const int32_t clientIndex);
  void recv_Identity_GetExpiredIdentities(std::string& _return);
  void Identity_RefreshIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex);
  void send_Identity_RefreshIdentity(const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex);
  void recv_Identity_RefreshIdentity(std::string& _return);
  void Identity_ChangeEmailIdentity(std::string& _return, const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex);
  void send_Identity_ChangeEmailIdentity(const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex);
  void recv_Identity_ChangeEmailIdentity(std::string& _return);
  void Identity_AttachPeerProfile(std::string& _return, const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void send_Identity_AttachPeerProfile(const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_AttachPeerProfile(std::string& _return);
  void Identity_DetachPeer(std::string& _return, const std::string& peer, const int32_t clientIndex);
  void send_Identity_DetachPeer(const std::string& peer, const int32_t clientIndex);
  void recv_Identity_DetachPeer(std::string& _return);
  void Identity_GetPeerProfiles(std::string& _return, const int32_t clientIndex);
  void send_Identity_GetPeerProfiles(const int32_t clientIndex);
  void recv_Identity_GetPeerProfiles(std::string& _return);
  void Mail_SendBasicEmail(std::string& _return, const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex);
  void send_Mail_SendBasicEmail(const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex);
  void recv_Mail_SendBasicEmail(std::string& _return);
  void Mail_SendAdvancedEmail(std::string& _return, const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex);
  void send_Mail_SendAdvancedEmail(const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex);
  void recv_Mail_SendAdvancedEmail(std::string& _return);
  void Mail_SendAdvancedEmailByAddress(std::string& _return, const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex);
  void send_Mail_SendAdvancedEmailByAddress(const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex);
  void recv_Mail_SendAdvancedEmailByAddress(std::string& _return);
  void MatchMaking_Read(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_Read(const int32_t clientIndex);
  void recv_MatchMaking_Read(std::string& _return);
  void MatchMaking_SetPlayerRating(std::string& _return, const int64_t playerRating, const int32_t clientIndex);
  void send_MatchMaking_SetPlayerRating(const int64_t playerRating, const int32_t clientIndex);
  void recv_MatchMaking_SetPlayerRating(std::string& _return);
  void MatchMaking_ResetPlayerRating(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_ResetPlayerRating(const int32_t clientIndex);
  void recv_MatchMaking_ResetPlayerRating(std::string& _return);
  void MatchMaking_IncrementPlayerRating(std::string& _return, const int64_t increment, const int32_t clientIndex);
  void send_MatchMaking_IncrementPlayerRating(const int64_t increment, const int32_t clientIndex);
  void recv_MatchMaking_IncrementPlayerRating(std::string& _return);
  void MatchMaking_DecrementPlayerRating(std::string& _return, const int64_t decrement, const int32_t clientIndex);
  void send_MatchMaking_DecrementPlayerRating(const int64_t decrement, const int32_t clientIndex);
  void recv_MatchMaking_DecrementPlayerRating(std::string& _return);
  void MatchMaking_TurnShieldOn(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_TurnShieldOn(const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOn(std::string& _return);
  void MatchMaking_TurnShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex);
  void send_MatchMaking_TurnShieldOnFor(const int32_t minutes, const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOnFor(std::string& _return);
  void MatchMaking_TurnShieldOff(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_TurnShieldOff(const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOff(std::string& _return);
  void MatchMaking_IncrementShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex);
  void send_MatchMaking_IncrementShieldOnFor(const int32_t minutes, const int32_t clientIndex);
  void recv_MatchMaking_IncrementShieldOnFor(std::string& _return);
  void MatchMaking_GetShieldExpiry(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_MatchMaking_GetShieldExpiry(const std::string& playerId, const int32_t clientIndex);
  void recv_MatchMaking_GetShieldExpiry(std::string& _return);
  void MatchMaking_FindPlayers(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex);
  void send_MatchMaking_FindPlayers(const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayers(std::string& _return);
  void MatchMaking_FindPlayersWithAttributes(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_MatchMaking_FindPlayersWithAttributes(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersWithAttributes(std::string& _return);
  void MatchMaking_FindPlayersUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex);
  void send_MatchMaking_FindPlayersUsingFilter(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersUsingFilter(std::string& _return);
  void MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex);
  void send_MatchMaking_FindPlayersWithAttributesUsingFilter(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return);
  void MatchMaking_EnableMatchMaking(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_EnableMatchMaking(const int32_t clientIndex);
  void recv_MatchMaking_EnableMatchMaking(std::string& _return);
  void MatchMaking_DisableMatchMaking(std::string& _return, const int32_t clientIndex);
  void send_MatchMaking_DisableMatchMaking(const int32_t clientIndex);
  void recv_MatchMaking_DisableMatchMaking(std::string& _return);
  void OneWayMatch_StartMatch(std::string& _return, const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex);
  void send_OneWayMatch_StartMatch(const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex);
  void recv_OneWayMatch_StartMatch(std::string& _return);
  void OneWayMatch_CancelMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  void send_OneWayMatch_CancelMatch(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_OneWayMatch_CancelMatch(std::string& _return);
  void OneWayMatch_CompleteMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  void send_OneWayMatch_CompleteMatch(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_OneWayMatch_CompleteMatch(std::string& _return);
  void PlaybackStream_StartStream(std::string& _return, const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex);
  void send_PlaybackStream_StartStream(const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex);
  void recv_PlaybackStream_StartStream(std::string& _return);
  void PlaybackStream_ReadStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  void send_PlaybackStream_ReadStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_ReadStream(std::string& _return);
  void PlaybackStream_EndStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  void send_PlaybackStream_EndStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_EndStream(std::string& _return);
  void PlaybackStream_DeleteStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  void send_PlaybackStream_DeleteStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_DeleteStream(std::string& _return);
  void PlaybackStream_AddEvent(std::string& _return, const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex);
  void send_PlaybackStream_AddEvent(const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex);
  void recv_PlaybackStream_AddEvent(std::string& _return);
  void PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return, const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void recv_PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return);
  void PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return, const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void send_PlaybackStream_GetRecentStreamsForTargetPlayer(const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void recv_PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return);
  void PlayerState_ReadUserState(std::string& _return, const int32_t clientIndex);
  void send_PlayerState_ReadUserState(const int32_t clientIndex);
  void recv_PlayerState_ReadUserState(std::string& _return);
  void PlayerState_DeleteUser(std::string& _return, const int32_t clientIndex);
  void send_PlayerState_DeleteUser(const int32_t clientIndex);
  void recv_PlayerState_DeleteUser(std::string& _return);
  void PlayerState_ResetUser(std::string& _return, const int32_t clientIndex);
  void send_PlayerState_ResetUser(const int32_t clientIndex);
  void recv_PlayerState_ResetUser(std::string& _return);
  void PlayerState_Logout(std::string& _return, const int32_t clientIndex);
  void send_PlayerState_Logout(const int32_t clientIndex);
  void recv_PlayerState_Logout(std::string& _return);
  void PlayerState_UpdateUserName(std::string& _return, const std::string& userName, const int32_t clientIndex);
  void send_PlayerState_UpdateUserName(const std::string& userName, const int32_t clientIndex);
  void recv_PlayerState_UpdateUserName(std::string& _return);
  void PlayerState_UpdateSummaryFriendData(std::string& _return, const std::string& jsonSummaryData, const int32_t clientIndex);
  void send_PlayerState_UpdateSummaryFriendData(const std::string& jsonSummaryData, const int32_t clientIndex);
  void recv_PlayerState_UpdateSummaryFriendData(std::string& _return);
  void PlayerState_GetAttributes(std::string& _return, const int32_t clientIndex);
  void send_PlayerState_GetAttributes(const int32_t clientIndex);
  void recv_PlayerState_GetAttributes(std::string& _return);
  void PlayerState_UpdateAttributes(std::string& _return, const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex);
  void send_PlayerState_UpdateAttributes(const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex);
  void recv_PlayerState_UpdateAttributes(std::string& _return);
  void PlayerState_RemoveAttributes(std::string& _return, const std::vector<std::string> & attributeNames, const int32_t clientIndex);
  void send_PlayerState_RemoveAttributes(const std::vector<std::string> & attributeNames, const int32_t clientIndex);
  void recv_PlayerState_RemoveAttributes(std::string& _return);
  void PlayerState_UpdateUserPictureUrl(std::string& _return, const std::string& pictureUrl, const int32_t clientIndex);
  void send_PlayerState_UpdateUserPictureUrl(const std::string& pictureUrl, const int32_t clientIndex);
  void recv_PlayerState_UpdateUserPictureUrl(std::string& _return);
  void PlayerState_UpdateContactEmail(std::string& _return, const std::string& contactEmail, const int32_t clientIndex);
  void send_PlayerState_UpdateContactEmail(const std::string& contactEmail, const int32_t clientIndex);
  void recv_PlayerState_UpdateContactEmail(std::string& _return);
  void PlayerStatistics_ReadAllUserStats(std::string& _return, const int32_t clientIndex);
  void send_PlayerStatistics_ReadAllUserStats(const int32_t clientIndex);
  void recv_PlayerStatistics_ReadAllUserStats(std::string& _return);
  void PlayerStatistics_ReadUserStatsSubset(std::string& _return, const std::vector<std::string> & playerStats, const int32_t clientIndex);
  void send_PlayerStatistics_ReadUserStatsSubset(const std::vector<std::string> & playerStats, const int32_t clientIndex);
  void recv_PlayerStatistics_ReadUserStatsSubset(std::string& _return);
  void PlayerStatistics_ReadUserStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex);
  void send_PlayerStatistics_ReadUserStatsForCategory(const std::string& category, const int32_t clientIndex);
  void recv_PlayerStatistics_ReadUserStatsForCategory(std::string& _return);
  void PlayerStatistics_ResetAllUserStats(std::string& _return, const int32_t clientIndex);
  void send_PlayerStatistics_ResetAllUserStats(const int32_t clientIndex);
  void recv_PlayerStatistics_ResetAllUserStats(std::string& _return);
  void PlayerStatistics_IncrementUserStats_SSFO(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  void send_PlayerStatistics_IncrementUserStats_SSFO(const std::string& jsonData, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementUserStats_SSFO(std::string& _return);
  void PlayerStatistics_IncrementUserStats_DSFO(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex);
  void send_PlayerStatistics_IncrementUserStats_DSFO(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementUserStats_DSFO(std::string& _return);
  void PlayerStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void send_PlayerStatistics_ProcessStatistics(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void recv_PlayerStatistics_ProcessStatistics(std::string& _return);
  void PlayerStatistics_GetNextExperienceLevel(std::string& _return, const int32_t clientIndex);
  void send_PlayerStatistics_GetNextExperienceLevel(const int32_t clientIndex);
  void recv_PlayerStatistics_GetNextExperienceLevel(std::string& _return);
  void PlayerStatistics_IncrementExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex);
  void send_PlayerStatistics_IncrementExperiencePoints(const int32_t xpValue, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementExperiencePoints(std::string& _return);
  void PlayerStatistics_SetExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex);
  void send_PlayerStatistics_SetExperiencePoints(const int32_t xpValue, const int32_t clientIndex);
  void recv_PlayerStatistics_SetExperiencePoints(std::string& _return);
  void PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return, const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex);
  void send_PlayerStatisticsEvent_TriggerStatsEvent(const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex);
  void recv_PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return);
  void PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  void send_PlayerStatisticsEvent_TriggerStatsEvents(const std::string& jsonData, const int32_t clientIndex);
  void recv_PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return);
  void Product_GetCurrency(std::string& _return, const std::string& currencyType, const int32_t clientIndex);
  void send_Product_GetCurrency(const std::string& currencyType, const int32_t clientIndex);
  void recv_Product_GetCurrency(std::string& _return);
  void Product_GetSalesInventory(std::string& _return, const std::string& platform, const std::string& userCurrency, const int32_t clientIndex);
  void send_Product_GetSalesInventory(const std::string& platform, const std::string& userCurrency, const int32_t clientIndex);
  void recv_Product_GetSalesInventory(std::string& _return);
  void Product_GetSalesInventoryByCategory(std::string& _return, const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex);
  void send_Product_GetSalesInventoryByCategory(const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex);
  void recv_Product_GetSalesInventoryByCategory(std::string& _return);
  void Product_VerifyMicrosoftReceipt(std::string& _return, const std::string& receipt, const int32_t clientIndex);
  void send_Product_VerifyMicrosoftReceipt(const std::string& receipt, const int32_t clientIndex);
  void recv_Product_VerifyMicrosoftReceipt(std::string& _return);
  void Product_GetEligiblePromotions(std::string& _return, const int32_t clientIndex);
  void send_Product_GetEligiblePromotions(const int32_t clientIndex);
  void recv_Product_GetEligiblePromotions(std::string& _return);
  void Product_VerifyItunesReceipt(std::string& _return, const std::string& base64EncReceiptData, const int32_t clientIndex);
  void send_Product_VerifyItunesReceipt(const std::string& base64EncReceiptData, const int32_t clientIndex);
  void recv_Product_VerifyItunesReceipt(std::string& _return);
  void Profanity_ProfanityCheck(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void send_Profanity_ProfanityCheck(const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityCheck(std::string& _return);
  void Profanity_ProfanityReplaceText(std::string& _return, const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void send_Profanity_ProfanityReplaceText(const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityReplaceText(std::string& _return);
  void Profanity_ProfanityIdentifyBadWords(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void send_Profanity_ProfanityIdentifyBadWords(const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityIdentifyBadWords(std::string& _return);
  void PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return, const int32_t clientIndex);
  void send_PushNotification_DeregisterAllPushNotificationDeviceTokens(const int32_t clientIndex);
  void recv_PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return);
  void PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex);
  void send_PushNotification_DeregisterPushNotificationDeviceToken(const std::string& platform, const std::string& token, const int32_t clientIndex);
  void recv_PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return);
  void PushNotification_RegisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex);
  void send_PushNotification_RegisterPushNotificationDeviceToken(const std::string& platform, const std::string& token, const int32_t clientIndex);
  void recv_PushNotification_RegisterPushNotificationDeviceToken(std::string& _return);
  void PushNotification_SendSimplePushNotification(std::string& _return, const std::string& toProfileId, const std::string& message, const int32_t clientIndex);
  void send_PushNotification_SendSimplePushNotification(const std::string& toProfileId, const std::string& message, const int32_t clientIndex);
  void recv_PushNotification_SendSimplePushNotification(std::string& _return);
  void PushNotification_SendRichPushNotification(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex);
  void send_PushNotification_SendRichPushNotification(const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex);
  void recv_PushNotification_SendRichPushNotification(std::string& _return);
  void PushNotification_SendRichPushNotificationWithParams(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex);
  void send_PushNotification_SendRichPushNotificationWithParams(const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex);
  void recv_PushNotification_SendRichPushNotificationWithParams(std::string& _return);
  void PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return, const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex);
  void send_PushNotification_SendTemplatedPushNotificationToGroup(const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex);
  void recv_PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return);
  void PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void send_PushNotification_SendNormalizedPushNotificationToGroup(const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return);
  void PushNotification_ScheduleRawPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex);
  void send_PushNotification_ScheduleRawPushNotificationUTC(const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRawPushNotificationUTC(std::string& _return);
  void PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex);
  void send_PushNotification_ScheduleRawPushNotificationMinutes(const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return);
  void PushNotification_SendRawPushNotification(std::string& _return, const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void send_PushNotification_SendRawPushNotification(const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotification(std::string& _return);
  void PushNotification_SendRawPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void send_PushNotification_SendRawPushNotificationBatch(const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotificationBatch(std::string& _return);
  void PushNotification_SendRawPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void send_PushNotification_SendRawPushNotificationToGroup(const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotificationToGroup(std::string& _return);
  void PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex);
  void send_PushNotification_ScheduleNormalizedPushNotificationUTC(const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return);
  void PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void send_PushNotification_ScheduleNormalizedPushNotificationMinutes(const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return);
  void PushNotification_ScheduleRichPushNotificationUTC(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex);
  void send_PushNotification_ScheduleRichPushNotificationUTC(const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRichPushNotificationUTC(std::string& _return);
  void PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void send_PushNotification_ScheduleRichPushNotificationMinutes(const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return);
  void PushNotification_SendNormalizedPushNotification(std::string& _return, const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void send_PushNotification_SendNormalizedPushNotification(const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotification(std::string& _return);
  void PushNotification_SendNormalizedPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void send_PushNotification_SendNormalizedPushNotificationBatch(const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotificationBatch(std::string& _return);
  void Script_RunScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex);
  void send_Script_RunScript(const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex);
  void recv_Script_RunScript(std::string& _return);
  void Script_ScheduleRunScriptUTC(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex);
  void send_Script_ScheduleRunScriptUTC(const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex);
  void recv_Script_ScheduleRunScriptUTC(std::string& _return);
  void Script_ScheduleRunScriptMinutes(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex);
  void send_Script_ScheduleRunScriptMinutes(const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex);
  void recv_Script_ScheduleRunScriptMinutes(std::string& _return);
  void Script_RunParentScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex);
  void send_Script_RunParentScript(const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex);
  void recv_Script_RunParentScript(std::string& _return);
  void Script_CancelScheduledScript(std::string& _return, const std::string& jobId, const int32_t clientIndex);
  void send_Script_CancelScheduledScript(const std::string& jobId, const int32_t clientIndex);
  void recv_Script_CancelScheduledScript(std::string& _return);
  void Script_RunPeerScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void send_Script_RunPeerScript(const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void recv_Script_RunPeerScript(std::string& _return);
  void Script_RunPeerScriptAsynch(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void send_Script_RunPeerScriptAsynch(const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void recv_Script_RunPeerScriptAsynch(std::string& _return);
  void SocialLeaderboard_GetSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex);
  void send_SocialLeaderboard_GetSocialLeaderboard(const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetSocialLeaderboard(std::string& _return);
  void SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex);
  void send_SocialLeaderboard_GetMultiSocialLeaderboard(const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardPage(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardView(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardVersions(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return);
  void SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGroupSocialLeaderboard(const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return);
  void SocialLeaderboard_PostScoreToLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex);
  void send_SocialLeaderboard_PostScoreToLeaderboard(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToLeaderboard(std::string& _return);
  void SocialLeaderboard_RemovePlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_SocialLeaderboard_RemovePlayerScore(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_RemovePlayerScore(std::string& _return);
  void SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex);
  void send_SocialLeaderboard_PostScoreToDynamicLeaderboard(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return);
  void SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex);
  void send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return);
  void SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void send_SocialLeaderboard_GetPlayersSocialLeaderboard(const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return);
  void SocialLeaderboard_ListLeaderboards(std::string& _return, const int32_t clientIndex);
  void send_SocialLeaderboard_ListLeaderboards(const int32_t clientIndex);
  void recv_SocialLeaderboard_ListLeaderboards(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return);
  void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return);
  void SocialLeaderboard_GetPlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_SocialLeaderboard_GetPlayerScore(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayerScore(std::string& _return);
  void SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t clientIndex);
  void send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(const std::vector<std::string> & leaderboardIds, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return);
  void Time_ReadServerTime(std::string& _return, const int32_t clientIndex);
  void send_Time_ReadServerTime(const int32_t clientIndex);
  void recv_Time_ReadServerTime(std::string& _return);
  void Tournament_ClaimTournamentReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_Tournament_ClaimTournamentReward(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_ClaimTournamentReward(std::string& _return);
  void Tournament_GetTournamentStatus(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_Tournament_GetTournamentStatus(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_GetTournamentStatus(std::string& _return);
  void Tournament_JoinTournament(std::string& _return, const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex);
  void send_Tournament_JoinTournament(const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex);
  void recv_Tournament_JoinTournament(std::string& _return);
  void Tournament_LeaveTournament(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  void send_Tournament_LeaveTournament(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_Tournament_LeaveTournament(std::string& _return);
  void Tournament_PostTournamentScore(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex);
  void send_Tournament_PostTournamentScore(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex);
  void recv_Tournament_PostTournamentScore(std::string& _return);
  void Tournament_PostTournamentScoreWithResults(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex);
  void send_Tournament_PostTournamentScoreWithResults(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex);
  void recv_Tournament_PostTournamentScoreWithResults(std::string& _return);
  void Tournament_ViewCurrentReward(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  void send_Tournament_ViewCurrentReward(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_Tournament_ViewCurrentReward(std::string& _return);
  void Tournament_ViewReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void send_Tournament_ViewReward(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_ViewReward(std::string& _return);
  void Lobby_CreateLobby(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Lobby_CreateLobby(const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Lobby_CreateLobby(std::string& _return);
  void Lobby_OpenLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  void send_Lobby_OpenLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_OpenLobby(std::string& _return);
  void Lobby_CloseLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  void send_Lobby_CloseLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_CloseLobby(std::string& _return);
  void Lobby_FindLobbies(std::string& _return, const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex);
  void send_Lobby_FindLobbies(const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Lobby_FindLobbies(std::string& _return);
  void Lobby_FindFriendsLobbies(std::string& _return, const int32_t clientIndex);
  void send_Lobby_FindFriendsLobbies(const int32_t clientIndex);
  void recv_Lobby_FindFriendsLobbies(std::string& _return);
  void Lobby_JoinLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  void send_Lobby_JoinLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_JoinLobby(std::string& _return);
  void Lobby_LeaveLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  void send_Lobby_LeaveLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_LeaveLobby(std::string& _return);
  void Lobby_DestroyLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  void send_Lobby_DestroyLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_DestroyLobby(std::string& _return);
  void Lobby_StartGame(std::string& _return, const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex);
  void send_Lobby_StartGame(const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex);
  void recv_Lobby_StartGame(std::string& _return);
  void Lobby_GetMyLobbies(std::string& _return, const int32_t clientIndex);
  void send_Lobby_GetMyLobbies(const int32_t clientIndex);
  void recv_Lobby_GetMyLobbies(std::string& _return);
  void Party_AcceptPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  void send_Party_AcceptPartyInvitation(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_AcceptPartyInvitation(std::string& _return);
  void Party_GetPartyInfo(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  void send_Party_GetPartyInfo(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_GetPartyInfo(std::string& _return);
  void Party_JoinParty(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  void send_Party_JoinParty(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_JoinParty(std::string& _return);
  void Party_LeaveParty(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  void send_Party_LeaveParty(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_LeaveParty(std::string& _return);
  void Party_RejectPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  void send_Party_RejectPartyInvitation(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_RejectPartyInvitation(std::string& _return);
  void Party_SendPartyInvitation(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_Party_SendPartyInvitation(const std::string& playerId, const int32_t clientIndex);
  void recv_Party_SendPartyInvitation(std::string& _return);
  void Party_ListPartyInvitations(std::string& _return, const int32_t clientIndex);
  void send_Party_ListPartyInvitations(const int32_t clientIndex);
  void recv_Party_ListPartyInvitations(std::string& _return);
  void Party_GetFriendsParties(std::string& _return, const int32_t maxResults, const int32_t clientIndex);
  void send_Party_GetFriendsParties(const int32_t maxResults, const int32_t clientIndex);
  void recv_Party_GetFriendsParties(std::string& _return);
  void Party_GetMyParty(std::string& _return, const int32_t clientIndex);
  void send_Party_GetMyParty(const int32_t clientIndex);
  void recv_Party_GetMyParty(std::string& _return);
  void Patch_GetGameManifest(std::string& _return, const std::string& gameId, const int32_t clientIndex);
  void send_Patch_GetGameManifest(const std::string& gameId, const int32_t clientIndex);
  void recv_Patch_GetGameManifest(std::string& _return);
  void SocialFeed_ShareVideo(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareVideo(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareVideo(std::string& _return);
  void SocialFeed_ShareScreenshot(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareScreenshot(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareScreenshot(std::string& _return);
  void SocialFeed_ShareAchievement(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareAchievement(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareAchievement(std::string& _return);
  void SocialFeed_ShareApp(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareApp(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareApp(std::string& _return);
  void SocialFeed_ShareChannel(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareChannel(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareChannel(std::string& _return);
  void SocialFeed_ShareLink(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareLink(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareLink(std::string& _return);
  void SocialFeed_ShareGameGuide(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void send_SocialFeed_ShareGameGuide(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareGameGuide(std::string& _return);
  void SocialFeed_ReadSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void send_SocialFeed_ReadSocialFeed(const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_ReadSocialFeed(std::string& _return);
  void SocialFeed_ReadFilteredSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void send_SocialFeed_ReadFilteredSocialFeed(const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void recv_SocialFeed_ReadFilteredSocialFeed(std::string& _return);
  void SocialFeed_ReadFriendsSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void send_SocialFeed_ReadFriendsSocialFeed(const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_ReadFriendsSocialFeed(std::string& _return);
  void SocialFeed_PostComment(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void send_SocialFeed_PostComment(const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void recv_SocialFeed_PostComment(std::string& _return);
  void SocialFeed_PostCommentReply(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void send_SocialFeed_PostCommentReply(const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void recv_SocialFeed_PostCommentReply(std::string& _return);
  void SocialFeed_ReadComments(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void send_SocialFeed_ReadComments(const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void recv_SocialFeed_ReadComments(std::string& _return);
  void SocialFeed_ReadCommentReplies(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void send_SocialFeed_ReadCommentReplies(const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void recv_SocialFeed_ReadCommentReplies(std::string& _return);
  void SocialFeed_LikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  void send_SocialFeed_LikeComment(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_LikeComment(std::string& _return);
  void SocialFeed_LikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  void send_SocialFeed_LikeActivity(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_LikeActivity(std::string& _return);
  void SocialFeed_UnlikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  void send_SocialFeed_UnlikeComment(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_UnlikeComment(std::string& _return);
  void SocialFeed_UnlikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  void send_SocialFeed_UnlikeActivity(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_UnlikeActivity(std::string& _return);
  void SocialFeed_SetFeedVisibility(std::string& _return, const std::string& visibility, const int32_t clientIndex);
  void send_SocialFeed_SetFeedVisibility(const std::string& visibility, const int32_t clientIndex);
  void recv_SocialFeed_SetFeedVisibility(std::string& _return);
  void SocialFeed_BlockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_SocialFeed_BlockPlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_BlockPlayer(std::string& _return);
  void SocialFeed_HidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_SocialFeed_HidePlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_HidePlayer(std::string& _return);
  void SocialFeed_UnblockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_SocialFeed_UnblockPlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_UnblockPlayer(std::string& _return);
  void SocialFeed_UnhidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  void send_SocialFeed_UnhidePlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_UnhidePlayer(std::string& _return);
  void SocialFeed_GetActivity(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void send_SocialFeed_GetActivity(const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_GetActivity(std::string& _return);
  void SocialFeed_GetComment(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void send_SocialFeed_GetComment(const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_GetComment(std::string& _return);
  void Telemetry_StartTelemetrySession(std::string& _return, const int32_t timestamp, const int32_t clientIndex);
  void send_Telemetry_StartTelemetrySession(const int32_t timestamp, const int32_t clientIndex);
  void recv_Telemetry_StartTelemetrySession(std::string& _return);
  void Telemetry_EndTelemetrySession(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex);
  void send_Telemetry_EndTelemetrySession(const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex);
  void recv_Telemetry_EndTelemetrySession(std::string& _return);
  void Telemetry_LogTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void send_Telemetry_LogTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_LogTelemetryEvent(std::string& _return);
  void Telemetry_StartTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void send_Telemetry_StartTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_StartTelemetryEvent(std::string& _return);
  void Telemetry_EndTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void send_Telemetry_EndTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_EndTelemetryEvent(std::string& _return);
  void Authentication_GetWeChatQRPageURL(std::string& _return, const int32_t clientIndex);
  void send_Authentication_GetWeChatQRPageURL(const int32_t clientIndex);
  void recv_Authentication_GetWeChatQRPageURL(std::string& _return);
  void File_DownloadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex);
  void send_File_DownloadFile(const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex);
  void recv_File_DownloadFile(std::string& _return);
  void File_GetDownloadInfo(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void send_File_GetDownloadInfo(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_GetDownloadInfo(std::string& _return);
  void File_CancelDownload(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void send_File_CancelDownload(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_CancelDownload(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BrainCloudServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BrainCloudServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AsyncMatch_CreateMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_CreateMatchWithInitialTurn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_SubmitTurn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_UpdateMatchSummaryData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_CompleteMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_ReadMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_ReadMatchHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_FindMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_FindCompleteMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_AbandonMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AsyncMatch_DeleteMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_GenerateAnonymousId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_Initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_ClearSavedProfileID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticateAnonymous(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticateEmailPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticateUniversal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticateExternal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticatePhone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_AuthenticateWechat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_ResetEmailPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_RequestSmsCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_GetSessionId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_IsAuthenticated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_IsInitialized(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_Initialize_SSS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_Initialize_SSSS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_InitializeIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_EnableLogging(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_ResetCommunication(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_SetPacketTimeouts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_SetPacketTimeoutsToDefault(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_GetPacketTimeouts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_SetAuthenticationPacketTimeout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_GetAuthenticationPacketTimeout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_GetUploadLowTransferRateTimeout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_SetUploadLowTransferRateTimeout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_GetUploadLowTransferRateThreshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_SetUploadLowTransferRateThreshold(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_EnableNetworkErrorMessageCaching(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_RetryCachedMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_FlushCachedMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_InsertEndOfMessageBundleMarker(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_OverrideCountryCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Client_OverrideLanguageCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DataStream_CustomPageEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DataStream_CustomScreenEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DataStream_CustomTrackEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_CreateEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetEntitiesByType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_UpdateEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_UpdateSharedEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_DeleteEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_UpdateSingleton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_DeleteSingleton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetSingleton(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetSharedEntityForProfileId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetSharedEntitiesForProfileId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetSharedEntitiesListForProfileId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetListCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_GetPageOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_IncrementUserEntityData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Entity_IncrementSharedUserEntityData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Event_SendEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Event_UpdateIncomingEventData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Event_DeleteIncomingEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Event_GetEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_UploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_CancelUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_GetUploadProgress(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_GetUploadBytesTransferred(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_GetUploadTotalBytesToTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_ListUserFiles_SFO(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_ListUserFiles_SNSFO(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_DeleteUserFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_DeleteUserFiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_GetCDNUrl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ReadFriendEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ReadFriendsEntities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ReadFriendUserState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_GetSummaryDataForProfileId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_GetSummaryDataForProfileIds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_GetSummaryDataForFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_FindUsersByExactName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_FindUsersBySubstrName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ListFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_AddFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_RemoveFriends(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_GetUsersOnlineStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_SendFriendInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ListFriendInvitationsReceived(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_ListFriendInvitationsSent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_AcceptFriendInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_RejectFriendInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Friend_RemoveFriend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadAllGamification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadMilestones(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadAchievements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadXpLevelsMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadAchievedAchievements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadCompletedMilestones(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadInProgressMilestones(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadMilestonesByCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_AwardAchievements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadQuests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadCompletedQuests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadInProgressQuests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadNotStartedQuests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadQuestsWithStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadQuestsWithBasicPercentage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadQuestsWithComplexPercentage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ReadQuestsByCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Gamification_ResetMilestones(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalApp_ReadProperties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_CreateEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_CreateEntityWithIndexedId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_UpdateEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_UpdateEntityAcl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_UpdateEntityTimeToLive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_DeleteEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_ReadEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetListByIndexedId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetListCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetPageOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_IncrementGlobalEntityData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_GetRandomEntitiesMatching(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_UpdateEntityOwnerAndAcl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalEntity_MakeSystemEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalStatistics_ReadAllGlobalStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalStatistics_ReadGlobalStatsSubset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalStatistics_ReadGlobalStatsForCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalStatistics_IncrementGlobalStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GlobalStatistics_ProcessStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_AcceptGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_AddGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ApproveGroupJoinRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_AutoJoinGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_CancelGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_CreateGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_CreateGroupEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_DeleteGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_DeleteGroupEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_GetMyGroups(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_IncrementGroupData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_IncrementGroupEntityData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_InviteGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_JoinGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_LeaveGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ListGroupsPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ListGroupsPageByOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ListGroupsWithMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroupData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroupEntitiesPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroupEntitiesPageByOffset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroupEntity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_ReadGroupMembers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_RejectGroupInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_RejectGroupJoinRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_RemoveGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_UpdateGroupData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_UpdateGroupEntityData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_UpdateGroupMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Group_UpdateGroupName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_AttachEmailIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_MergeEmailIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_DetachEmailIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_AttachUniversalIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_MergeUniversalIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_DetachUniversalIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_SwitchToChildProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_SwitchToSingletonChildProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_AttachParentWithIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_SwitchToParentProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_DetachParent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_GetChildProfiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_GetIdentities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_GetExpiredIdentities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_RefreshIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_ChangeEmailIdentity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_AttachPeerProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_DetachPeer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Identity_GetPeerProfiles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Mail_SendBasicEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Mail_SendAdvancedEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Mail_SendAdvancedEmailByAddress(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_Read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_SetPlayerRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_ResetPlayerRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_IncrementPlayerRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_DecrementPlayerRating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_TurnShieldOn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_TurnShieldOnFor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_TurnShieldOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_IncrementShieldOnFor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_GetShieldExpiry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_FindPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_FindPlayersWithAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_FindPlayersUsingFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_FindPlayersWithAttributesUsingFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_EnableMatchMaking(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MatchMaking_DisableMatchMaking(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OneWayMatch_StartMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OneWayMatch_CancelMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_OneWayMatch_CompleteMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_StartStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_ReadStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_EndStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_DeleteStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_AddEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_GetRecentStreamsForInitiatingPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlaybackStream_GetRecentStreamsForTargetPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_ReadUserState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_DeleteUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_ResetUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_Logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_UpdateUserName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_UpdateSummaryFriendData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_GetAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_UpdateAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_RemoveAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_UpdateUserPictureUrl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerState_UpdateContactEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_ReadAllUserStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_ReadUserStatsSubset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_ReadUserStatsForCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_ResetAllUserStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_IncrementUserStats_SSFO(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_IncrementUserStats_DSFO(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_ProcessStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_GetNextExperienceLevel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_IncrementExperiencePoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatistics_SetExperiencePoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatisticsEvent_TriggerStatsEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PlayerStatisticsEvent_TriggerStatsEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_GetCurrency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_GetSalesInventory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_GetSalesInventoryByCategory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_VerifyMicrosoftReceipt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_GetEligiblePromotions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Product_VerifyItunesReceipt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Profanity_ProfanityCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Profanity_ProfanityReplaceText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Profanity_ProfanityIdentifyBadWords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_DeregisterAllPushNotificationDeviceTokens(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_DeregisterPushNotificationDeviceToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_RegisterPushNotificationDeviceToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendSimplePushNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendRichPushNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendRichPushNotificationWithParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendTemplatedPushNotificationToGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendNormalizedPushNotificationToGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleRawPushNotificationUTC(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleRawPushNotificationMinutes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendRawPushNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendRawPushNotificationBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendRawPushNotificationToGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleNormalizedPushNotificationUTC(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleNormalizedPushNotificationMinutes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleRichPushNotificationUTC(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_ScheduleRichPushNotificationMinutes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendNormalizedPushNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PushNotification_SendNormalizedPushNotificationBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_RunScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_ScheduleRunScriptUTC(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_ScheduleRunScriptMinutes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_RunParentScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_CancelScheduledScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_RunPeerScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Script_RunPeerScriptAsynch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetSocialLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetMultiSocialLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardView(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardVersions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGroupSocialLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_PostScoreToLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_RemovePlayerScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_PostScoreToDynamicLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetPlayersSocialLeaderboard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_ListLeaderboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardEntryCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetPlayerScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialLeaderboard_GetPlayerScoresFromLeaderboards(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Time_ReadServerTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_ClaimTournamentReward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_GetTournamentStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_JoinTournament(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_LeaveTournament(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_PostTournamentScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_PostTournamentScoreWithResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_ViewCurrentReward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Tournament_ViewReward(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_CreateLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_OpenLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_CloseLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_FindLobbies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_FindFriendsLobbies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_JoinLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_LeaveLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_DestroyLobby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_StartGame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Lobby_GetMyLobbies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_AcceptPartyInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_GetPartyInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_JoinParty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_LeaveParty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_RejectPartyInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_SendPartyInvitation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_ListPartyInvitations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_GetFriendsParties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Party_GetMyParty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Patch_GetGameManifest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareScreenshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareAchievement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareApp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareLink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ShareGameGuide(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ReadSocialFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ReadFilteredSocialFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ReadFriendsSocialFeed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_PostComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_PostCommentReply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ReadComments(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_ReadCommentReplies(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_LikeComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_LikeActivity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_UnlikeComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_UnlikeActivity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_SetFeedVisibility(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_BlockPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_HidePlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_UnblockPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_UnhidePlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_GetActivity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SocialFeed_GetComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Telemetry_StartTelemetrySession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Telemetry_EndTelemetrySession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Telemetry_LogTelemetryEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Telemetry_StartTelemetryEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Telemetry_EndTelemetryEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authentication_GetWeChatQRPageURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_DownloadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_GetDownloadInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_File_CancelDownload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BrainCloudServiceProcessor(::apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> iface) :
    iface_(iface) {
    processMap_["AsyncMatch_CreateMatch"] = &BrainCloudServiceProcessor::process_AsyncMatch_CreateMatch;
    processMap_["AsyncMatch_CreateMatchWithInitialTurn"] = &BrainCloudServiceProcessor::process_AsyncMatch_CreateMatchWithInitialTurn;
    processMap_["AsyncMatch_SubmitTurn"] = &BrainCloudServiceProcessor::process_AsyncMatch_SubmitTurn;
    processMap_["AsyncMatch_UpdateMatchSummaryData"] = &BrainCloudServiceProcessor::process_AsyncMatch_UpdateMatchSummaryData;
    processMap_["AsyncMatch_CompleteMatch"] = &BrainCloudServiceProcessor::process_AsyncMatch_CompleteMatch;
    processMap_["AsyncMatch_ReadMatch"] = &BrainCloudServiceProcessor::process_AsyncMatch_ReadMatch;
    processMap_["AsyncMatch_ReadMatchHistory"] = &BrainCloudServiceProcessor::process_AsyncMatch_ReadMatchHistory;
    processMap_["AsyncMatch_FindMatches"] = &BrainCloudServiceProcessor::process_AsyncMatch_FindMatches;
    processMap_["AsyncMatch_FindCompleteMatches"] = &BrainCloudServiceProcessor::process_AsyncMatch_FindCompleteMatches;
    processMap_["AsyncMatch_AbandonMatch"] = &BrainCloudServiceProcessor::process_AsyncMatch_AbandonMatch;
    processMap_["AsyncMatch_DeleteMatch"] = &BrainCloudServiceProcessor::process_AsyncMatch_DeleteMatch;
    processMap_["Authentication_GenerateAnonymousId"] = &BrainCloudServiceProcessor::process_Authentication_GenerateAnonymousId;
    processMap_["Authentication_Initialize"] = &BrainCloudServiceProcessor::process_Authentication_Initialize;
    processMap_["Authentication_ClearSavedProfileID"] = &BrainCloudServiceProcessor::process_Authentication_ClearSavedProfileID;
    processMap_["Authentication_AuthenticateAnonymous"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticateAnonymous;
    processMap_["Authentication_AuthenticateEmailPassword"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticateEmailPassword;
    processMap_["Authentication_AuthenticateUniversal"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticateUniversal;
    processMap_["Authentication_AuthenticateExternal"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticateExternal;
    processMap_["Authentication_AuthenticatePhone"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticatePhone;
    processMap_["Authentication_AuthenticateWechat"] = &BrainCloudServiceProcessor::process_Authentication_AuthenticateWechat;
    processMap_["Authentication_ResetEmailPassword"] = &BrainCloudServiceProcessor::process_Authentication_ResetEmailPassword;
    processMap_["Authentication_RequestSmsCode"] = &BrainCloudServiceProcessor::process_Authentication_RequestSmsCode;
    processMap_["Client_GetSessionId"] = &BrainCloudServiceProcessor::process_Client_GetSessionId;
    processMap_["Client_IsAuthenticated"] = &BrainCloudServiceProcessor::process_Client_IsAuthenticated;
    processMap_["Client_IsInitialized"] = &BrainCloudServiceProcessor::process_Client_IsInitialized;
    processMap_["Client_Initialize_SSS"] = &BrainCloudServiceProcessor::process_Client_Initialize_SSS;
    processMap_["Client_Initialize_SSSS"] = &BrainCloudServiceProcessor::process_Client_Initialize_SSSS;
    processMap_["Client_InitializeIdentity"] = &BrainCloudServiceProcessor::process_Client_InitializeIdentity;
    processMap_["Client_Update"] = &BrainCloudServiceProcessor::process_Client_Update;
    processMap_["Client_EnableLogging"] = &BrainCloudServiceProcessor::process_Client_EnableLogging;
    processMap_["Client_ResetCommunication"] = &BrainCloudServiceProcessor::process_Client_ResetCommunication;
    processMap_["Client_SetPacketTimeouts"] = &BrainCloudServiceProcessor::process_Client_SetPacketTimeouts;
    processMap_["Client_SetPacketTimeoutsToDefault"] = &BrainCloudServiceProcessor::process_Client_SetPacketTimeoutsToDefault;
    processMap_["Client_GetPacketTimeouts"] = &BrainCloudServiceProcessor::process_Client_GetPacketTimeouts;
    processMap_["Client_SetAuthenticationPacketTimeout"] = &BrainCloudServiceProcessor::process_Client_SetAuthenticationPacketTimeout;
    processMap_["Client_GetAuthenticationPacketTimeout"] = &BrainCloudServiceProcessor::process_Client_GetAuthenticationPacketTimeout;
    processMap_["Client_GetUploadLowTransferRateTimeout"] = &BrainCloudServiceProcessor::process_Client_GetUploadLowTransferRateTimeout;
    processMap_["Client_SetUploadLowTransferRateTimeout"] = &BrainCloudServiceProcessor::process_Client_SetUploadLowTransferRateTimeout;
    processMap_["Client_GetUploadLowTransferRateThreshold"] = &BrainCloudServiceProcessor::process_Client_GetUploadLowTransferRateThreshold;
    processMap_["Client_SetUploadLowTransferRateThreshold"] = &BrainCloudServiceProcessor::process_Client_SetUploadLowTransferRateThreshold;
    processMap_["Client_EnableNetworkErrorMessageCaching"] = &BrainCloudServiceProcessor::process_Client_EnableNetworkErrorMessageCaching;
    processMap_["Client_RetryCachedMessages"] = &BrainCloudServiceProcessor::process_Client_RetryCachedMessages;
    processMap_["Client_FlushCachedMessages"] = &BrainCloudServiceProcessor::process_Client_FlushCachedMessages;
    processMap_["Client_InsertEndOfMessageBundleMarker"] = &BrainCloudServiceProcessor::process_Client_InsertEndOfMessageBundleMarker;
    processMap_["Client_OverrideCountryCode"] = &BrainCloudServiceProcessor::process_Client_OverrideCountryCode;
    processMap_["Client_OverrideLanguageCode"] = &BrainCloudServiceProcessor::process_Client_OverrideLanguageCode;
    processMap_["DataStream_CustomPageEvent"] = &BrainCloudServiceProcessor::process_DataStream_CustomPageEvent;
    processMap_["DataStream_CustomScreenEvent"] = &BrainCloudServiceProcessor::process_DataStream_CustomScreenEvent;
    processMap_["DataStream_CustomTrackEvent"] = &BrainCloudServiceProcessor::process_DataStream_CustomTrackEvent;
    processMap_["Entity_CreateEntity"] = &BrainCloudServiceProcessor::process_Entity_CreateEntity;
    processMap_["Entity_GetEntitiesByType"] = &BrainCloudServiceProcessor::process_Entity_GetEntitiesByType;
    processMap_["Entity_UpdateEntity"] = &BrainCloudServiceProcessor::process_Entity_UpdateEntity;
    processMap_["Entity_UpdateSharedEntity"] = &BrainCloudServiceProcessor::process_Entity_UpdateSharedEntity;
    processMap_["Entity_DeleteEntity"] = &BrainCloudServiceProcessor::process_Entity_DeleteEntity;
    processMap_["Entity_UpdateSingleton"] = &BrainCloudServiceProcessor::process_Entity_UpdateSingleton;
    processMap_["Entity_DeleteSingleton"] = &BrainCloudServiceProcessor::process_Entity_DeleteSingleton;
    processMap_["Entity_GetEntity"] = &BrainCloudServiceProcessor::process_Entity_GetEntity;
    processMap_["Entity_GetSingleton"] = &BrainCloudServiceProcessor::process_Entity_GetSingleton;
    processMap_["Entity_GetSharedEntityForProfileId"] = &BrainCloudServiceProcessor::process_Entity_GetSharedEntityForProfileId;
    processMap_["Entity_GetSharedEntitiesForProfileId"] = &BrainCloudServiceProcessor::process_Entity_GetSharedEntitiesForProfileId;
    processMap_["Entity_GetList"] = &BrainCloudServiceProcessor::process_Entity_GetList;
    processMap_["Entity_GetSharedEntitiesListForProfileId"] = &BrainCloudServiceProcessor::process_Entity_GetSharedEntitiesListForProfileId;
    processMap_["Entity_GetListCount"] = &BrainCloudServiceProcessor::process_Entity_GetListCount;
    processMap_["Entity_GetPage"] = &BrainCloudServiceProcessor::process_Entity_GetPage;
    processMap_["Entity_GetPageOffset"] = &BrainCloudServiceProcessor::process_Entity_GetPageOffset;
    processMap_["Entity_IncrementUserEntityData"] = &BrainCloudServiceProcessor::process_Entity_IncrementUserEntityData;
    processMap_["Entity_IncrementSharedUserEntityData"] = &BrainCloudServiceProcessor::process_Entity_IncrementSharedUserEntityData;
    processMap_["Event_SendEvent"] = &BrainCloudServiceProcessor::process_Event_SendEvent;
    processMap_["Event_UpdateIncomingEventData"] = &BrainCloudServiceProcessor::process_Event_UpdateIncomingEventData;
    processMap_["Event_DeleteIncomingEvent"] = &BrainCloudServiceProcessor::process_Event_DeleteIncomingEvent;
    processMap_["Event_GetEvents"] = &BrainCloudServiceProcessor::process_Event_GetEvents;
    processMap_["File_UploadFile"] = &BrainCloudServiceProcessor::process_File_UploadFile;
    processMap_["File_CancelUpload"] = &BrainCloudServiceProcessor::process_File_CancelUpload;
    processMap_["File_GetUploadProgress"] = &BrainCloudServiceProcessor::process_File_GetUploadProgress;
    processMap_["File_GetUploadBytesTransferred"] = &BrainCloudServiceProcessor::process_File_GetUploadBytesTransferred;
    processMap_["File_GetUploadTotalBytesToTransfer"] = &BrainCloudServiceProcessor::process_File_GetUploadTotalBytesToTransfer;
    processMap_["File_ListUserFiles_SFO"] = &BrainCloudServiceProcessor::process_File_ListUserFiles_SFO;
    processMap_["File_ListUserFiles_SNSFO"] = &BrainCloudServiceProcessor::process_File_ListUserFiles_SNSFO;
    processMap_["File_DeleteUserFile"] = &BrainCloudServiceProcessor::process_File_DeleteUserFile;
    processMap_["File_DeleteUserFiles"] = &BrainCloudServiceProcessor::process_File_DeleteUserFiles;
    processMap_["File_GetCDNUrl"] = &BrainCloudServiceProcessor::process_File_GetCDNUrl;
    processMap_["Friend_ReadFriendEntity"] = &BrainCloudServiceProcessor::process_Friend_ReadFriendEntity;
    processMap_["Friend_ReadFriendsEntities"] = &BrainCloudServiceProcessor::process_Friend_ReadFriendsEntities;
    processMap_["Friend_ReadFriendUserState"] = &BrainCloudServiceProcessor::process_Friend_ReadFriendUserState;
    processMap_["Friend_GetSummaryDataForProfileId"] = &BrainCloudServiceProcessor::process_Friend_GetSummaryDataForProfileId;
    processMap_["Friend_GetSummaryDataForProfileIds"] = &BrainCloudServiceProcessor::process_Friend_GetSummaryDataForProfileIds;
    processMap_["Friend_GetSummaryDataForFriends"] = &BrainCloudServiceProcessor::process_Friend_GetSummaryDataForFriends;
    processMap_["Friend_FindUsersByExactName"] = &BrainCloudServiceProcessor::process_Friend_FindUsersByExactName;
    processMap_["Friend_FindUsersBySubstrName"] = &BrainCloudServiceProcessor::process_Friend_FindUsersBySubstrName;
    processMap_["Friend_ListFriends"] = &BrainCloudServiceProcessor::process_Friend_ListFriends;
    processMap_["Friend_AddFriends"] = &BrainCloudServiceProcessor::process_Friend_AddFriends;
    processMap_["Friend_RemoveFriends"] = &BrainCloudServiceProcessor::process_Friend_RemoveFriends;
    processMap_["Friend_GetUsersOnlineStatus"] = &BrainCloudServiceProcessor::process_Friend_GetUsersOnlineStatus;
    processMap_["Friend_SendFriendInvitation"] = &BrainCloudServiceProcessor::process_Friend_SendFriendInvitation;
    processMap_["Friend_ListFriendInvitationsReceived"] = &BrainCloudServiceProcessor::process_Friend_ListFriendInvitationsReceived;
    processMap_["Friend_ListFriendInvitationsSent"] = &BrainCloudServiceProcessor::process_Friend_ListFriendInvitationsSent;
    processMap_["Friend_AcceptFriendInvitation"] = &BrainCloudServiceProcessor::process_Friend_AcceptFriendInvitation;
    processMap_["Friend_RejectFriendInvitation"] = &BrainCloudServiceProcessor::process_Friend_RejectFriendInvitation;
    processMap_["Friend_RemoveFriend"] = &BrainCloudServiceProcessor::process_Friend_RemoveFriend;
    processMap_["Gamification_ReadAllGamification"] = &BrainCloudServiceProcessor::process_Gamification_ReadAllGamification;
    processMap_["Gamification_ReadMilestones"] = &BrainCloudServiceProcessor::process_Gamification_ReadMilestones;
    processMap_["Gamification_ReadAchievements"] = &BrainCloudServiceProcessor::process_Gamification_ReadAchievements;
    processMap_["Gamification_ReadXpLevelsMetaData"] = &BrainCloudServiceProcessor::process_Gamification_ReadXpLevelsMetaData;
    processMap_["Gamification_ReadAchievedAchievements"] = &BrainCloudServiceProcessor::process_Gamification_ReadAchievedAchievements;
    processMap_["Gamification_ReadCompletedMilestones"] = &BrainCloudServiceProcessor::process_Gamification_ReadCompletedMilestones;
    processMap_["Gamification_ReadInProgressMilestones"] = &BrainCloudServiceProcessor::process_Gamification_ReadInProgressMilestones;
    processMap_["Gamification_ReadMilestonesByCategory"] = &BrainCloudServiceProcessor::process_Gamification_ReadMilestonesByCategory;
    processMap_["Gamification_AwardAchievements"] = &BrainCloudServiceProcessor::process_Gamification_AwardAchievements;
    processMap_["Gamification_ReadQuests"] = &BrainCloudServiceProcessor::process_Gamification_ReadQuests;
    processMap_["Gamification_ReadCompletedQuests"] = &BrainCloudServiceProcessor::process_Gamification_ReadCompletedQuests;
    processMap_["Gamification_ReadInProgressQuests"] = &BrainCloudServiceProcessor::process_Gamification_ReadInProgressQuests;
    processMap_["Gamification_ReadNotStartedQuests"] = &BrainCloudServiceProcessor::process_Gamification_ReadNotStartedQuests;
    processMap_["Gamification_ReadQuestsWithStatus"] = &BrainCloudServiceProcessor::process_Gamification_ReadQuestsWithStatus;
    processMap_["Gamification_ReadQuestsWithBasicPercentage"] = &BrainCloudServiceProcessor::process_Gamification_ReadQuestsWithBasicPercentage;
    processMap_["Gamification_ReadQuestsWithComplexPercentage"] = &BrainCloudServiceProcessor::process_Gamification_ReadQuestsWithComplexPercentage;
    processMap_["Gamification_ReadQuestsByCategory"] = &BrainCloudServiceProcessor::process_Gamification_ReadQuestsByCategory;
    processMap_["Gamification_ResetMilestones"] = &BrainCloudServiceProcessor::process_Gamification_ResetMilestones;
    processMap_["GlobalApp_ReadProperties"] = &BrainCloudServiceProcessor::process_GlobalApp_ReadProperties;
    processMap_["GlobalEntity_CreateEntity"] = &BrainCloudServiceProcessor::process_GlobalEntity_CreateEntity;
    processMap_["GlobalEntity_CreateEntityWithIndexedId"] = &BrainCloudServiceProcessor::process_GlobalEntity_CreateEntityWithIndexedId;
    processMap_["GlobalEntity_UpdateEntity"] = &BrainCloudServiceProcessor::process_GlobalEntity_UpdateEntity;
    processMap_["GlobalEntity_UpdateEntityAcl"] = &BrainCloudServiceProcessor::process_GlobalEntity_UpdateEntityAcl;
    processMap_["GlobalEntity_UpdateEntityTimeToLive"] = &BrainCloudServiceProcessor::process_GlobalEntity_UpdateEntityTimeToLive;
    processMap_["GlobalEntity_DeleteEntity"] = &BrainCloudServiceProcessor::process_GlobalEntity_DeleteEntity;
    processMap_["GlobalEntity_ReadEntity"] = &BrainCloudServiceProcessor::process_GlobalEntity_ReadEntity;
    processMap_["GlobalEntity_GetList"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetList;
    processMap_["GlobalEntity_GetListByIndexedId"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetListByIndexedId;
    processMap_["GlobalEntity_GetListCount"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetListCount;
    processMap_["GlobalEntity_GetPage"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetPage;
    processMap_["GlobalEntity_GetPageOffset"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetPageOffset;
    processMap_["GlobalEntity_IncrementGlobalEntityData"] = &BrainCloudServiceProcessor::process_GlobalEntity_IncrementGlobalEntityData;
    processMap_["GlobalEntity_GetRandomEntitiesMatching"] = &BrainCloudServiceProcessor::process_GlobalEntity_GetRandomEntitiesMatching;
    processMap_["GlobalEntity_UpdateEntityOwnerAndAcl"] = &BrainCloudServiceProcessor::process_GlobalEntity_UpdateEntityOwnerAndAcl;
    processMap_["GlobalEntity_MakeSystemEntity"] = &BrainCloudServiceProcessor::process_GlobalEntity_MakeSystemEntity;
    processMap_["GlobalStatistics_ReadAllGlobalStats"] = &BrainCloudServiceProcessor::process_GlobalStatistics_ReadAllGlobalStats;
    processMap_["GlobalStatistics_ReadGlobalStatsSubset"] = &BrainCloudServiceProcessor::process_GlobalStatistics_ReadGlobalStatsSubset;
    processMap_["GlobalStatistics_ReadGlobalStatsForCategory"] = &BrainCloudServiceProcessor::process_GlobalStatistics_ReadGlobalStatsForCategory;
    processMap_["GlobalStatistics_IncrementGlobalStats"] = &BrainCloudServiceProcessor::process_GlobalStatistics_IncrementGlobalStats;
    processMap_["GlobalStatistics_ProcessStatistics"] = &BrainCloudServiceProcessor::process_GlobalStatistics_ProcessStatistics;
    processMap_["Group_AcceptGroupInvitation"] = &BrainCloudServiceProcessor::process_Group_AcceptGroupInvitation;
    processMap_["Group_AddGroupMember"] = &BrainCloudServiceProcessor::process_Group_AddGroupMember;
    processMap_["Group_ApproveGroupJoinRequest"] = &BrainCloudServiceProcessor::process_Group_ApproveGroupJoinRequest;
    processMap_["Group_AutoJoinGroup"] = &BrainCloudServiceProcessor::process_Group_AutoJoinGroup;
    processMap_["Group_CancelGroupInvitation"] = &BrainCloudServiceProcessor::process_Group_CancelGroupInvitation;
    processMap_["Group_CreateGroup"] = &BrainCloudServiceProcessor::process_Group_CreateGroup;
    processMap_["Group_CreateGroupEntity"] = &BrainCloudServiceProcessor::process_Group_CreateGroupEntity;
    processMap_["Group_DeleteGroup"] = &BrainCloudServiceProcessor::process_Group_DeleteGroup;
    processMap_["Group_DeleteGroupEntity"] = &BrainCloudServiceProcessor::process_Group_DeleteGroupEntity;
    processMap_["Group_GetMyGroups"] = &BrainCloudServiceProcessor::process_Group_GetMyGroups;
    processMap_["Group_IncrementGroupData"] = &BrainCloudServiceProcessor::process_Group_IncrementGroupData;
    processMap_["Group_IncrementGroupEntityData"] = &BrainCloudServiceProcessor::process_Group_IncrementGroupEntityData;
    processMap_["Group_InviteGroupMember"] = &BrainCloudServiceProcessor::process_Group_InviteGroupMember;
    processMap_["Group_JoinGroup"] = &BrainCloudServiceProcessor::process_Group_JoinGroup;
    processMap_["Group_LeaveGroup"] = &BrainCloudServiceProcessor::process_Group_LeaveGroup;
    processMap_["Group_ListGroupsPage"] = &BrainCloudServiceProcessor::process_Group_ListGroupsPage;
    processMap_["Group_ListGroupsPageByOffset"] = &BrainCloudServiceProcessor::process_Group_ListGroupsPageByOffset;
    processMap_["Group_ListGroupsWithMember"] = &BrainCloudServiceProcessor::process_Group_ListGroupsWithMember;
    processMap_["Group_ReadGroup"] = &BrainCloudServiceProcessor::process_Group_ReadGroup;
    processMap_["Group_ReadGroupData"] = &BrainCloudServiceProcessor::process_Group_ReadGroupData;
    processMap_["Group_ReadGroupEntitiesPage"] = &BrainCloudServiceProcessor::process_Group_ReadGroupEntitiesPage;
    processMap_["Group_ReadGroupEntitiesPageByOffset"] = &BrainCloudServiceProcessor::process_Group_ReadGroupEntitiesPageByOffset;
    processMap_["Group_ReadGroupEntity"] = &BrainCloudServiceProcessor::process_Group_ReadGroupEntity;
    processMap_["Group_ReadGroupMembers"] = &BrainCloudServiceProcessor::process_Group_ReadGroupMembers;
    processMap_["Group_RejectGroupInvitation"] = &BrainCloudServiceProcessor::process_Group_RejectGroupInvitation;
    processMap_["Group_RejectGroupJoinRequest"] = &BrainCloudServiceProcessor::process_Group_RejectGroupJoinRequest;
    processMap_["Group_RemoveGroupMember"] = &BrainCloudServiceProcessor::process_Group_RemoveGroupMember;
    processMap_["Group_UpdateGroupData"] = &BrainCloudServiceProcessor::process_Group_UpdateGroupData;
    processMap_["Group_UpdateGroupEntityData"] = &BrainCloudServiceProcessor::process_Group_UpdateGroupEntityData;
    processMap_["Group_UpdateGroupMember"] = &BrainCloudServiceProcessor::process_Group_UpdateGroupMember;
    processMap_["Group_UpdateGroupName"] = &BrainCloudServiceProcessor::process_Group_UpdateGroupName;
    processMap_["Identity_AttachEmailIdentity"] = &BrainCloudServiceProcessor::process_Identity_AttachEmailIdentity;
    processMap_["Identity_MergeEmailIdentity"] = &BrainCloudServiceProcessor::process_Identity_MergeEmailIdentity;
    processMap_["Identity_DetachEmailIdentity"] = &BrainCloudServiceProcessor::process_Identity_DetachEmailIdentity;
    processMap_["Identity_AttachUniversalIdentity"] = &BrainCloudServiceProcessor::process_Identity_AttachUniversalIdentity;
    processMap_["Identity_MergeUniversalIdentity"] = &BrainCloudServiceProcessor::process_Identity_MergeUniversalIdentity;
    processMap_["Identity_DetachUniversalIdentity"] = &BrainCloudServiceProcessor::process_Identity_DetachUniversalIdentity;
    processMap_["Identity_SwitchToChildProfile"] = &BrainCloudServiceProcessor::process_Identity_SwitchToChildProfile;
    processMap_["Identity_SwitchToSingletonChildProfile"] = &BrainCloudServiceProcessor::process_Identity_SwitchToSingletonChildProfile;
    processMap_["Identity_AttachParentWithIdentity"] = &BrainCloudServiceProcessor::process_Identity_AttachParentWithIdentity;
    processMap_["Identity_SwitchToParentProfile"] = &BrainCloudServiceProcessor::process_Identity_SwitchToParentProfile;
    processMap_["Identity_DetachParent"] = &BrainCloudServiceProcessor::process_Identity_DetachParent;
    processMap_["Identity_GetChildProfiles"] = &BrainCloudServiceProcessor::process_Identity_GetChildProfiles;
    processMap_["Identity_GetIdentities"] = &BrainCloudServiceProcessor::process_Identity_GetIdentities;
    processMap_["Identity_GetExpiredIdentities"] = &BrainCloudServiceProcessor::process_Identity_GetExpiredIdentities;
    processMap_["Identity_RefreshIdentity"] = &BrainCloudServiceProcessor::process_Identity_RefreshIdentity;
    processMap_["Identity_ChangeEmailIdentity"] = &BrainCloudServiceProcessor::process_Identity_ChangeEmailIdentity;
    processMap_["Identity_AttachPeerProfile"] = &BrainCloudServiceProcessor::process_Identity_AttachPeerProfile;
    processMap_["Identity_DetachPeer"] = &BrainCloudServiceProcessor::process_Identity_DetachPeer;
    processMap_["Identity_GetPeerProfiles"] = &BrainCloudServiceProcessor::process_Identity_GetPeerProfiles;
    processMap_["Mail_SendBasicEmail"] = &BrainCloudServiceProcessor::process_Mail_SendBasicEmail;
    processMap_["Mail_SendAdvancedEmail"] = &BrainCloudServiceProcessor::process_Mail_SendAdvancedEmail;
    processMap_["Mail_SendAdvancedEmailByAddress"] = &BrainCloudServiceProcessor::process_Mail_SendAdvancedEmailByAddress;
    processMap_["MatchMaking_Read"] = &BrainCloudServiceProcessor::process_MatchMaking_Read;
    processMap_["MatchMaking_SetPlayerRating"] = &BrainCloudServiceProcessor::process_MatchMaking_SetPlayerRating;
    processMap_["MatchMaking_ResetPlayerRating"] = &BrainCloudServiceProcessor::process_MatchMaking_ResetPlayerRating;
    processMap_["MatchMaking_IncrementPlayerRating"] = &BrainCloudServiceProcessor::process_MatchMaking_IncrementPlayerRating;
    processMap_["MatchMaking_DecrementPlayerRating"] = &BrainCloudServiceProcessor::process_MatchMaking_DecrementPlayerRating;
    processMap_["MatchMaking_TurnShieldOn"] = &BrainCloudServiceProcessor::process_MatchMaking_TurnShieldOn;
    processMap_["MatchMaking_TurnShieldOnFor"] = &BrainCloudServiceProcessor::process_MatchMaking_TurnShieldOnFor;
    processMap_["MatchMaking_TurnShieldOff"] = &BrainCloudServiceProcessor::process_MatchMaking_TurnShieldOff;
    processMap_["MatchMaking_IncrementShieldOnFor"] = &BrainCloudServiceProcessor::process_MatchMaking_IncrementShieldOnFor;
    processMap_["MatchMaking_GetShieldExpiry"] = &BrainCloudServiceProcessor::process_MatchMaking_GetShieldExpiry;
    processMap_["MatchMaking_FindPlayers"] = &BrainCloudServiceProcessor::process_MatchMaking_FindPlayers;
    processMap_["MatchMaking_FindPlayersWithAttributes"] = &BrainCloudServiceProcessor::process_MatchMaking_FindPlayersWithAttributes;
    processMap_["MatchMaking_FindPlayersUsingFilter"] = &BrainCloudServiceProcessor::process_MatchMaking_FindPlayersUsingFilter;
    processMap_["MatchMaking_FindPlayersWithAttributesUsingFilter"] = &BrainCloudServiceProcessor::process_MatchMaking_FindPlayersWithAttributesUsingFilter;
    processMap_["MatchMaking_EnableMatchMaking"] = &BrainCloudServiceProcessor::process_MatchMaking_EnableMatchMaking;
    processMap_["MatchMaking_DisableMatchMaking"] = &BrainCloudServiceProcessor::process_MatchMaking_DisableMatchMaking;
    processMap_["OneWayMatch_StartMatch"] = &BrainCloudServiceProcessor::process_OneWayMatch_StartMatch;
    processMap_["OneWayMatch_CancelMatch"] = &BrainCloudServiceProcessor::process_OneWayMatch_CancelMatch;
    processMap_["OneWayMatch_CompleteMatch"] = &BrainCloudServiceProcessor::process_OneWayMatch_CompleteMatch;
    processMap_["PlaybackStream_StartStream"] = &BrainCloudServiceProcessor::process_PlaybackStream_StartStream;
    processMap_["PlaybackStream_ReadStream"] = &BrainCloudServiceProcessor::process_PlaybackStream_ReadStream;
    processMap_["PlaybackStream_EndStream"] = &BrainCloudServiceProcessor::process_PlaybackStream_EndStream;
    processMap_["PlaybackStream_DeleteStream"] = &BrainCloudServiceProcessor::process_PlaybackStream_DeleteStream;
    processMap_["PlaybackStream_AddEvent"] = &BrainCloudServiceProcessor::process_PlaybackStream_AddEvent;
    processMap_["PlaybackStream_GetRecentStreamsForInitiatingPlayer"] = &BrainCloudServiceProcessor::process_PlaybackStream_GetRecentStreamsForInitiatingPlayer;
    processMap_["PlaybackStream_GetRecentStreamsForTargetPlayer"] = &BrainCloudServiceProcessor::process_PlaybackStream_GetRecentStreamsForTargetPlayer;
    processMap_["PlayerState_ReadUserState"] = &BrainCloudServiceProcessor::process_PlayerState_ReadUserState;
    processMap_["PlayerState_DeleteUser"] = &BrainCloudServiceProcessor::process_PlayerState_DeleteUser;
    processMap_["PlayerState_ResetUser"] = &BrainCloudServiceProcessor::process_PlayerState_ResetUser;
    processMap_["PlayerState_Logout"] = &BrainCloudServiceProcessor::process_PlayerState_Logout;
    processMap_["PlayerState_UpdateUserName"] = &BrainCloudServiceProcessor::process_PlayerState_UpdateUserName;
    processMap_["PlayerState_UpdateSummaryFriendData"] = &BrainCloudServiceProcessor::process_PlayerState_UpdateSummaryFriendData;
    processMap_["PlayerState_GetAttributes"] = &BrainCloudServiceProcessor::process_PlayerState_GetAttributes;
    processMap_["PlayerState_UpdateAttributes"] = &BrainCloudServiceProcessor::process_PlayerState_UpdateAttributes;
    processMap_["PlayerState_RemoveAttributes"] = &BrainCloudServiceProcessor::process_PlayerState_RemoveAttributes;
    processMap_["PlayerState_UpdateUserPictureUrl"] = &BrainCloudServiceProcessor::process_PlayerState_UpdateUserPictureUrl;
    processMap_["PlayerState_UpdateContactEmail"] = &BrainCloudServiceProcessor::process_PlayerState_UpdateContactEmail;
    processMap_["PlayerStatistics_ReadAllUserStats"] = &BrainCloudServiceProcessor::process_PlayerStatistics_ReadAllUserStats;
    processMap_["PlayerStatistics_ReadUserStatsSubset"] = &BrainCloudServiceProcessor::process_PlayerStatistics_ReadUserStatsSubset;
    processMap_["PlayerStatistics_ReadUserStatsForCategory"] = &BrainCloudServiceProcessor::process_PlayerStatistics_ReadUserStatsForCategory;
    processMap_["PlayerStatistics_ResetAllUserStats"] = &BrainCloudServiceProcessor::process_PlayerStatistics_ResetAllUserStats;
    processMap_["PlayerStatistics_IncrementUserStats_SSFO"] = &BrainCloudServiceProcessor::process_PlayerStatistics_IncrementUserStats_SSFO;
    processMap_["PlayerStatistics_IncrementUserStats_DSFO"] = &BrainCloudServiceProcessor::process_PlayerStatistics_IncrementUserStats_DSFO;
    processMap_["PlayerStatistics_ProcessStatistics"] = &BrainCloudServiceProcessor::process_PlayerStatistics_ProcessStatistics;
    processMap_["PlayerStatistics_GetNextExperienceLevel"] = &BrainCloudServiceProcessor::process_PlayerStatistics_GetNextExperienceLevel;
    processMap_["PlayerStatistics_IncrementExperiencePoints"] = &BrainCloudServiceProcessor::process_PlayerStatistics_IncrementExperiencePoints;
    processMap_["PlayerStatistics_SetExperiencePoints"] = &BrainCloudServiceProcessor::process_PlayerStatistics_SetExperiencePoints;
    processMap_["PlayerStatisticsEvent_TriggerStatsEvent"] = &BrainCloudServiceProcessor::process_PlayerStatisticsEvent_TriggerStatsEvent;
    processMap_["PlayerStatisticsEvent_TriggerStatsEvents"] = &BrainCloudServiceProcessor::process_PlayerStatisticsEvent_TriggerStatsEvents;
    processMap_["Product_GetCurrency"] = &BrainCloudServiceProcessor::process_Product_GetCurrency;
    processMap_["Product_GetSalesInventory"] = &BrainCloudServiceProcessor::process_Product_GetSalesInventory;
    processMap_["Product_GetSalesInventoryByCategory"] = &BrainCloudServiceProcessor::process_Product_GetSalesInventoryByCategory;
    processMap_["Product_VerifyMicrosoftReceipt"] = &BrainCloudServiceProcessor::process_Product_VerifyMicrosoftReceipt;
    processMap_["Product_GetEligiblePromotions"] = &BrainCloudServiceProcessor::process_Product_GetEligiblePromotions;
    processMap_["Product_VerifyItunesReceipt"] = &BrainCloudServiceProcessor::process_Product_VerifyItunesReceipt;
    processMap_["Profanity_ProfanityCheck"] = &BrainCloudServiceProcessor::process_Profanity_ProfanityCheck;
    processMap_["Profanity_ProfanityReplaceText"] = &BrainCloudServiceProcessor::process_Profanity_ProfanityReplaceText;
    processMap_["Profanity_ProfanityIdentifyBadWords"] = &BrainCloudServiceProcessor::process_Profanity_ProfanityIdentifyBadWords;
    processMap_["PushNotification_DeregisterAllPushNotificationDeviceTokens"] = &BrainCloudServiceProcessor::process_PushNotification_DeregisterAllPushNotificationDeviceTokens;
    processMap_["PushNotification_DeregisterPushNotificationDeviceToken"] = &BrainCloudServiceProcessor::process_PushNotification_DeregisterPushNotificationDeviceToken;
    processMap_["PushNotification_RegisterPushNotificationDeviceToken"] = &BrainCloudServiceProcessor::process_PushNotification_RegisterPushNotificationDeviceToken;
    processMap_["PushNotification_SendSimplePushNotification"] = &BrainCloudServiceProcessor::process_PushNotification_SendSimplePushNotification;
    processMap_["PushNotification_SendRichPushNotification"] = &BrainCloudServiceProcessor::process_PushNotification_SendRichPushNotification;
    processMap_["PushNotification_SendRichPushNotificationWithParams"] = &BrainCloudServiceProcessor::process_PushNotification_SendRichPushNotificationWithParams;
    processMap_["PushNotification_SendTemplatedPushNotificationToGroup"] = &BrainCloudServiceProcessor::process_PushNotification_SendTemplatedPushNotificationToGroup;
    processMap_["PushNotification_SendNormalizedPushNotificationToGroup"] = &BrainCloudServiceProcessor::process_PushNotification_SendNormalizedPushNotificationToGroup;
    processMap_["PushNotification_ScheduleRawPushNotificationUTC"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleRawPushNotificationUTC;
    processMap_["PushNotification_ScheduleRawPushNotificationMinutes"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleRawPushNotificationMinutes;
    processMap_["PushNotification_SendRawPushNotification"] = &BrainCloudServiceProcessor::process_PushNotification_SendRawPushNotification;
    processMap_["PushNotification_SendRawPushNotificationBatch"] = &BrainCloudServiceProcessor::process_PushNotification_SendRawPushNotificationBatch;
    processMap_["PushNotification_SendRawPushNotificationToGroup"] = &BrainCloudServiceProcessor::process_PushNotification_SendRawPushNotificationToGroup;
    processMap_["PushNotification_ScheduleNormalizedPushNotificationUTC"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleNormalizedPushNotificationUTC;
    processMap_["PushNotification_ScheduleNormalizedPushNotificationMinutes"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleNormalizedPushNotificationMinutes;
    processMap_["PushNotification_ScheduleRichPushNotificationUTC"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleRichPushNotificationUTC;
    processMap_["PushNotification_ScheduleRichPushNotificationMinutes"] = &BrainCloudServiceProcessor::process_PushNotification_ScheduleRichPushNotificationMinutes;
    processMap_["PushNotification_SendNormalizedPushNotification"] = &BrainCloudServiceProcessor::process_PushNotification_SendNormalizedPushNotification;
    processMap_["PushNotification_SendNormalizedPushNotificationBatch"] = &BrainCloudServiceProcessor::process_PushNotification_SendNormalizedPushNotificationBatch;
    processMap_["Script_RunScript"] = &BrainCloudServiceProcessor::process_Script_RunScript;
    processMap_["Script_ScheduleRunScriptUTC"] = &BrainCloudServiceProcessor::process_Script_ScheduleRunScriptUTC;
    processMap_["Script_ScheduleRunScriptMinutes"] = &BrainCloudServiceProcessor::process_Script_ScheduleRunScriptMinutes;
    processMap_["Script_RunParentScript"] = &BrainCloudServiceProcessor::process_Script_RunParentScript;
    processMap_["Script_CancelScheduledScript"] = &BrainCloudServiceProcessor::process_Script_CancelScheduledScript;
    processMap_["Script_RunPeerScript"] = &BrainCloudServiceProcessor::process_Script_RunPeerScript;
    processMap_["Script_RunPeerScriptAsynch"] = &BrainCloudServiceProcessor::process_Script_RunPeerScriptAsynch;
    processMap_["SocialLeaderboard_GetSocialLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetSocialLeaderboard;
    processMap_["SocialLeaderboard_GetMultiSocialLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetMultiSocialLeaderboard;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardPage"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardPage;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardPageByVersion"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardPageByVersion;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardView"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardView;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardViewByVersion"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardViewByVersion;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardVersions"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardVersions;
    processMap_["SocialLeaderboard_GetGroupSocialLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGroupSocialLeaderboard;
    processMap_["SocialLeaderboard_PostScoreToLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_PostScoreToLeaderboard;
    processMap_["SocialLeaderboard_RemovePlayerScore"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_RemovePlayerScore;
    processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_PostScoreToDynamicLeaderboard;
    processMap_["SocialLeaderboard_PostScoreToDynamicLeaderboardDays"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_PostScoreToDynamicLeaderboardDays;
    processMap_["SocialLeaderboard_GetPlayersSocialLeaderboard"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetPlayersSocialLeaderboard;
    processMap_["SocialLeaderboard_ListLeaderboards"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_ListLeaderboards;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCount"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardEntryCount;
    processMap_["SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion;
    processMap_["SocialLeaderboard_GetPlayerScore"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetPlayerScore;
    processMap_["SocialLeaderboard_GetPlayerScoresFromLeaderboards"] = &BrainCloudServiceProcessor::process_SocialLeaderboard_GetPlayerScoresFromLeaderboards;
    processMap_["Time_ReadServerTime"] = &BrainCloudServiceProcessor::process_Time_ReadServerTime;
    processMap_["Tournament_ClaimTournamentReward"] = &BrainCloudServiceProcessor::process_Tournament_ClaimTournamentReward;
    processMap_["Tournament_GetTournamentStatus"] = &BrainCloudServiceProcessor::process_Tournament_GetTournamentStatus;
    processMap_["Tournament_JoinTournament"] = &BrainCloudServiceProcessor::process_Tournament_JoinTournament;
    processMap_["Tournament_LeaveTournament"] = &BrainCloudServiceProcessor::process_Tournament_LeaveTournament;
    processMap_["Tournament_PostTournamentScore"] = &BrainCloudServiceProcessor::process_Tournament_PostTournamentScore;
    processMap_["Tournament_PostTournamentScoreWithResults"] = &BrainCloudServiceProcessor::process_Tournament_PostTournamentScoreWithResults;
    processMap_["Tournament_ViewCurrentReward"] = &BrainCloudServiceProcessor::process_Tournament_ViewCurrentReward;
    processMap_["Tournament_ViewReward"] = &BrainCloudServiceProcessor::process_Tournament_ViewReward;
    processMap_["Lobby_CreateLobby"] = &BrainCloudServiceProcessor::process_Lobby_CreateLobby;
    processMap_["Lobby_OpenLobby"] = &BrainCloudServiceProcessor::process_Lobby_OpenLobby;
    processMap_["Lobby_CloseLobby"] = &BrainCloudServiceProcessor::process_Lobby_CloseLobby;
    processMap_["Lobby_FindLobbies"] = &BrainCloudServiceProcessor::process_Lobby_FindLobbies;
    processMap_["Lobby_FindFriendsLobbies"] = &BrainCloudServiceProcessor::process_Lobby_FindFriendsLobbies;
    processMap_["Lobby_JoinLobby"] = &BrainCloudServiceProcessor::process_Lobby_JoinLobby;
    processMap_["Lobby_LeaveLobby"] = &BrainCloudServiceProcessor::process_Lobby_LeaveLobby;
    processMap_["Lobby_DestroyLobby"] = &BrainCloudServiceProcessor::process_Lobby_DestroyLobby;
    processMap_["Lobby_StartGame"] = &BrainCloudServiceProcessor::process_Lobby_StartGame;
    processMap_["Lobby_GetMyLobbies"] = &BrainCloudServiceProcessor::process_Lobby_GetMyLobbies;
    processMap_["Party_AcceptPartyInvitation"] = &BrainCloudServiceProcessor::process_Party_AcceptPartyInvitation;
    processMap_["Party_GetPartyInfo"] = &BrainCloudServiceProcessor::process_Party_GetPartyInfo;
    processMap_["Party_JoinParty"] = &BrainCloudServiceProcessor::process_Party_JoinParty;
    processMap_["Party_LeaveParty"] = &BrainCloudServiceProcessor::process_Party_LeaveParty;
    processMap_["Party_RejectPartyInvitation"] = &BrainCloudServiceProcessor::process_Party_RejectPartyInvitation;
    processMap_["Party_SendPartyInvitation"] = &BrainCloudServiceProcessor::process_Party_SendPartyInvitation;
    processMap_["Party_ListPartyInvitations"] = &BrainCloudServiceProcessor::process_Party_ListPartyInvitations;
    processMap_["Party_GetFriendsParties"] = &BrainCloudServiceProcessor::process_Party_GetFriendsParties;
    processMap_["Party_GetMyParty"] = &BrainCloudServiceProcessor::process_Party_GetMyParty;
    processMap_["Patch_GetGameManifest"] = &BrainCloudServiceProcessor::process_Patch_GetGameManifest;
    processMap_["SocialFeed_ShareVideo"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareVideo;
    processMap_["SocialFeed_ShareScreenshot"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareScreenshot;
    processMap_["SocialFeed_ShareAchievement"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareAchievement;
    processMap_["SocialFeed_ShareApp"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareApp;
    processMap_["SocialFeed_ShareChannel"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareChannel;
    processMap_["SocialFeed_ShareLink"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareLink;
    processMap_["SocialFeed_ShareGameGuide"] = &BrainCloudServiceProcessor::process_SocialFeed_ShareGameGuide;
    processMap_["SocialFeed_ReadSocialFeed"] = &BrainCloudServiceProcessor::process_SocialFeed_ReadSocialFeed;
    processMap_["SocialFeed_ReadFilteredSocialFeed"] = &BrainCloudServiceProcessor::process_SocialFeed_ReadFilteredSocialFeed;
    processMap_["SocialFeed_ReadFriendsSocialFeed"] = &BrainCloudServiceProcessor::process_SocialFeed_ReadFriendsSocialFeed;
    processMap_["SocialFeed_PostComment"] = &BrainCloudServiceProcessor::process_SocialFeed_PostComment;
    processMap_["SocialFeed_PostCommentReply"] = &BrainCloudServiceProcessor::process_SocialFeed_PostCommentReply;
    processMap_["SocialFeed_ReadComments"] = &BrainCloudServiceProcessor::process_SocialFeed_ReadComments;
    processMap_["SocialFeed_ReadCommentReplies"] = &BrainCloudServiceProcessor::process_SocialFeed_ReadCommentReplies;
    processMap_["SocialFeed_LikeComment"] = &BrainCloudServiceProcessor::process_SocialFeed_LikeComment;
    processMap_["SocialFeed_LikeActivity"] = &BrainCloudServiceProcessor::process_SocialFeed_LikeActivity;
    processMap_["SocialFeed_UnlikeComment"] = &BrainCloudServiceProcessor::process_SocialFeed_UnlikeComment;
    processMap_["SocialFeed_UnlikeActivity"] = &BrainCloudServiceProcessor::process_SocialFeed_UnlikeActivity;
    processMap_["SocialFeed_SetFeedVisibility"] = &BrainCloudServiceProcessor::process_SocialFeed_SetFeedVisibility;
    processMap_["SocialFeed_BlockPlayer"] = &BrainCloudServiceProcessor::process_SocialFeed_BlockPlayer;
    processMap_["SocialFeed_HidePlayer"] = &BrainCloudServiceProcessor::process_SocialFeed_HidePlayer;
    processMap_["SocialFeed_UnblockPlayer"] = &BrainCloudServiceProcessor::process_SocialFeed_UnblockPlayer;
    processMap_["SocialFeed_UnhidePlayer"] = &BrainCloudServiceProcessor::process_SocialFeed_UnhidePlayer;
    processMap_["SocialFeed_GetActivity"] = &BrainCloudServiceProcessor::process_SocialFeed_GetActivity;
    processMap_["SocialFeed_GetComment"] = &BrainCloudServiceProcessor::process_SocialFeed_GetComment;
    processMap_["Telemetry_StartTelemetrySession"] = &BrainCloudServiceProcessor::process_Telemetry_StartTelemetrySession;
    processMap_["Telemetry_EndTelemetrySession"] = &BrainCloudServiceProcessor::process_Telemetry_EndTelemetrySession;
    processMap_["Telemetry_LogTelemetryEvent"] = &BrainCloudServiceProcessor::process_Telemetry_LogTelemetryEvent;
    processMap_["Telemetry_StartTelemetryEvent"] = &BrainCloudServiceProcessor::process_Telemetry_StartTelemetryEvent;
    processMap_["Telemetry_EndTelemetryEvent"] = &BrainCloudServiceProcessor::process_Telemetry_EndTelemetryEvent;
    processMap_["Authentication_GetWeChatQRPageURL"] = &BrainCloudServiceProcessor::process_Authentication_GetWeChatQRPageURL;
    processMap_["File_DownloadFile"] = &BrainCloudServiceProcessor::process_File_DownloadFile;
    processMap_["File_GetDownloadInfo"] = &BrainCloudServiceProcessor::process_File_GetDownloadInfo;
    processMap_["File_CancelDownload"] = &BrainCloudServiceProcessor::process_File_CancelDownload;
  }

  virtual ~BrainCloudServiceProcessor() {}
};

class BrainCloudServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BrainCloudServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BrainCloudServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BrainCloudServiceIfFactory > handlerFactory_;
};

class BrainCloudServiceMultiface : virtual public BrainCloudServiceIf {
 public:
  BrainCloudServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BrainCloudServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> > ifaces_;
  BrainCloudServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BrainCloudServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AsyncMatch_CreateMatch(std::string& _return, const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_CreateMatch(_return, jsonOpponentIds, pushNotificationMessage, clientIndex);
    }
    ifaces_[i]->AsyncMatch_CreateMatch(_return, jsonOpponentIds, pushNotificationMessage, clientIndex);
    return;
  }

  void AsyncMatch_CreateMatchWithInitialTurn(std::string& _return, const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_CreateMatchWithInitialTurn(_return, jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, clientIndex);
    }
    ifaces_[i]->AsyncMatch_CreateMatchWithInitialTurn(_return, jsonOpponentIds, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, clientIndex);
    return;
  }

  void AsyncMatch_SubmitTurn(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_SubmitTurn(_return, ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, clientIndex);
    }
    ifaces_[i]->AsyncMatch_SubmitTurn(_return, ownerId, matchId, version, jsonMatchState, pushNotificationMessage, nextPlayer, jsonSummary, jsonStatistics, clientIndex);
    return;
  }

  void AsyncMatch_UpdateMatchSummaryData(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_UpdateMatchSummaryData(_return, ownerId, matchId, version, jsonSummary, clientIndex);
    }
    ifaces_[i]->AsyncMatch_UpdateMatchSummaryData(_return, ownerId, matchId, version, jsonSummary, clientIndex);
    return;
  }

  void AsyncMatch_CompleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_CompleteMatch(_return, ownerId, matchId, clientIndex);
    }
    ifaces_[i]->AsyncMatch_CompleteMatch(_return, ownerId, matchId, clientIndex);
    return;
  }

  void AsyncMatch_ReadMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_ReadMatch(_return, ownerId, matchId, clientIndex);
    }
    ifaces_[i]->AsyncMatch_ReadMatch(_return, ownerId, matchId, clientIndex);
    return;
  }

  void AsyncMatch_ReadMatchHistory(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_ReadMatchHistory(_return, ownerId, matchId, clientIndex);
    }
    ifaces_[i]->AsyncMatch_ReadMatchHistory(_return, ownerId, matchId, clientIndex);
    return;
  }

  void AsyncMatch_FindMatches(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_FindMatches(_return, clientIndex);
    }
    ifaces_[i]->AsyncMatch_FindMatches(_return, clientIndex);
    return;
  }

  void AsyncMatch_FindCompleteMatches(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_FindCompleteMatches(_return, clientIndex);
    }
    ifaces_[i]->AsyncMatch_FindCompleteMatches(_return, clientIndex);
    return;
  }

  void AsyncMatch_AbandonMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_AbandonMatch(_return, ownerId, matchId, clientIndex);
    }
    ifaces_[i]->AsyncMatch_AbandonMatch(_return, ownerId, matchId, clientIndex);
    return;
  }

  void AsyncMatch_DeleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AsyncMatch_DeleteMatch(_return, ownerId, matchId, clientIndex);
    }
    ifaces_[i]->AsyncMatch_DeleteMatch(_return, ownerId, matchId, clientIndex);
    return;
  }

  void Authentication_GenerateAnonymousId(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_GenerateAnonymousId(_return, clientIndex);
    }
    ifaces_[i]->Authentication_GenerateAnonymousId(_return, clientIndex);
    return;
  }

  void Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_Initialize(profileId, anonymousId, clientIndex);
    }
    ifaces_[i]->Authentication_Initialize(profileId, anonymousId, clientIndex);
  }

  void Authentication_ClearSavedProfileID(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_ClearSavedProfileID(clientIndex);
    }
    ifaces_[i]->Authentication_ClearSavedProfileID(clientIndex);
  }

  void Authentication_AuthenticateAnonymous(std::string& _return, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticateAnonymous(_return, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticateAnonymous(_return, forceCreate, clientIndex);
    return;
  }

  void Authentication_AuthenticateEmailPassword(std::string& _return, const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticateEmailPassword(_return, email, password, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticateEmailPassword(_return, email, password, forceCreate, clientIndex);
    return;
  }

  void Authentication_AuthenticateUniversal(std::string& _return, const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticateUniversal(_return, userId, password, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticateUniversal(_return, userId, password, forceCreate, clientIndex);
    return;
  }

  void Authentication_AuthenticateExternal(std::string& _return, const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticateExternal(_return, userId, token, externalAuthName, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticateExternal(_return, userId, token, externalAuthName, forceCreate, clientIndex);
    return;
  }

  void Authentication_AuthenticatePhone(std::string& _return, const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticatePhone(_return, phoneNumber, authCode, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticatePhone(_return, phoneNumber, authCode, forceCreate, clientIndex);
    return;
  }

  void Authentication_AuthenticateWechat(std::string& _return, const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_AuthenticateWechat(_return, openId, token, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_AuthenticateWechat(_return, openId, token, forceCreate, clientIndex);
    return;
  }

  void Authentication_ResetEmailPassword(std::string& _return, const std::string& externalId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_ResetEmailPassword(_return, externalId, clientIndex);
    }
    ifaces_[i]->Authentication_ResetEmailPassword(_return, externalId, clientIndex);
    return;
  }

  void Authentication_RequestSmsCode(std::string& _return, const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_RequestSmsCode(_return, phoneNumber, forceCreate, clientIndex);
    }
    ifaces_[i]->Authentication_RequestSmsCode(_return, phoneNumber, forceCreate, clientIndex);
    return;
  }

  void Client_GetSessionId(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_GetSessionId(_return, clientIndex);
    }
    ifaces_[i]->Client_GetSessionId(_return, clientIndex);
    return;
  }

  bool Client_IsAuthenticated(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_IsAuthenticated(clientIndex);
    }
    return ifaces_[i]->Client_IsAuthenticated(clientIndex);
  }

  bool Client_IsInitialized(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_IsInitialized(clientIndex);
    }
    return ifaces_[i]->Client_IsInitialized(clientIndex);
  }

  void Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_Initialize_SSS(secretKey, appId, appVersion, clientIndex);
    }
    ifaces_[i]->Client_Initialize_SSS(secretKey, appId, appVersion, clientIndex);
  }

  void Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_Initialize_SSSS(serverURL, secretKey, appId, appVersion, clientIndex);
    }
    ifaces_[i]->Client_Initialize_SSSS(serverURL, secretKey, appId, appVersion, clientIndex);
  }

  void Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_InitializeIdentity(profileId, anonymousId, clientIndex);
    }
    ifaces_[i]->Client_InitializeIdentity(profileId, anonymousId, clientIndex);
  }

  void Client_Update(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_Update(clientIndex);
    }
    ifaces_[i]->Client_Update(clientIndex);
  }

  void Client_EnableLogging(const bool enable, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_EnableLogging(enable, clientIndex);
    }
    ifaces_[i]->Client_EnableLogging(enable, clientIndex);
  }

  void Client_ResetCommunication(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_ResetCommunication(clientIndex);
    }
    ifaces_[i]->Client_ResetCommunication(clientIndex);
  }

  void Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_SetPacketTimeouts(timeouts, clientIndex);
    }
    ifaces_[i]->Client_SetPacketTimeouts(timeouts, clientIndex);
  }

  void Client_SetPacketTimeoutsToDefault(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_SetPacketTimeoutsToDefault(clientIndex);
    }
    ifaces_[i]->Client_SetPacketTimeoutsToDefault(clientIndex);
  }

  void Client_GetPacketTimeouts(std::vector<int32_t> & _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_GetPacketTimeouts(_return, clientIndex);
    }
    ifaces_[i]->Client_GetPacketTimeouts(_return, clientIndex);
    return;
  }

  void Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_SetAuthenticationPacketTimeout(timeoutSecs, clientIndex);
    }
    ifaces_[i]->Client_SetAuthenticationPacketTimeout(timeoutSecs, clientIndex);
  }

  int32_t Client_GetAuthenticationPacketTimeout(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_GetAuthenticationPacketTimeout(clientIndex);
    }
    return ifaces_[i]->Client_GetAuthenticationPacketTimeout(clientIndex);
  }

  int32_t Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_GetUploadLowTransferRateTimeout(clientIndex);
    }
    return ifaces_[i]->Client_GetUploadLowTransferRateTimeout(clientIndex);
  }

  void Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_SetUploadLowTransferRateTimeout(timeoutSecs, clientIndex);
    }
    ifaces_[i]->Client_SetUploadLowTransferRateTimeout(timeoutSecs, clientIndex);
  }

  int32_t Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_GetUploadLowTransferRateThreshold(clientIndex);
    }
    return ifaces_[i]->Client_GetUploadLowTransferRateThreshold(clientIndex);
  }

  void Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_SetUploadLowTransferRateThreshold(bytesPerSec, clientIndex);
    }
    ifaces_[i]->Client_SetUploadLowTransferRateThreshold(bytesPerSec, clientIndex);
  }

  void Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_EnableNetworkErrorMessageCaching(enabled, clientIndex);
    }
    ifaces_[i]->Client_EnableNetworkErrorMessageCaching(enabled, clientIndex);
  }

  void Client_RetryCachedMessages(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_RetryCachedMessages(clientIndex);
    }
    ifaces_[i]->Client_RetryCachedMessages(clientIndex);
  }

  void Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_FlushCachedMessages(sendApiErrorCallbacks, clientIndex);
    }
    ifaces_[i]->Client_FlushCachedMessages(sendApiErrorCallbacks, clientIndex);
  }

  void Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_InsertEndOfMessageBundleMarker(clientIndex);
    }
    ifaces_[i]->Client_InsertEndOfMessageBundleMarker(clientIndex);
  }

  void Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_OverrideCountryCode(countryCode, clientIndex);
    }
    ifaces_[i]->Client_OverrideCountryCode(countryCode, clientIndex);
  }

  void Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Client_OverrideLanguageCode(languageCode, clientIndex);
    }
    ifaces_[i]->Client_OverrideLanguageCode(languageCode, clientIndex);
  }

  void DataStream_CustomPageEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DataStream_CustomPageEvent(_return, eventName, jsonEventProperties, clientIndex);
    }
    ifaces_[i]->DataStream_CustomPageEvent(_return, eventName, jsonEventProperties, clientIndex);
    return;
  }

  void DataStream_CustomScreenEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DataStream_CustomScreenEvent(_return, eventName, jsonEventProperties, clientIndex);
    }
    ifaces_[i]->DataStream_CustomScreenEvent(_return, eventName, jsonEventProperties, clientIndex);
    return;
  }

  void DataStream_CustomTrackEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DataStream_CustomTrackEvent(_return, eventName, jsonEventProperties, clientIndex);
    }
    ifaces_[i]->DataStream_CustomTrackEvent(_return, eventName, jsonEventProperties, clientIndex);
    return;
  }

  void Entity_CreateEntity(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_CreateEntity(_return, entityType, jsonEntityData, jsonEntityAcl, clientIndex);
    }
    ifaces_[i]->Entity_CreateEntity(_return, entityType, jsonEntityData, jsonEntityAcl, clientIndex);
    return;
  }

  void Entity_GetEntitiesByType(std::string& _return, const std::string& entityType, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetEntitiesByType(_return, entityType, clientIndex);
    }
    ifaces_[i]->Entity_GetEntitiesByType(_return, entityType, clientIndex);
    return;
  }

  void Entity_UpdateEntity(std::string& _return, const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_UpdateEntity(_return, entityId, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
    }
    ifaces_[i]->Entity_UpdateEntity(_return, entityId, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
    return;
  }

  void Entity_UpdateSharedEntity(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_UpdateSharedEntity(_return, entityId, targetProfileId, entityType, jsonEntityData, version, clientIndex);
    }
    ifaces_[i]->Entity_UpdateSharedEntity(_return, entityId, targetProfileId, entityType, jsonEntityData, version, clientIndex);
    return;
  }

  void Entity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_DeleteEntity(_return, entityId, version, clientIndex);
    }
    ifaces_[i]->Entity_DeleteEntity(_return, entityId, version, clientIndex);
    return;
  }

  void Entity_UpdateSingleton(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_UpdateSingleton(_return, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
    }
    ifaces_[i]->Entity_UpdateSingleton(_return, entityType, jsonEntityData, jsonEntityAcl, version, clientIndex);
    return;
  }

  void Entity_DeleteSingleton(std::string& _return, const std::string& entityType, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_DeleteSingleton(_return, entityType, version, clientIndex);
    }
    ifaces_[i]->Entity_DeleteSingleton(_return, entityType, version, clientIndex);
    return;
  }

  void Entity_GetEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetEntity(_return, entityId, clientIndex);
    }
    ifaces_[i]->Entity_GetEntity(_return, entityId, clientIndex);
    return;
  }

  void Entity_GetSingleton(std::string& _return, const std::string& entityType, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetSingleton(_return, entityType, clientIndex);
    }
    ifaces_[i]->Entity_GetSingleton(_return, entityType, clientIndex);
    return;
  }

  void Entity_GetSharedEntityForProfileId(std::string& _return, const std::string& profileId, const std::string& entityId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetSharedEntityForProfileId(_return, profileId, entityId, clientIndex);
    }
    ifaces_[i]->Entity_GetSharedEntityForProfileId(_return, profileId, entityId, clientIndex);
    return;
  }

  void Entity_GetSharedEntitiesForProfileId(std::string& _return, const std::string& profileId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetSharedEntitiesForProfileId(_return, profileId, clientIndex);
    }
    ifaces_[i]->Entity_GetSharedEntitiesForProfileId(_return, profileId, clientIndex);
    return;
  }

  void Entity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetList(_return, whereJson, orderByJson, maxReturn, clientIndex);
    }
    ifaces_[i]->Entity_GetList(_return, whereJson, orderByJson, maxReturn, clientIndex);
    return;
  }

  void Entity_GetSharedEntitiesListForProfileId(std::string& _return, const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetSharedEntitiesListForProfileId(_return, profileId, whereJson, orderByJson, maxReturn, clientIndex);
    }
    ifaces_[i]->Entity_GetSharedEntitiesListForProfileId(_return, profileId, whereJson, orderByJson, maxReturn, clientIndex);
    return;
  }

  void Entity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetListCount(_return, whereJson, clientIndex);
    }
    ifaces_[i]->Entity_GetListCount(_return, whereJson, clientIndex);
    return;
  }

  void Entity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetPage(_return, jsonContext, clientIndex);
    }
    ifaces_[i]->Entity_GetPage(_return, jsonContext, clientIndex);
    return;
  }

  void Entity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_GetPageOffset(_return, context, pageOffset, clientIndex);
    }
    ifaces_[i]->Entity_GetPageOffset(_return, context, pageOffset, clientIndex);
    return;
  }

  void Entity_IncrementUserEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_IncrementUserEntityData(_return, entityId, jsonData, clientIndex);
    }
    ifaces_[i]->Entity_IncrementUserEntityData(_return, entityId, jsonData, clientIndex);
    return;
  }

  void Entity_IncrementSharedUserEntityData(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Entity_IncrementSharedUserEntityData(_return, entityId, targetProfileId, jsonData, clientIndex);
    }
    ifaces_[i]->Entity_IncrementSharedUserEntityData(_return, entityId, targetProfileId, jsonData, clientIndex);
    return;
  }

  void Event_SendEvent(std::string& _return, const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Event_SendEvent(_return, toProfileId, eventType, jsonEventData, clientIndex);
    }
    ifaces_[i]->Event_SendEvent(_return, toProfileId, eventType, jsonEventData, clientIndex);
    return;
  }

  void Event_UpdateIncomingEventData(std::string& _return, const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Event_UpdateIncomingEventData(_return, evId, jsonEventData, clientIndex);
    }
    ifaces_[i]->Event_UpdateIncomingEventData(_return, evId, jsonEventData, clientIndex);
    return;
  }

  void Event_DeleteIncomingEvent(std::string& _return, const std::string& evId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Event_DeleteIncomingEvent(_return, evId, clientIndex);
    }
    ifaces_[i]->Event_DeleteIncomingEvent(_return, evId, clientIndex);
    return;
  }

  void Event_GetEvents(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Event_GetEvents(_return, clientIndex);
    }
    ifaces_[i]->Event_GetEvents(_return, clientIndex);
    return;
  }

  void File_UploadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_UploadFile(_return, cloudPath, cloudFilename, shareable, replaceIfExists, localPath, clientIndex);
    }
    ifaces_[i]->File_UploadFile(_return, cloudPath, cloudFilename, shareable, replaceIfExists, localPath, clientIndex);
    return;
  }

  void File_CancelUpload(const std::string& uploadId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_CancelUpload(uploadId, clientIndex);
    }
    ifaces_[i]->File_CancelUpload(uploadId, clientIndex);
  }

  double File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_GetUploadProgress(uploadId, clientIndex);
    }
    return ifaces_[i]->File_GetUploadProgress(uploadId, clientIndex);
  }

  int64_t File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_GetUploadBytesTransferred(uploadId, clientIndex);
    }
    return ifaces_[i]->File_GetUploadBytesTransferred(uploadId, clientIndex);
  }

  int64_t File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_GetUploadTotalBytesToTransfer(uploadId, clientIndex);
    }
    return ifaces_[i]->File_GetUploadTotalBytesToTransfer(uploadId, clientIndex);
  }

  void File_ListUserFiles_SFO(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_ListUserFiles_SFO(_return, clientIndex);
    }
    ifaces_[i]->File_ListUserFiles_SFO(_return, clientIndex);
    return;
  }

  void File_ListUserFiles_SNSFO(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_ListUserFiles_SNSFO(_return, cloudPath, recurse, clientIndex);
    }
    ifaces_[i]->File_ListUserFiles_SNSFO(_return, cloudPath, recurse, clientIndex);
    return;
  }

  void File_DeleteUserFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_DeleteUserFile(_return, cloudPath, cloudFileName, clientIndex);
    }
    ifaces_[i]->File_DeleteUserFile(_return, cloudPath, cloudFileName, clientIndex);
    return;
  }

  void File_DeleteUserFiles(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_DeleteUserFiles(_return, cloudPath, recurse, clientIndex);
    }
    ifaces_[i]->File_DeleteUserFiles(_return, cloudPath, recurse, clientIndex);
    return;
  }

  void File_GetCDNUrl(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_GetCDNUrl(_return, cloudPath, cloudFilename, clientIndex);
    }
    ifaces_[i]->File_GetCDNUrl(_return, cloudPath, cloudFilename, clientIndex);
    return;
  }

  void Friend_ReadFriendEntity(std::string& _return, const std::string& entityId, const std::string& friendId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ReadFriendEntity(_return, entityId, friendId, clientIndex);
    }
    ifaces_[i]->Friend_ReadFriendEntity(_return, entityId, friendId, clientIndex);
    return;
  }

  void Friend_ReadFriendsEntities(std::string& _return, const std::string& entityType, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ReadFriendsEntities(_return, entityType, clientIndex);
    }
    ifaces_[i]->Friend_ReadFriendsEntities(_return, entityType, clientIndex);
    return;
  }

  void Friend_ReadFriendUserState(std::string& _return, const std::string& friendId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ReadFriendUserState(_return, friendId, clientIndex);
    }
    ifaces_[i]->Friend_ReadFriendUserState(_return, friendId, clientIndex);
    return;
  }

  void Friend_GetSummaryDataForProfileId(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_GetSummaryDataForProfileId(_return, playerId, clientIndex);
    }
    ifaces_[i]->Friend_GetSummaryDataForProfileId(_return, playerId, clientIndex);
    return;
  }

  void Friend_GetSummaryDataForProfileIds(std::string& _return, const std::vector<std::string> & playerIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_GetSummaryDataForProfileIds(_return, playerIds, clientIndex);
    }
    ifaces_[i]->Friend_GetSummaryDataForProfileIds(_return, playerIds, clientIndex);
    return;
  }

  void Friend_GetSummaryDataForFriends(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_GetSummaryDataForFriends(_return, clientIndex);
    }
    ifaces_[i]->Friend_GetSummaryDataForFriends(_return, clientIndex);
    return;
  }

  void Friend_FindUsersByExactName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_FindUsersByExactName(_return, searchText, maxResults, clientIndex);
    }
    ifaces_[i]->Friend_FindUsersByExactName(_return, searchText, maxResults, clientIndex);
    return;
  }

  void Friend_FindUsersBySubstrName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_FindUsersBySubstrName(_return, searchText, maxResults, clientIndex);
    }
    ifaces_[i]->Friend_FindUsersBySubstrName(_return, searchText, maxResults, clientIndex);
    return;
  }

  void Friend_ListFriends(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ListFriends(_return, friendPlatform, includeSummaryData, clientIndex);
    }
    ifaces_[i]->Friend_ListFriends(_return, friendPlatform, includeSummaryData, clientIndex);
    return;
  }

  void Friend_AddFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_AddFriends(_return, profileIds, clientIndex);
    }
    ifaces_[i]->Friend_AddFriends(_return, profileIds, clientIndex);
    return;
  }

  void Friend_RemoveFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_RemoveFriends(_return, profileIds, clientIndex);
    }
    ifaces_[i]->Friend_RemoveFriends(_return, profileIds, clientIndex);
    return;
  }

  void Friend_GetUsersOnlineStatus(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_GetUsersOnlineStatus(_return, profileIds, clientIndex);
    }
    ifaces_[i]->Friend_GetUsersOnlineStatus(_return, profileIds, clientIndex);
    return;
  }

  void Friend_SendFriendInvitation(std::string& _return, const std::string& toPlayerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_SendFriendInvitation(_return, toPlayerId, clientIndex);
    }
    ifaces_[i]->Friend_SendFriendInvitation(_return, toPlayerId, clientIndex);
    return;
  }

  void Friend_ListFriendInvitationsReceived(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ListFriendInvitationsReceived(_return, clientIndex);
    }
    ifaces_[i]->Friend_ListFriendInvitationsReceived(_return, clientIndex);
    return;
  }

  void Friend_ListFriendInvitationsSent(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_ListFriendInvitationsSent(_return, clientIndex);
    }
    ifaces_[i]->Friend_ListFriendInvitationsSent(_return, clientIndex);
    return;
  }

  void Friend_AcceptFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_AcceptFriendInvitation(_return, fromPlayerId, clientIndex);
    }
    ifaces_[i]->Friend_AcceptFriendInvitation(_return, fromPlayerId, clientIndex);
    return;
  }

  void Friend_RejectFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_RejectFriendInvitation(_return, fromPlayerId, clientIndex);
    }
    ifaces_[i]->Friend_RejectFriendInvitation(_return, fromPlayerId, clientIndex);
    return;
  }

  void Friend_RemoveFriend(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Friend_RemoveFriend(_return, playerId, clientIndex);
    }
    ifaces_[i]->Friend_RemoveFriend(_return, playerId, clientIndex);
    return;
  }

  void Gamification_ReadAllGamification(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadAllGamification(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadAllGamification(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadMilestones(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadMilestones(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadAchievements(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadAchievements(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadXpLevelsMetaData(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadXpLevelsMetaData(_return, clientIndex);
    }
    ifaces_[i]->Gamification_ReadXpLevelsMetaData(_return, clientIndex);
    return;
  }

  void Gamification_ReadAchievedAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadAchievedAchievements(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadAchievedAchievements(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadCompletedMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadCompletedMilestones(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadCompletedMilestones(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadInProgressMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadInProgressMilestones(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadInProgressMilestones(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadMilestonesByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadMilestonesByCategory(_return, category, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadMilestonesByCategory(_return, category, includeMetaData, clientIndex);
    return;
  }

  void Gamification_AwardAchievements(std::string& _return, const std::vector<std::string> & achievementIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_AwardAchievements(_return, achievementIds, clientIndex);
    }
    ifaces_[i]->Gamification_AwardAchievements(_return, achievementIds, clientIndex);
    return;
  }

  void Gamification_ReadQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadQuests(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadQuests(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadCompletedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadCompletedQuests(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadCompletedQuests(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadInProgressQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadInProgressQuests(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadInProgressQuests(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadNotStartedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadNotStartedQuests(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadNotStartedQuests(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadQuestsWithStatus(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadQuestsWithStatus(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadQuestsWithStatus(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadQuestsWithBasicPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadQuestsWithBasicPercentage(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadQuestsWithBasicPercentage(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadQuestsWithComplexPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadQuestsWithComplexPercentage(_return, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadQuestsWithComplexPercentage(_return, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ReadQuestsByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ReadQuestsByCategory(_return, category, includeMetaData, clientIndex);
    }
    ifaces_[i]->Gamification_ReadQuestsByCategory(_return, category, includeMetaData, clientIndex);
    return;
  }

  void Gamification_ResetMilestones(std::string& _return, const std::vector<std::string> & milestoneIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Gamification_ResetMilestones(_return, milestoneIds, clientIndex);
    }
    ifaces_[i]->Gamification_ResetMilestones(_return, milestoneIds, clientIndex);
    return;
  }

  void GlobalApp_ReadProperties(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalApp_ReadProperties(_return, clientIndex);
    }
    ifaces_[i]->GlobalApp_ReadProperties(_return, clientIndex);
    return;
  }

  void GlobalEntity_CreateEntity(std::string& _return, const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_CreateEntity(_return, entityType, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
    }
    ifaces_[i]->GlobalEntity_CreateEntity(_return, entityType, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
    return;
  }

  void GlobalEntity_CreateEntityWithIndexedId(std::string& _return, const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_CreateEntityWithIndexedId(_return, entityType, indexedId, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
    }
    ifaces_[i]->GlobalEntity_CreateEntityWithIndexedId(_return, entityType, indexedId, timeToLive, jsonEntityAcl, jsonEntityData, clientIndex);
    return;
  }

  void GlobalEntity_UpdateEntity(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_UpdateEntity(_return, entityId, version, jsonEntityData, clientIndex);
    }
    ifaces_[i]->GlobalEntity_UpdateEntity(_return, entityId, version, jsonEntityData, clientIndex);
    return;
  }

  void GlobalEntity_UpdateEntityAcl(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_UpdateEntityAcl(_return, entityId, version, jsonEntityAcl, clientIndex);
    }
    ifaces_[i]->GlobalEntity_UpdateEntityAcl(_return, entityId, version, jsonEntityAcl, clientIndex);
    return;
  }

  void GlobalEntity_UpdateEntityTimeToLive(std::string& _return, const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_UpdateEntityTimeToLive(_return, entityId, version, timeToLive, clientIndex);
    }
    ifaces_[i]->GlobalEntity_UpdateEntityTimeToLive(_return, entityId, version, timeToLive, clientIndex);
    return;
  }

  void GlobalEntity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_DeleteEntity(_return, entityId, version, clientIndex);
    }
    ifaces_[i]->GlobalEntity_DeleteEntity(_return, entityId, version, clientIndex);
    return;
  }

  void GlobalEntity_ReadEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_ReadEntity(_return, entityId, clientIndex);
    }
    ifaces_[i]->GlobalEntity_ReadEntity(_return, entityId, clientIndex);
    return;
  }

  void GlobalEntity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetList(_return, whereJson, orderByJson, maxReturn, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetList(_return, whereJson, orderByJson, maxReturn, clientIndex);
    return;
  }

  void GlobalEntity_GetListByIndexedId(std::string& _return, const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetListByIndexedId(_return, entityIndexedId, maxReturn, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetListByIndexedId(_return, entityIndexedId, maxReturn, clientIndex);
    return;
  }

  void GlobalEntity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetListCount(_return, whereJson, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetListCount(_return, whereJson, clientIndex);
    return;
  }

  void GlobalEntity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetPage(_return, jsonContext, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetPage(_return, jsonContext, clientIndex);
    return;
  }

  void GlobalEntity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetPageOffset(_return, context, pageOffset, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetPageOffset(_return, context, pageOffset, clientIndex);
    return;
  }

  void GlobalEntity_IncrementGlobalEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_IncrementGlobalEntityData(_return, entityId, jsonData, clientIndex);
    }
    ifaces_[i]->GlobalEntity_IncrementGlobalEntityData(_return, entityId, jsonData, clientIndex);
    return;
  }

  void GlobalEntity_GetRandomEntitiesMatching(std::string& _return, const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_GetRandomEntitiesMatching(_return, whereJson, maxReturn, clientIndex);
    }
    ifaces_[i]->GlobalEntity_GetRandomEntitiesMatching(_return, whereJson, maxReturn, clientIndex);
    return;
  }

  void GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return, const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_UpdateEntityOwnerAndAcl(_return, entityId, version, ownerId, acl, clientIndex);
    }
    ifaces_[i]->GlobalEntity_UpdateEntityOwnerAndAcl(_return, entityId, version, ownerId, acl, clientIndex);
    return;
  }

  void GlobalEntity_MakeSystemEntity(std::string& _return, const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalEntity_MakeSystemEntity(_return, entityId, version, acl, clientIndex);
    }
    ifaces_[i]->GlobalEntity_MakeSystemEntity(_return, entityId, version, acl, clientIndex);
    return;
  }

  void GlobalStatistics_ReadAllGlobalStats(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalStatistics_ReadAllGlobalStats(_return, clientIndex);
    }
    ifaces_[i]->GlobalStatistics_ReadAllGlobalStats(_return, clientIndex);
    return;
  }

  void GlobalStatistics_ReadGlobalStatsSubset(std::string& _return, const std::vector<std::string> & globalStats, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalStatistics_ReadGlobalStatsSubset(_return, globalStats, clientIndex);
    }
    ifaces_[i]->GlobalStatistics_ReadGlobalStatsSubset(_return, globalStats, clientIndex);
    return;
  }

  void GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalStatistics_ReadGlobalStatsForCategory(_return, category, clientIndex);
    }
    ifaces_[i]->GlobalStatistics_ReadGlobalStatsForCategory(_return, category, clientIndex);
    return;
  }

  void GlobalStatistics_IncrementGlobalStats(std::string& _return, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalStatistics_IncrementGlobalStats(_return, jsonData, clientIndex);
    }
    ifaces_[i]->GlobalStatistics_IncrementGlobalStats(_return, jsonData, clientIndex);
    return;
  }

  void GlobalStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GlobalStatistics_ProcessStatistics(_return, statisticsData, clientIndex);
    }
    ifaces_[i]->GlobalStatistics_ProcessStatistics(_return, statisticsData, clientIndex);
    return;
  }

  void Group_AcceptGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_AcceptGroupInvitation(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_AcceptGroupInvitation(_return, groupId, clientIndex);
    return;
  }

  void Group_AddGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_AddGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Group_AddGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    return;
  }

  void Group_ApproveGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ApproveGroupJoinRequest(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Group_ApproveGroupJoinRequest(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    return;
  }

  void Group_AutoJoinGroup(std::string& _return, const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_AutoJoinGroup(_return, groupType, autoJoinStrategy, dataQueryJson, clientIndex);
    }
    ifaces_[i]->Group_AutoJoinGroup(_return, groupType, autoJoinStrategy, dataQueryJson, clientIndex);
    return;
  }

  void Group_CancelGroupInvitation(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_CancelGroupInvitation(_return, groupId, profileId, clientIndex);
    }
    ifaces_[i]->Group_CancelGroupInvitation(_return, groupId, profileId, clientIndex);
    return;
  }

  void Group_CreateGroup(std::string& _return, const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_CreateGroup(_return, name, groupType, isOpenGroup, acl, jsonData, jsonOwnerAttributes, jsonDefaultMemberAttributes, clientIndex);
    }
    ifaces_[i]->Group_CreateGroup(_return, name, groupType, isOpenGroup, acl, jsonData, jsonOwnerAttributes, jsonDefaultMemberAttributes, clientIndex);
    return;
  }

  void Group_CreateGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_CreateGroupEntity(_return, groupId, entityType, isOwnedByGroupMember, acl, jsonData, clientIndex);
    }
    ifaces_[i]->Group_CreateGroupEntity(_return, groupId, entityType, isOwnedByGroupMember, acl, jsonData, clientIndex);
    return;
  }

  void Group_DeleteGroup(std::string& _return, const std::string& groupId, const int64_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_DeleteGroup(_return, groupId, version, clientIndex);
    }
    ifaces_[i]->Group_DeleteGroup(_return, groupId, version, clientIndex);
    return;
  }

  void Group_DeleteGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_DeleteGroupEntity(_return, groupId, entityId, version, clientIndex);
    }
    ifaces_[i]->Group_DeleteGroupEntity(_return, groupId, entityId, version, clientIndex);
    return;
  }

  void Group_GetMyGroups(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_GetMyGroups(_return, clientIndex);
    }
    ifaces_[i]->Group_GetMyGroups(_return, clientIndex);
    return;
  }

  void Group_IncrementGroupData(std::string& _return, const std::string& groupId, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_IncrementGroupData(_return, groupId, jsonData, clientIndex);
    }
    ifaces_[i]->Group_IncrementGroupData(_return, groupId, jsonData, clientIndex);
    return;
  }

  void Group_IncrementGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_IncrementGroupEntityData(_return, groupId, entityId, jsonData, clientIndex);
    }
    ifaces_[i]->Group_IncrementGroupEntityData(_return, groupId, entityId, jsonData, clientIndex);
    return;
  }

  void Group_InviteGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_InviteGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Group_InviteGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    return;
  }

  void Group_JoinGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_JoinGroup(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_JoinGroup(_return, groupId, clientIndex);
    return;
  }

  void Group_LeaveGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_LeaveGroup(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_LeaveGroup(_return, groupId, clientIndex);
    return;
  }

  void Group_ListGroupsPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ListGroupsPage(_return, jsonContext, clientIndex);
    }
    ifaces_[i]->Group_ListGroupsPage(_return, jsonContext, clientIndex);
    return;
  }

  void Group_ListGroupsPageByOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ListGroupsPageByOffset(_return, context, pageOffset, clientIndex);
    }
    ifaces_[i]->Group_ListGroupsPageByOffset(_return, context, pageOffset, clientIndex);
    return;
  }

  void Group_ListGroupsWithMember(std::string& _return, const std::string& profileId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ListGroupsWithMember(_return, profileId, clientIndex);
    }
    ifaces_[i]->Group_ListGroupsWithMember(_return, profileId, clientIndex);
    return;
  }

  void Group_ReadGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroup(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_ReadGroup(_return, groupId, clientIndex);
    return;
  }

  void Group_ReadGroupData(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroupData(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_ReadGroupData(_return, groupId, clientIndex);
    return;
  }

  void Group_ReadGroupEntitiesPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroupEntitiesPage(_return, jsonContext, clientIndex);
    }
    ifaces_[i]->Group_ReadGroupEntitiesPage(_return, jsonContext, clientIndex);
    return;
  }

  void Group_ReadGroupEntitiesPageByOffset(std::string& _return, const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroupEntitiesPageByOffset(_return, encodedContext, pageOffset, clientIndex);
    }
    ifaces_[i]->Group_ReadGroupEntitiesPageByOffset(_return, encodedContext, pageOffset, clientIndex);
    return;
  }

  void Group_ReadGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroupEntity(_return, groupId, entityId, clientIndex);
    }
    ifaces_[i]->Group_ReadGroupEntity(_return, groupId, entityId, clientIndex);
    return;
  }

  void Group_ReadGroupMembers(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_ReadGroupMembers(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_ReadGroupMembers(_return, groupId, clientIndex);
    return;
  }

  void Group_RejectGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_RejectGroupInvitation(_return, groupId, clientIndex);
    }
    ifaces_[i]->Group_RejectGroupInvitation(_return, groupId, clientIndex);
    return;
  }

  void Group_RejectGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_RejectGroupJoinRequest(_return, groupId, profileId, clientIndex);
    }
    ifaces_[i]->Group_RejectGroupJoinRequest(_return, groupId, profileId, clientIndex);
    return;
  }

  void Group_RemoveGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_RemoveGroupMember(_return, groupId, profileId, clientIndex);
    }
    ifaces_[i]->Group_RemoveGroupMember(_return, groupId, profileId, clientIndex);
    return;
  }

  void Group_UpdateGroupData(std::string& _return, const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_UpdateGroupData(_return, groupId, version, jsonData, clientIndex);
    }
    ifaces_[i]->Group_UpdateGroupData(_return, groupId, version, jsonData, clientIndex);
    return;
  }

  void Group_UpdateGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_UpdateGroupEntityData(_return, groupId, entityId, version, jsonData, clientIndex);
    }
    ifaces_[i]->Group_UpdateGroupEntityData(_return, groupId, entityId, version, jsonData, clientIndex);
    return;
  }

  void Group_UpdateGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_UpdateGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Group_UpdateGroupMember(_return, groupId, profileId, role, jsonAttributes, clientIndex);
    return;
  }

  void Group_UpdateGroupName(std::string& _return, const std::string& groupId, const std::string& name, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Group_UpdateGroupName(_return, groupId, name, clientIndex);
    }
    ifaces_[i]->Group_UpdateGroupName(_return, groupId, name, clientIndex);
    return;
  }

  void Identity_AttachEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_AttachEmailIdentity(_return, email, password, clientIndex);
    }
    ifaces_[i]->Identity_AttachEmailIdentity(_return, email, password, clientIndex);
    return;
  }

  void Identity_MergeEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_MergeEmailIdentity(_return, email, password, clientIndex);
    }
    ifaces_[i]->Identity_MergeEmailIdentity(_return, email, password, clientIndex);
    return;
  }

  void Identity_DetachEmailIdentity(std::string& _return, const std::string& email, const bool continueAnon, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_DetachEmailIdentity(_return, email, continueAnon, clientIndex);
    }
    ifaces_[i]->Identity_DetachEmailIdentity(_return, email, continueAnon, clientIndex);
    return;
  }

  void Identity_AttachUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_AttachUniversalIdentity(_return, userId, password, clientIndex);
    }
    ifaces_[i]->Identity_AttachUniversalIdentity(_return, userId, password, clientIndex);
    return;
  }

  void Identity_MergeUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_MergeUniversalIdentity(_return, userId, password, clientIndex);
    }
    ifaces_[i]->Identity_MergeUniversalIdentity(_return, userId, password, clientIndex);
    return;
  }

  void Identity_DetachUniversalIdentity(std::string& _return, const std::string& userId, const bool continueAnon, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_DetachUniversalIdentity(_return, userId, continueAnon, clientIndex);
    }
    ifaces_[i]->Identity_DetachUniversalIdentity(_return, userId, continueAnon, clientIndex);
    return;
  }

  void Identity_SwitchToChildProfile(std::string& _return, const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_SwitchToChildProfile(_return, childProfileId, childAppId, forceCreate, clientIndex);
    }
    ifaces_[i]->Identity_SwitchToChildProfile(_return, childProfileId, childAppId, forceCreate, clientIndex);
    return;
  }

  void Identity_SwitchToSingletonChildProfile(std::string& _return, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_SwitchToSingletonChildProfile(_return, childAppId, forceCreate, clientIndex);
    }
    ifaces_[i]->Identity_SwitchToSingletonChildProfile(_return, childAppId, forceCreate, clientIndex);
    return;
  }

  void Identity_AttachParentWithIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_AttachParentWithIdentity(_return, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
    }
    ifaces_[i]->Identity_AttachParentWithIdentity(_return, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
    return;
  }

  void Identity_SwitchToParentProfile(std::string& _return, const std::string& parentLevelName, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_SwitchToParentProfile(_return, parentLevelName, clientIndex);
    }
    ifaces_[i]->Identity_SwitchToParentProfile(_return, parentLevelName, clientIndex);
    return;
  }

  void Identity_DetachParent(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_DetachParent(_return, clientIndex);
    }
    ifaces_[i]->Identity_DetachParent(_return, clientIndex);
    return;
  }

  void Identity_GetChildProfiles(std::string& _return, const bool includeSummaryData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_GetChildProfiles(_return, includeSummaryData, clientIndex);
    }
    ifaces_[i]->Identity_GetChildProfiles(_return, includeSummaryData, clientIndex);
    return;
  }

  void Identity_GetIdentities(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_GetIdentities(_return, clientIndex);
    }
    ifaces_[i]->Identity_GetIdentities(_return, clientIndex);
    return;
  }

  void Identity_GetExpiredIdentities(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_GetExpiredIdentities(_return, clientIndex);
    }
    ifaces_[i]->Identity_GetExpiredIdentities(_return, clientIndex);
    return;
  }

  void Identity_RefreshIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_RefreshIdentity(_return, externalId, authenticationToken, authenticationType, clientIndex);
    }
    ifaces_[i]->Identity_RefreshIdentity(_return, externalId, authenticationToken, authenticationType, clientIndex);
    return;
  }

  void Identity_ChangeEmailIdentity(std::string& _return, const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_ChangeEmailIdentity(_return, oldEmailAddress, password, newEmailAddress, updateContactEmail, clientIndex);
    }
    ifaces_[i]->Identity_ChangeEmailIdentity(_return, oldEmailAddress, password, newEmailAddress, updateContactEmail, clientIndex);
    return;
  }

  void Identity_AttachPeerProfile(std::string& _return, const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_AttachPeerProfile(_return, peer, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
    }
    ifaces_[i]->Identity_AttachPeerProfile(_return, peer, externalId, authenticationToken, authenticationType, externalAuthName, forceCreate, clientIndex);
    return;
  }

  void Identity_DetachPeer(std::string& _return, const std::string& peer, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_DetachPeer(_return, peer, clientIndex);
    }
    ifaces_[i]->Identity_DetachPeer(_return, peer, clientIndex);
    return;
  }

  void Identity_GetPeerProfiles(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Identity_GetPeerProfiles(_return, clientIndex);
    }
    ifaces_[i]->Identity_GetPeerProfiles(_return, clientIndex);
    return;
  }

  void Mail_SendBasicEmail(std::string& _return, const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Mail_SendBasicEmail(_return, profileId, subject, body, clientIndex);
    }
    ifaces_[i]->Mail_SendBasicEmail(_return, profileId, subject, body, clientIndex);
    return;
  }

  void Mail_SendAdvancedEmail(std::string& _return, const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Mail_SendAdvancedEmail(_return, profileId, jsonServiceParams, clientIndex);
    }
    ifaces_[i]->Mail_SendAdvancedEmail(_return, profileId, jsonServiceParams, clientIndex);
    return;
  }

  void Mail_SendAdvancedEmailByAddress(std::string& _return, const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Mail_SendAdvancedEmailByAddress(_return, emailAddress, jsonServiceParams, clientIndex);
    }
    ifaces_[i]->Mail_SendAdvancedEmailByAddress(_return, emailAddress, jsonServiceParams, clientIndex);
    return;
  }

  void MatchMaking_Read(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_Read(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_Read(_return, clientIndex);
    return;
  }

  void MatchMaking_SetPlayerRating(std::string& _return, const int64_t playerRating, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_SetPlayerRating(_return, playerRating, clientIndex);
    }
    ifaces_[i]->MatchMaking_SetPlayerRating(_return, playerRating, clientIndex);
    return;
  }

  void MatchMaking_ResetPlayerRating(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_ResetPlayerRating(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_ResetPlayerRating(_return, clientIndex);
    return;
  }

  void MatchMaking_IncrementPlayerRating(std::string& _return, const int64_t increment, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_IncrementPlayerRating(_return, increment, clientIndex);
    }
    ifaces_[i]->MatchMaking_IncrementPlayerRating(_return, increment, clientIndex);
    return;
  }

  void MatchMaking_DecrementPlayerRating(std::string& _return, const int64_t decrement, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_DecrementPlayerRating(_return, decrement, clientIndex);
    }
    ifaces_[i]->MatchMaking_DecrementPlayerRating(_return, decrement, clientIndex);
    return;
  }

  void MatchMaking_TurnShieldOn(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_TurnShieldOn(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_TurnShieldOn(_return, clientIndex);
    return;
  }

  void MatchMaking_TurnShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_TurnShieldOnFor(_return, minutes, clientIndex);
    }
    ifaces_[i]->MatchMaking_TurnShieldOnFor(_return, minutes, clientIndex);
    return;
  }

  void MatchMaking_TurnShieldOff(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_TurnShieldOff(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_TurnShieldOff(_return, clientIndex);
    return;
  }

  void MatchMaking_IncrementShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_IncrementShieldOnFor(_return, minutes, clientIndex);
    }
    ifaces_[i]->MatchMaking_IncrementShieldOnFor(_return, minutes, clientIndex);
    return;
  }

  void MatchMaking_GetShieldExpiry(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_GetShieldExpiry(_return, playerId, clientIndex);
    }
    ifaces_[i]->MatchMaking_GetShieldExpiry(_return, playerId, clientIndex);
    return;
  }

  void MatchMaking_FindPlayers(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_FindPlayers(_return, rangeDelta, numMatches, clientIndex);
    }
    ifaces_[i]->MatchMaking_FindPlayers(_return, rangeDelta, numMatches, clientIndex);
    return;
  }

  void MatchMaking_FindPlayersWithAttributes(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_FindPlayersWithAttributes(_return, rangeDelta, numMatches, jsonAttributes, clientIndex);
    }
    ifaces_[i]->MatchMaking_FindPlayersWithAttributes(_return, rangeDelta, numMatches, jsonAttributes, clientIndex);
    return;
  }

  void MatchMaking_FindPlayersUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_FindPlayersUsingFilter(_return, rangeDelta, numMatches, jsonExtraParms, clientIndex);
    }
    ifaces_[i]->MatchMaking_FindPlayersUsingFilter(_return, rangeDelta, numMatches, jsonExtraParms, clientIndex);
    return;
  }

  void MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_FindPlayersWithAttributesUsingFilter(_return, rangeDelta, numMatches, jsonAttributes, jsonExtraParms, clientIndex);
    }
    ifaces_[i]->MatchMaking_FindPlayersWithAttributesUsingFilter(_return, rangeDelta, numMatches, jsonAttributes, jsonExtraParms, clientIndex);
    return;
  }

  void MatchMaking_EnableMatchMaking(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_EnableMatchMaking(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_EnableMatchMaking(_return, clientIndex);
    return;
  }

  void MatchMaking_DisableMatchMaking(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MatchMaking_DisableMatchMaking(_return, clientIndex);
    }
    ifaces_[i]->MatchMaking_DisableMatchMaking(_return, clientIndex);
    return;
  }

  void OneWayMatch_StartMatch(std::string& _return, const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OneWayMatch_StartMatch(_return, otherPlayerId, rangeDelta, clientIndex);
    }
    ifaces_[i]->OneWayMatch_StartMatch(_return, otherPlayerId, rangeDelta, clientIndex);
    return;
  }

  void OneWayMatch_CancelMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OneWayMatch_CancelMatch(_return, playbackStreamId, clientIndex);
    }
    ifaces_[i]->OneWayMatch_CancelMatch(_return, playbackStreamId, clientIndex);
    return;
  }

  void OneWayMatch_CompleteMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->OneWayMatch_CompleteMatch(_return, playbackStreamId, clientIndex);
    }
    ifaces_[i]->OneWayMatch_CompleteMatch(_return, playbackStreamId, clientIndex);
    return;
  }

  void PlaybackStream_StartStream(std::string& _return, const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_StartStream(_return, targetPlayerId, includeSharedData, clientIndex);
    }
    ifaces_[i]->PlaybackStream_StartStream(_return, targetPlayerId, includeSharedData, clientIndex);
    return;
  }

  void PlaybackStream_ReadStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_ReadStream(_return, playbackStreamId, clientIndex);
    }
    ifaces_[i]->PlaybackStream_ReadStream(_return, playbackStreamId, clientIndex);
    return;
  }

  void PlaybackStream_EndStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_EndStream(_return, playbackStreamId, clientIndex);
    }
    ifaces_[i]->PlaybackStream_EndStream(_return, playbackStreamId, clientIndex);
    return;
  }

  void PlaybackStream_DeleteStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_DeleteStream(_return, playbackStreamId, clientIndex);
    }
    ifaces_[i]->PlaybackStream_DeleteStream(_return, playbackStreamId, clientIndex);
    return;
  }

  void PlaybackStream_AddEvent(std::string& _return, const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_AddEvent(_return, playbackStreamId, eventData, summary, clientIndex);
    }
    ifaces_[i]->PlaybackStream_AddEvent(_return, playbackStreamId, eventData, summary, clientIndex);
    return;
  }

  void PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return, const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_GetRecentStreamsForInitiatingPlayer(_return, initiatingPlayerId, maxNumStreams, clientIndex);
    }
    ifaces_[i]->PlaybackStream_GetRecentStreamsForInitiatingPlayer(_return, initiatingPlayerId, maxNumStreams, clientIndex);
    return;
  }

  void PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return, const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlaybackStream_GetRecentStreamsForTargetPlayer(_return, targetPlayerId, maxNumStreams, clientIndex);
    }
    ifaces_[i]->PlaybackStream_GetRecentStreamsForTargetPlayer(_return, targetPlayerId, maxNumStreams, clientIndex);
    return;
  }

  void PlayerState_ReadUserState(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_ReadUserState(_return, clientIndex);
    }
    ifaces_[i]->PlayerState_ReadUserState(_return, clientIndex);
    return;
  }

  void PlayerState_DeleteUser(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_DeleteUser(_return, clientIndex);
    }
    ifaces_[i]->PlayerState_DeleteUser(_return, clientIndex);
    return;
  }

  void PlayerState_ResetUser(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_ResetUser(_return, clientIndex);
    }
    ifaces_[i]->PlayerState_ResetUser(_return, clientIndex);
    return;
  }

  void PlayerState_Logout(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_Logout(_return, clientIndex);
    }
    ifaces_[i]->PlayerState_Logout(_return, clientIndex);
    return;
  }

  void PlayerState_UpdateUserName(std::string& _return, const std::string& userName, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_UpdateUserName(_return, userName, clientIndex);
    }
    ifaces_[i]->PlayerState_UpdateUserName(_return, userName, clientIndex);
    return;
  }

  void PlayerState_UpdateSummaryFriendData(std::string& _return, const std::string& jsonSummaryData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_UpdateSummaryFriendData(_return, jsonSummaryData, clientIndex);
    }
    ifaces_[i]->PlayerState_UpdateSummaryFriendData(_return, jsonSummaryData, clientIndex);
    return;
  }

  void PlayerState_GetAttributes(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_GetAttributes(_return, clientIndex);
    }
    ifaces_[i]->PlayerState_GetAttributes(_return, clientIndex);
    return;
  }

  void PlayerState_UpdateAttributes(std::string& _return, const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_UpdateAttributes(_return, jsonAttributes, wipeExisting, clientIndex);
    }
    ifaces_[i]->PlayerState_UpdateAttributes(_return, jsonAttributes, wipeExisting, clientIndex);
    return;
  }

  void PlayerState_RemoveAttributes(std::string& _return, const std::vector<std::string> & attributeNames, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_RemoveAttributes(_return, attributeNames, clientIndex);
    }
    ifaces_[i]->PlayerState_RemoveAttributes(_return, attributeNames, clientIndex);
    return;
  }

  void PlayerState_UpdateUserPictureUrl(std::string& _return, const std::string& pictureUrl, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_UpdateUserPictureUrl(_return, pictureUrl, clientIndex);
    }
    ifaces_[i]->PlayerState_UpdateUserPictureUrl(_return, pictureUrl, clientIndex);
    return;
  }

  void PlayerState_UpdateContactEmail(std::string& _return, const std::string& contactEmail, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerState_UpdateContactEmail(_return, contactEmail, clientIndex);
    }
    ifaces_[i]->PlayerState_UpdateContactEmail(_return, contactEmail, clientIndex);
    return;
  }

  void PlayerStatistics_ReadAllUserStats(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_ReadAllUserStats(_return, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_ReadAllUserStats(_return, clientIndex);
    return;
  }

  void PlayerStatistics_ReadUserStatsSubset(std::string& _return, const std::vector<std::string> & playerStats, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_ReadUserStatsSubset(_return, playerStats, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_ReadUserStatsSubset(_return, playerStats, clientIndex);
    return;
  }

  void PlayerStatistics_ReadUserStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_ReadUserStatsForCategory(_return, category, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_ReadUserStatsForCategory(_return, category, clientIndex);
    return;
  }

  void PlayerStatistics_ResetAllUserStats(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_ResetAllUserStats(_return, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_ResetAllUserStats(_return, clientIndex);
    return;
  }

  void PlayerStatistics_IncrementUserStats_SSFO(std::string& _return, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_IncrementUserStats_SSFO(_return, jsonData, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_IncrementUserStats_SSFO(_return, jsonData, clientIndex);
    return;
  }

  void PlayerStatistics_IncrementUserStats_DSFO(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_IncrementUserStats_DSFO(_return, dictData, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_IncrementUserStats_DSFO(_return, dictData, clientIndex);
    return;
  }

  void PlayerStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_ProcessStatistics(_return, statisticsData, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_ProcessStatistics(_return, statisticsData, clientIndex);
    return;
  }

  void PlayerStatistics_GetNextExperienceLevel(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_GetNextExperienceLevel(_return, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_GetNextExperienceLevel(_return, clientIndex);
    return;
  }

  void PlayerStatistics_IncrementExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_IncrementExperiencePoints(_return, xpValue, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_IncrementExperiencePoints(_return, xpValue, clientIndex);
    return;
  }

  void PlayerStatistics_SetExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatistics_SetExperiencePoints(_return, xpValue, clientIndex);
    }
    ifaces_[i]->PlayerStatistics_SetExperiencePoints(_return, xpValue, clientIndex);
    return;
  }

  void PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return, const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatisticsEvent_TriggerStatsEvent(_return, eventName, eventMultiplier, clientIndex);
    }
    ifaces_[i]->PlayerStatisticsEvent_TriggerStatsEvent(_return, eventName, eventMultiplier, clientIndex);
    return;
  }

  void PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PlayerStatisticsEvent_TriggerStatsEvents(_return, jsonData, clientIndex);
    }
    ifaces_[i]->PlayerStatisticsEvent_TriggerStatsEvents(_return, jsonData, clientIndex);
    return;
  }

  void Product_GetCurrency(std::string& _return, const std::string& currencyType, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_GetCurrency(_return, currencyType, clientIndex);
    }
    ifaces_[i]->Product_GetCurrency(_return, currencyType, clientIndex);
    return;
  }

  void Product_GetSalesInventory(std::string& _return, const std::string& platform, const std::string& userCurrency, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_GetSalesInventory(_return, platform, userCurrency, clientIndex);
    }
    ifaces_[i]->Product_GetSalesInventory(_return, platform, userCurrency, clientIndex);
    return;
  }

  void Product_GetSalesInventoryByCategory(std::string& _return, const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_GetSalesInventoryByCategory(_return, platform, userCurrency, category, clientIndex);
    }
    ifaces_[i]->Product_GetSalesInventoryByCategory(_return, platform, userCurrency, category, clientIndex);
    return;
  }

  void Product_VerifyMicrosoftReceipt(std::string& _return, const std::string& receipt, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_VerifyMicrosoftReceipt(_return, receipt, clientIndex);
    }
    ifaces_[i]->Product_VerifyMicrosoftReceipt(_return, receipt, clientIndex);
    return;
  }

  void Product_GetEligiblePromotions(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_GetEligiblePromotions(_return, clientIndex);
    }
    ifaces_[i]->Product_GetEligiblePromotions(_return, clientIndex);
    return;
  }

  void Product_VerifyItunesReceipt(std::string& _return, const std::string& base64EncReceiptData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Product_VerifyItunesReceipt(_return, base64EncReceiptData, clientIndex);
    }
    ifaces_[i]->Product_VerifyItunesReceipt(_return, base64EncReceiptData, clientIndex);
    return;
  }

  void Profanity_ProfanityCheck(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Profanity_ProfanityCheck(_return, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    }
    ifaces_[i]->Profanity_ProfanityCheck(_return, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    return;
  }

  void Profanity_ProfanityReplaceText(std::string& _return, const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Profanity_ProfanityReplaceText(_return, text, replaceSymbol, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    }
    ifaces_[i]->Profanity_ProfanityReplaceText(_return, text, replaceSymbol, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    return;
  }

  void Profanity_ProfanityIdentifyBadWords(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Profanity_ProfanityIdentifyBadWords(_return, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    }
    ifaces_[i]->Profanity_ProfanityIdentifyBadWords(_return, text, languages, flagEmail, flagPhone, flagUrls, clientIndex);
    return;
  }

  void PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_DeregisterAllPushNotificationDeviceTokens(_return, clientIndex);
    }
    ifaces_[i]->PushNotification_DeregisterAllPushNotificationDeviceTokens(_return, clientIndex);
    return;
  }

  void PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_DeregisterPushNotificationDeviceToken(_return, platform, token, clientIndex);
    }
    ifaces_[i]->PushNotification_DeregisterPushNotificationDeviceToken(_return, platform, token, clientIndex);
    return;
  }

  void PushNotification_RegisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_RegisterPushNotificationDeviceToken(_return, platform, token, clientIndex);
    }
    ifaces_[i]->PushNotification_RegisterPushNotificationDeviceToken(_return, platform, token, clientIndex);
    return;
  }

  void PushNotification_SendSimplePushNotification(std::string& _return, const std::string& toProfileId, const std::string& message, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendSimplePushNotification(_return, toProfileId, message, clientIndex);
    }
    ifaces_[i]->PushNotification_SendSimplePushNotification(_return, toProfileId, message, clientIndex);
    return;
  }

  void PushNotification_SendRichPushNotification(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendRichPushNotification(_return, toProfileId, notificationTemplateId, clientIndex);
    }
    ifaces_[i]->PushNotification_SendRichPushNotification(_return, toProfileId, notificationTemplateId, clientIndex);
    return;
  }

  void PushNotification_SendRichPushNotificationWithParams(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendRichPushNotificationWithParams(_return, toProfileId, notificationTemplateId, substitutionJson, clientIndex);
    }
    ifaces_[i]->PushNotification_SendRichPushNotificationWithParams(_return, toProfileId, notificationTemplateId, substitutionJson, clientIndex);
    return;
  }

  void PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return, const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendTemplatedPushNotificationToGroup(_return, groupId, notificationTemplateId, substitutionsJson, clientIndex);
    }
    ifaces_[i]->PushNotification_SendTemplatedPushNotificationToGroup(_return, groupId, notificationTemplateId, substitutionsJson, clientIndex);
    return;
  }

  void PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendNormalizedPushNotificationToGroup(_return, groupId, alertContentJson, customDataJson, clientIndex);
    }
    ifaces_[i]->PushNotification_SendNormalizedPushNotificationToGroup(_return, groupId, alertContentJson, customDataJson, clientIndex);
    return;
  }

  void PushNotification_ScheduleRawPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleRawPushNotificationUTC(_return, profileId, fcmContent, iosContent, facebookContent, startTime, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleRawPushNotificationUTC(_return, profileId, fcmContent, iosContent, facebookContent, startTime, clientIndex);
    return;
  }

  void PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleRawPushNotificationMinutes(_return, profileId, fcmContent, iosContent, facebookContent, minutesFromNow, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleRawPushNotificationMinutes(_return, profileId, fcmContent, iosContent, facebookContent, minutesFromNow, clientIndex);
    return;
  }

  void PushNotification_SendRawPushNotification(std::string& _return, const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendRawPushNotification(_return, toProfileId, fcmContent, iosContent, facebookContent, clientIndex);
    }
    ifaces_[i]->PushNotification_SendRawPushNotification(_return, toProfileId, fcmContent, iosContent, facebookContent, clientIndex);
    return;
  }

  void PushNotification_SendRawPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendRawPushNotificationBatch(_return, profileIds, fcmContent, iosContent, facebookContent, clientIndex);
    }
    ifaces_[i]->PushNotification_SendRawPushNotificationBatch(_return, profileIds, fcmContent, iosContent, facebookContent, clientIndex);
    return;
  }

  void PushNotification_SendRawPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendRawPushNotificationToGroup(_return, groupId, fcmContent, iosContent, facebookContent, clientIndex);
    }
    ifaces_[i]->PushNotification_SendRawPushNotificationToGroup(_return, groupId, fcmContent, iosContent, facebookContent, clientIndex);
    return;
  }

  void PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleNormalizedPushNotificationUTC(_return, profileId, alertContentJson, customDataJson, startTime, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleNormalizedPushNotificationUTC(_return, profileId, alertContentJson, customDataJson, startTime, clientIndex);
    return;
  }

  void PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleNormalizedPushNotificationMinutes(_return, profileId, alertContentJson, customDataJson, minutesFromNow, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleNormalizedPushNotificationMinutes(_return, profileId, alertContentJson, customDataJson, minutesFromNow, clientIndex);
    return;
  }

  void PushNotification_ScheduleRichPushNotificationUTC(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleRichPushNotificationUTC(_return, profileId, notificationTemplateId, substitutionsJson, startTime, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleRichPushNotificationUTC(_return, profileId, notificationTemplateId, substitutionsJson, startTime, clientIndex);
    return;
  }

  void PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_ScheduleRichPushNotificationMinutes(_return, profileId, notificationTemplateId, substitutionsJson, minutesFromNow, clientIndex);
    }
    ifaces_[i]->PushNotification_ScheduleRichPushNotificationMinutes(_return, profileId, notificationTemplateId, substitutionsJson, minutesFromNow, clientIndex);
    return;
  }

  void PushNotification_SendNormalizedPushNotification(std::string& _return, const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendNormalizedPushNotification(_return, toProfileId, alertContentJson, customDataJson, clientIndex);
    }
    ifaces_[i]->PushNotification_SendNormalizedPushNotification(_return, toProfileId, alertContentJson, customDataJson, clientIndex);
    return;
  }

  void PushNotification_SendNormalizedPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PushNotification_SendNormalizedPushNotificationBatch(_return, profileIds, alertContentJson, customDataJson, clientIndex);
    }
    ifaces_[i]->PushNotification_SendNormalizedPushNotificationBatch(_return, profileIds, alertContentJson, customDataJson, clientIndex);
    return;
  }

  void Script_RunScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_RunScript(_return, scriptName, jsonScriptData, clientIndex);
    }
    ifaces_[i]->Script_RunScript(_return, scriptName, jsonScriptData, clientIndex);
    return;
  }

  void Script_ScheduleRunScriptUTC(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_ScheduleRunScriptUTC(_return, scriptName, jsonScriptData, startDateInUTC, clientIndex);
    }
    ifaces_[i]->Script_ScheduleRunScriptUTC(_return, scriptName, jsonScriptData, startDateInUTC, clientIndex);
    return;
  }

  void Script_ScheduleRunScriptMinutes(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_ScheduleRunScriptMinutes(_return, scriptName, jsonScriptData, minutesFromNow, clientIndex);
    }
    ifaces_[i]->Script_ScheduleRunScriptMinutes(_return, scriptName, jsonScriptData, minutesFromNow, clientIndex);
    return;
  }

  void Script_RunParentScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_RunParentScript(_return, scriptName, jsonScriptData, parentLevel, clientIndex);
    }
    ifaces_[i]->Script_RunParentScript(_return, scriptName, jsonScriptData, parentLevel, clientIndex);
    return;
  }

  void Script_CancelScheduledScript(std::string& _return, const std::string& jobId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_CancelScheduledScript(_return, jobId, clientIndex);
    }
    ifaces_[i]->Script_CancelScheduledScript(_return, jobId, clientIndex);
    return;
  }

  void Script_RunPeerScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_RunPeerScript(_return, scriptName, jsonScriptData, peer, clientIndex);
    }
    ifaces_[i]->Script_RunPeerScript(_return, scriptName, jsonScriptData, peer, clientIndex);
    return;
  }

  void Script_RunPeerScriptAsynch(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Script_RunPeerScriptAsynch(_return, scriptName, jsonScriptData, peer, clientIndex);
    }
    ifaces_[i]->Script_RunPeerScriptAsynch(_return, scriptName, jsonScriptData, peer, clientIndex);
    return;
  }

  void SocialLeaderboard_GetSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetSocialLeaderboard(_return, leaderboardId, replaceName, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetSocialLeaderboard(_return, leaderboardId, replaceName, clientIndex);
    return;
  }

  void SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetMultiSocialLeaderboard(_return, leaderboardIds, leaderboardResultCount, replaceName, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetMultiSocialLeaderboard(_return, leaderboardIds, leaderboardResultCount, replaceName, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardPage(_return, leaderboardId, sort, startIndex, endIndex, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardPage(_return, leaderboardId, sort, startIndex, endIndex, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardPageByVersion(_return, leaderboardId, sort, startIndex, endIndex, versionId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardPageByVersion(_return, leaderboardId, sort, startIndex, endIndex, versionId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardView(_return, leaderboardId, sort, beforeCount, afterCount, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardView(_return, leaderboardId, sort, beforeCount, afterCount, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardViewByVersion(_return, leaderboardId, sort, beforeCount, afterCount, versionId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardViewByVersion(_return, leaderboardId, sort, beforeCount, afterCount, versionId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardVersions(_return, leaderboardId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardVersions(_return, leaderboardId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGroupSocialLeaderboard(_return, leaderboardId, groupId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGroupSocialLeaderboard(_return, leaderboardId, groupId, clientIndex);
    return;
  }

  void SocialLeaderboard_PostScoreToLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_PostScoreToLeaderboard(_return, leaderboardId, score, jsonData, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_PostScoreToLeaderboard(_return, leaderboardId, score, jsonData, clientIndex);
    return;
  }

  void SocialLeaderboard_RemovePlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_RemovePlayerScore(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_RemovePlayerScore(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_PostScoreToDynamicLeaderboard(_return, leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_PostScoreToDynamicLeaderboard(_return, leaderboardId, score, jsonData, leaderboardType, rotationType, rotationReset, retainedCount, clientIndex);
    return;
  }

  void SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_PostScoreToDynamicLeaderboardDays(_return, leaderboardId, score, jsonData, leaderboardType, rotationReset, retainedCount, numDaysToRotate, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_PostScoreToDynamicLeaderboardDays(_return, leaderboardId, score, jsonData, leaderboardType, rotationReset, retainedCount, numDaysToRotate, clientIndex);
    return;
  }

  void SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetPlayersSocialLeaderboard(_return, leaderboardId, profileIds, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetPlayersSocialLeaderboard(_return, leaderboardId, profileIds, clientIndex);
    return;
  }

  void SocialLeaderboard_ListLeaderboards(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_ListLeaderboards(_return, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_ListLeaderboards(_return, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardEntryCount(_return, leaderboardId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardEntryCount(_return, leaderboardId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetPlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetPlayerScore(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetPlayerScore(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialLeaderboard_GetPlayerScoresFromLeaderboards(_return, leaderboardIds, clientIndex);
    }
    ifaces_[i]->SocialLeaderboard_GetPlayerScoresFromLeaderboards(_return, leaderboardIds, clientIndex);
    return;
  }

  void Time_ReadServerTime(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Time_ReadServerTime(_return, clientIndex);
    }
    ifaces_[i]->Time_ReadServerTime(_return, clientIndex);
    return;
  }

  void Tournament_ClaimTournamentReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_ClaimTournamentReward(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->Tournament_ClaimTournamentReward(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void Tournament_GetTournamentStatus(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_GetTournamentStatus(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->Tournament_GetTournamentStatus(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void Tournament_JoinTournament(std::string& _return, const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_JoinTournament(_return, leaderboardId, tournamentCode, initialScore, clientIndex);
    }
    ifaces_[i]->Tournament_JoinTournament(_return, leaderboardId, tournamentCode, initialScore, clientIndex);
    return;
  }

  void Tournament_LeaveTournament(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_LeaveTournament(_return, leaderboardId, clientIndex);
    }
    ifaces_[i]->Tournament_LeaveTournament(_return, leaderboardId, clientIndex);
    return;
  }

  void Tournament_PostTournamentScore(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_PostTournamentScore(_return, leaderboardId, score, jsonData, roundStartedTime, clientIndex);
    }
    ifaces_[i]->Tournament_PostTournamentScore(_return, leaderboardId, score, jsonData, roundStartedTime, clientIndex);
    return;
  }

  void Tournament_PostTournamentScoreWithResults(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_PostTournamentScoreWithResults(_return, leaderboardId, score, jsonData, roundStartedTime, sort, beforeCount, afterCount, initialScore, clientIndex);
    }
    ifaces_[i]->Tournament_PostTournamentScoreWithResults(_return, leaderboardId, score, jsonData, roundStartedTime, sort, beforeCount, afterCount, initialScore, clientIndex);
    return;
  }

  void Tournament_ViewCurrentReward(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_ViewCurrentReward(_return, leaderboardId, clientIndex);
    }
    ifaces_[i]->Tournament_ViewCurrentReward(_return, leaderboardId, clientIndex);
    return;
  }

  void Tournament_ViewReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Tournament_ViewReward(_return, leaderboardId, versionId, clientIndex);
    }
    ifaces_[i]->Tournament_ViewReward(_return, leaderboardId, versionId, clientIndex);
    return;
  }

  void Lobby_CreateLobby(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_CreateLobby(_return, lobbyType, maxSlots, isOpen, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Lobby_CreateLobby(_return, lobbyType, maxSlots, isOpen, jsonAttributes, clientIndex);
    return;
  }

  void Lobby_OpenLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_OpenLobby(_return, lobbyId, clientIndex);
    }
    ifaces_[i]->Lobby_OpenLobby(_return, lobbyId, clientIndex);
    return;
  }

  void Lobby_CloseLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_CloseLobby(_return, lobbyId, clientIndex);
    }
    ifaces_[i]->Lobby_CloseLobby(_return, lobbyId, clientIndex);
    return;
  }

  void Lobby_FindLobbies(std::string& _return, const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_FindLobbies(_return, freeSlots, maxResults, jsonAttributes, clientIndex);
    }
    ifaces_[i]->Lobby_FindLobbies(_return, freeSlots, maxResults, jsonAttributes, clientIndex);
    return;
  }

  void Lobby_FindFriendsLobbies(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_FindFriendsLobbies(_return, clientIndex);
    }
    ifaces_[i]->Lobby_FindFriendsLobbies(_return, clientIndex);
    return;
  }

  void Lobby_JoinLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_JoinLobby(_return, lobbyId, clientIndex);
    }
    ifaces_[i]->Lobby_JoinLobby(_return, lobbyId, clientIndex);
    return;
  }

  void Lobby_LeaveLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_LeaveLobby(_return, lobbyId, clientIndex);
    }
    ifaces_[i]->Lobby_LeaveLobby(_return, lobbyId, clientIndex);
    return;
  }

  void Lobby_DestroyLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_DestroyLobby(_return, lobbyId, clientIndex);
    }
    ifaces_[i]->Lobby_DestroyLobby(_return, lobbyId, clientIndex);
    return;
  }

  void Lobby_StartGame(std::string& _return, const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_StartGame(_return, lobbyId, connectionString, clientIndex);
    }
    ifaces_[i]->Lobby_StartGame(_return, lobbyId, connectionString, clientIndex);
    return;
  }

  void Lobby_GetMyLobbies(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Lobby_GetMyLobbies(_return, clientIndex);
    }
    ifaces_[i]->Lobby_GetMyLobbies(_return, clientIndex);
    return;
  }

  void Party_AcceptPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_AcceptPartyInvitation(_return, partyId, clientIndex);
    }
    ifaces_[i]->Party_AcceptPartyInvitation(_return, partyId, clientIndex);
    return;
  }

  void Party_GetPartyInfo(std::string& _return, const std::string& partyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_GetPartyInfo(_return, partyId, clientIndex);
    }
    ifaces_[i]->Party_GetPartyInfo(_return, partyId, clientIndex);
    return;
  }

  void Party_JoinParty(std::string& _return, const std::string& partyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_JoinParty(_return, partyId, clientIndex);
    }
    ifaces_[i]->Party_JoinParty(_return, partyId, clientIndex);
    return;
  }

  void Party_LeaveParty(std::string& _return, const std::string& partyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_LeaveParty(_return, partyId, clientIndex);
    }
    ifaces_[i]->Party_LeaveParty(_return, partyId, clientIndex);
    return;
  }

  void Party_RejectPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_RejectPartyInvitation(_return, partyId, clientIndex);
    }
    ifaces_[i]->Party_RejectPartyInvitation(_return, partyId, clientIndex);
    return;
  }

  void Party_SendPartyInvitation(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_SendPartyInvitation(_return, playerId, clientIndex);
    }
    ifaces_[i]->Party_SendPartyInvitation(_return, playerId, clientIndex);
    return;
  }

  void Party_ListPartyInvitations(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_ListPartyInvitations(_return, clientIndex);
    }
    ifaces_[i]->Party_ListPartyInvitations(_return, clientIndex);
    return;
  }

  void Party_GetFriendsParties(std::string& _return, const int32_t maxResults, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_GetFriendsParties(_return, maxResults, clientIndex);
    }
    ifaces_[i]->Party_GetFriendsParties(_return, maxResults, clientIndex);
    return;
  }

  void Party_GetMyParty(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Party_GetMyParty(_return, clientIndex);
    }
    ifaces_[i]->Party_GetMyParty(_return, clientIndex);
    return;
  }

  void Patch_GetGameManifest(std::string& _return, const std::string& gameId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Patch_GetGameManifest(_return, gameId, clientIndex);
    }
    ifaces_[i]->Patch_GetGameManifest(_return, gameId, clientIndex);
    return;
  }

  void SocialFeed_ShareVideo(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareVideo(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareVideo(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareScreenshot(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareScreenshot(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareScreenshot(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareAchievement(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareAchievement(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareAchievement(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareApp(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareApp(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareApp(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareChannel(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareChannel(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareChannel(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareLink(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareLink(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareLink(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ShareGameGuide(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ShareGameGuide(_return, timestamp, resource, tagged, show, block, clientIndex);
    }
    ifaces_[i]->SocialFeed_ShareGameGuide(_return, timestamp, resource, tagged, show, block, clientIndex);
    return;
  }

  void SocialFeed_ReadSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ReadSocialFeed(_return, skip, limit, clientIndex);
    }
    ifaces_[i]->SocialFeed_ReadSocialFeed(_return, skip, limit, clientIndex);
    return;
  }

  void SocialFeed_ReadFilteredSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ReadFilteredSocialFeed(_return, skip, limit, playerIds, clientIndex);
    }
    ifaces_[i]->SocialFeed_ReadFilteredSocialFeed(_return, skip, limit, playerIds, clientIndex);
    return;
  }

  void SocialFeed_ReadFriendsSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ReadFriendsSocialFeed(_return, skip, limit, clientIndex);
    }
    ifaces_[i]->SocialFeed_ReadFriendsSocialFeed(_return, skip, limit, clientIndex);
    return;
  }

  void SocialFeed_PostComment(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_PostComment(_return, timestamp, parentId, content, clientIndex);
    }
    ifaces_[i]->SocialFeed_PostComment(_return, timestamp, parentId, content, clientIndex);
    return;
  }

  void SocialFeed_PostCommentReply(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_PostCommentReply(_return, timestamp, parentId, content, clientIndex);
    }
    ifaces_[i]->SocialFeed_PostCommentReply(_return, timestamp, parentId, content, clientIndex);
    return;
  }

  void SocialFeed_ReadComments(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ReadComments(_return, skip, limit, parentId, clientIndex);
    }
    ifaces_[i]->SocialFeed_ReadComments(_return, skip, limit, parentId, clientIndex);
    return;
  }

  void SocialFeed_ReadCommentReplies(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_ReadCommentReplies(_return, skip, limit, parentId, clientIndex);
    }
    ifaces_[i]->SocialFeed_ReadCommentReplies(_return, skip, limit, parentId, clientIndex);
    return;
  }

  void SocialFeed_LikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_LikeComment(_return, socialFeedId, clientIndex);
    }
    ifaces_[i]->SocialFeed_LikeComment(_return, socialFeedId, clientIndex);
    return;
  }

  void SocialFeed_LikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_LikeActivity(_return, socialFeedId, clientIndex);
    }
    ifaces_[i]->SocialFeed_LikeActivity(_return, socialFeedId, clientIndex);
    return;
  }

  void SocialFeed_UnlikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_UnlikeComment(_return, socialFeedId, clientIndex);
    }
    ifaces_[i]->SocialFeed_UnlikeComment(_return, socialFeedId, clientIndex);
    return;
  }

  void SocialFeed_UnlikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_UnlikeActivity(_return, socialFeedId, clientIndex);
    }
    ifaces_[i]->SocialFeed_UnlikeActivity(_return, socialFeedId, clientIndex);
    return;
  }

  void SocialFeed_SetFeedVisibility(std::string& _return, const std::string& visibility, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_SetFeedVisibility(_return, visibility, clientIndex);
    }
    ifaces_[i]->SocialFeed_SetFeedVisibility(_return, visibility, clientIndex);
    return;
  }

  void SocialFeed_BlockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_BlockPlayer(_return, playerId, clientIndex);
    }
    ifaces_[i]->SocialFeed_BlockPlayer(_return, playerId, clientIndex);
    return;
  }

  void SocialFeed_HidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_HidePlayer(_return, playerId, clientIndex);
    }
    ifaces_[i]->SocialFeed_HidePlayer(_return, playerId, clientIndex);
    return;
  }

  void SocialFeed_UnblockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_UnblockPlayer(_return, playerId, clientIndex);
    }
    ifaces_[i]->SocialFeed_UnblockPlayer(_return, playerId, clientIndex);
    return;
  }

  void SocialFeed_UnhidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_UnhidePlayer(_return, playerId, clientIndex);
    }
    ifaces_[i]->SocialFeed_UnhidePlayer(_return, playerId, clientIndex);
    return;
  }

  void SocialFeed_GetActivity(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_GetActivity(_return, socialFeedId, depth, skip, limit, clientIndex);
    }
    ifaces_[i]->SocialFeed_GetActivity(_return, socialFeedId, depth, skip, limit, clientIndex);
    return;
  }

  void SocialFeed_GetComment(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SocialFeed_GetComment(_return, socialFeedId, depth, skip, limit, clientIndex);
    }
    ifaces_[i]->SocialFeed_GetComment(_return, socialFeedId, depth, skip, limit, clientIndex);
    return;
  }

  void Telemetry_StartTelemetrySession(std::string& _return, const int32_t timestamp, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Telemetry_StartTelemetrySession(_return, timestamp, clientIndex);
    }
    ifaces_[i]->Telemetry_StartTelemetrySession(_return, timestamp, clientIndex);
    return;
  }

  void Telemetry_EndTelemetrySession(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Telemetry_EndTelemetrySession(_return, telemetrySessionId, timestamp, clientIndex);
    }
    ifaces_[i]->Telemetry_EndTelemetrySession(_return, telemetrySessionId, timestamp, clientIndex);
    return;
  }

  void Telemetry_LogTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Telemetry_LogTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    }
    ifaces_[i]->Telemetry_LogTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    return;
  }

  void Telemetry_StartTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Telemetry_StartTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    }
    ifaces_[i]->Telemetry_StartTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    return;
  }

  void Telemetry_EndTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Telemetry_EndTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    }
    ifaces_[i]->Telemetry_EndTelemetryEvent(_return, telemetrySessionId, timestamp, eventType, participantId, customData, clientIndex);
    return;
  }

  void Authentication_GetWeChatQRPageURL(std::string& _return, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authentication_GetWeChatQRPageURL(_return, clientIndex);
    }
    ifaces_[i]->Authentication_GetWeChatQRPageURL(_return, clientIndex);
    return;
  }

  void File_DownloadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_DownloadFile(_return, cloudPath, cloudFilename, replaceIfExists, clientIndex);
    }
    ifaces_[i]->File_DownloadFile(_return, cloudPath, cloudFilename, replaceIfExists, clientIndex);
    return;
  }

  void File_GetDownloadInfo(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_GetDownloadInfo(_return, cloudPath, cloudFilename, clientIndex);
    }
    ifaces_[i]->File_GetDownloadInfo(_return, cloudPath, cloudFilename, clientIndex);
    return;
  }

  void File_CancelDownload(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->File_CancelDownload(_return, cloudPath, cloudFilename, clientIndex);
    }
    ifaces_[i]->File_CancelDownload(_return, cloudPath, cloudFilename, clientIndex);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BrainCloudServiceConcurrentClient : virtual public BrainCloudServiceIf {
 public:
  BrainCloudServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BrainCloudServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AsyncMatch_CreateMatch(std::string& _return, const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex);
  int32_t send_AsyncMatch_CreateMatch(const std::string& jsonOpponentIds, const std::string& pushNotificationMessage, const int32_t clientIndex);
  void recv_AsyncMatch_CreateMatch(std::string& _return, const int32_t seqid);
  void AsyncMatch_CreateMatchWithInitialTurn(std::string& _return, const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex);
  int32_t send_AsyncMatch_CreateMatchWithInitialTurn(const std::string& jsonOpponentIds, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const int32_t clientIndex);
  void recv_AsyncMatch_CreateMatchWithInitialTurn(std::string& _return, const int32_t seqid);
  void AsyncMatch_SubmitTurn(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex);
  int32_t send_AsyncMatch_SubmitTurn(const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonMatchState, const std::string& pushNotificationMessage, const std::string& nextPlayer, const std::string& jsonSummary, const std::string& jsonStatistics, const int32_t clientIndex);
  void recv_AsyncMatch_SubmitTurn(std::string& _return, const int32_t seqid);
  void AsyncMatch_UpdateMatchSummaryData(std::string& _return, const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex);
  int32_t send_AsyncMatch_UpdateMatchSummaryData(const std::string& ownerId, const std::string& matchId, const int64_t version, const std::string& jsonSummary, const int32_t clientIndex);
  void recv_AsyncMatch_UpdateMatchSummaryData(std::string& _return, const int32_t seqid);
  void AsyncMatch_CompleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  int32_t send_AsyncMatch_CompleteMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_CompleteMatch(std::string& _return, const int32_t seqid);
  void AsyncMatch_ReadMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  int32_t send_AsyncMatch_ReadMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_ReadMatch(std::string& _return, const int32_t seqid);
  void AsyncMatch_ReadMatchHistory(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  int32_t send_AsyncMatch_ReadMatchHistory(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_ReadMatchHistory(std::string& _return, const int32_t seqid);
  void AsyncMatch_FindMatches(std::string& _return, const int32_t clientIndex);
  int32_t send_AsyncMatch_FindMatches(const int32_t clientIndex);
  void recv_AsyncMatch_FindMatches(std::string& _return, const int32_t seqid);
  void AsyncMatch_FindCompleteMatches(std::string& _return, const int32_t clientIndex);
  int32_t send_AsyncMatch_FindCompleteMatches(const int32_t clientIndex);
  void recv_AsyncMatch_FindCompleteMatches(std::string& _return, const int32_t seqid);
  void AsyncMatch_AbandonMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  int32_t send_AsyncMatch_AbandonMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_AbandonMatch(std::string& _return, const int32_t seqid);
  void AsyncMatch_DeleteMatch(std::string& _return, const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  int32_t send_AsyncMatch_DeleteMatch(const std::string& ownerId, const std::string& matchId, const int32_t clientIndex);
  void recv_AsyncMatch_DeleteMatch(std::string& _return, const int32_t seqid);
  void Authentication_GenerateAnonymousId(std::string& _return, const int32_t clientIndex);
  int32_t send_Authentication_GenerateAnonymousId(const int32_t clientIndex);
  void recv_Authentication_GenerateAnonymousId(std::string& _return, const int32_t seqid);
  void Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  int32_t send_Authentication_Initialize(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void recv_Authentication_Initialize(const int32_t seqid);
  void Authentication_ClearSavedProfileID(const int32_t clientIndex);
  int32_t send_Authentication_ClearSavedProfileID(const int32_t clientIndex);
  void recv_Authentication_ClearSavedProfileID(const int32_t seqid);
  void Authentication_AuthenticateAnonymous(std::string& _return, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticateAnonymous(const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateAnonymous(std::string& _return, const int32_t seqid);
  void Authentication_AuthenticateEmailPassword(std::string& _return, const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticateEmailPassword(const std::string& email, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateEmailPassword(std::string& _return, const int32_t seqid);
  void Authentication_AuthenticateUniversal(std::string& _return, const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticateUniversal(const std::string& userId, const std::string& password, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateUniversal(std::string& _return, const int32_t seqid);
  void Authentication_AuthenticateExternal(std::string& _return, const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticateExternal(const std::string& userId, const std::string& token, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateExternal(std::string& _return, const int32_t seqid);
  void Authentication_AuthenticatePhone(std::string& _return, const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticatePhone(const std::string& phoneNumber, const std::string& authCode, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticatePhone(std::string& _return, const int32_t seqid);
  void Authentication_AuthenticateWechat(std::string& _return, const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_AuthenticateWechat(const std::string& openId, const std::string& token, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_AuthenticateWechat(std::string& _return, const int32_t seqid);
  void Authentication_ResetEmailPassword(std::string& _return, const std::string& externalId, const int32_t clientIndex);
  int32_t send_Authentication_ResetEmailPassword(const std::string& externalId, const int32_t clientIndex);
  void recv_Authentication_ResetEmailPassword(std::string& _return, const int32_t seqid);
  void Authentication_RequestSmsCode(std::string& _return, const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Authentication_RequestSmsCode(const std::string& phoneNumber, const bool forceCreate, const int32_t clientIndex);
  void recv_Authentication_RequestSmsCode(std::string& _return, const int32_t seqid);
  void Client_GetSessionId(std::string& _return, const int32_t clientIndex);
  int32_t send_Client_GetSessionId(const int32_t clientIndex);
  void recv_Client_GetSessionId(std::string& _return, const int32_t seqid);
  bool Client_IsAuthenticated(const int32_t clientIndex);
  int32_t send_Client_IsAuthenticated(const int32_t clientIndex);
  bool recv_Client_IsAuthenticated(const int32_t seqid);
  bool Client_IsInitialized(const int32_t clientIndex);
  int32_t send_Client_IsInitialized(const int32_t clientIndex);
  bool recv_Client_IsInitialized(const int32_t seqid);
  void Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  int32_t send_Client_Initialize_SSS(const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void recv_Client_Initialize_SSS(const int32_t seqid);
  void Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  int32_t send_Client_Initialize_SSSS(const std::string& serverURL, const std::string& secretKey, const std::string& appId, const std::string& appVersion, const int32_t clientIndex);
  void recv_Client_Initialize_SSSS(const int32_t seqid);
  void Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  int32_t send_Client_InitializeIdentity(const std::string& profileId, const std::string& anonymousId, const int32_t clientIndex);
  void recv_Client_InitializeIdentity(const int32_t seqid);
  void Client_Update(const int32_t clientIndex);
  int32_t send_Client_Update(const int32_t clientIndex);
  void recv_Client_Update(const int32_t seqid);
  void Client_EnableLogging(const bool enable, const int32_t clientIndex);
  int32_t send_Client_EnableLogging(const bool enable, const int32_t clientIndex);
  void recv_Client_EnableLogging(const int32_t seqid);
  void Client_ResetCommunication(const int32_t clientIndex);
  int32_t send_Client_ResetCommunication(const int32_t clientIndex);
  void recv_Client_ResetCommunication(const int32_t seqid);
  void Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex);
  int32_t send_Client_SetPacketTimeouts(const std::vector<int32_t> & timeouts, const int32_t clientIndex);
  void recv_Client_SetPacketTimeouts(const int32_t seqid);
  void Client_SetPacketTimeoutsToDefault(const int32_t clientIndex);
  int32_t send_Client_SetPacketTimeoutsToDefault(const int32_t clientIndex);
  void recv_Client_SetPacketTimeoutsToDefault(const int32_t seqid);
  void Client_GetPacketTimeouts(std::vector<int32_t> & _return, const int32_t clientIndex);
  int32_t send_Client_GetPacketTimeouts(const int32_t clientIndex);
  void recv_Client_GetPacketTimeouts(std::vector<int32_t> & _return, const int32_t seqid);
  void Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  int32_t send_Client_SetAuthenticationPacketTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void recv_Client_SetAuthenticationPacketTimeout(const int32_t seqid);
  int32_t Client_GetAuthenticationPacketTimeout(const int32_t clientIndex);
  int32_t send_Client_GetAuthenticationPacketTimeout(const int32_t clientIndex);
  int32_t recv_Client_GetAuthenticationPacketTimeout(const int32_t seqid);
  int32_t Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex);
  int32_t send_Client_GetUploadLowTransferRateTimeout(const int32_t clientIndex);
  int32_t recv_Client_GetUploadLowTransferRateTimeout(const int32_t seqid);
  void Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  int32_t send_Client_SetUploadLowTransferRateTimeout(const int32_t timeoutSecs, const int32_t clientIndex);
  void recv_Client_SetUploadLowTransferRateTimeout(const int32_t seqid);
  int32_t Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex);
  int32_t send_Client_GetUploadLowTransferRateThreshold(const int32_t clientIndex);
  int32_t recv_Client_GetUploadLowTransferRateThreshold(const int32_t seqid);
  void Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex);
  int32_t send_Client_SetUploadLowTransferRateThreshold(const int32_t bytesPerSec, const int32_t clientIndex);
  void recv_Client_SetUploadLowTransferRateThreshold(const int32_t seqid);
  void Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex);
  int32_t send_Client_EnableNetworkErrorMessageCaching(const bool enabled, const int32_t clientIndex);
  void recv_Client_EnableNetworkErrorMessageCaching(const int32_t seqid);
  void Client_RetryCachedMessages(const int32_t clientIndex);
  int32_t send_Client_RetryCachedMessages(const int32_t clientIndex);
  void recv_Client_RetryCachedMessages(const int32_t seqid);
  void Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex);
  int32_t send_Client_FlushCachedMessages(const bool sendApiErrorCallbacks, const int32_t clientIndex);
  void recv_Client_FlushCachedMessages(const int32_t seqid);
  void Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex);
  int32_t send_Client_InsertEndOfMessageBundleMarker(const int32_t clientIndex);
  void recv_Client_InsertEndOfMessageBundleMarker(const int32_t seqid);
  void Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex);
  int32_t send_Client_OverrideCountryCode(const std::string& countryCode, const int32_t clientIndex);
  void recv_Client_OverrideCountryCode(const int32_t seqid);
  void Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex);
  int32_t send_Client_OverrideLanguageCode(const std::string& languageCode, const int32_t clientIndex);
  void recv_Client_OverrideLanguageCode(const int32_t seqid);
  void DataStream_CustomPageEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  int32_t send_DataStream_CustomPageEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomPageEvent(std::string& _return, const int32_t seqid);
  void DataStream_CustomScreenEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  int32_t send_DataStream_CustomScreenEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomScreenEvent(std::string& _return, const int32_t seqid);
  void DataStream_CustomTrackEvent(std::string& _return, const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  int32_t send_DataStream_CustomTrackEvent(const std::string& eventName, const std::string& jsonEventProperties, const int32_t clientIndex);
  void recv_DataStream_CustomTrackEvent(std::string& _return, const int32_t seqid);
  void Entity_CreateEntity(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex);
  int32_t send_Entity_CreateEntity(const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void recv_Entity_CreateEntity(std::string& _return, const int32_t seqid);
  void Entity_GetEntitiesByType(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  int32_t send_Entity_GetEntitiesByType(const std::string& entityType, const int32_t clientIndex);
  void recv_Entity_GetEntitiesByType(std::string& _return, const int32_t seqid);
  void Entity_UpdateEntity(std::string& _return, const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  int32_t send_Entity_UpdateEntity(const std::string& entityId, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateEntity(std::string& _return, const int32_t seqid);
  void Entity_UpdateSharedEntity(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex);
  int32_t send_Entity_UpdateSharedEntity(const std::string& entityId, const std::string& targetProfileId, const std::string& entityType, const std::string& jsonEntityData, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateSharedEntity(std::string& _return, const int32_t seqid);
  void Entity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex);
  int32_t send_Entity_DeleteEntity(const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void recv_Entity_DeleteEntity(std::string& _return, const int32_t seqid);
  void Entity_UpdateSingleton(std::string& _return, const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  int32_t send_Entity_UpdateSingleton(const std::string& entityType, const std::string& jsonEntityData, const std::string& jsonEntityAcl, const int32_t version, const int32_t clientIndex);
  void recv_Entity_UpdateSingleton(std::string& _return, const int32_t seqid);
  void Entity_DeleteSingleton(std::string& _return, const std::string& entityType, const int32_t version, const int32_t clientIndex);
  int32_t send_Entity_DeleteSingleton(const std::string& entityType, const int32_t version, const int32_t clientIndex);
  void recv_Entity_DeleteSingleton(std::string& _return, const int32_t seqid);
  void Entity_GetEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex);
  int32_t send_Entity_GetEntity(const std::string& entityId, const int32_t clientIndex);
  void recv_Entity_GetEntity(std::string& _return, const int32_t seqid);
  void Entity_GetSingleton(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  int32_t send_Entity_GetSingleton(const std::string& entityType, const int32_t clientIndex);
  void recv_Entity_GetSingleton(std::string& _return, const int32_t seqid);
  void Entity_GetSharedEntityForProfileId(std::string& _return, const std::string& profileId, const std::string& entityId, const int32_t clientIndex);
  int32_t send_Entity_GetSharedEntityForProfileId(const std::string& profileId, const std::string& entityId, const int32_t clientIndex);
  void recv_Entity_GetSharedEntityForProfileId(std::string& _return, const int32_t seqid);
  void Entity_GetSharedEntitiesForProfileId(std::string& _return, const std::string& profileId, const int32_t clientIndex);
  int32_t send_Entity_GetSharedEntitiesForProfileId(const std::string& profileId, const int32_t clientIndex);
  void recv_Entity_GetSharedEntitiesForProfileId(std::string& _return, const int32_t seqid);
  void Entity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  int32_t send_Entity_GetList(const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_Entity_GetList(std::string& _return, const int32_t seqid);
  void Entity_GetSharedEntitiesListForProfileId(std::string& _return, const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  int32_t send_Entity_GetSharedEntitiesListForProfileId(const std::string& profileId, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_Entity_GetSharedEntitiesListForProfileId(std::string& _return, const int32_t seqid);
  void Entity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex);
  int32_t send_Entity_GetListCount(const std::string& whereJson, const int32_t clientIndex);
  void recv_Entity_GetListCount(std::string& _return, const int32_t seqid);
  void Entity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  int32_t send_Entity_GetPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Entity_GetPage(std::string& _return, const int32_t seqid);
  void Entity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  int32_t send_Entity_GetPageOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Entity_GetPageOffset(std::string& _return, const int32_t seqid);
  void Entity_IncrementUserEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Entity_IncrementUserEntityData(const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Entity_IncrementUserEntityData(std::string& _return, const int32_t seqid);
  void Entity_IncrementSharedUserEntityData(std::string& _return, const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Entity_IncrementSharedUserEntityData(const std::string& entityId, const std::string& targetProfileId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Entity_IncrementSharedUserEntityData(std::string& _return, const int32_t seqid);
  void Event_SendEvent(std::string& _return, const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex);
  int32_t send_Event_SendEvent(const std::string& toProfileId, const std::string& eventType, const std::string& jsonEventData, const int32_t clientIndex);
  void recv_Event_SendEvent(std::string& _return, const int32_t seqid);
  void Event_UpdateIncomingEventData(std::string& _return, const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex);
  int32_t send_Event_UpdateIncomingEventData(const std::string& evId, const std::string& jsonEventData, const int32_t clientIndex);
  void recv_Event_UpdateIncomingEventData(std::string& _return, const int32_t seqid);
  void Event_DeleteIncomingEvent(std::string& _return, const std::string& evId, const int32_t clientIndex);
  int32_t send_Event_DeleteIncomingEvent(const std::string& evId, const int32_t clientIndex);
  void recv_Event_DeleteIncomingEvent(std::string& _return, const int32_t seqid);
  void Event_GetEvents(std::string& _return, const int32_t clientIndex);
  int32_t send_Event_GetEvents(const int32_t clientIndex);
  void recv_Event_GetEvents(std::string& _return, const int32_t seqid);
  void File_UploadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex);
  int32_t send_File_UploadFile(const std::string& cloudPath, const std::string& cloudFilename, const bool shareable, const bool replaceIfExists, const std::string& localPath, const int32_t clientIndex);
  void recv_File_UploadFile(std::string& _return, const int32_t seqid);
  void File_CancelUpload(const std::string& uploadId, const int32_t clientIndex);
  int32_t send_File_CancelUpload(const std::string& uploadId, const int32_t clientIndex);
  void recv_File_CancelUpload(const int32_t seqid);
  double File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex);
  int32_t send_File_GetUploadProgress(const std::string& uploadId, const int32_t clientIndex);
  double recv_File_GetUploadProgress(const int32_t seqid);
  int64_t File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex);
  int32_t send_File_GetUploadBytesTransferred(const std::string& uploadId, const int32_t clientIndex);
  int64_t recv_File_GetUploadBytesTransferred(const int32_t seqid);
  int64_t File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex);
  int32_t send_File_GetUploadTotalBytesToTransfer(const std::string& uploadId, const int32_t clientIndex);
  int64_t recv_File_GetUploadTotalBytesToTransfer(const int32_t seqid);
  void File_ListUserFiles_SFO(std::string& _return, const int32_t clientIndex);
  int32_t send_File_ListUserFiles_SFO(const int32_t clientIndex);
  void recv_File_ListUserFiles_SFO(std::string& _return, const int32_t seqid);
  void File_ListUserFiles_SNSFO(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  int32_t send_File_ListUserFiles_SNSFO(const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void recv_File_ListUserFiles_SNSFO(std::string& _return, const int32_t seqid);
  void File_DeleteUserFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex);
  int32_t send_File_DeleteUserFile(const std::string& cloudPath, const std::string& cloudFileName, const int32_t clientIndex);
  void recv_File_DeleteUserFile(std::string& _return, const int32_t seqid);
  void File_DeleteUserFiles(std::string& _return, const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  int32_t send_File_DeleteUserFiles(const std::string& cloudPath, const bool recurse, const int32_t clientIndex);
  void recv_File_DeleteUserFiles(std::string& _return, const int32_t seqid);
  void File_GetCDNUrl(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  int32_t send_File_GetCDNUrl(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_GetCDNUrl(std::string& _return, const int32_t seqid);
  void Friend_ReadFriendEntity(std::string& _return, const std::string& entityId, const std::string& friendId, const int32_t clientIndex);
  int32_t send_Friend_ReadFriendEntity(const std::string& entityId, const std::string& friendId, const int32_t clientIndex);
  void recv_Friend_ReadFriendEntity(std::string& _return, const int32_t seqid);
  void Friend_ReadFriendsEntities(std::string& _return, const std::string& entityType, const int32_t clientIndex);
  int32_t send_Friend_ReadFriendsEntities(const std::string& entityType, const int32_t clientIndex);
  void recv_Friend_ReadFriendsEntities(std::string& _return, const int32_t seqid);
  void Friend_ReadFriendUserState(std::string& _return, const std::string& friendId, const int32_t clientIndex);
  int32_t send_Friend_ReadFriendUserState(const std::string& friendId, const int32_t clientIndex);
  void recv_Friend_ReadFriendUserState(std::string& _return, const int32_t seqid);
  void Friend_GetSummaryDataForProfileId(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_Friend_GetSummaryDataForProfileId(const std::string& playerId, const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForProfileId(std::string& _return, const int32_t seqid);
  void Friend_GetSummaryDataForProfileIds(std::string& _return, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  int32_t send_Friend_GetSummaryDataForProfileIds(const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForProfileIds(std::string& _return, const int32_t seqid);
  void Friend_GetSummaryDataForFriends(std::string& _return, const int32_t clientIndex);
  int32_t send_Friend_GetSummaryDataForFriends(const int32_t clientIndex);
  void recv_Friend_GetSummaryDataForFriends(std::string& _return, const int32_t seqid);
  void Friend_FindUsersByExactName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  int32_t send_Friend_FindUsersByExactName(const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void recv_Friend_FindUsersByExactName(std::string& _return, const int32_t seqid);
  void Friend_FindUsersBySubstrName(std::string& _return, const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  int32_t send_Friend_FindUsersBySubstrName(const std::string& searchText, const int32_t maxResults, const int32_t clientIndex);
  void recv_Friend_FindUsersBySubstrName(std::string& _return, const int32_t seqid);
  void Friend_ListFriends(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex);
  int32_t send_Friend_ListFriends(const  ::Ruyi::SDK::BrainCloudApi::FriendPlatform::type friendPlatform, const bool includeSummaryData, const int32_t clientIndex);
  void recv_Friend_ListFriends(std::string& _return, const int32_t seqid);
  void Friend_AddFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  int32_t send_Friend_AddFriends(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_AddFriends(std::string& _return, const int32_t seqid);
  void Friend_RemoveFriends(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  int32_t send_Friend_RemoveFriends(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_RemoveFriends(std::string& _return, const int32_t seqid);
  void Friend_GetUsersOnlineStatus(std::string& _return, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  int32_t send_Friend_GetUsersOnlineStatus(const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_Friend_GetUsersOnlineStatus(std::string& _return, const int32_t seqid);
  void Friend_SendFriendInvitation(std::string& _return, const std::string& toPlayerId, const int32_t clientIndex);
  int32_t send_Friend_SendFriendInvitation(const std::string& toPlayerId, const int32_t clientIndex);
  void recv_Friend_SendFriendInvitation(std::string& _return, const int32_t seqid);
  void Friend_ListFriendInvitationsReceived(std::string& _return, const int32_t clientIndex);
  int32_t send_Friend_ListFriendInvitationsReceived(const int32_t clientIndex);
  void recv_Friend_ListFriendInvitationsReceived(std::string& _return, const int32_t seqid);
  void Friend_ListFriendInvitationsSent(std::string& _return, const int32_t clientIndex);
  int32_t send_Friend_ListFriendInvitationsSent(const int32_t clientIndex);
  void recv_Friend_ListFriendInvitationsSent(std::string& _return, const int32_t seqid);
  void Friend_AcceptFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex);
  int32_t send_Friend_AcceptFriendInvitation(const std::string& fromPlayerId, const int32_t clientIndex);
  void recv_Friend_AcceptFriendInvitation(std::string& _return, const int32_t seqid);
  void Friend_RejectFriendInvitation(std::string& _return, const std::string& fromPlayerId, const int32_t clientIndex);
  int32_t send_Friend_RejectFriendInvitation(const std::string& fromPlayerId, const int32_t clientIndex);
  void recv_Friend_RejectFriendInvitation(std::string& _return, const int32_t seqid);
  void Friend_RemoveFriend(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_Friend_RemoveFriend(const std::string& playerId, const int32_t clientIndex);
  void recv_Friend_RemoveFriend(std::string& _return, const int32_t seqid);
  void Gamification_ReadAllGamification(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadAllGamification(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAllGamification(std::string& _return, const int32_t seqid);
  void Gamification_ReadMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadMilestones(std::string& _return, const int32_t seqid);
  void Gamification_ReadAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadAchievements(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAchievements(std::string& _return, const int32_t seqid);
  void Gamification_ReadXpLevelsMetaData(std::string& _return, const int32_t clientIndex);
  int32_t send_Gamification_ReadXpLevelsMetaData(const int32_t clientIndex);
  void recv_Gamification_ReadXpLevelsMetaData(std::string& _return, const int32_t seqid);
  void Gamification_ReadAchievedAchievements(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadAchievedAchievements(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadAchievedAchievements(std::string& _return, const int32_t seqid);
  void Gamification_ReadCompletedMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadCompletedMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadCompletedMilestones(std::string& _return, const int32_t seqid);
  void Gamification_ReadInProgressMilestones(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadInProgressMilestones(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadInProgressMilestones(std::string& _return, const int32_t seqid);
  void Gamification_ReadMilestonesByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadMilestonesByCategory(const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadMilestonesByCategory(std::string& _return, const int32_t seqid);
  void Gamification_AwardAchievements(std::string& _return, const std::vector<std::string> & achievementIds, const int32_t clientIndex);
  int32_t send_Gamification_AwardAchievements(const std::vector<std::string> & achievementIds, const int32_t clientIndex);
  void recv_Gamification_AwardAchievements(std::string& _return, const int32_t seqid);
  void Gamification_ReadQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuests(std::string& _return, const int32_t seqid);
  void Gamification_ReadCompletedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadCompletedQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadCompletedQuests(std::string& _return, const int32_t seqid);
  void Gamification_ReadInProgressQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadInProgressQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadInProgressQuests(std::string& _return, const int32_t seqid);
  void Gamification_ReadNotStartedQuests(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadNotStartedQuests(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadNotStartedQuests(std::string& _return, const int32_t seqid);
  void Gamification_ReadQuestsWithStatus(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadQuestsWithStatus(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithStatus(std::string& _return, const int32_t seqid);
  void Gamification_ReadQuestsWithBasicPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadQuestsWithBasicPercentage(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithBasicPercentage(std::string& _return, const int32_t seqid);
  void Gamification_ReadQuestsWithComplexPercentage(std::string& _return, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadQuestsWithComplexPercentage(const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsWithComplexPercentage(std::string& _return, const int32_t seqid);
  void Gamification_ReadQuestsByCategory(std::string& _return, const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  int32_t send_Gamification_ReadQuestsByCategory(const std::string& category, const bool includeMetaData, const int32_t clientIndex);
  void recv_Gamification_ReadQuestsByCategory(std::string& _return, const int32_t seqid);
  void Gamification_ResetMilestones(std::string& _return, const std::vector<std::string> & milestoneIds, const int32_t clientIndex);
  int32_t send_Gamification_ResetMilestones(const std::vector<std::string> & milestoneIds, const int32_t clientIndex);
  void recv_Gamification_ResetMilestones(std::string& _return, const int32_t seqid);
  void GlobalApp_ReadProperties(std::string& _return, const int32_t clientIndex);
  int32_t send_GlobalApp_ReadProperties(const int32_t clientIndex);
  void recv_GlobalApp_ReadProperties(std::string& _return, const int32_t seqid);
  void GlobalEntity_CreateEntity(std::string& _return, const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  int32_t send_GlobalEntity_CreateEntity(const std::string& entityType, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_CreateEntity(std::string& _return, const int32_t seqid);
  void GlobalEntity_CreateEntityWithIndexedId(std::string& _return, const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  int32_t send_GlobalEntity_CreateEntityWithIndexedId(const std::string& entityType, const std::string& indexedId, const int64_t timeToLive, const std::string& jsonEntityAcl, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_CreateEntityWithIndexedId(std::string& _return, const int32_t seqid);
  void GlobalEntity_UpdateEntity(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex);
  int32_t send_GlobalEntity_UpdateEntity(const std::string& entityId, const int32_t version, const std::string& jsonEntityData, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntity(std::string& _return, const int32_t seqid);
  void GlobalEntity_UpdateEntityAcl(std::string& _return, const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex);
  int32_t send_GlobalEntity_UpdateEntityAcl(const std::string& entityId, const int32_t version, const std::string& jsonEntityAcl, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityAcl(std::string& _return, const int32_t seqid);
  void GlobalEntity_UpdateEntityTimeToLive(std::string& _return, const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex);
  int32_t send_GlobalEntity_UpdateEntityTimeToLive(const std::string& entityId, const int32_t version, const int64_t timeToLive, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityTimeToLive(std::string& _return, const int32_t seqid);
  void GlobalEntity_DeleteEntity(std::string& _return, const std::string& entityId, const int32_t version, const int32_t clientIndex);
  int32_t send_GlobalEntity_DeleteEntity(const std::string& entityId, const int32_t version, const int32_t clientIndex);
  void recv_GlobalEntity_DeleteEntity(std::string& _return, const int32_t seqid);
  void GlobalEntity_ReadEntity(std::string& _return, const std::string& entityId, const int32_t clientIndex);
  int32_t send_GlobalEntity_ReadEntity(const std::string& entityId, const int32_t clientIndex);
  void recv_GlobalEntity_ReadEntity(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetList(std::string& _return, const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetList(const std::string& whereJson, const std::string& orderByJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetList(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetListByIndexedId(std::string& _return, const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetListByIndexedId(const std::string& entityIndexedId, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetListByIndexedId(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetListCount(std::string& _return, const std::string& whereJson, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetListCount(const std::string& whereJson, const int32_t clientIndex);
  void recv_GlobalEntity_GetListCount(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_GlobalEntity_GetPage(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetPageOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetPageOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_GlobalEntity_GetPageOffset(std::string& _return, const int32_t seqid);
  void GlobalEntity_IncrementGlobalEntityData(std::string& _return, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_GlobalEntity_IncrementGlobalEntityData(const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_GlobalEntity_IncrementGlobalEntityData(std::string& _return, const int32_t seqid);
  void GlobalEntity_GetRandomEntitiesMatching(std::string& _return, const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex);
  int32_t send_GlobalEntity_GetRandomEntitiesMatching(const std::string& whereJson, const int32_t maxReturn, const int32_t clientIndex);
  void recv_GlobalEntity_GetRandomEntitiesMatching(std::string& _return, const int32_t seqid);
  void GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return, const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  int32_t send_GlobalEntity_UpdateEntityOwnerAndAcl(const std::string& entityId, const int64_t version, const std::string& ownerId, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void recv_GlobalEntity_UpdateEntityOwnerAndAcl(std::string& _return, const int32_t seqid);
  void GlobalEntity_MakeSystemEntity(std::string& _return, const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  int32_t send_GlobalEntity_MakeSystemEntity(const std::string& entityId, const int64_t version, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const int32_t clientIndex);
  void recv_GlobalEntity_MakeSystemEntity(std::string& _return, const int32_t seqid);
  void GlobalStatistics_ReadAllGlobalStats(std::string& _return, const int32_t clientIndex);
  int32_t send_GlobalStatistics_ReadAllGlobalStats(const int32_t clientIndex);
  void recv_GlobalStatistics_ReadAllGlobalStats(std::string& _return, const int32_t seqid);
  void GlobalStatistics_ReadGlobalStatsSubset(std::string& _return, const std::vector<std::string> & globalStats, const int32_t clientIndex);
  int32_t send_GlobalStatistics_ReadGlobalStatsSubset(const std::vector<std::string> & globalStats, const int32_t clientIndex);
  void recv_GlobalStatistics_ReadGlobalStatsSubset(std::string& _return, const int32_t seqid);
  void GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex);
  int32_t send_GlobalStatistics_ReadGlobalStatsForCategory(const std::string& category, const int32_t clientIndex);
  void recv_GlobalStatistics_ReadGlobalStatsForCategory(std::string& _return, const int32_t seqid);
  void GlobalStatistics_IncrementGlobalStats(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_GlobalStatistics_IncrementGlobalStats(const std::string& jsonData, const int32_t clientIndex);
  void recv_GlobalStatistics_IncrementGlobalStats(std::string& _return, const int32_t seqid);
  void GlobalStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  int32_t send_GlobalStatistics_ProcessStatistics(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void recv_GlobalStatistics_ProcessStatistics(std::string& _return, const int32_t seqid);
  void Group_AcceptGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_AcceptGroupInvitation(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_AcceptGroupInvitation(std::string& _return, const int32_t seqid);
  void Group_AddGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Group_AddGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_AddGroupMember(std::string& _return, const int32_t seqid);
  void Group_ApproveGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Group_ApproveGroupJoinRequest(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_ApproveGroupJoinRequest(std::string& _return, const int32_t seqid);
  void Group_AutoJoinGroup(std::string& _return, const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex);
  int32_t send_Group_AutoJoinGroup(const std::string& groupType, const  ::Ruyi::SDK::BrainCloudApi::AutoJoinStrategy::type autoJoinStrategy, const std::string& dataQueryJson, const int32_t clientIndex);
  void recv_Group_AutoJoinGroup(std::string& _return, const int32_t seqid);
  void Group_CancelGroupInvitation(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  int32_t send_Group_CancelGroupInvitation(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_CancelGroupInvitation(std::string& _return, const int32_t seqid);
  void Group_CreateGroup(std::string& _return, const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex);
  int32_t send_Group_CreateGroup(const std::string& name, const std::string& groupType, const bool isOpenGroup, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const std::string& jsonOwnerAttributes, const std::string& jsonDefaultMemberAttributes, const int32_t clientIndex);
  void recv_Group_CreateGroup(std::string& _return, const int32_t seqid);
  void Group_CreateGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Group_CreateGroupEntity(const std::string& groupId, const std::string& entityType, const bool isOwnedByGroupMember, const  ::Ruyi::SDK::BrainCloudApi::JSON& acl, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_CreateGroupEntity(std::string& _return, const int32_t seqid);
  void Group_DeleteGroup(std::string& _return, const std::string& groupId, const int64_t version, const int32_t clientIndex);
  int32_t send_Group_DeleteGroup(const std::string& groupId, const int64_t version, const int32_t clientIndex);
  void recv_Group_DeleteGroup(std::string& _return, const int32_t seqid);
  void Group_DeleteGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex);
  int32_t send_Group_DeleteGroupEntity(const std::string& groupId, const std::string& entityId, const int64_t version, const int32_t clientIndex);
  void recv_Group_DeleteGroupEntity(std::string& _return, const int32_t seqid);
  void Group_GetMyGroups(std::string& _return, const int32_t clientIndex);
  int32_t send_Group_GetMyGroups(const int32_t clientIndex);
  void recv_Group_GetMyGroups(std::string& _return, const int32_t seqid);
  void Group_IncrementGroupData(std::string& _return, const std::string& groupId, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Group_IncrementGroupData(const std::string& groupId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_IncrementGroupData(std::string& _return, const int32_t seqid);
  void Group_IncrementGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Group_IncrementGroupEntityData(const std::string& groupId, const std::string& entityId, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_IncrementGroupEntityData(std::string& _return, const int32_t seqid);
  void Group_InviteGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Group_InviteGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_InviteGroupMember(std::string& _return, const int32_t seqid);
  void Group_JoinGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_JoinGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_JoinGroup(std::string& _return, const int32_t seqid);
  void Group_LeaveGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_LeaveGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_LeaveGroup(std::string& _return, const int32_t seqid);
  void Group_ListGroupsPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  int32_t send_Group_ListGroupsPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Group_ListGroupsPage(std::string& _return, const int32_t seqid);
  void Group_ListGroupsPageByOffset(std::string& _return, const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  int32_t send_Group_ListGroupsPageByOffset(const std::string& context, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Group_ListGroupsPageByOffset(std::string& _return, const int32_t seqid);
  void Group_ListGroupsWithMember(std::string& _return, const std::string& profileId, const int32_t clientIndex);
  int32_t send_Group_ListGroupsWithMember(const std::string& profileId, const int32_t clientIndex);
  void recv_Group_ListGroupsWithMember(std::string& _return, const int32_t seqid);
  void Group_ReadGroup(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_ReadGroup(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroup(std::string& _return, const int32_t seqid);
  void Group_ReadGroupData(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_ReadGroupData(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroupData(std::string& _return, const int32_t seqid);
  void Group_ReadGroupEntitiesPage(std::string& _return, const std::string& jsonContext, const int32_t clientIndex);
  int32_t send_Group_ReadGroupEntitiesPage(const std::string& jsonContext, const int32_t clientIndex);
  void recv_Group_ReadGroupEntitiesPage(std::string& _return, const int32_t seqid);
  void Group_ReadGroupEntitiesPageByOffset(std::string& _return, const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex);
  int32_t send_Group_ReadGroupEntitiesPageByOffset(const std::string& encodedContext, const int32_t pageOffset, const int32_t clientIndex);
  void recv_Group_ReadGroupEntitiesPageByOffset(std::string& _return, const int32_t seqid);
  void Group_ReadGroupEntity(std::string& _return, const std::string& groupId, const std::string& entityId, const int32_t clientIndex);
  int32_t send_Group_ReadGroupEntity(const std::string& groupId, const std::string& entityId, const int32_t clientIndex);
  void recv_Group_ReadGroupEntity(std::string& _return, const int32_t seqid);
  void Group_ReadGroupMembers(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_ReadGroupMembers(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_ReadGroupMembers(std::string& _return, const int32_t seqid);
  void Group_RejectGroupInvitation(std::string& _return, const std::string& groupId, const int32_t clientIndex);
  int32_t send_Group_RejectGroupInvitation(const std::string& groupId, const int32_t clientIndex);
  void recv_Group_RejectGroupInvitation(std::string& _return, const int32_t seqid);
  void Group_RejectGroupJoinRequest(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  int32_t send_Group_RejectGroupJoinRequest(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_RejectGroupJoinRequest(std::string& _return, const int32_t seqid);
  void Group_RemoveGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  int32_t send_Group_RemoveGroupMember(const std::string& groupId, const std::string& profileId, const int32_t clientIndex);
  void recv_Group_RemoveGroupMember(std::string& _return, const int32_t seqid);
  void Group_UpdateGroupData(std::string& _return, const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Group_UpdateGroupData(const std::string& groupId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_UpdateGroupData(std::string& _return, const int32_t seqid);
  void Group_UpdateGroupEntityData(std::string& _return, const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_Group_UpdateGroupEntityData(const std::string& groupId, const std::string& entityId, const int64_t version, const std::string& jsonData, const int32_t clientIndex);
  void recv_Group_UpdateGroupEntityData(std::string& _return, const int32_t seqid);
  void Group_UpdateGroupMember(std::string& _return, const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Group_UpdateGroupMember(const std::string& groupId, const std::string& profileId, const  ::Ruyi::SDK::BrainCloudApi::Role::type role, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Group_UpdateGroupMember(std::string& _return, const int32_t seqid);
  void Group_UpdateGroupName(std::string& _return, const std::string& groupId, const std::string& name, const int32_t clientIndex);
  int32_t send_Group_UpdateGroupName(const std::string& groupId, const std::string& name, const int32_t clientIndex);
  void recv_Group_UpdateGroupName(std::string& _return, const int32_t seqid);
  void Identity_AttachEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex);
  int32_t send_Identity_AttachEmailIdentity(const std::string& email, const std::string& password, const int32_t clientIndex);
  void recv_Identity_AttachEmailIdentity(std::string& _return, const int32_t seqid);
  void Identity_MergeEmailIdentity(std::string& _return, const std::string& email, const std::string& password, const int32_t clientIndex);
  int32_t send_Identity_MergeEmailIdentity(const std::string& email, const std::string& password, const int32_t clientIndex);
  void recv_Identity_MergeEmailIdentity(std::string& _return, const int32_t seqid);
  void Identity_DetachEmailIdentity(std::string& _return, const std::string& email, const bool continueAnon, const int32_t clientIndex);
  int32_t send_Identity_DetachEmailIdentity(const std::string& email, const bool continueAnon, const int32_t clientIndex);
  void recv_Identity_DetachEmailIdentity(std::string& _return, const int32_t seqid);
  void Identity_AttachUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex);
  int32_t send_Identity_AttachUniversalIdentity(const std::string& userId, const std::string& password, const int32_t clientIndex);
  void recv_Identity_AttachUniversalIdentity(std::string& _return, const int32_t seqid);
  void Identity_MergeUniversalIdentity(std::string& _return, const std::string& userId, const std::string& password, const int32_t clientIndex);
  int32_t send_Identity_MergeUniversalIdentity(const std::string& userId, const std::string& password, const int32_t clientIndex);
  void recv_Identity_MergeUniversalIdentity(std::string& _return, const int32_t seqid);
  void Identity_DetachUniversalIdentity(std::string& _return, const std::string& userId, const bool continueAnon, const int32_t clientIndex);
  int32_t send_Identity_DetachUniversalIdentity(const std::string& userId, const bool continueAnon, const int32_t clientIndex);
  void recv_Identity_DetachUniversalIdentity(std::string& _return, const int32_t seqid);
  void Identity_SwitchToChildProfile(std::string& _return, const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Identity_SwitchToChildProfile(const std::string& childProfileId, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_SwitchToChildProfile(std::string& _return, const int32_t seqid);
  void Identity_SwitchToSingletonChildProfile(std::string& _return, const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Identity_SwitchToSingletonChildProfile(const std::string& childAppId, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_SwitchToSingletonChildProfile(std::string& _return, const int32_t seqid);
  void Identity_AttachParentWithIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Identity_AttachParentWithIdentity(const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_AttachParentWithIdentity(std::string& _return, const int32_t seqid);
  void Identity_SwitchToParentProfile(std::string& _return, const std::string& parentLevelName, const int32_t clientIndex);
  int32_t send_Identity_SwitchToParentProfile(const std::string& parentLevelName, const int32_t clientIndex);
  void recv_Identity_SwitchToParentProfile(std::string& _return, const int32_t seqid);
  void Identity_DetachParent(std::string& _return, const int32_t clientIndex);
  int32_t send_Identity_DetachParent(const int32_t clientIndex);
  void recv_Identity_DetachParent(std::string& _return, const int32_t seqid);
  void Identity_GetChildProfiles(std::string& _return, const bool includeSummaryData, const int32_t clientIndex);
  int32_t send_Identity_GetChildProfiles(const bool includeSummaryData, const int32_t clientIndex);
  void recv_Identity_GetChildProfiles(std::string& _return, const int32_t seqid);
  void Identity_GetIdentities(std::string& _return, const int32_t clientIndex);
  int32_t send_Identity_GetIdentities(const int32_t clientIndex);
  void recv_Identity_GetIdentities(std::string& _return, const int32_t seqid);
  void Identity_GetExpiredIdentities(std::string& _return, const int32_t clientIndex);
  int32_t send_Identity_GetExpiredIdentities(const int32_t clientIndex);
  void recv_Identity_GetExpiredIdentities(std::string& _return, const int32_t seqid);
  void Identity_RefreshIdentity(std::string& _return, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex);
  int32_t send_Identity_RefreshIdentity(const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const int32_t clientIndex);
  void recv_Identity_RefreshIdentity(std::string& _return, const int32_t seqid);
  void Identity_ChangeEmailIdentity(std::string& _return, const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex);
  int32_t send_Identity_ChangeEmailIdentity(const std::string& oldEmailAddress, const std::string& password, const std::string& newEmailAddress, const bool updateContactEmail, const int32_t clientIndex);
  void recv_Identity_ChangeEmailIdentity(std::string& _return, const int32_t seqid);
  void Identity_AttachPeerProfile(std::string& _return, const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  int32_t send_Identity_AttachPeerProfile(const std::string& peer, const std::string& externalId, const std::string& authenticationToken, const std::string& authenticationType, const std::string& externalAuthName, const bool forceCreate, const int32_t clientIndex);
  void recv_Identity_AttachPeerProfile(std::string& _return, const int32_t seqid);
  void Identity_DetachPeer(std::string& _return, const std::string& peer, const int32_t clientIndex);
  int32_t send_Identity_DetachPeer(const std::string& peer, const int32_t clientIndex);
  void recv_Identity_DetachPeer(std::string& _return, const int32_t seqid);
  void Identity_GetPeerProfiles(std::string& _return, const int32_t clientIndex);
  int32_t send_Identity_GetPeerProfiles(const int32_t clientIndex);
  void recv_Identity_GetPeerProfiles(std::string& _return, const int32_t seqid);
  void Mail_SendBasicEmail(std::string& _return, const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex);
  int32_t send_Mail_SendBasicEmail(const std::string& profileId, const std::string& subject, const std::string& body, const int32_t clientIndex);
  void recv_Mail_SendBasicEmail(std::string& _return, const int32_t seqid);
  void Mail_SendAdvancedEmail(std::string& _return, const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex);
  int32_t send_Mail_SendAdvancedEmail(const std::string& profileId, const std::string& jsonServiceParams, const int32_t clientIndex);
  void recv_Mail_SendAdvancedEmail(std::string& _return, const int32_t seqid);
  void Mail_SendAdvancedEmailByAddress(std::string& _return, const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex);
  int32_t send_Mail_SendAdvancedEmailByAddress(const std::string& emailAddress, const std::string& jsonServiceParams, const int32_t clientIndex);
  void recv_Mail_SendAdvancedEmailByAddress(std::string& _return, const int32_t seqid);
  void MatchMaking_Read(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_Read(const int32_t clientIndex);
  void recv_MatchMaking_Read(std::string& _return, const int32_t seqid);
  void MatchMaking_SetPlayerRating(std::string& _return, const int64_t playerRating, const int32_t clientIndex);
  int32_t send_MatchMaking_SetPlayerRating(const int64_t playerRating, const int32_t clientIndex);
  void recv_MatchMaking_SetPlayerRating(std::string& _return, const int32_t seqid);
  void MatchMaking_ResetPlayerRating(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_ResetPlayerRating(const int32_t clientIndex);
  void recv_MatchMaking_ResetPlayerRating(std::string& _return, const int32_t seqid);
  void MatchMaking_IncrementPlayerRating(std::string& _return, const int64_t increment, const int32_t clientIndex);
  int32_t send_MatchMaking_IncrementPlayerRating(const int64_t increment, const int32_t clientIndex);
  void recv_MatchMaking_IncrementPlayerRating(std::string& _return, const int32_t seqid);
  void MatchMaking_DecrementPlayerRating(std::string& _return, const int64_t decrement, const int32_t clientIndex);
  int32_t send_MatchMaking_DecrementPlayerRating(const int64_t decrement, const int32_t clientIndex);
  void recv_MatchMaking_DecrementPlayerRating(std::string& _return, const int32_t seqid);
  void MatchMaking_TurnShieldOn(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_TurnShieldOn(const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOn(std::string& _return, const int32_t seqid);
  void MatchMaking_TurnShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex);
  int32_t send_MatchMaking_TurnShieldOnFor(const int32_t minutes, const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOnFor(std::string& _return, const int32_t seqid);
  void MatchMaking_TurnShieldOff(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_TurnShieldOff(const int32_t clientIndex);
  void recv_MatchMaking_TurnShieldOff(std::string& _return, const int32_t seqid);
  void MatchMaking_IncrementShieldOnFor(std::string& _return, const int32_t minutes, const int32_t clientIndex);
  int32_t send_MatchMaking_IncrementShieldOnFor(const int32_t minutes, const int32_t clientIndex);
  void recv_MatchMaking_IncrementShieldOnFor(std::string& _return, const int32_t seqid);
  void MatchMaking_GetShieldExpiry(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_MatchMaking_GetShieldExpiry(const std::string& playerId, const int32_t clientIndex);
  void recv_MatchMaking_GetShieldExpiry(std::string& _return, const int32_t seqid);
  void MatchMaking_FindPlayers(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex);
  int32_t send_MatchMaking_FindPlayers(const int64_t rangeDelta, const int64_t numMatches, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayers(std::string& _return, const int32_t seqid);
  void MatchMaking_FindPlayersWithAttributes(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_MatchMaking_FindPlayersWithAttributes(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersWithAttributes(std::string& _return, const int32_t seqid);
  void MatchMaking_FindPlayersUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex);
  int32_t send_MatchMaking_FindPlayersUsingFilter(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonExtraParms, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersUsingFilter(std::string& _return, const int32_t seqid);
  void MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return, const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex);
  int32_t send_MatchMaking_FindPlayersWithAttributesUsingFilter(const int64_t rangeDelta, const int64_t numMatches, const std::string& jsonAttributes, const std::string& jsonExtraParms, const int32_t clientIndex);
  void recv_MatchMaking_FindPlayersWithAttributesUsingFilter(std::string& _return, const int32_t seqid);
  void MatchMaking_EnableMatchMaking(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_EnableMatchMaking(const int32_t clientIndex);
  void recv_MatchMaking_EnableMatchMaking(std::string& _return, const int32_t seqid);
  void MatchMaking_DisableMatchMaking(std::string& _return, const int32_t clientIndex);
  int32_t send_MatchMaking_DisableMatchMaking(const int32_t clientIndex);
  void recv_MatchMaking_DisableMatchMaking(std::string& _return, const int32_t seqid);
  void OneWayMatch_StartMatch(std::string& _return, const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex);
  int32_t send_OneWayMatch_StartMatch(const std::string& otherPlayerId, const int64_t rangeDelta, const int32_t clientIndex);
  void recv_OneWayMatch_StartMatch(std::string& _return, const int32_t seqid);
  void OneWayMatch_CancelMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  int32_t send_OneWayMatch_CancelMatch(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_OneWayMatch_CancelMatch(std::string& _return, const int32_t seqid);
  void OneWayMatch_CompleteMatch(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  int32_t send_OneWayMatch_CompleteMatch(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_OneWayMatch_CompleteMatch(std::string& _return, const int32_t seqid);
  void PlaybackStream_StartStream(std::string& _return, const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex);
  int32_t send_PlaybackStream_StartStream(const std::string& targetPlayerId, const bool includeSharedData, const int32_t clientIndex);
  void recv_PlaybackStream_StartStream(std::string& _return, const int32_t seqid);
  void PlaybackStream_ReadStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  int32_t send_PlaybackStream_ReadStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_ReadStream(std::string& _return, const int32_t seqid);
  void PlaybackStream_EndStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  int32_t send_PlaybackStream_EndStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_EndStream(std::string& _return, const int32_t seqid);
  void PlaybackStream_DeleteStream(std::string& _return, const std::string& playbackStreamId, const int32_t clientIndex);
  int32_t send_PlaybackStream_DeleteStream(const std::string& playbackStreamId, const int32_t clientIndex);
  void recv_PlaybackStream_DeleteStream(std::string& _return, const int32_t seqid);
  void PlaybackStream_AddEvent(std::string& _return, const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex);
  int32_t send_PlaybackStream_AddEvent(const std::string& playbackStreamId, const std::string& eventData, const std::string& summary, const int32_t clientIndex);
  void recv_PlaybackStream_AddEvent(std::string& _return, const int32_t seqid);
  void PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return, const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  int32_t send_PlaybackStream_GetRecentStreamsForInitiatingPlayer(const std::string& initiatingPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void recv_PlaybackStream_GetRecentStreamsForInitiatingPlayer(std::string& _return, const int32_t seqid);
  void PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return, const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  int32_t send_PlaybackStream_GetRecentStreamsForTargetPlayer(const std::string& targetPlayerId, const int32_t maxNumStreams, const int32_t clientIndex);
  void recv_PlaybackStream_GetRecentStreamsForTargetPlayer(std::string& _return, const int32_t seqid);
  void PlayerState_ReadUserState(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerState_ReadUserState(const int32_t clientIndex);
  void recv_PlayerState_ReadUserState(std::string& _return, const int32_t seqid);
  void PlayerState_DeleteUser(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerState_DeleteUser(const int32_t clientIndex);
  void recv_PlayerState_DeleteUser(std::string& _return, const int32_t seqid);
  void PlayerState_ResetUser(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerState_ResetUser(const int32_t clientIndex);
  void recv_PlayerState_ResetUser(std::string& _return, const int32_t seqid);
  void PlayerState_Logout(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerState_Logout(const int32_t clientIndex);
  void recv_PlayerState_Logout(std::string& _return, const int32_t seqid);
  void PlayerState_UpdateUserName(std::string& _return, const std::string& userName, const int32_t clientIndex);
  int32_t send_PlayerState_UpdateUserName(const std::string& userName, const int32_t clientIndex);
  void recv_PlayerState_UpdateUserName(std::string& _return, const int32_t seqid);
  void PlayerState_UpdateSummaryFriendData(std::string& _return, const std::string& jsonSummaryData, const int32_t clientIndex);
  int32_t send_PlayerState_UpdateSummaryFriendData(const std::string& jsonSummaryData, const int32_t clientIndex);
  void recv_PlayerState_UpdateSummaryFriendData(std::string& _return, const int32_t seqid);
  void PlayerState_GetAttributes(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerState_GetAttributes(const int32_t clientIndex);
  void recv_PlayerState_GetAttributes(std::string& _return, const int32_t seqid);
  void PlayerState_UpdateAttributes(std::string& _return, const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex);
  int32_t send_PlayerState_UpdateAttributes(const std::string& jsonAttributes, const bool wipeExisting, const int32_t clientIndex);
  void recv_PlayerState_UpdateAttributes(std::string& _return, const int32_t seqid);
  void PlayerState_RemoveAttributes(std::string& _return, const std::vector<std::string> & attributeNames, const int32_t clientIndex);
  int32_t send_PlayerState_RemoveAttributes(const std::vector<std::string> & attributeNames, const int32_t clientIndex);
  void recv_PlayerState_RemoveAttributes(std::string& _return, const int32_t seqid);
  void PlayerState_UpdateUserPictureUrl(std::string& _return, const std::string& pictureUrl, const int32_t clientIndex);
  int32_t send_PlayerState_UpdateUserPictureUrl(const std::string& pictureUrl, const int32_t clientIndex);
  void recv_PlayerState_UpdateUserPictureUrl(std::string& _return, const int32_t seqid);
  void PlayerState_UpdateContactEmail(std::string& _return, const std::string& contactEmail, const int32_t clientIndex);
  int32_t send_PlayerState_UpdateContactEmail(const std::string& contactEmail, const int32_t clientIndex);
  void recv_PlayerState_UpdateContactEmail(std::string& _return, const int32_t seqid);
  void PlayerStatistics_ReadAllUserStats(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerStatistics_ReadAllUserStats(const int32_t clientIndex);
  void recv_PlayerStatistics_ReadAllUserStats(std::string& _return, const int32_t seqid);
  void PlayerStatistics_ReadUserStatsSubset(std::string& _return, const std::vector<std::string> & playerStats, const int32_t clientIndex);
  int32_t send_PlayerStatistics_ReadUserStatsSubset(const std::vector<std::string> & playerStats, const int32_t clientIndex);
  void recv_PlayerStatistics_ReadUserStatsSubset(std::string& _return, const int32_t seqid);
  void PlayerStatistics_ReadUserStatsForCategory(std::string& _return, const std::string& category, const int32_t clientIndex);
  int32_t send_PlayerStatistics_ReadUserStatsForCategory(const std::string& category, const int32_t clientIndex);
  void recv_PlayerStatistics_ReadUserStatsForCategory(std::string& _return, const int32_t seqid);
  void PlayerStatistics_ResetAllUserStats(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerStatistics_ResetAllUserStats(const int32_t clientIndex);
  void recv_PlayerStatistics_ResetAllUserStats(std::string& _return, const int32_t seqid);
  void PlayerStatistics_IncrementUserStats_SSFO(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_PlayerStatistics_IncrementUserStats_SSFO(const std::string& jsonData, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementUserStats_SSFO(std::string& _return, const int32_t seqid);
  void PlayerStatistics_IncrementUserStats_DSFO(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex);
  int32_t send_PlayerStatistics_IncrementUserStats_DSFO(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & dictData, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementUserStats_DSFO(std::string& _return, const int32_t seqid);
  void PlayerStatistics_ProcessStatistics(std::string& _return, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  int32_t send_PlayerStatistics_ProcessStatistics(const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & statisticsData, const int32_t clientIndex);
  void recv_PlayerStatistics_ProcessStatistics(std::string& _return, const int32_t seqid);
  void PlayerStatistics_GetNextExperienceLevel(std::string& _return, const int32_t clientIndex);
  int32_t send_PlayerStatistics_GetNextExperienceLevel(const int32_t clientIndex);
  void recv_PlayerStatistics_GetNextExperienceLevel(std::string& _return, const int32_t seqid);
  void PlayerStatistics_IncrementExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex);
  int32_t send_PlayerStatistics_IncrementExperiencePoints(const int32_t xpValue, const int32_t clientIndex);
  void recv_PlayerStatistics_IncrementExperiencePoints(std::string& _return, const int32_t seqid);
  void PlayerStatistics_SetExperiencePoints(std::string& _return, const int32_t xpValue, const int32_t clientIndex);
  int32_t send_PlayerStatistics_SetExperiencePoints(const int32_t xpValue, const int32_t clientIndex);
  void recv_PlayerStatistics_SetExperiencePoints(std::string& _return, const int32_t seqid);
  void PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return, const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex);
  int32_t send_PlayerStatisticsEvent_TriggerStatsEvent(const std::string& eventName, const int32_t eventMultiplier, const int32_t clientIndex);
  void recv_PlayerStatisticsEvent_TriggerStatsEvent(std::string& _return, const int32_t seqid);
  void PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_PlayerStatisticsEvent_TriggerStatsEvents(const std::string& jsonData, const int32_t clientIndex);
  void recv_PlayerStatisticsEvent_TriggerStatsEvents(std::string& _return, const int32_t seqid);
  void Product_GetCurrency(std::string& _return, const std::string& currencyType, const int32_t clientIndex);
  int32_t send_Product_GetCurrency(const std::string& currencyType, const int32_t clientIndex);
  void recv_Product_GetCurrency(std::string& _return, const int32_t seqid);
  void Product_GetSalesInventory(std::string& _return, const std::string& platform, const std::string& userCurrency, const int32_t clientIndex);
  int32_t send_Product_GetSalesInventory(const std::string& platform, const std::string& userCurrency, const int32_t clientIndex);
  void recv_Product_GetSalesInventory(std::string& _return, const int32_t seqid);
  void Product_GetSalesInventoryByCategory(std::string& _return, const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex);
  int32_t send_Product_GetSalesInventoryByCategory(const std::string& platform, const std::string& userCurrency, const std::string& category, const int32_t clientIndex);
  void recv_Product_GetSalesInventoryByCategory(std::string& _return, const int32_t seqid);
  void Product_VerifyMicrosoftReceipt(std::string& _return, const std::string& receipt, const int32_t clientIndex);
  int32_t send_Product_VerifyMicrosoftReceipt(const std::string& receipt, const int32_t clientIndex);
  void recv_Product_VerifyMicrosoftReceipt(std::string& _return, const int32_t seqid);
  void Product_GetEligiblePromotions(std::string& _return, const int32_t clientIndex);
  int32_t send_Product_GetEligiblePromotions(const int32_t clientIndex);
  void recv_Product_GetEligiblePromotions(std::string& _return, const int32_t seqid);
  void Product_VerifyItunesReceipt(std::string& _return, const std::string& base64EncReceiptData, const int32_t clientIndex);
  int32_t send_Product_VerifyItunesReceipt(const std::string& base64EncReceiptData, const int32_t clientIndex);
  void recv_Product_VerifyItunesReceipt(std::string& _return, const int32_t seqid);
  void Profanity_ProfanityCheck(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  int32_t send_Profanity_ProfanityCheck(const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityCheck(std::string& _return, const int32_t seqid);
  void Profanity_ProfanityReplaceText(std::string& _return, const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  int32_t send_Profanity_ProfanityReplaceText(const std::string& text, const std::string& replaceSymbol, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityReplaceText(std::string& _return, const int32_t seqid);
  void Profanity_ProfanityIdentifyBadWords(std::string& _return, const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  int32_t send_Profanity_ProfanityIdentifyBadWords(const std::string& text, const std::string& languages, const bool flagEmail, const bool flagPhone, const bool flagUrls, const int32_t clientIndex);
  void recv_Profanity_ProfanityIdentifyBadWords(std::string& _return, const int32_t seqid);
  void PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return, const int32_t clientIndex);
  int32_t send_PushNotification_DeregisterAllPushNotificationDeviceTokens(const int32_t clientIndex);
  void recv_PushNotification_DeregisterAllPushNotificationDeviceTokens(std::string& _return, const int32_t seqid);
  void PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex);
  int32_t send_PushNotification_DeregisterPushNotificationDeviceToken(const std::string& platform, const std::string& token, const int32_t clientIndex);
  void recv_PushNotification_DeregisterPushNotificationDeviceToken(std::string& _return, const int32_t seqid);
  void PushNotification_RegisterPushNotificationDeviceToken(std::string& _return, const std::string& platform, const std::string& token, const int32_t clientIndex);
  int32_t send_PushNotification_RegisterPushNotificationDeviceToken(const std::string& platform, const std::string& token, const int32_t clientIndex);
  void recv_PushNotification_RegisterPushNotificationDeviceToken(std::string& _return, const int32_t seqid);
  void PushNotification_SendSimplePushNotification(std::string& _return, const std::string& toProfileId, const std::string& message, const int32_t clientIndex);
  int32_t send_PushNotification_SendSimplePushNotification(const std::string& toProfileId, const std::string& message, const int32_t clientIndex);
  void recv_PushNotification_SendSimplePushNotification(std::string& _return, const int32_t seqid);
  void PushNotification_SendRichPushNotification(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex);
  int32_t send_PushNotification_SendRichPushNotification(const std::string& toProfileId, const int32_t notificationTemplateId, const int32_t clientIndex);
  void recv_PushNotification_SendRichPushNotification(std::string& _return, const int32_t seqid);
  void PushNotification_SendRichPushNotificationWithParams(std::string& _return, const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex);
  int32_t send_PushNotification_SendRichPushNotificationWithParams(const std::string& toProfileId, const int32_t notificationTemplateId, const std::string& substitutionJson, const int32_t clientIndex);
  void recv_PushNotification_SendRichPushNotificationWithParams(std::string& _return, const int32_t seqid);
  void PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return, const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex);
  int32_t send_PushNotification_SendTemplatedPushNotificationToGroup(const std::string& groupId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t clientIndex);
  void recv_PushNotification_SendTemplatedPushNotificationToGroup(std::string& _return, const int32_t seqid);
  void PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  int32_t send_PushNotification_SendNormalizedPushNotificationToGroup(const std::string& groupId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotificationToGroup(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleRawPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleRawPushNotificationUTC(const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRawPushNotificationUTC(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleRawPushNotificationMinutes(const std::string& profileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRawPushNotificationMinutes(std::string& _return, const int32_t seqid);
  void PushNotification_SendRawPushNotification(std::string& _return, const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  int32_t send_PushNotification_SendRawPushNotification(const std::string& toProfileId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotification(std::string& _return, const int32_t seqid);
  void PushNotification_SendRawPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  int32_t send_PushNotification_SendRawPushNotificationBatch(const std::vector<std::string> & profileIds, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotificationBatch(std::string& _return, const int32_t seqid);
  void PushNotification_SendRawPushNotificationToGroup(std::string& _return, const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  int32_t send_PushNotification_SendRawPushNotificationToGroup(const std::string& groupId, const std::string& fcmContent, const std::string& iosContent, const std::string& facebookContent, const int32_t clientIndex);
  void recv_PushNotification_SendRawPushNotificationToGroup(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleNormalizedPushNotificationUTC(const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleNormalizedPushNotificationUTC(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return, const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleNormalizedPushNotificationMinutes(const std::string& profileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleNormalizedPushNotificationMinutes(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleRichPushNotificationUTC(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleRichPushNotificationUTC(const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t startTime, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRichPushNotificationUTC(std::string& _return, const int32_t seqid);
  void PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return, const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex);
  int32_t send_PushNotification_ScheduleRichPushNotificationMinutes(const std::string& profileId, const int32_t notificationTemplateId, const std::string& substitutionsJson, const int32_t minutesFromNow, const int32_t clientIndex);
  void recv_PushNotification_ScheduleRichPushNotificationMinutes(std::string& _return, const int32_t seqid);
  void PushNotification_SendNormalizedPushNotification(std::string& _return, const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  int32_t send_PushNotification_SendNormalizedPushNotification(const std::string& toProfileId, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotification(std::string& _return, const int32_t seqid);
  void PushNotification_SendNormalizedPushNotificationBatch(std::string& _return, const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  int32_t send_PushNotification_SendNormalizedPushNotificationBatch(const std::vector<std::string> & profileIds, const std::string& alertContentJson, const std::string& customDataJson, const int32_t clientIndex);
  void recv_PushNotification_SendNormalizedPushNotificationBatch(std::string& _return, const int32_t seqid);
  void Script_RunScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex);
  int32_t send_Script_RunScript(const std::string& scriptName, const std::string& jsonScriptData, const int32_t clientIndex);
  void recv_Script_RunScript(std::string& _return, const int32_t seqid);
  void Script_ScheduleRunScriptUTC(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex);
  int32_t send_Script_ScheduleRunScriptUTC(const std::string& scriptName, const std::string& jsonScriptData, const  ::Ruyi::SDK::BrainCloudApi::date startDateInUTC, const int32_t clientIndex);
  void recv_Script_ScheduleRunScriptUTC(std::string& _return, const int32_t seqid);
  void Script_ScheduleRunScriptMinutes(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex);
  int32_t send_Script_ScheduleRunScriptMinutes(const std::string& scriptName, const std::string& jsonScriptData, const int64_t minutesFromNow, const int32_t clientIndex);
  void recv_Script_ScheduleRunScriptMinutes(std::string& _return, const int32_t seqid);
  void Script_RunParentScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex);
  int32_t send_Script_RunParentScript(const std::string& scriptName, const std::string& jsonScriptData, const std::string& parentLevel, const int32_t clientIndex);
  void recv_Script_RunParentScript(std::string& _return, const int32_t seqid);
  void Script_CancelScheduledScript(std::string& _return, const std::string& jobId, const int32_t clientIndex);
  int32_t send_Script_CancelScheduledScript(const std::string& jobId, const int32_t clientIndex);
  void recv_Script_CancelScheduledScript(std::string& _return, const int32_t seqid);
  void Script_RunPeerScript(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  int32_t send_Script_RunPeerScript(const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void recv_Script_RunPeerScript(std::string& _return, const int32_t seqid);
  void Script_RunPeerScriptAsynch(std::string& _return, const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  int32_t send_Script_RunPeerScriptAsynch(const std::string& scriptName, const std::string& jsonScriptData, const std::string& peer, const int32_t clientIndex);
  void recv_Script_RunPeerScriptAsynch(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetSocialLeaderboard(const std::string& leaderboardId, const bool replaceName, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetSocialLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetMultiSocialLeaderboard(const std::vector<std::string> & leaderboardIds, const int32_t leaderboardResultCount, const bool replaceName, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetMultiSocialLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardPage(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardPage(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t startIndex, const int32_t endIndex, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardPageByVersion(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardView(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardView(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return, const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(const std::string& leaderboardId, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardViewByVersion(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardVersions(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardVersions(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGroupSocialLeaderboard(const std::string& leaderboardId, const std::string& groupId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGroupSocialLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_PostScoreToLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_PostScoreToLeaderboard(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_RemovePlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_RemovePlayerScore(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_RemovePlayerScore(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_PostScoreToDynamicLeaderboard(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::RotationType::type rotationType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToDynamicLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::SocialLeaderboardType::type leaderboardType, const  ::Ruyi::SDK::BrainCloudApi::date rotationReset, const int32_t retainedCount, const int32_t numDaysToRotate, const int32_t clientIndex);
  void recv_SocialLeaderboard_PostScoreToDynamicLeaderboardDays(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return, const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetPlayersSocialLeaderboard(const std::string& leaderboardId, const std::vector<std::string> & profileIds, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayersSocialLeaderboard(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_ListLeaderboards(std::string& _return, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_ListLeaderboards(const int32_t clientIndex);
  void recv_SocialLeaderboard_ListLeaderboards(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardEntryCount(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardEntryCount(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetGlobalLeaderboardEntryCountByVersion(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetPlayerScore(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetPlayerScore(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayerScore(std::string& _return, const int32_t seqid);
  void SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return, const std::vector<std::string> & leaderboardIds, const int32_t clientIndex);
  int32_t send_SocialLeaderboard_GetPlayerScoresFromLeaderboards(const std::vector<std::string> & leaderboardIds, const int32_t clientIndex);
  void recv_SocialLeaderboard_GetPlayerScoresFromLeaderboards(std::string& _return, const int32_t seqid);
  void Time_ReadServerTime(std::string& _return, const int32_t clientIndex);
  int32_t send_Time_ReadServerTime(const int32_t clientIndex);
  void recv_Time_ReadServerTime(std::string& _return, const int32_t seqid);
  void Tournament_ClaimTournamentReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_Tournament_ClaimTournamentReward(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_ClaimTournamentReward(std::string& _return, const int32_t seqid);
  void Tournament_GetTournamentStatus(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_Tournament_GetTournamentStatus(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_GetTournamentStatus(std::string& _return, const int32_t seqid);
  void Tournament_JoinTournament(std::string& _return, const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex);
  int32_t send_Tournament_JoinTournament(const std::string& leaderboardId, const std::string& tournamentCode, const int64_t initialScore, const int32_t clientIndex);
  void recv_Tournament_JoinTournament(std::string& _return, const int32_t seqid);
  void Tournament_LeaveTournament(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  int32_t send_Tournament_LeaveTournament(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_Tournament_LeaveTournament(std::string& _return, const int32_t seqid);
  void Tournament_PostTournamentScore(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex);
  int32_t send_Tournament_PostTournamentScore(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const int32_t clientIndex);
  void recv_Tournament_PostTournamentScore(std::string& _return, const int32_t seqid);
  void Tournament_PostTournamentScoreWithResults(std::string& _return, const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex);
  int32_t send_Tournament_PostTournamentScoreWithResults(const std::string& leaderboardId, const int64_t score, const std::string& jsonData, const  ::Ruyi::SDK::BrainCloudApi::date roundStartedTime, const  ::Ruyi::SDK::BrainCloudApi::SortOrder::type sort, const int32_t beforeCount, const int32_t afterCount, const int64_t initialScore, const int32_t clientIndex);
  void recv_Tournament_PostTournamentScoreWithResults(std::string& _return, const int32_t seqid);
  void Tournament_ViewCurrentReward(std::string& _return, const std::string& leaderboardId, const int32_t clientIndex);
  int32_t send_Tournament_ViewCurrentReward(const std::string& leaderboardId, const int32_t clientIndex);
  void recv_Tournament_ViewCurrentReward(std::string& _return, const int32_t seqid);
  void Tournament_ViewReward(std::string& _return, const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  int32_t send_Tournament_ViewReward(const std::string& leaderboardId, const int32_t versionId, const int32_t clientIndex);
  void recv_Tournament_ViewReward(std::string& _return, const int32_t seqid);
  void Lobby_CreateLobby(std::string& _return, const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Lobby_CreateLobby(const  ::Ruyi::SDK::BrainCloudApi::LobbyType::type lobbyType, const int32_t maxSlots, const bool isOpen, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Lobby_CreateLobby(std::string& _return, const int32_t seqid);
  void Lobby_OpenLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  int32_t send_Lobby_OpenLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_OpenLobby(std::string& _return, const int32_t seqid);
  void Lobby_CloseLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  int32_t send_Lobby_CloseLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_CloseLobby(std::string& _return, const int32_t seqid);
  void Lobby_FindLobbies(std::string& _return, const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex);
  int32_t send_Lobby_FindLobbies(const int32_t freeSlots, const int32_t maxResults, const std::string& jsonAttributes, const int32_t clientIndex);
  void recv_Lobby_FindLobbies(std::string& _return, const int32_t seqid);
  void Lobby_FindFriendsLobbies(std::string& _return, const int32_t clientIndex);
  int32_t send_Lobby_FindFriendsLobbies(const int32_t clientIndex);
  void recv_Lobby_FindFriendsLobbies(std::string& _return, const int32_t seqid);
  void Lobby_JoinLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  int32_t send_Lobby_JoinLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_JoinLobby(std::string& _return, const int32_t seqid);
  void Lobby_LeaveLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  int32_t send_Lobby_LeaveLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_LeaveLobby(std::string& _return, const int32_t seqid);
  void Lobby_DestroyLobby(std::string& _return, const std::string& lobbyId, const int32_t clientIndex);
  int32_t send_Lobby_DestroyLobby(const std::string& lobbyId, const int32_t clientIndex);
  void recv_Lobby_DestroyLobby(std::string& _return, const int32_t seqid);
  void Lobby_StartGame(std::string& _return, const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex);
  int32_t send_Lobby_StartGame(const std::string& lobbyId, const std::string& connectionString, const int32_t clientIndex);
  void recv_Lobby_StartGame(std::string& _return, const int32_t seqid);
  void Lobby_GetMyLobbies(std::string& _return, const int32_t clientIndex);
  int32_t send_Lobby_GetMyLobbies(const int32_t clientIndex);
  void recv_Lobby_GetMyLobbies(std::string& _return, const int32_t seqid);
  void Party_AcceptPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  int32_t send_Party_AcceptPartyInvitation(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_AcceptPartyInvitation(std::string& _return, const int32_t seqid);
  void Party_GetPartyInfo(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  int32_t send_Party_GetPartyInfo(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_GetPartyInfo(std::string& _return, const int32_t seqid);
  void Party_JoinParty(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  int32_t send_Party_JoinParty(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_JoinParty(std::string& _return, const int32_t seqid);
  void Party_LeaveParty(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  int32_t send_Party_LeaveParty(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_LeaveParty(std::string& _return, const int32_t seqid);
  void Party_RejectPartyInvitation(std::string& _return, const std::string& partyId, const int32_t clientIndex);
  int32_t send_Party_RejectPartyInvitation(const std::string& partyId, const int32_t clientIndex);
  void recv_Party_RejectPartyInvitation(std::string& _return, const int32_t seqid);
  void Party_SendPartyInvitation(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_Party_SendPartyInvitation(const std::string& playerId, const int32_t clientIndex);
  void recv_Party_SendPartyInvitation(std::string& _return, const int32_t seqid);
  void Party_ListPartyInvitations(std::string& _return, const int32_t clientIndex);
  int32_t send_Party_ListPartyInvitations(const int32_t clientIndex);
  void recv_Party_ListPartyInvitations(std::string& _return, const int32_t seqid);
  void Party_GetFriendsParties(std::string& _return, const int32_t maxResults, const int32_t clientIndex);
  int32_t send_Party_GetFriendsParties(const int32_t maxResults, const int32_t clientIndex);
  void recv_Party_GetFriendsParties(std::string& _return, const int32_t seqid);
  void Party_GetMyParty(std::string& _return, const int32_t clientIndex);
  int32_t send_Party_GetMyParty(const int32_t clientIndex);
  void recv_Party_GetMyParty(std::string& _return, const int32_t seqid);
  void Patch_GetGameManifest(std::string& _return, const std::string& gameId, const int32_t clientIndex);
  int32_t send_Patch_GetGameManifest(const std::string& gameId, const int32_t clientIndex);
  void recv_Patch_GetGameManifest(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareVideo(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareVideo(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareVideo(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareScreenshot(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareScreenshot(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareScreenshot(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareAchievement(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareAchievement(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareAchievement(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareApp(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareApp(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareApp(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareChannel(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareChannel(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareChannel(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareLink(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareLink(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareLink(std::string& _return, const int32_t seqid);
  void SocialFeed_ShareGameGuide(std::string& _return, const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  int32_t send_SocialFeed_ShareGameGuide(const int32_t timestamp, const std::string& resource, const std::vector<std::string> & tagged, const std::vector<std::string> & show, const std::vector<std::string> & block, const int32_t clientIndex);
  void recv_SocialFeed_ShareGameGuide(std::string& _return, const int32_t seqid);
  void SocialFeed_ReadSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  int32_t send_SocialFeed_ReadSocialFeed(const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_ReadSocialFeed(std::string& _return, const int32_t seqid);
  void SocialFeed_ReadFilteredSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  int32_t send_SocialFeed_ReadFilteredSocialFeed(const int32_t skip, const int32_t limit, const std::vector<std::string> & playerIds, const int32_t clientIndex);
  void recv_SocialFeed_ReadFilteredSocialFeed(std::string& _return, const int32_t seqid);
  void SocialFeed_ReadFriendsSocialFeed(std::string& _return, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  int32_t send_SocialFeed_ReadFriendsSocialFeed(const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_ReadFriendsSocialFeed(std::string& _return, const int32_t seqid);
  void SocialFeed_PostComment(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  int32_t send_SocialFeed_PostComment(const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void recv_SocialFeed_PostComment(std::string& _return, const int32_t seqid);
  void SocialFeed_PostCommentReply(std::string& _return, const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  int32_t send_SocialFeed_PostCommentReply(const int32_t timestamp, const std::string& parentId, const std::string& content, const int32_t clientIndex);
  void recv_SocialFeed_PostCommentReply(std::string& _return, const int32_t seqid);
  void SocialFeed_ReadComments(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  int32_t send_SocialFeed_ReadComments(const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void recv_SocialFeed_ReadComments(std::string& _return, const int32_t seqid);
  void SocialFeed_ReadCommentReplies(std::string& _return, const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  int32_t send_SocialFeed_ReadCommentReplies(const int32_t skip, const int32_t limit, const std::string& parentId, const int32_t clientIndex);
  void recv_SocialFeed_ReadCommentReplies(std::string& _return, const int32_t seqid);
  void SocialFeed_LikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  int32_t send_SocialFeed_LikeComment(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_LikeComment(std::string& _return, const int32_t seqid);
  void SocialFeed_LikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  int32_t send_SocialFeed_LikeActivity(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_LikeActivity(std::string& _return, const int32_t seqid);
  void SocialFeed_UnlikeComment(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  int32_t send_SocialFeed_UnlikeComment(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_UnlikeComment(std::string& _return, const int32_t seqid);
  void SocialFeed_UnlikeActivity(std::string& _return, const std::string& socialFeedId, const int32_t clientIndex);
  int32_t send_SocialFeed_UnlikeActivity(const std::string& socialFeedId, const int32_t clientIndex);
  void recv_SocialFeed_UnlikeActivity(std::string& _return, const int32_t seqid);
  void SocialFeed_SetFeedVisibility(std::string& _return, const std::string& visibility, const int32_t clientIndex);
  int32_t send_SocialFeed_SetFeedVisibility(const std::string& visibility, const int32_t clientIndex);
  void recv_SocialFeed_SetFeedVisibility(std::string& _return, const int32_t seqid);
  void SocialFeed_BlockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_SocialFeed_BlockPlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_BlockPlayer(std::string& _return, const int32_t seqid);
  void SocialFeed_HidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_SocialFeed_HidePlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_HidePlayer(std::string& _return, const int32_t seqid);
  void SocialFeed_UnblockPlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_SocialFeed_UnblockPlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_UnblockPlayer(std::string& _return, const int32_t seqid);
  void SocialFeed_UnhidePlayer(std::string& _return, const std::string& playerId, const int32_t clientIndex);
  int32_t send_SocialFeed_UnhidePlayer(const std::string& playerId, const int32_t clientIndex);
  void recv_SocialFeed_UnhidePlayer(std::string& _return, const int32_t seqid);
  void SocialFeed_GetActivity(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  int32_t send_SocialFeed_GetActivity(const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_GetActivity(std::string& _return, const int32_t seqid);
  void SocialFeed_GetComment(std::string& _return, const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  int32_t send_SocialFeed_GetComment(const std::string& socialFeedId, const int32_t depth, const int32_t skip, const int32_t limit, const int32_t clientIndex);
  void recv_SocialFeed_GetComment(std::string& _return, const int32_t seqid);
  void Telemetry_StartTelemetrySession(std::string& _return, const int32_t timestamp, const int32_t clientIndex);
  int32_t send_Telemetry_StartTelemetrySession(const int32_t timestamp, const int32_t clientIndex);
  void recv_Telemetry_StartTelemetrySession(std::string& _return, const int32_t seqid);
  void Telemetry_EndTelemetrySession(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex);
  int32_t send_Telemetry_EndTelemetrySession(const std::string& telemetrySessionId, const int32_t timestamp, const int32_t clientIndex);
  void recv_Telemetry_EndTelemetrySession(std::string& _return, const int32_t seqid);
  void Telemetry_LogTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  int32_t send_Telemetry_LogTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_LogTelemetryEvent(std::string& _return, const int32_t seqid);
  void Telemetry_StartTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  int32_t send_Telemetry_StartTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_StartTelemetryEvent(std::string& _return, const int32_t seqid);
  void Telemetry_EndTelemetryEvent(std::string& _return, const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  int32_t send_Telemetry_EndTelemetryEvent(const std::string& telemetrySessionId, const int32_t timestamp, const std::string& eventType, const std::string& participantId, const std::map<std::string,  ::Ruyi::SDK::BrainCloudApi::JSON> & customData, const int32_t clientIndex);
  void recv_Telemetry_EndTelemetryEvent(std::string& _return, const int32_t seqid);
  void Authentication_GetWeChatQRPageURL(std::string& _return, const int32_t clientIndex);
  int32_t send_Authentication_GetWeChatQRPageURL(const int32_t clientIndex);
  void recv_Authentication_GetWeChatQRPageURL(std::string& _return, const int32_t seqid);
  void File_DownloadFile(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex);
  int32_t send_File_DownloadFile(const std::string& cloudPath, const std::string& cloudFilename, const bool replaceIfExists, const int32_t clientIndex);
  void recv_File_DownloadFile(std::string& _return, const int32_t seqid);
  void File_GetDownloadInfo(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  int32_t send_File_GetDownloadInfo(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_GetDownloadInfo(std::string& _return, const int32_t seqid);
  void File_CancelDownload(std::string& _return, const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  int32_t send_File_CancelDownload(const std::string& cloudPath, const std::string& cloudFilename, const int32_t clientIndex);
  void recv_File_CancelDownload(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
