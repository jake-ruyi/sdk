/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ExternalOverlayManagerService_H
#define ExternalOverlayManagerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "OverlayManagerSDKServices_types.h"

namespace Ruyi { namespace SDK { namespace OverlayManagerExternal {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ExternalOverlayManagerServiceIf {
 public:
  virtual ~ExternalOverlayManagerServiceIf() {}
  virtual bool TakeScreenShot() = 0;
};

class ExternalOverlayManagerServiceIfFactory {
 public:
  typedef ExternalOverlayManagerServiceIf Handler;

  virtual ~ExternalOverlayManagerServiceIfFactory() {}

  virtual ExternalOverlayManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExternalOverlayManagerServiceIf* /* handler */) = 0;
};

class ExternalOverlayManagerServiceIfSingletonFactory : virtual public ExternalOverlayManagerServiceIfFactory {
 public:
  ExternalOverlayManagerServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~ExternalOverlayManagerServiceIfSingletonFactory() {}

  virtual ExternalOverlayManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExternalOverlayManagerServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> iface_;
};

class ExternalOverlayManagerServiceNull : virtual public ExternalOverlayManagerServiceIf {
 public:
  virtual ~ExternalOverlayManagerServiceNull() {}
  bool TakeScreenShot() {
    bool _return = false;
    return _return;
  }
};


class ExternalOverlayManagerService_TakeScreenShot_args {
 public:

  ExternalOverlayManagerService_TakeScreenShot_args(const ExternalOverlayManagerService_TakeScreenShot_args&);
  ExternalOverlayManagerService_TakeScreenShot_args& operator=(const ExternalOverlayManagerService_TakeScreenShot_args&);
  ExternalOverlayManagerService_TakeScreenShot_args() {
  }

  virtual ~ExternalOverlayManagerService_TakeScreenShot_args() throw();

  bool operator == (const ExternalOverlayManagerService_TakeScreenShot_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ExternalOverlayManagerService_TakeScreenShot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExternalOverlayManagerService_TakeScreenShot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ExternalOverlayManagerService_TakeScreenShot_pargs {
 public:


  virtual ~ExternalOverlayManagerService_TakeScreenShot_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExternalOverlayManagerService_TakeScreenShot_result__isset {
  _ExternalOverlayManagerService_TakeScreenShot_result__isset() : success(false) {}
  bool success :1;
} _ExternalOverlayManagerService_TakeScreenShot_result__isset;

class ExternalOverlayManagerService_TakeScreenShot_result {
 public:

  ExternalOverlayManagerService_TakeScreenShot_result(const ExternalOverlayManagerService_TakeScreenShot_result&);
  ExternalOverlayManagerService_TakeScreenShot_result& operator=(const ExternalOverlayManagerService_TakeScreenShot_result&);
  ExternalOverlayManagerService_TakeScreenShot_result() : success(0) {
  }

  virtual ~ExternalOverlayManagerService_TakeScreenShot_result() throw();
  bool success;

  _ExternalOverlayManagerService_TakeScreenShot_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ExternalOverlayManagerService_TakeScreenShot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ExternalOverlayManagerService_TakeScreenShot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExternalOverlayManagerService_TakeScreenShot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ExternalOverlayManagerService_TakeScreenShot_presult__isset {
  _ExternalOverlayManagerService_TakeScreenShot_presult__isset() : success(false) {}
  bool success :1;
} _ExternalOverlayManagerService_TakeScreenShot_presult__isset;

class ExternalOverlayManagerService_TakeScreenShot_presult {
 public:


  virtual ~ExternalOverlayManagerService_TakeScreenShot_presult() throw();
  bool* success;

  _ExternalOverlayManagerService_TakeScreenShot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExternalOverlayManagerServiceClient : virtual public ExternalOverlayManagerServiceIf {
 public:
  ExternalOverlayManagerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExternalOverlayManagerServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool TakeScreenShot();
  void send_TakeScreenShot();
  bool recv_TakeScreenShot();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExternalOverlayManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExternalOverlayManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_TakeScreenShot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExternalOverlayManagerServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["TakeScreenShot"] = &ExternalOverlayManagerServiceProcessor::process_TakeScreenShot;
  }

  virtual ~ExternalOverlayManagerServiceProcessor() {}
};

class ExternalOverlayManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExternalOverlayManagerServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ExternalOverlayManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ExternalOverlayManagerServiceIfFactory > handlerFactory_;
};

class ExternalOverlayManagerServiceMultiface : virtual public ExternalOverlayManagerServiceIf {
 public:
  ExternalOverlayManagerServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExternalOverlayManagerServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> > ifaces_;
  ExternalOverlayManagerServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ExternalOverlayManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool TakeScreenShot() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TakeScreenShot();
    }
    return ifaces_[i]->TakeScreenShot();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ExternalOverlayManagerServiceConcurrentClient : virtual public ExternalOverlayManagerServiceIf {
 public:
  ExternalOverlayManagerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ExternalOverlayManagerServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool TakeScreenShot();
  int32_t send_TakeScreenShot();
  bool recv_TakeScreenShot(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}} // namespace

#endif
